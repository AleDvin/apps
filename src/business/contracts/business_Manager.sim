contract business_Manager {
    data {
        Action string
        Id string "optional"
        EventId string "optional"
        ObjectType string "optional"
        Title string "optional"
        RoleId string "optional"
        TextBody string "optional"
        NeedComment string "optional"
        // condition
        ConditionId array "optional"
        ConditionEventId array "optional"
        ConditionSubmit array "optional"
        ConditionSentBack array "optional"
        ConditionAccept array "optional"
        ConditionEscalation array "optional"
        ConditionReject array "optional"
        ConditionInform array "optional"
        // result
        Submit string "optional"
        SentBack string "optional"
        Accept string "optional"
        Escalation string "optional"
        Reject string "optional"
        Inform string "optional"
    }
    func boolChar(s string) int {
        if s {
            return 1
        }
        return 0
    }
    func safeGet(a array, i int) int {
        if Len(a) > i{
            return Int(a[i])
        }
        return 0
    }
    func safeGetBoolChar(a array, i int) int {
        if Len(a) > i{
            return boolChar(a[i])
        }
        return 0
    }
    func getCondArray(cond map) array {
        Println("getPretty:", cond)
        var res array
        // Int() for fixed "interface conversion: interface {} is nil, not decimal.Decimal"
        if Int(cond["EventId"]) > 0{
            res[0] = Sprintf("%v", cond["EventId"])
        }
        if Int(cond["Submit"]) == 1{
            res[Len(res)] = "Submit"
        }
        if Int(cond["SentBack"]) == 1{
            res[Len(res)] = "SentBack"
        }
        if Int(cond["Accept"]) == 1{
            res[Len(res)] = "Accept"
        }
        if Int(cond["Escalation"]) == 1{
            res[Len(res)] = "Escalation"
        }
        if Int(cond["Reject"]) == 1{
            res[Len(res)] = "Reject"
        }
        if Int(cond["Inform"]) == 1{
            res[Len(res)] = "Inform"
        }
        return res
    }
    conditions {
        $Id = Int($Id)
        $ApplicationId = Int(DBFind("applications").Where("name='Business'").One("id"))
        if $ApplicationId == 0 {
            warning "Application ID not found"
        }

    }
    action {
        if $Action == "create" || $Action == "update"{
            $ObjectType = Int($ObjectType)
            $RoleId = Int($RoleId)
            $EventId = Int($EventId)
            $NeedComment = boolChar($NeedComment)
            var condition map
            var conditionPretty array
            var i int
            Println("$ConditionEventId",$ConditionEventId)
            while i<Len($ConditionEventId){
                var cond map
                cond["EventId"] = safeGet($ConditionEventId, i)
                cond["Submit"] = safeGetBoolChar($ConditionSubmit, i)
                cond["SentBack"] = safeGetBoolChar($ConditionSentBack, i)
                cond["Accept"] = safeGetBoolChar($ConditionAccept, i)
                cond["Escalation"] = safeGetBoolChar($ConditionEscalation, i)
                cond["Reject"] = safeGetBoolChar($ConditionReject, i)
                cond["Inform"] = safeGetBoolChar($ConditionInform, i)
                var conditionId int
                if Len($ConditionId) > i{
                    conditionId = Int($ConditionId[i])
                    DBUpdate("business_conditions", Int($ConditionId[i]), "event_id,submit,sent_back,accept,escalation,reject,inform", cond["EventId"], cond["Submit"], cond["SentBack"], cond["Accept"], cond["Escalation"], cond["Reject"], cond["Inform"])
                }else{
                    conditionId = DBInsert("business_conditions", "event_id,submit,sent_back,accept,escalation,reject,inform", cond["EventId"], cond["Submit"], cond["SentBack"], cond["Accept"], cond["Escalation"], cond["Reject"], cond["Inform"])
                }
                condition[Str(i)] = conditionId
                conditionPretty[i] = Join(getCondArray(cond), ", ")
                i=i+1
            }
            $Condition = JSONEncode(condition)
            $conditionPretty = Join(conditionPretty, " OR ")
            Println("conditionPretty:",$conditionPretty)

            var result map
            result["Submit"] = boolChar($Submit)
            result["SentBack"] = boolChar($SentBack)
            result["Accept"] = boolChar($Accept)
            result["Escalation"] = boolChar($Escalation)
            result["Reject"] = boolChar($Reject)
            result["Inform"] = boolChar($Inform)
            $Result = JSONEncode(result)
            $resultPretty = Join(getCondArray(result), ", ")
            Println("resultPretty:",$resultPretty)
            Println("Action",$Action,"Id",$Id,"EventId",$EventId,"ObjectType",$ObjectType,"Title",$Title,"RoleId",$RoleId,"TextBody",$TextBody,"NeedComment",$NeedComment,"Condition",$Condition,"result",$Result,"conditionPretty",$conditionPretty,"resultPretty",$resultPretty)
        }

        if $Action == "create"{
            DBInsert("business_models", "event_id,object_type,title,role_id,text_body,need_comment,condition,result,condition_pretty,result_pretty", $EventId,$ObjectType,$Title,$RoleId,$TextBody,$NeedComment,$Condition,$Result,$conditionPretty,$resultPretty)
        }
        if $Id == 0 {
            return
        }
        if $Action == "update" {
            DBUpdate("business_models", $Id, "event_id,object_type,title,role_id,text_body,need_comment,condition,result,condition_pretty,result_pretty", $EventId,$ObjectType,$Title,$RoleId,$TextBody,$NeedComment,$Condition,$Result,$conditionPretty,$resultPretty)
        }
        if $Action == "delete" {
            DBUpdate("business_models", $Id, "deleted", 1)
        }
        if $Action == "restore" {
            DBUpdate("business_models", $Id, "deleted", 0)
        }
        if $Action == "delete_condition" {
            var condId int
            condId = Int($ConditionId[0])
            if condId > 0{
                DBUpdate("business_conditions", condId, "deleted", "1")
            }
        }
    }
}