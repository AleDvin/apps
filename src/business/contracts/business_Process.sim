contract business_Process {
    data {
        Id int // business_models:id
        ModelId int // business_models:model_id
        EventId int
        ResultId int
        ObjectType int
        ObjectId int
        Comment string "optional"
        NotificId string "optional"
    }

    conditions {
        $ApplicationId = Int(DBFind("applications").Where("name='Business'").One("id"))
        if $ApplicationId == 0 {
            warning "Application ID not found"
        }
        $numSubmitted = Int(DBFind("business_events").Where("event_id=? and object_type=? and object_id=? and key_id=? and result_id=? and model_id=?", $EventId, $ObjectType, $ObjectId, $key_id, $ResultId, $ModelId).Order("num_submitted desc").One("num_submitted")) + 1
        $models = DBFind("business_models").Order("event_id").Where("deleted='0' and model_id=?", $ModelId)
        
        var currentModel map
        currentModel = DBFind("business_models").Where("deleted='0' and id=?", $Id).Row()
        if !currentModel{
            error "Business model not found"
        }
        if currentModel["need_comment"] == 1 && Size($Comment) < 1 {
            warning "Need comment"
        }
        $NotificId = Int($NotificId)
    }
    action {
        DBInsert("business_events", "event_id,object_type,object_id,key_id,result_id,comment,num_submitted,created_at,model_id", $EventId, $ObjectType, $ObjectId, $key_id, $ResultId, $Comment, $numSubmitted, "Now()", $ModelId)
        var i int
        var nextModel map
        var isNextFound bool
        while i<Len($models){
            nextModel = $models[i]
            var cond map
            cond = JSONDecode(nextModel["condition"])
            if cond["0"] == $ResultId || cond[Str($EventId)] == $ResultId {
                isNextFound = true
                break
            }
            i=i+1
        }
        if $NotificId > 0{
            Notifications_Roles_Processing("notific_id", $NotificId)
            Notifications_Roles_Close("notific_id", $NotificId)
        }
        if isNextFound {
            var roleId closureType sender int
            roleId = nextModel["role_id"]
            closureType = 2 // multiple
            sender = 2 // from admin?
            var icon header body page string
            icon = "icon-envelope"
            header = "Business process: Next step"
            body = nextModel["title"]
            page = "business_process"
            var params map
            params["id"] = nextModel["id"]
            params["object_id"] = $ObjectId
            params["comment"] = $Comment
            Notifications_Roles_Send_map("rid,closure_type,sender,icon_name,text_header,text_body,page_name,params_map", roleId, closureType, sender, icon, header, body, page, params)

        }else{
            Println("Next step not found")
        }
    }
}