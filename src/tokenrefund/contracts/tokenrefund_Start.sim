contract tokenrefund_Start{
    data{
        VictimAccount string
        SuspectAccount string
        Amount int
        Note string
        DateStart string "date"
        DateEnd string "date"
        DateNow string "date"
        TimeNow string "date"
    }
    func blockAccounts(victimId, attackerId int){
        //todo: БЛОКИРОВКА АККАУНТОВ
        Debug("Value", Sprintf("БЛОКИРОВКА АККАУНТОВ (%v, %v)", victimId, attackerId))
    }
    
    conditions{
        Debug("Value", "tokenrefund_Start")
        
        $victimId = AddressToId($VictimAccount)
        $attackerId = AddressToId($SuspectAccount)
        if $Amount <= 0{
            info "Amount not valid"
        }
        if $victimId == 0{
            info "Victim address not valid"
        }
        if $attackerId == 0{
            info "Suspect address not valid"
        }
        if Size($Note) == 0{
            info "Please add description"
        }
        var allowed map
        allowed = DBFind("roles_assign").Where("role_name='Validator' and role_type=3 and delete=0 and member_id=?", $key_id)
        if !allowed{
            // закомментировано для отладки
            // warning "You not Validator. You can not to run this"
        }
        
        var template_id int
        template_id = DBFind("laws").Where("name='tokenrefund'").One("voting_template_id")
        if template_id == nil{
            template_id = DBFind("voting_templates").Where("type='law' and type_id=1").One("id")
            if template_id == nil{
                info "Template not found"
            }
            Debug("Value", "template id найдено в voting_templates")
        }
        
        $template = DBFind("voting_templates").Where("id=?", template_id).Row()
        $votersRoleName = $template["voters"]
        $votingName = $template["title"]
        $typeParticipants = 3 // участников добавим по роли
        $typeDecision = 5 // запуск контракта
        $typeVoting = 2 // системное голосование
        $volume = Int($template["volume"])
        $quorum = Int($template["quorum"])
        $contractAccept = $template["contract_accept"]
        $contractReject = $template["contract_reject"]
        
        $desc = Sprintf("%v (victim: %v, attacker: %v)", $votingName, $VictimAccount, $SuspectAccount)
        
        var isExist map
        isExist = DBFind("voting_instances").Where("name=? and description=? and delete=0", $votingName, $desc).Row()
        if isExist{
            // info "Voting already created" // раскомментировать на проде
        }
        
        Debug("Value", "tokenrefund_Start. condition ok")
    }
    
    action{
        blockAccounts($victimId,$attackerId)
        
        $voting_id = 0 // должно установиться в voting_CreateNew
        voting_CreateNew("voting_name,type_voting,description,type_participants,type_decision,volume,quorum,now_date,start_time,end_time,start_date,end_date", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $volume, $quorum, $DateNow, $TimeNow, $TimeNow, $DateStart, $DateEnd)
        if $voting_id == 0 {
            $voting_id = DBFind("voting_instances").Where("voting_name=? and start_date=?", $votingName, $DateStart).One("id")
            $voting_id = Int($voting_id)
        }
        // todo статусы и оповещения участников голосования (инвесторы)
        var status int
        // 0.Аккаунты заблокированы
        // 1.Обсуждение
        // 2.Голосование
        // 3.Закрыто
        status = 1
        
        var tokenrefundId int
        tokenrefundId = DBInsert("tokenrefund", "victim_key_id,attacker_key_id,amount,note,validator_key_id,blocked_at,voting_id,status", $victimId, $attackerId, $Amount, $Note, $key_id, $DateNow, $voting_id)
        
        $defaultParams = Sprintf("Id->%v", tokenrefundId)
        
        voting_SubjectContract("votingID,contract_reject,contract_accept,contract_reject_params,contract_accept_params", $voting_id, $contractReject, $contractAccept, $defaultParams, $defaultParams)
        
        var roleId int
        roleId = DBFind("roles_list").Where("role_name=? and delete=0", $votersRoleName).One("id")
        voting_Invite("votingID,var_id", $voting_id, roleId)
        
        
        Debug("Value", "tokenrefund_Start. action ok")
    }
}