contract TokensTransfer {
    data {
        SenderId string "optional"
        RecipientId string
        Amount string
    }
    
    conditions {
        var addressLen int
        addressLen = 24
        
        $amount = Money($Amount)
        if $SenderId == ""{
            $SenderId = Sprintf("%v", $key_id)
        }
        if $amount <= 0 {
            error "TokensTransfer. Amount less than or equal to zero"
        }
        
        if !HasPrefix($SenderId, "-"){
            if Contains($SenderId, "-"){
                $SenderId = Sprintf("%v", AddressToId($SenderId))
                info $SenderId
            }
        }
        if !HasPrefix($RecipientId, "-"){
            if Contains($RecipientId, "-"){
                $RecipientId = Sprintf("%v", AddressToId($RecipientId))
            }
        }
        if Size($SenderId) > addressLen{
            $SenderId = Sprintf("%v", PubToID($SenderId))
        }
        if Size($RecipientId) > addressLen{
            $RecipientId = Sprintf("%v", PubToID($RecipientId))
        }
        
        
        var sender map
        sender = DBFind("keys").Where("id=?", $SenderId).Row()
        if !sender{
            error "TokensTransfer. Sender is invalid"
        }
        // if sender["amount"] < $amount{
        //     error Sprintf("The number of tokens of the sender (%v) is not enough", sender["amount"])
        // }
        // var recipient map
        // recipient = DBFind("keys").Where("id=?", $RecipientId).Row()
        // if !recipient{
        //     error "TokensTransfer. Recipient is invalid"
        // }

    }
    
    action {
        DBUpdate("keys", Int($SenderId),"-amount", $amount)
        DBUpdate("keys", Int($RecipientId),"+amount", $amount)
        DBInsert("history", "sender_id,recipient_id,amount,block_id,txhash",
        $SenderId, $RecipientId, $amount, $block, $txhash)
    }
}