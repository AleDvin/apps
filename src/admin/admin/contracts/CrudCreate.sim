contract CrudCreate {
    data {
        tableName string
    }

    func toUpper(s string) string {
        var conv map
        conv["q"] = "Q"
        conv["a"] = "A"
        conv["z"] = "Z"
        conv["w"] = "W"
        conv["s"] = "S"
        conv["x"] = "X"
        conv["e"] = "E"
        conv["d"] = "D"
        conv["c"] = "C"
        conv["r"] = "R"
        conv["f"] = "F"
        conv["v"] = "V"
        conv["t"] = "T"
        conv["g"] = "G"
        conv["b"] = "B"
        conv["y"] = "Y"
        conv["h"] = "H"
        conv["n"] = "N"
        conv["u"] = "U"
        conv["j"] = "J"
        conv["m"] = "M"
        conv["i"] = "I"
        conv["k"] = "K"
        conv["o"] = "O"
        conv["l"] = "L"
        conv["p"] = "P"
        var i int res b string
        while i < Size(s){
            b = Substr(s, i, 1)
            if conv[b]{
                res = res + conv[b]
            }else{
                res = res + b
            }
            i=i+1
        }
        return res
    }
    func toCamel(t string, zeroLower bool) string{
        var parts array i int
        parts = Split(t, "_")
        while i < Len(parts){
            if i == 0 && zeroLower {
                parts[i] = ToLower(parts[i])
            }else{
                parts[i] = toUpper(Substr(parts[i], 0, 1)) + ToLower(Substr(parts[i], 1, Size(parts[i])))
            }
            i=i+1
        }
        return Join(parts, "")
    }
    func getPaginator() string{
        var body array
        body = Append(body,Sprintf("DBFind(%v).Count(count)", $tableName))
        body = Append(body,`If(#page#>0){`)
        body = Append(body,`    SetVar(prev_page,Calculate(#page#-1)`)
        body = Append(body,`}.Else{`)
        body = Append(body,`    SetVar(page,0).(prev_page,0)`)
        body = Append(body,`}`)
        body = Append(body,"SetVar(per_page,25).(off,Calculate(#page#*#per_page#)).(last_page,Calculate(#count#/#per_page#)).(next_page,#last_page#)")
        body = Append(body,`If(#count#>Calculate(#off#+#per_page#)){`)
        body = Append(body,`    SetVar(next_page,Calculate(#page#+1)`)
        body = Append(body,`}`)
        body = Append(body,`Div(content-wrapper){`)
        body = Append(body,`    Div(button-group){`)
        body = Append(body,`        If(#page#>0){`)
        body = Append(body,`            Button(Body:"1", Class:btn btn-default, Page:#page_name#, PageParams: "page=0")`)
        body = Append(body,`        }.Else{`)
        body = Append(body,`            Button(Body:"1", Class:btn btn-default disabled)`)
        body = Append(body,`        }`)
        body = Append(body,`        If(#page#>1){`)
        body = Append(body,`            Button(Body:Calculate(#prev_page#+1),Class:btn btn-default, Page:#page_name#, PageParams:"page=#prev_page#")`)
        body = Append(body,`        }`)
        body = Append(body,`        If(And(#page#>0,#page#<#last_page#)){`)
        body = Append(body,`            Button(Body:Calculate(#page#+1), Class:btn btn-default disabled)`)
        body = Append(body,`        }`)
        body = Append(body,`        If(#next_page#<#last_page#){`)
        body = Append(body,`            Button(Body:Calculate(#next_page#+1),Class:btn btn-default,Page:#page_name#,PageParams:"page=#next_page#")`)
        body = Append(body,`        }`)
        body = Append(body,`        If(#page#<#last_page#){`)
        body = Append(body,`            Button(Body:Calculate(#last_page#+1), Class:btn btn-default, Page:#page_name#,PageParams:"page=#last_page#")`)
        body = Append(body,`        }.ElseIf(#last_page#>0){`)
        body = Append(body,`            Button(Body:Calculate(#last_page#+1), Class:btn btn-default disabled)`)
        body = Append(body,`        }`)
        body = Append(body,`    }`)

        return Join(body, "\n")
    }
    func getPageRecords(cols array, pageName pageRecordsName contractDeleteName string) string{
        var body array
        body = Append(body,Sprintf(`DBFind(applications).Columns("id").Where("name='%v' AND deleted=0").Vars(application)`, $appName))
        body = Append(body,Sprintf("DBFind(%v).Count(count)", $tableName))
        body = Append(body,Sprintf("SetTitle($%v$))", pageRecordsName))
        body = Append(body,Sprintf("SetVar(page_name,%v)", pageRecordsName))
        body = Append(body, getPaginator())
        body = Append(body,"    Div(panel panel-primary){")
        body = Append(body,"        Div(panel-body){")
        body = Append(body,"            Div(table-responsive){")
        body = Append(body,Sprintf("                DBFind(%v,src_%v).Offset(#off#).Order(id).Custom", $tableName, $tableName))
        body = Append(body,`.Custom(_actions){`)
        body = Append(body,`    Div(text-right text-nowrap){`)
        body = Append(body,Sprintf(`        Button(Class: btn btn-default fa fa-edit mr-sm, Page: %v, PageParams: "Id=#id#")`,pageRecordsName))
        body = Append(body,Sprintf(`        Button(Class: btn btn-danger fa fa-trash, Page: %v, Contract: %v, Params: "Id=#id#").Alert($%v$, $%v$, $%v$)`,pageRecordsName, contractDeleteName,"delete_alert", "yes", "no"))
        body = Append(body,`    }`)
        body = Append(body,`}`)

        body = Append(body,Sprintf(`                Table(src_%v)`,$tableName))
        body = Append(body,"            }")
        body = Append(body,"        }")
        body = Append(body,"    }")
        body = Append(body,"}")
        return Join(body, "\n")
    }
    func trim_s(s string)string{
        if Substr(s, Size(s)-1, 1) == "s"{
            return Substr(s, 0, Size(s)-1)
        }
        return s
    }
    func getPageEdit(cols array, pageName, pageRecordsName, contractEditName string)string{
        var body array i lenCols int
        body = Append(body,Sprintf(`DBFind(applications).Columns("id").Where("name='%v' AND deleted=0").Vars(application)`, $appName))
        body = Append(body,Sprintf(`SetVar(title,$%v_create$)`, pageName))
        body = Append(body,`SetVar(btn_title,$create$)`)
        lenCols = Len(cols)
        while i < lenCols{
            body = Append(body,Sprintf(`SetVar(item_%v,)`, cols[i]))
            i=i+1
        }
        body = Append(body,`If(GetVar(Id)){`)
        body = Append(body,Sprintf(`    DBFind(%v).Where("id=#Id#").Vars(item)`, $tableName))
        body = Append(body,Sprintf(`    SetVar(title,$%v_edit$)`, pageName))
        body = Append(body,`    SetVar(btn_title,$edit$)`)
        body = Append(body,`}`)
        body = Append(body,`SetTitle(#title#)`)
        body = Append(body,`Div(content-wrapper){`)
        body = Append(body,`    Div(breadcrumb){`)
        body = Append(body,Sprintf(`        LinkPage(Body: $%v$, Page: %v)`, pageRecordsName, pageRecordsName))
        body = Append(body,`        Span(/, mh)`)
        body = Append(body,`        Span(#title#, text-muted)`)
        body = Append(body,`    }`)
        body = Append(body,`    Div(row){`)
        body = Append(body,`        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){`)
        body = Append(body,`            Form(panel panel-primary){`)
        body = Append(body,`                Div(panel-heading){`)
        body = Append(body,`                    LangRes($data_input$)`)
        body = Append(body,`                }`)
        body = Append(body,`                Div(panel-body){`)
        body = Append(body,`                    If(GetVar(Id)){`)
        body = Append(body,`                        Input(Name: Id, Type:hidden, Value: #Id#)`)
        body = Append(body,`                    }`)
        i=0
        while i<lenCols{
            body = Append(body,`                    Div(row mt-sm){`)
            body = Append(body,`                        Div(col-sm-4 mt-sm text-right){`)
            body = Append(body,Sprintf(`                            LangRes(%v)`, cols[i]))
            body = Append(body,`                        }`)
            body = Append(body,`                        Div(#col-sm-8 text-left#){`)
            body = Append(body,Sprintf(`                            Input(Name: %v, Value: #item_%v#)`, toCamel(cols[i], true), cols[i]))
            body = Append(body,`                        }`)
            body = Append(body,`                    }`)
            body = Append(body,`                }`)
            i=i+1
        }
        body = Append(body,`                Div(panel-footer text-right){`)
        body = Append(body,Sprintf(`                    Button(Body: #btn_title#, Page: %v, Class: btn btn-primary, Contract: %v)`, pageRecordsName, contractEditName))
        body = Append(body,`                }`)
        body = Append(body,`            }`)
        body = Append(body,`        }`)
        body = Append(body,`    }`)
        body = Append(body,`}`)
        return Join(body, "\n")
    }
    func getPrefix(appName string)string{
        var temp array
        temp = Split(appName, " ")
        return ToLower(temp[0]+"_")
    }
    func getMapValues(m map, keys array) array {
        var values array i keysLen int key string
        keysLen = Len(keys)
        while i < keysLen {
            key = keys[i]
            values = Append(values, m[key])
            i=i+1
        }
        return values
    }
    func getContractDelete(name string, cols array)string{
        var body string
        return body
    }
    func getContractEdit(name string, cols, types array)string{
        var body string
        return body
    }
    func create(type, name, content string){
        var actor string id int item map
        id = Int(DBFind(type).Where("name=?", name).One("id"))
        if type == "pages"{
            if id > 0{
                actor = "EditPage"
            }else{
                actor = "NewPage"
            }
        }
        if type == "contracts"{
            // id = GetContractByName(name)
            if id > 0{
                actor = "EditContract"
            }else{
                actor = "NewContract"
            }
        }
        if !actor{
            return
        }

        item["Name"] = name
        item["Value"] = content
        item["Id"] = id
        item["Conditions"] = "true"
        item["ApplicationId"] = $appId
        item["Menu"] = "default_menu"

        // Println("actor:", actor, "item:",item)
        CallContract(actor, item)
    }
    conditions {
        $table = DBFind("tables").Columns("columns").Where("name=?", $tableName).Row()
        if !$table{
            warning "Table not found"
        }
        $appId = Int(DBFind("tables").Where("name=?", $tableName).Columns("app_id").One("app_id"))
        $appName = DBFind("applications").Where("id=?", $appId).Columns("name").One("name")
        if !$appName {
            warning "Application not found"
        }
        $tableName = ToLower($tableName)
    }

    action {
        Println("")
        var cols colsNames colsTypes array
        cols = JSONDecode($table["columns"])
        colsNames = GetMapKeys(cols)
        colsTypes = getMapValues(cols, colsNames)

        var pageRecordsName pageName pageEditName contractEditName contractDeleteName contractName prefix string
        prefix = getPrefix($appName)
        pageRecordsName = prefix + $tableName
        pageName = prefix + trim_s($tableName)
        pageEditName = pageName + "_edit"
        contractName = toCamel(prefix, false) + toCamel(trim_s($tableName), false)
        contractEditName = contractName + "Edit"
        contractDeleteName = contractName + "Delete"
        Println(pageEditName, pageRecordsName,contractEditName,contractDeleteName)

        var pageRecords pageEdit contractDelete contractEdit string
        pageRecords = getPageRecords(colsNames, pageName, pageRecordsName, contractDeleteName)
        pageEdit = getPageEdit(colsNames, pageName, pageRecordsName, contractEditName)
        contractDelete = getContractDelete(contractDeleteName, colsNames)
        contractEdit = getContractEdit(contractEditName, colsNames, colsTypes)

        // Println("pageRecords",pageRecords)
        // Println("pageEdit",pageEdit)
        create("pages", pageRecordsName, pageRecords)
        create("pages", pageEditName, pageEdit)
        // create("contracts", contractEditName, contractEdit)
        // create("contracts", contractDeleteName, contractDelete)
    }

}