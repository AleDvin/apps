contract Export {

    func EscapeSpecialSymbols(s string) string {
		s = Replace(s, `\`, `\\`)
        s = Replace(s, `	`, `\t`)
        s = Replace(s, "\n", `\n`)
        s = Replace(s, "\r", `\r`)
        s = Replace(s, `"`, `\"`)
        return s
    }

    func AssignAll(app_name string, resources string) string {
        return Sprintf(`{
    "name": "%v",
    "data": [
%v
    ]
}`, app_name, resources)
    }

    func SerializeResource(resource map, resource_type string) string {
        var s string
        s = Sprintf(`        {
            "Type": "%v",
            "Name": "%v",
            "Value": "%v",
            "Conditions": "%v",
            "Menu": "%v",
            "Title": "%v",
            "Trans": "%v",
            "Columns": "%v"
        }`, 
            resource_type, EscapeSpecialSymbols(Str(resource["name"])), EscapeSpecialSymbols(Str(resource["value"])), EscapeSpecialSymbols(Str(resource["conditions"])),
            EscapeSpecialSymbols(Str(resource["menu"])), EscapeSpecialSymbols(Str(resource["title"])),
            EscapeSpecialSymbols(Str(resource["res"])), EscapeSpecialSymbols(Str(resource["columns"])))
        return s
    }

    func AddTypeForColumns(table_name string, table_columns string) string {
		var result string

		table_columns = Replace(table_columns, "{", "")
		table_columns = Replace(table_columns, "}", "")
		table_columns = Replace(table_columns, " ", "")

		var columns_arr array
		columns_arr = Split(table_columns, ",")

		var i int
		while (i < Len(columns_arr)){
			var s_split string
			s_split = Str(columns_arr[i])

			if Size(s_split) > 0 {
				var clm array
				clm = Split(s_split, ":")

				var s string

				if Len(clm) == 2 {
					var col_name string
					var col_cond string
					var col_type string

					col_name = Replace(Str(clm[0]), `"`, "")
					col_cond = Str(clm[1])
					col_type = GetColumnType(table_name, col_name)

					s = Sprintf(`{"name":"%v","type":"%v","conditions":%v}`, col_name, col_type, col_cond)
				}

                if Size(result) > 0 {
                    result = result + ","
				}
				result = result + s
			}
			i = i + 1
		}

		result = Sprintf("[%v]", result)
		return result
    }

    func ExportTableRecords(records array, type string, entities_array array) array {
        var i int, cur_resource map
        i = 0
        while i < Len(records) {
            cur_resource = records[i]
            if type == "tables" {
                var table_name, table_columns string, table_map map
                table_map["name"] = Str(cur_resource["name"])
                table_map["columns"] = Str(cur_resource["columns"])
                table_map["columns"] = AddTypeForColumns(table_map["name"], table_map["columns"])
            }
		    entities_array[Len(entities_array)] = SerializeResource(cur_resource, type)
            if type == "pages" {
                $menus_names[Len($menus_names)] = Sprintf("'%v'", cur_resource["menu"])
            }
            i = i + 1
        }
        return entities_array
    }

    data {
        menus_names array "optional"
    }

    conditions {
        var buffer_map map
        buffer_map = DBFind("buffer_data").Columns("id,value->app_id,value->app_name").Where("member_id=$ and key=$", $key_id, "export").Row()
        if !buffer_map{
            warning "Application not found"
        }
        $ApplicationID = Int(buffer_map["value.app_id"])
        $ApplicationName = Str(buffer_map["value.app_name"])
    }

    action {
        var full_result string
		
		var entities_array array
        var cur_resource map

        entities_array = ExportTableRecords(DBFind("pages").Limit(250).Where("app_id=?", $ApplicationID), "pages", entities_array)
        entities_array = ExportTableRecords(DBFind("contracts").Limit(250).Where("app_id=?", $ApplicationID), "contracts", entities_array)
        entities_array = ExportTableRecords(DBFind("blocks").Limit(250).Where("app_id=?", $ApplicationID), "blocks", entities_array)
        entities_array = ExportTableRecords(DBFind("languages").Limit(250).Where("app_id=?", $ApplicationID), "languages", entities_array)
        entities_array = ExportTableRecords(DBFind("app_params").Limit(250).Where("app_id=?", $ApplicationID), "params", entities_array)
        entities_array = ExportTableRecords(DBFind("tables").Limit(250).Where("app_id=?", $ApplicationID), "tables", entities_array)
        if Len($menus_names) > 0 {
            var where_for_menu string
            where_for_menu = Sprintf("name in (%v)", Join($menus_names, ","))
            entities_array = ExportTableRecords(DBFind("menu").Limit(250).Where(where_for_menu), "menu", entities_array)
        }

        //=====================================================================================================

        full_result = AssignAll($ApplicationName, Join(entities_array, ",\r\n"))
        UploadBinary("Name,Data,ApplicationId,DataMimeType", "export", full_result, 1, "application/json")
    }
}