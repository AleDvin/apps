contract sysparams_UpdateFullNodesKeysList{
    data{
        Param string
    }
    func jsonToArray(json string) array {
        // kostyl
        var res, parts array
        if HasPrefix(json, "[") {
            json = Substr(json, 1, Size(json)-2)
            if Contains(json, "},"){
                // json have many objects
                parts = Split(json, "},")
                var i int
                while i < Len(parts){
                    var p, lastSym string
                    p = parts[i]
                    lastSym = Substr(p, Size(p)-1, 1)
                    if lastSym != "}"{
                        p = Sprintf("%v}", p)
                    }
                    res[i] = JSONToMap(p)
                    i=i+1
                }
            }else{
                res[0] = JSONToMap(json)
            }
        }
        return res
    }
    conditions{
        $FULL_NODES_KEYS = "full_nodes_keys"
        $FULL_NODES = "full_nodes"
        $paramId = DBFind("parameters").Where("name=?", $FULL_NODES_KEYS).One("id")
    }
    
    action{
        if $Param != $FULL_NODES {
            return
        }
        var nodesJson string
        nodesJson = SysParamString($FULL_NODES)
        var nodes, keys array
        nodes = jsonToArray(nodesJson)
        
        var i int
        while i<Len(nodes){
            var node map
            node = nodes[i]
            keys[i] = node["key_id"]
            i=i+1
        }
        var keysList, cond string
        keysList = Join(keys, ",")
        cond = `ContractConditions("MainCondition")`
        if $paramId {
            DBUpdate("parameters", Int($paramId), "value,conditions", keysList, cond)
        }else{
            DBInsert("parameters", "name,value,conditions", $FULL_NODES_KEYS, keysList, cond)
        }
    }
}