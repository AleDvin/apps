{
    "blocks": [],
    "contracts": [
        {
            "Name": "CallDelayedContract",
            "Value": "contract CallDelayedContract {\n\t\tdata {\n\t\t\tId int\n\t\t}\n\t\tconditions {\n\t\t\tvar rows array\n\t\t\trows = DBFind(\"delayed_contracts\").Where(\"id = ? and deleted = false\", $Id)\n\t\t\tif !Len(rows) {\n\t\t\t\terror Sprintf(\"Delayed contract %d does not exist\", $Id)\n\t\t\t}\n\t\t\t$cur = rows[0]\n\n\t\t\tif $key_id != Int($cur[\"key_id\"]) {\n\t\t\t\terror \"Access denied\"\n\t\t\t}\n\n\t\t\tif $block != Int($cur[\"block_id\"]) {\n\t\t\t\terror Sprintf(\"Delayed contract %d must run on block %s, current block %d\", $Id, $cur[\"block_id\"], $block)\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tvar limit, counter, block_id int\n\n\t\t\tlimit = Int($cur[\"limit\"])\n\t\t\tcounter = Int($cur[\"counter\"])+1\n\t\t\tblock_id = $block\n\n\t\t\tif limit == 0 || limit > counter {\n\t\t\t\tblock_id = block_id + Int($cur[\"every_block\"])\n\t\t\t}\n\n\t\t\tDBUpdate(\"delayed_contracts\", $Id, \"counter,block_id\", counter, block_id)\n\t\t\tCallContract($cur[\"contract\"], nil)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "DeactivateContract",
            "Value": "contract DeactivateContract {\n\t\tdata {\n\t\t\tId         int\n\t\t}\n\t\tconditions {\n\t\t\t$cur = DBRow(\"contracts\").Columns(\"id,conditions,active,wallet_id\").WhereId($Id)\n\t\t\tif !$cur {\n\t\t\t\terror Sprintf(\"Contract %d does not exist\", $Id)\n\t\t\t}\n\t\t\tif Int($cur[\"active\"]) == 0 {\n\t\t\t\terror Sprintf(\"The contract %d has been already deactivated\", $Id)\n\t\t\t}\n\t\t\tEval($cur[\"conditions\"])\n\t\t\tif $key_id != Int($cur[\"wallet_id\"]) {\n\t\t\t\terror Sprintf(\"Wallet %d cannot deactivate the contract\", $key_id)\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tDBUpdate(\"contracts\", $Id, \"active\", 0)\n\t\t\tDeactivate($Id, $ecosystem_id)\n\t\t}\n\t\tfunc rollback() {\n\t\t\tActivate($Id, $ecosystem_id)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditAppParam",
            "Value": "contract EditAppParam {\n\t\tdata {\n\t\t\tId int\n\t\t\tValue string\n\t\t\tConditions string\n\t\t}\n\t\tconditions {\n\t\t\tRowConditions(\"app_param\", $Id)\n\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\t\t}\n\t\taction {\n\t\t\tDBUpdate(\"app_param\", $Id, \"value,conditions\", $Value, $Conditions )\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditBlock",
            "Value": "contract EditBlock {\n\t\tdata {\n\t\t\tId         int\n\t\t\tValue      string \"optional\"\n\t\t\tConditions string \"optional\"\n\t\t}\n\t\tconditions {\n\t\t\tRowConditions(\"blocks\", $Id)\n\t\t\tif $Conditions {\n\t\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tvar pars, vals array\n\t\t\tif $Value {\n\t\t\t\tpars[0] = \"value\"\n\t\t\t\tvals[0] = $Value\n\t\t\t}\n\t\t\tif $Conditions {\n\t\t\t\tpars[Len(pars)] = \"conditions\"\n\t\t\t\tvals[Len(vals)] = $Conditions\n\t\t\t}\n\t\t\tif Len(vals) > 0 {\n\t\t\t\tDBUpdate(\"blocks\", $Id, Join(pars, \",\"), vals...)\n\t\t\t}\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditColumn",
            "Value": "contract EditColumn {\n\t\tdata {\n\t\t\tTableName   string\n\t\t\tName        string\n\t\t\tPermissions string\n\t\t}\n\t\tconditions {\n\t\t\tColumnCondition($TableName, $Name, \"\", $Permissions)\n\t\t}\n\t\taction {\n\t\t\tPermColumn($TableName, $Name, $Permissions)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditDelayedContract",
            "Value": "contract EditDelayedContract {\n\t\tdata {\n\t\t\tId int\n\t\t\tContract string\n\t\t\tEveryBlock int\n\t\t\tConditions string\n\t\t\tBlockID int \"optional\"\n\t\t\tLimit int \"optional\"\n\t\t\tDeleted int \"optional\"\n\t\t}\n\t\tconditions {\n\t\t\tConditionById(\"delayed_contracts\", true)\n\n\t\t\tif !HasPrefix($Contract, \"@\") {\n\t\t\t\t$Contract = \"@\" + Str($ecosystem_id) + $Contract\n\t\t\t}\n\n\t\t\tif GetContractByName($Contract) == 0 {\n\t\t\t\terror Sprintf(\"Unknown contract %s\", $Contract)\n\t\t\t}\n\n\t\t\tif $BlockID == 0 {\n\t\t\t\t$BlockID = $block + $EveryBlock\n\t\t\t}\n\n\t\t\tif $BlockID <= $block {\n\t\t\t\terror \"The blockID must be greater than the current blockID\"\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tDBUpdate(\"delayed_contracts\", $Id, \"contract,key_id,block_id,every_block,counter,\\\"limit\\\",deleted,conditions\", $Contract, $key_id, $BlockID, $EveryBlock, 0, $Limit, $Deleted, $Conditions)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditEcosystemName",
            "Value": "contract EditEcosystemName {\n\t\tdata {\n\t\t\tEcosystemID int\n\t\t\tNewName string\n\t\t}\n\t\tconditions {\n\t\t\tvar rows array\n\t\t\trows = DBFind(\"@1_ecosystems\").Where(\"id = ?\", $EcosystemID)\n\t\t\tif !Len(rows) {\n\t\t\t\terror Sprintf(\"Ecosystem %d does not exist\", $EcosystemID)\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tEditEcosysName($EcosystemID, $NewName)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditLang",
            "Value": "contract EditLang {\n\t\tdata {\n\t\t\tName  string\n\t\t\tTrans string\n\t\t}\n\t\tconditions {\n\t\t\tEvalCondition(\"parameters\", \"changing_language\", \"value\")\n\t\t}\n\t\taction {\n\t\t\tDBUpdateExt(\"languages\", \"name\", $Name, \"res\", $Trans )\n\t\t\tUpdateLang($Name, $Trans)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditSign",
            "Value": "contract EditSign {\n\t\tdata {\n\t\t\tId         int\n\t\t\tValue      string\n\t\t\tConditions string\n\t\t}\n\t\tconditions {\n\t\t\tRowConditions(\"signatures\", $Id)\n\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\t\t}\n\t\taction {\n\t\t\tDBUpdate(\"signatures\", $Id, \"value,conditions\", $Value, $Conditions)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditTable",
            "Value": "contract EditTable {\n\t\tdata {\n\t\t\tName       string\n\t\t\tPermissions string\n\t\t}\n\t\tconditions {\n\t\t\tTableConditions($Name, \"\", $Permissions)\n\t\t}\n\t\taction {\n\t\t\tPermTable($Name, $Permissions )\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewTable",
            "Value": "contract NewTable {\n\t\tdata {\n\t\t\tName       string\n\t\t\tColumns      string\n\t\t\tPermissions string\n\t\t\tApplicationId int \"optional\"\n\t\t}\n\t\tconditions {\n\t\t\tTableConditions($Name, $Columns, $Permissions)\n\t\t}\n\t\taction {\n\t\t\tCreateTable($Name, $Columns, $Permissions, $ApplicationId)\n\t\t}\n\t\tfunc rollback() {\n\t\t\tRollbackTable($Name)\n\t\t}\n\t\tfunc price() int {\n\t\t\treturn  SysParamInt(\"table_price\")\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewAppParam",
            "Value": "contract NewAppParam {\n\t\tdata {\n\t\t\tApp int\n\t\t\tName string\n\t\t\tValue string\n\t\t\tConditions string\n\t\t}\n\t\tconditions {\n\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\t\t\tif $App == 0 {\n\t\t\t\twarning \"App id cannot equal 0\"\n\t\t\t}\n\t\t\tvar row map\n\t\t\trow = DBRow(\"app_param\").Columns(\"id\").Where(\"app_id = ? and name = ?\", $App, $Name)\n\t\t\tif row {\n\t\t\t\twarning Sprintf( \"App parameter %s already exists\", $Name)\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tDBInsert(\"app_param\", \"app_id,name,value,conditions\", $App, $Name, $Value, $Conditions )\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewBlock",
            "Value": "contract NewBlock {\n\t\tdata {\n\t\t\tName       string\n\t\t\tValue      string\n\t\t\tConditions string\n\t\t\tApplicationId int \"optional\"\n\t\t}\n\t\tconditions {\n\t\t\tValidateCondition($Conditions,$ecosystem_id)\n\n\t\t\tvar row map\n\t\t\trow = DBRow(\"blocks\").Columns(\"id\").Where(\"name = ?\", $Name)\n\n\t\t\tif row {\n\t\t\t\twarning Sprintf( \"Block %s already exists\", $Name)\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tDBInsert(\"blocks\", \"name,value,conditions,app_id\", $Name, $Value, $Conditions, $ApplicationId )\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewColumn",
            "Value": "contract NewColumn {\n\t\tdata {\n\t\t\tTableName   string\n\t\t\tName        string\n\t\t\tType        string\n\t\t\tPermissions string\n\t\t}\n\t\tconditions {\n\t\t\tColumnCondition($TableName, $Name, $Type, $Permissions)\n\t\t}\n\t\taction {\n\t\t\tCreateColumn($TableName, $Name, $Type, $Permissions)\n\t\t}\n\t\tfunc rollback() {\n\t\t\tRollbackColumn($TableName, $Name)\n\t\t}\n\t\tfunc price() int {\n\t\t\treturn  SysParamInt(\"column_price\")\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewDelayedContract",
            "Value": "contract NewDelayedContract {\n\t\tdata {\n\t\t\tContract string\n\t\t\tEveryBlock int\n\t\t\tConditions string\n\t\t\tBlockID int \"optional\"\n\t\t\tLimit int \"optional\"\n\t\t}\n\t\tconditions {\n\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\n\t\t\tif !HasPrefix($Contract, \"@\") {\n\t\t\t\t$Contract = \"@\" + Str($ecosystem_id) + $Contract\n\t\t\t}\n\n\t\t\tif GetContractByName($Contract) == 0 {\n\t\t\t\terror Sprintf(\"Unknown contract %s\", $Contract)\n\t\t\t}\n\n\t\t\tif $BlockID == 0 {\n\t\t\t\t$BlockID = $block + $EveryBlock\n\t\t\t}\n\n\t\t\tif $BlockID <= $block {\n\t\t\t\terror \"The blockID must be greater than the current blockID\"\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tDBInsert(\"delayed_contracts\", \"contract,key_id,block_id,every_block,\\\"limit\\\",conditions\", $Contract, $key_id, $BlockID, $EveryBlock, $Limit, $Conditions)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewSign",
            "Value": "contract NewSign {\n\t\tdata {\n\t\t\tName       string\n\t\t\tValue      string\n\t\t\tConditions string\n\t\t}\n\t\tconditions {\n\t\t\tValidateCondition($Conditions,$ecosystem_id)\n\t\t\tvar exist string\n\n\t\t\tvar row map\n\t\t\trow = DBRow(\"signatures\").Columns(\"id\").Where(\"name = ?\", $Name)\n\n\t\t\tif row {\n\t\t\t\terror Sprintf(\"The signature %s already exists\", $Name)\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tDBInsert(\"signatures\", \"name,value,conditions\", $Name, $Value, $Conditions )\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Import",
            "Value": "contract Import {\n\t\tdata {\n\t\t\tData string\n\t\t}\n\t\tconditions {\n\t\t\t$list = JSONToMap($Data)\n\t\t}\n\t\tfunc ImportList(row array, cnt string) {\n\t\t\tif !row {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tvar i int\n\t\t\twhile i < Len(row) {\n\t\t\t\tvar idata map\n\t\t\t\tidata = row[i]\n\t\t\t\tif(cnt == \"pages\"){\n\t\t\t\t\t$ret_page = DBFind(\"pages\").Columns(\"id\").Where(\"name=$\", idata[\"Name\"])\n\t\t\t\t\t$page_id = One($ret_page, \"id\") \n\t\t\t\t\tif ($page_id != nil){\n\t\t\t\t\t\tidata[\"Id\"] = Int($page_id) \n\t\t\t\t\t\tCallContract(\"EditPage\", idata)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCallContract(\"NewPage\", idata)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cnt == \"blocks\"){\n\t\t\t\t\t$ret_block = DBFind(\"blocks\").Columns(\"id\").Where(\"name=$\", idata[\"Name\"])\n\t\t\t\t\t$block_id = One($ret_block, \"id\") \n\t\t\t\t\tif ($block_id != nil){\n\t\t\t\t\t\tidata[\"Id\"] = Int($block_id)\n\t\t\t\t\t\tCallContract(\"EditBlock\", idata)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCallContract(\"NewBlock\", idata)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cnt == \"menus\"){\n\t\t\t\t\t$ret_menu = DBFind(\"menu\").Columns(\"id,value\").Where(\"name=$\", idata[\"Name\"])\n\t\t\t\t\t$menu_id = One($ret_menu, \"id\") \n\t\t\t\t\t$menu_value = One($ret_menu, \"value\") \n\t\t\t\t\tif ($menu_id != nil){\n\t\t\t\t\t\tidata[\"Id\"] = Int($menu_id)\n\t\t\t\t\t\tidata[\"Value\"] = Str($menu_value) + \"\\n\" + Str(idata[\"Value\"])\n\t\t\t\t\t\tCallContract(\"EditMenu\", idata)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCallContract(\"NewMenu\", idata)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cnt == \"parameters\"){\n\t\t\t\t\t$ret_param = DBFind(\"parameters\").Columns(\"id\").Where(\"name=$\", idata[\"Name\"])\n\t\t\t\t\t$param_id = One($ret_param, \"id\")\n\t\t\t\t\tif ($param_id != nil){ \n\t\t\t\t\t\tidata[\"Id\"] = Int($param_id) \n\t\t\t\t\t\tCallContract(\"EditParameter\", idata)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCallContract(\"NewParameter\", idata)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cnt == \"languages\"){\n\t\t\t\t\t$ret_lang = DBFind(\"languages\").Columns(\"id\").Where(\"name=$\", idata[\"Name\"])\n\t\t\t\t\t$lang_id = One($ret_lang, \"id\")\n\t\t\t\t\tif ($lang_id != nil){\n\t\t\t\t\t\tCallContract(\"EditLang\", idata)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCallContract(\"NewLang\", idata)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cnt == \"contracts\"){\n\t\t\t\t\tif IsObject(idata[\"Name\"], $ecosystem_id){\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCallContract(\"NewContract\", idata)\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t\tif(cnt == \"tables\"){\n\t\t\t\t\t$ret_table = DBFind(\"tables\").Columns(\"id\").Where(\"name=$\", idata[\"Name\"])\n\t\t\t\t\t$table_id = One($ret_table, \"id\")\n\t\t\t\t\tif ($table_id != nil){\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCallContract(\"NewTable\", idata)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti = i + 1\n\t\t\t}\n\t\t}\n\t\tfunc ImportData(row array) {\n\t\t\tif !row {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tvar i int\n\t\t\twhile i < Len(row) {\n\t\t\t\tvar idata map\n\t\t\t\tvar list array\n\t\t\t\tvar tblname, columns string\n\t\t\t\tidata = row[i]\n\t\t\t\ti = i + 1\n\t\t\t\ttblname = idata[\"Table\"]\n\t\t\t\tcolumns = Join(idata[\"Columns\"], \",\")\n\t\t\t\tlist = idata[\"Data\"] \n\t\t\t\tif !list {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tvar j int\n\t\t\t\twhile j < Len(list) {\n\t\t\t\t\tvar ilist array\n\t\t\t\t\tilist = list[j]\n\t\t\t\t\tDBInsert(tblname, columns, ilist)\n\t\t\t\t\tj=j+1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tImportList($list[\"pages\"], \"pages\")\n\t\t\tImportList($list[\"blocks\"], \"blocks\")\n\t\t\tImportList($list[\"menus\"], \"menus\")\n\t\t\tImportList($list[\"parameters\"], \"parameters\")\n\t\t\tImportList($list[\"languages\"], \"languages\")\n\t\t\tImportList($list[\"contracts\"], \"contracts\")\n\t\t\tImportList($list[\"tables\"], \"tables\")\n\t\t\tImportData($list[\"data\"])\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewUser",
            "Value": "contract NewUser {\n\t\tdata {\n\t\t\tNewPubkey string\n\t\t}\n\t\tconditions {\n\t\t\t$newId = PubToID($NewPubkey)\n\t\t\tif $newId == 0 {\n\t\t\t\terror \"Wrong pubkey\"\n\t\t\t}\n\t\t\tif DBFind(\"keys\").Columns(\"id\").WhereId($newId).One(\"id\") != nil {\n\t\t\t\terror \"User already exists\"\n\t\t\t}\n\n\t\t\t$amount = 1000\n\t\t}\n\t\taction {\n\t\t\tDBUpdate(\"keys\", $key_id, \"-amount\", $amount)\n\t\t\tDBInsert(\"keys\", \"id,amount,pub\", $newId, $amount, $NewPubkey)\n           \tDBInsert(\"history\", \"sender_id,recipient_id,amount,comment,block_id,txhash\",\n\t\t\t\t\t$key_id, $newId, $amount, \"New user deposit\", $block, $txhash)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "UpdateMetrics",
            "Value": "contract UpdateMetrics {\n\t\tconditions {\n\t\t\tContractConditions(\"MainCondition\")\n\t\t}\n\t\taction {\n\t\t\tvar values array\n\t\t\tvalues = DBCollectMetrics()\n\n\t\t\tvar i, id int\n\t\t\tvar v map\n\t\t\twhile (i < Len(values)) {\n\t\t\t\tv = values[i]\n\t\t\t\tid = Int(DBFind(\"metrics\").Columns(\"id\").Where(\"time = ? AND key = ? AND metric = ?\", v[\"time\"], v[\"key\"], v[\"metric\"]).One(\"id\"))\n\t\t\t\tif id != 0 {\n\t\t\t\t\tDBUpdate(\"metrics\", id, \"value\", Int(v[\"value\"]))\n\t\t\t\t} else {\n\t\t\t\t\tDBInsert(\"metrics\", \"time,key,metric,value\", v[\"time\"], v[\"key\"], v[\"metric\"], Int(v[\"value\"]))\n\t\t\t\t}\n\t\t\t\ti = i + 1\n\t\t\t}\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "UpdateSysParam",
            "Value": "contract UpdateSysParam {\n\t\tdata {\n\t\t\tName  string\n\t\t\tValue string\n\t\t\tConditions string \"optional\"\n\t\t}\n\t\taction {\n\t\t\tDBUpdateSysParam($Name, $Value, $Conditions )\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "UploadBinary",
            "Value": "contract UploadBinary {\n\t\tdata {\n\t\t\tName  string\n\t\t\tData  string\n\t\t\tAppID int\n\t\t\tMemberID int \"optional\"\n\t\t}\n\t\tconditions {\n\t\t\t$Id = Int(DBFind(\"binaries\").Columns(\"id\").Where(\"app_id = ? AND member_id = ? AND name = ?\", $AppID, $MemberID, $Name).One(\"id\"))\n\t\t}\n\t\taction {\n\t\t\tvar hash string\n\t\t\thash = MD5($Data)\n\n\t\t\tif $Id != 0 {\n\t\t\t\tDBUpdate(\"binaries\", $Id, \"data,hash\", $Data, hash)\n\t\t\t} else {\n\t\t\t\tDBInsert(\"binaries\", \"app_id,member_id,name,data,hash\", $AppID, $MemberID, $Name, $Data, hash)\n\t\t\t}\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "tests_DecodeBase64String",
            "Value": "contract tests_DecodeBase64String {\n    data {}\n    action {\n        var ENCODED, cleaned, decoded string\n        ENCODED = \"data:;base64,dGVzdCBzdHJpbmc=\"\n        cleaned = Replace(ENCODED, \"data:;base64,\", \"\")\n        decoded = DecodeBase64(cleaned)\n        $result = decoded == \"test string\"\n    }\n}\n",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "tests_IfAutocast",
            "Value": "contract tests_IfAutocast {\n    conditions {\n        var stringFloat, stringInt, intFloat bool\n        stringFloat = \"100\" == 100.0 && !(\"100\" != 100.0 || \"100\" < 90.2 || \"100\" > 200.2)\n        stringInt = \"100\" == 100 && !(\"100\" != 100 || \"100\" < 90 || \"100\" > 200)\n        intFloat = !(100 != 100.0 || 100 < 99.9 || 100 > 100.1)\n        $result = stringFloat && stringInt && intFloat       \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "tests_JsonOperationDB",
            "Value": "contract tests_JsonOperationDB {\n    data{}\n    \n    action {\n        var TABLE string\n        TABLE = \"tests\"\n        var flag map\n        flag[\"insert\"] = \"ok\"\n        var id int\n        id = DBInsert(TABLE, \"json\", flag)\n        \n        flag[\"update\"] = \"ok\"\n        DBUpdate(TABLE, id, \"json\", flag)\n        \n        var found map\n        found = DBFind(TABLE).Where(\"id=? and json->update='ok'\", id).Row()\n        flag[\"found\"] = \"ok\"\n        DBUpdate(TABLE, Int(found[\"id\"]), \"json\", flag)\n        \n        var result map\n        result = DBFind(TABLE).Where(\"id=?\", found[\"id\"]).Row()\n        \n        if result[\"json\"] == `{\"found\": \"ok\", \"insert\": \"ok\", \"update\": \"ok\"}`{\n            $result = true\n        }else{\n            $result = false\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "tests_Run",
            "Value": "contract tests_Run {\n    data{\n        Date string \"date\"\n    }\n    conditions {\n        var tests array\n        tests[0] = \"tests_JsonOperationDB\"\n        tests[1] = \"tests_IfAutocast\"\n        tests[2] = \"tests_DecodeBase64String\"\n        $tests = tests\n    }\n    action {\n        var i int\n        while i < Len($tests) {\n            var result bool\n            var params map\n            result = CallContract($tests[i], params)\n            DBInsert(\"tests\", \"name,date,result\", $tests[i], $Date, Str(result))\n            i=i+1\n        }\n        \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "data": [],
    "languages": [],
    "menus": [
        {
            "Name": "admin_menu",
            "Value": "MenuItem(\n    Icon: \"icon-screen-desktop\",\n    Page: \"interface\",\n    Title: \"Interface\"\n)\nMenuItem(\n    Icon: \"icon-docs\",\n    Page: \"tables\",\n    Title: \"Tables\"\n)\nMenuItem(\n    Icon: \"icon-briefcase\",\n    Page: \"contracts\",\n    Title: \"Smart Contracts\"\n)\nMenuItem(\n    Icon: \"icon-settings\",\n    Page: \"parameters\",\n    Title: \"Ecosystem parameters\"\n)\nMenuItem(\n    Icon: \"icon-globe\",\n    Page: \"languages\",\n    Title: \"Language resources\"\n)\nMenuItem(\n    Icon: \"icon-cloud-upload\",\n    Page: \"import\",\n    Title: \"Import\"\n)\nMenuItem(\n    Icon: \"icon-cloud-download\",\n    Page: \"export\",\n    Title: \"Export\"\n)\n",
            "Conditions": "true"
        },
        {
            "Name": "default_menu",
            "Value": "\nMenuItem(Title:tests, Page:tests, Icon:\"fa fa-edit\")",
            "Conditions": "ContractAccess(\"@1EditMenu\")"
        }
    ],
    "pages": [
        {
            "Name": "admin_index",
            "Value": "",
            "Conditions": "true",
            "Menu": "admin_menu"
        },
        {
            "Name": "default_page",
            "Value": "",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "notifications",
            "Value": "DBFind(Name: notifications, Source: noti_s).Where(\"closed=0 and notification_type=1 and recipient_id=#key_id#\")\n\t\t\t\tDBFind(Name: notifications, Source: noti_r).Where(\"closed=0 and notification_type=2 and (started_processing_id=0 or started_processing_id=#key_id#)\")\n\t\t\t\t\n\t\t\t\tForList(noti_s){\n\t\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\t\tLinkPage(Page: #page_name#, PageParams: \"notific_id=#id#,notific_type=#notification_type#,notific_header=#header_text#,#page_params#\"){        \n\t\t\t\t\t\t\t\tDiv(media-box){\n\t\t\t\t\t\t\t\t\tDiv(Class: pull-left){\n\t\t\t\t\t\t\t\t\t\tEm(Class: fa #icon# fa-1x text-info)\n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\tDiv(media-box-body clearfix){ \n\t\t\t\t\t\t\t\t\t\tDiv(Class: m0 text-normal, Body: #header_text#) \n\t\t\t\t\t\t\t\t\t\tDiv(Class: m0 text-muted h6, Body: #body_text#)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tForList(noti_r){\n\t\t\t\t\tDBFind(Name: roles_assign, Source: src_roles).Where(\"member_id=#key_id# and role_id=#role_id# and delete=0\").Vars(prefix)\n\t\t\t\t\tIf(#prefix_id# > 0){\n\t\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\t\tLinkPage(Page: #page_name#, PageParams: \"notific_id=#id#,notific_type=#notification_type#,notific_header=#header_text#,#page_params#\"){        \n\t\t\t\t\t\t\t\tDiv(media-box){\n\t\t\t\t\t\t\t\t\tDiv(Class: pull-left){\n\t\t\t\t\t\t\t\t\t\tEm(Class: fa #icon# fa-1x text-primary)\n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\tDiv(media-box-body clearfix){ \n\t\t\t\t\t\t\t\t\t\tDiv(Class: m0 text-normal, Body: #header_text#) \n\t\t\t\t\t\t\t\t\t\tDiv(Class: m0 text-muted h6, Body: #body_text#)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "tests",
            "Value": "Div(panel){\n        Div(panel-heading bg-primary text-white){\n            Case №1\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(SetVar(a, 0)SetVar(a, #a#7)SetVar(where, #where# 1)Div(){#where##a#})}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    Result:\n                    SetVar(a, 0)SetVar(a, #a#7)SetVar(where, #where# 1)Div(){#where##a#}\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №2\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(Div(){Span(begin \"You've\" end<hr>)}Div(Body: ` + \"`\\\"You've\\\"`\" + `)Div(Body: \"` + \"`You've`\" + `\"))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    Result:\n                    Div(){Span(begin \"You've\" end<hr>)}Div(Body: ` + \"`\\\"You've\\\"`\" + `)\n\t                Div(Body: \"` + \"`You've`\" + `\")\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №3\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(QRcode(Some text))}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    Result: (false)\n                    QRcode(Some text)\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №4\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(Button(Body: addpage, Contract: NewPage, Params: \"Name=hello_page2, Value=Div(fefe, dbbt), Menu=default_menu, Conditions=true\"))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    Result:\n                    Button(Body: addpage, Contract: NewPage, Params: \"Name=hello_page2, Value=Div(fefe, dbbt), Menu=default_menu, Conditions=true\")\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №5\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(Button(Body: add table1, Contract: NewTable, Params: `Name=name,Columns=[{\\\"name\\\":\\\"MyName\\\",\\\"type\\\":\\\"varchar\\\", \\\"index\\\": \\\"1\\\",  \\\"conditions\\\":\\\"true\\\"}, {\\\"name\\\":\\\"Amount\\\", \\\"type\\\":\\\"number\\\",\\\"index\\\": \\\"0\\\", \\\"conditions\\\":\\\"true\\\"}],Permissions={\\\"insert\\\": \\\"true\\\", \\\"update\\\" : \\\"true\\\", \\\"new_column\\\": \\\"true\\\"}`))}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    Result: (false)\n                    Div(){Code(Button(Body: add table1, Contract: NewTable, Params: `Name=name,Columns=[{\\\"name\\\":\\\"MyName\\\",\\\"type\\\":\\\"varchar\\\", \\\"index\\\": \\\"1\\\",  \\\"conditions\\\":\\\"true\\\"}, {\\\"name\\\":\\\"Amount\\\", \\\"type\\\":\\\"number\\\",\\\"index\\\": \\\"0\\\", \\\"conditions\\\":\\\"true\\\"}],Permissions={\\\"insert\\\": \\\"true\\\", \\\"update\\\" : \\\"true\\\", \\\"new_column\\\": \\\"true\\\"}`))}\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №6\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(Calculate( Exp: 342278783438/0, Type: money )Calculate( Exp: 5.2/0, Type: float )Calculate( Exp: 7/0))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    Result:\n                    Calculate( Exp: 342278783438/0, Type: money )Calculate( Exp: 5.2/0, Type: float )\n                    Calculate( Exp: 7/0)\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №7\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(SetVar(val, 2200000034343443343430000)SetVar(zero, 0)Calculate( Exp: (342278783438+5000)*(#val#-932780000), Type: money, Prec:18 )Calculate( Exp: (2+50)*(#zero#-9), Type: money ))}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    Result:\n                    SetVar(val, 2200000034343443343430000)SetVar(zero, 0)Calculate( Exp: (342278783438+5000)*(#val#-932780000), Type: money, Prec:18 )Calculate( Exp: (2+50)*(#zero#-9), Type: money )\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №8\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(SetVar(val, 100)Calculate(10000-(34+5)*#val#)=Calculate(\"((10+#val#-45)*3.0-10)/4.5 + #val#\", Prec: 4))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    Result: (false)\n                    SetVar(val, 100)Calculate(10000-(34+5)*#val#)=Calculate(\"((10+#val#-45)*3.0-10)/4.5 + #val#\", Prec: 4)\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №9\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(Span((span text), ok )Span(((span text), ok) )Div(){{My body}})}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    Result:\n                    Span((span text), ok )Span(((span text), ok) )Div(){{My body}}\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №10\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(Code(P(Some text)Div(myclass){Span(Strong(\"Bold text\"))}))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    Result:\n                    Code(P(Some text)Div(myclass){Span(Strong(\"Bold text\"))})\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №11\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(Data(Source: mysrc, Columns: \"id,name\", Data:\n                        1, First Name\n                        2, Second Name\n                    ).Custom(custom_id){\n                        SetVar(Name: v, Value: Lower(#name#))\n                        P(Body: #v#)\n                    }.Custom(cust){\n                        P(Body: #v#)\n                    }Data(Columns: \"name\", Data:\n                        First Name\n                        Second Name\n                    ))}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    Result:\n                    Data(Source: mysrc, Columns: \"id,name\", Data:\n                        1, First Name\n                        2, Second Name\n                    ).Custom(custom_id){\n                        SetVar(Name: v, Value: Lower(#name#))\n                        P(Body: #v#)\n                    }.Custom(cust){\n                        P(Body: #v#)\n                    }Data(Columns: \"name\", Data:\n                        First Name\n                        Second Name\n                    )\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №12\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(Data(Source: mysrc, Columns: \"id,name\", Data:\n                        1,first\n                        2,second\n                        3,third\n                    ).Custom(\"synthetic\"){\n                        Div(text-muted, #name#)\n                    }\n                    Table(Source: mysrc))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    Result:\n                    Data(Source: mysrc, Columns: \"id,name\", Data:\n                    1,first\n                    2,second\n                    3,third\n                ).Custom(\"synthetic\"){\n                    Div(text-muted, #name#)\n                }\n                    Table(Source: mysrc)\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №13\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(Data(myforlist,\"id,name\",\n                        \"1\",Test message 1\n                        2,\"Test message 2\"\n                        3,\"Test message 3\"\n                        )ForList(nolist){Problem}ForList(myforlist){\n                            Div(){#id#. Em(#name#)}\n                        })}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    Result:\n                    Data(myforlist,\"id,name\",\n                        \"1\",Test message 1\n                        2,\"Test message 2\"\n                        3,\"Test message 3\"\n                        )ForList(nolist){Problem}ForList(myforlist){\n                            Div(){#id#. Em(#name#)}\n                        }\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №14\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(SetTitle(My pageР)AddToolButton(Title: Open, Page: default))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    Result:\n                    SetTitle(My pageР)AddToolButton(Title: Open, Page: default)\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №15\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(DateTime(2017-11-07T17:51:08)+DateTime(2015-08-27T09:01:00,HH:MI DD.MM.YYYY)+CmpTime(2017-11-07T17:51:08,2017-11-07)CmpTime(2017-11-07T17:51:08,2017-11-07T20:22:01)CmpTime(2015-10-01T17:51:08,2015-10-01T17:51:08)=DateTime(NULL))}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    Result:\n                    DateTime(2017-11-07T17:51:08)+DateTime(2015-08-27T09:01:00,HH:MI DD.MM.YYYY)+CmpTime(2017-11-07T17:51:08,2017-11-07)CmpTime(2017-11-07T17:51:08,2017-11-07T20:22:01)CmpTime(2015-10-01T17:51:08,2015-10-01T17:51:08)=DateTime(NULL)\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №16\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(SetVar(pref,unicode Р)Input(Name: myid, Value: #pref#)Strong(qqq))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    Result:\n                    SetVar(pref,unicode Р)Input(Name: myid, Value: #pref#)Strong(qqq)\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №17\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(ImageInput(myimg,100,40))}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    Result:\n                    ImageInput(myimg,100,40)\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №18\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(LinkPage(My page,mypage,,\"myvar1=Value 1, myvar2=Value2,myvar3=Val(myval)\"))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    Result:\n                    LinkPage(My page,mypage,,\"myvar1=Value 1, myvar2=Value2,myvar3=Val(myval)\")\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №19\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(Image(/images/myimage.jpg,My photo,myclass).Style(width:100px;))}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    Result:\n                    Image(/images/myimage.jpg,My photo,myclass).Style(width:100px;)\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №20\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(Data(mysrc,\"id,name\",\n                            \"1\",John Silver,2\n                            2,\"Mark, Smith\"\n                        )\n                    )}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    Result:\n                    Data(mysrc,\"id,name\",\n                        \"1\",John Silver,2\n                        2,\"Mark, Smith\"\n                    )\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №21\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(Select(myselect,mysrc,name,id,0,myclass))}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    Result:\n                    Select(myselect,mysrc,name,id,0,myclass)\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №22\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(Data(mysrc,\"id,name\"){\n                            \"1\",John Silver\n                            2,\"Mark, Smith\"\n                            3,\"Unknown \"\"Person\"\"\"\n                        }\n                    )}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    Result:\n                    Data(mysrc,\"id,name\"){\n                        \"1\",John Silver\n                        2,\"Mark, Smith\"\n                        3,\"Unknown \"\"Person\"\"\"\n                    }\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №23\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(If(true) {OK}.Else {false} Div(){test} If(false, FALSE).ElseIf(0) { Skip }.ElseIf(1) {Else OK}.Else {Fourth}If(0).Else{ALL right})}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    Result:\n                    If(true) {OK}.Else {false} Div(){test} If(false, FALSE).ElseIf(0) { Skip }.ElseIf(1) {Else OK}.Else {Fourth}If(0).Else{ALL right}\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №24\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(Button(Contract: MyContract, Body:My Contract, Class: myclass, Params:\"Name=myid,Id=i10,Value\"))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    Result:\n                   Button(Contract: MyContract, Body:My Contract, Class: myclass, Params:\"Name=myid,Id=i10,Value\")\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №25\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(Simple text +=<b>bold</b>)}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    Result:\n                   Simple text +=<b>bold</b>\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №26\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(Div(myclass control, Content of the Div))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    Result:\n                    Div(myclass control, Content of the Div)\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №27\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(input Div(myclass, Content Div(mypar) the Div))}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    Result:\n                    input Div(myclass, Content Div(mypar) the Div)\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №28\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(Div(, Input(myid, form-control, Your name)Input(,,,text)))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    Result:\n                    Div(, Input(myid, form-control, Your name)Input(,,,text))\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №29\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(Div(Class: mydiv1, Body:\n\t\t\t        Div(Class: mydiv2,\n\t\t\t\t    Div(Body:\n\t\t\t\t\tInput(Value: my default text)))))}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    Result:\n                    Div(){Code(Div(Class: mydiv1, Body:\n\t\t\t        Div(Class: mydiv2,\n\t\t\t\t    Div(Body:\n\t\t\t\t\tInput(Value: my default text)))))}\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №30\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(P(Some Span(fake(text) Strong(very Em(important Label(news))))))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    result:\n                    P(Some Span(fake(text) Strong(very Em(important Label(news)))))\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №31\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(Form(myclass, Input(myid)Button(Submit,default_page,myclass)))}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    result:\n                    Form(myclass, Input(myid)Button(Submit,default_page,myclass))\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №32\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(Button(My Contract,, myclass, NewEcosystem, \"Name=myid,Id=i10,Value\").Style( .btn {border: 10px 10px;\n\t            }))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    result:\n                    Button(My Contract,, myclass, NewEcosystem, \"Name=myid,Id=i10,Value\").Style( .btn {border: 10px 10px;})\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №33\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(Div(myclass)Div().Style{\n                        .class {\n                            text-style: italic;\n                        }\n                    }\n\t\t\t\t    Div())}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    result:\n                    Div(myclass)Div().Style{\n                        .class {\n                            text-style: italic;\n                        }\n                    }\n                    Div()\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №34\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(Div(myclass){Div()P(){Div(id){Label(My #text#,myl,forname)}}})}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    result:\n                    Div(myclass){Div()P(){Div(id){Label(My #text#,myl,forname)}}}\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №35\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(SetVar(istrue, 1)If(GetVar(istrue),OK)If(GetVar(isfalse)){Skip}.Else{Span(Else OK)})}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    result:\n                    SetVar(istrue, 1)If(GetVar(istrue),OK)If(GetVar(isfalse)){Skip}.Else{Span(Else OK)}\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №35\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(If(false,First).ElseIf(0){Skip}.ElseIf(1){Second Span(If(text){item})}.ElseIf(true){Third}.Else{Fourth})}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    result:\n                    If(false,First).ElseIf(0){Skip}.ElseIf(1){Second Span(If(text){item})}.ElseIf(true){Third}.Else{Fourth}\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №36\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(Button(Page: link){My Button}.Alert(ConfirmButton: ConfBtn, CancelButton: CancelBtn, Text: Alert text, Icon:myicon))}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    result:\n                    Button(Page: link){My Button}.Alert(ConfirmButton: ConfBtn, CancelButton: CancelBtn, Text: Alert text, Icon:myicon)\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №37\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(Input(myid, form-control, Your name).Validate(minLength: 6, maxLength: 20)InputErr(Name: myid, minLength: minLength error))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    result:\n                    Input(myid, form-control, Your name).Validate(minLength: 6, maxLength: 20)InputErr(Name: myid, minLength: minLength error)\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №38\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(\n                        MenuItem(Menu 1,page1)\n                        MenuGroup(SubMenu){\n                            MenuItem(Menu 2, page2)\n                            MenuItem(Page: page3, Title: Menu 3, Icon: person)\n                        })\n                    }\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    result:\n                    MenuItem(Menu 1,page1)MenuGroup(SubMenu){\n                    MenuItem(Menu 2, page2)\n                    MenuItem(Page: page3, Title: Menu 3, Icon: person)\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №39\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(SetVar(testvalue, The, #n#, Value).(n, New).(param,\"23\")Span(Test value equals #testvalue#).(#param#))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    result:\n                    SetVar(testvalue, The, #n#, Value).(n, New).(param,\"23\")Span(Test value equals #testvalue#).(#param#)\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №40\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(SetVar(test, mytest).(empty,0)And(0,test,0)Or(0,#test#)Or(0, And(0,0))And(0,Or(0,my,while))And(1,#mytest#)Or(#empty#, And(#empty#, line)))}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    result:\n                    SetVar(test, mytest).(empty,0)And(0,test,0)Or(0,#test#)Or(0, And(0,0))And(0,Or(0,my,while))And(1,#mytest#)Or(#empty#, And(#empty#, line))\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №41\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(Address()Span(Address(-5728238900021))Address(3467347643873).(-6258391547979339691))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    result:\n                    Address()Span(Address(-5728238900021))Address(3467347643873).(-6258391547979339691)\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №42\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(Table(src, \"ID=id,name,Wallet=wallet\"))}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    result:\n                    Table(src, \"ID=id,name,Wallet=wallet\")\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №43\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(Chart(Type: \"bar\", Source: src, FieldLabel: \"name\", FieldValue: \"count\", Colors: \"red, green\"))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    result:\n                    Chart(Type: \"bar\", Source: src, FieldLabel: \"name\", FieldValue: \"count\", Colors: \"red, green\")\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №44\n        }\n        Div(panel-body bg-primary text-white){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(InputMap(mapName, `{\\\"zoom\\\":\\\"12\\\", \\\"address\\\": \\\"some address\\\", \\\"area\\\":\\\"some area\\\", \\\"coords\\\": \\\"some cords\\\"}`, PolyType, satelite)\",\n\t\t`[{\"tag\":\"inputMap\",\"attr\":{\"@value\":\"{\\\"zoom\\\":\\\"12\\\", \\\"address\\\": \\\"some address\\\", \\\"area\\\":\\\"some area\\\", \\\"coords\\\": \\\"some cords\\\"}\",\"maptype\":\"satelite\",\"name\":\"mapName\",\"type\":\"PolyType\"}}])}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    result:\n                    InputMap(mapName, `{\\\"zoom\\\":\\\"12\\\", \\\"address\\\": \\\"some address\\\", \\\"area\\\":\\\"some area\\\", \\\"coords\\\": \\\"some cords\\\"}`, PolyType, satelite)\",\n\t\t`[{\"tag\":\"inputMap\",\"attr\":{\"@value\":\"{\\\"zoom\\\":\\\"12\\\", \\\"address\\\": \\\"some address\\\", \\\"area\\\":\\\"some area\\\", \\\"coords\\\": \\\"some cords\\\"}\",\"maptype\":\"satelite\",\"name\":\"mapName\",\"type\":\"PolyType\"}}]\n                }\n            }\n        }\n        Div(panel-heading bg-info text-white){\n            Case №45\n        }\n        Div(panel-body bg-info text-white){\n            Div(row){\n                Div(col-sm-6 bg-info text-white){\n                    Expected:\n                    Div(){Code(InputMap(mapName, `{\\\"zoom\\\":\\\"12\\\", \\\"address\\\": \\\"some address\\\", \\\"area\\\":\\\"some area\\\", \\\"coords\\\": \\\"some cords\\\"}`, PolyType, satelite).Validate(ping: pong))}\n                }\n                Div(col-sm-6 bg-info text-white){\n                    result:\n                    InputMap(mapName, `{\\\"zoom\\\":\\\"12\\\", \\\"address\\\": \\\"some address\\\", \\\"area\\\":\\\"some area\\\", \\\"coords\\\": \\\"some cords\\\"}`, PolyType, satelite).Validate(ping: pong)\n                }\n            }\n        }\n        Div(panel-heading bg-primary text-white){\n            Case №45\n        }\n        Div(panel-bod bg-primary text-whitey){\n            Div(row){\n                Div(col-sm-6 bg-primary text-white){\n                    Expected:\n                    Div(){Code(Map(Input data, satelite, 300))}\n                }\n                Div(col-sm-6 bg-primary text-white){\n                    result:\n                    Map(Input data, satelite, 300)\n                }\n            }\n        }\n    }",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "default_menu"
        }
    ],
    "parameters": [],
    "tables": [
        {
            "Name": "applications",
            "Columns": "[{\"name\":\"name\",\"type\":\"varchar\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"uuid\",\"type\":\"uuid\",\"conditions\":\"false\"},{\"name\":\"title\",\"type\":\"\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"condition\",\"type\":\"text\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "binaries",
            "Columns": "[{\"name\":\"app_id\",\"type\":\"number\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"data\",\"type\":\"bytea\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"hash\",\"type\":\"varchar\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"name\",\"type\":\"varchar\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "delayed_contracts",
            "Columns": "[{\"name\":\"counter\",\"type\":\"integer\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"deleted\",\"type\":\"boolean\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"block_id\",\"type\":\"integer\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"contract\",\"type\":\"varchar\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"conditions\",\"type\":\"text\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"every_block\",\"type\":\"integer\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"limit\",\"type\":\"integer\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"key_id\",\"type\":\"number\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "ecosystems",
            "Columns": "[{\"name\":\"name\",\"type\":\"varchar\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "members",
            "Columns": "[{\"name\":\"avatar\",\"type\":\"bytea\",\"conditions\":\"ContractAccess(\\\"Profile_Edit\\\")\"},{\"name\":\"member_name\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"Profile_Edit\\\")\"}]",
            "Permissions": "{\"insert\":\"ContractAccess(\\\"Profile_Edit\\\")\",\"update\":\"ContractAccess(\\\"Profile_Edit\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "metrics",
            "Columns": "[{\"name\":\"key\",\"type\":\"varchar\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"time\",\"type\":\"number\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"value\",\"type\":\"number\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"metric\",\"type\":\"varchar\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "notifications",
            "Columns": "[{\"name\":\"recipient_name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"recipient_avatar\",\"type\":\"bytea\",\"conditions\":\"false\"},{\"name\":\"notification_type\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"finished_processing_time\",\"type\":\"datetime\",\"conditions\":\"ContractAccess(\\\"Notifications_Single_Close\\\",\\\"Notifications_Roles_Finishing\\\")\"},{\"name\":\"body_text\",\"type\":\"text\",\"conditions\":\"false\"},{\"name\":\"role_name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"header_text\",\"type\":\"text\",\"conditions\":\"false\"},{\"name\":\"icon\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"page_name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"finished_processing_id\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"Notifications_Single_Close\\\",\\\"Notifications_Roles_Finishing\\\")\"},{\"name\":\"closed\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"Notifications_Single_Close\\\",\\\"Notifications_Roles_Finishing\\\")\"},{\"name\":\"page_params\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"Notifications_Single_Send\\\",\\\"Notifications_Roles_Send\\\")\"},{\"name\":\"started_processing_id\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"Notifications_Roles_Processing\\\")\"},{\"name\":\"started_processing_time\",\"type\":\"datetime\",\"conditions\":\"ContractAccess(\\\"Notifications_Roles_Processing\\\")\"},{\"name\":\"role_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"date_create\",\"type\":\"datetime\",\"conditions\":\"false\"},{\"name\":\"recipient_id\",\"type\":\"number\",\"conditions\":\"false\"}]",
            "Permissions": "{\"insert\":\"ContractAccess(\\\"Notifications_Single_Send\\\",\\\"Notifications_Roles_Send\\\")\",\"update\":\"true\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "roles_assign",
            "Columns": "[{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"member_name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"member_avatar\",\"type\":\"bytea\",\"conditions\":\"false\"},{\"name\":\"appointed_by_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"appointed_by_name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"delete\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"Roles_Unassign\\\")\"},{\"name\":\"date_end\",\"type\":\"datetime\",\"conditions\":\"ContractAccess(\\\"Roles_Unassign\\\")\"},{\"name\":\"role_type\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"date_start\",\"type\":\"datetime\",\"conditions\":\"false\"},{\"name\":\"role_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"role_name\",\"type\":\"varchar\",\"conditions\":\"false\"}]",
            "Permissions": "{\"insert\":\"ContractAccess(\\\"Roles_Assign\\\", \\\"voting_CheckDecision\\\")\",\"update\":\"ContractAccess(\\\"Roles_Unassign\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "roles_list",
            "Columns": "[{\"name\":\"creator_name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"creator_avatar\",\"type\":\"bytea\",\"conditions\":\"false\"},{\"name\":\"role_type\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"company_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"creator_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"date_delete\",\"type\":\"datetime\",\"conditions\":\"ContractAccess(\\\"Roles_Del\\\")\"},{\"name\":\"delete\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"Roles_Del\\\")\"},{\"name\":\"role_name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"date_create\",\"type\":\"datetime\",\"conditions\":\"false\"},{\"name\":\"default_page\",\"type\":\"varchar\",\"conditions\":\"false\"}]",
            "Permissions": "{\"insert\":\"ContractAccess(\\\"Roles_Create\\\")\",\"update\":\"ContractAccess(\\\"Roles_Del\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "sections",
            "Columns": "[{\"name\":\"page\",\"type\":\"varchar\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"title\",\"type\":\"varchar\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"delete\",\"type\":\"number\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"urlname\",\"type\":\"varchar\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"roles_access\",\"type\":\"text\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "tests",
            "Columns": "[{\"name\":\"date\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"json\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"result\",\"type\":\"varchar\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}