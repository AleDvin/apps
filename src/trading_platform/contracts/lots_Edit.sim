contract lots_Edit {
    data {
        Id int
        Name string
        Description string
        Photo bytes "file"
        LotContract bytes "file"
        DateStart string
        DateEnd string
        AmountStarting money
        AmountFinal money
        OrderMin money
        OrderMax money
    }

    conditions {
        var lot map
        lot = DBFind("lots").Where("id=?", $Id).Row()

        if !lot {
            warning "Lot not found"
        }
        if lot["deleted"] > 0 {
            warning "Lot deleted"
        }

        if lot["status"] > 0 {
            warning "Bidding has already begun"
        }

        if lot["seller"] != $key_id {
            warning "You are not seller of the lot"
        }
    }

    action {
        var appId imageId contractFileId int
        appId = Int(DBFind("applications").Where("name = $ AND deleted = 0", "Trading Platform").One("id"))
        imageId = @1UploadBinary("ApplicationId,Name,Data", appId, "lot_photo", $Photo)
        contractFileId = @1UploadBinary("ApplicationId,Name,Data,DataMimeType", appId, "lot_contract", $LotContract, "application/pdf")

        DBUpdate("lots", $Id, "name,description,photo,date_start,date_end,amount_starting,amount_final,order_min,order_max,contract_id", $Name, $Description, imageId, $DateStart, $DateEnd, $AmountStarting, $AmountFinal, $OrderMin, $OrderMax, contractFileId)
    }
}