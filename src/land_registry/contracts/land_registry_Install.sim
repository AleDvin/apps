contract land_registry_Install{
    data{}
    
    func conditions{
        MainCondition()
    }
    
    func action{
        var roleName string
        var m, isAssigned, role map
        var amount int
        var members array
        members = DBFind("members")
        amount = 1000000
        
        var i int
        while i< Len(members){
            m = members[i]
            isAssigned = DBFind("land_registry_accounts").Where("member_id=?", m["id"]).Row()
            if isAssigned {
                DBUpdate("land_registry_accounts", Int(isAssigned["id"]), "member_id,member_avatar,member_name,amount_money,amount,onhold", m["id"],m["avatar"],m["member_name"], amount, amount,0)
            }else{
                DBInsert("land_registry_accounts", "member_id,member_avatar,member_name,amount_money,amount", m["id"],m["avatar"],m["member_name"], amount, amount)
            }
            i=i+1
        }
        var where string
        where = "role_name=? and role_type=1 and company_id=0 and delete=0"
        i = 0
        while i < 4{
            if i==3{
                roleName = "land_bank"
            }else{
                roleName = Sprintf("land_depart%v", i+1)
            }
            role = DBFind("roles_list").Where(where, roleName).Row()
            if !role {
                // create required roles
                // role_type==1 must be assigned_role
                Roles_Create("role_name,role_type,company_id", roleName, 1, 0)
                role = DBFind("roles_list").Where(where, roleName).Row()
            }
            isAssigned = DBFind("roles_assign").Where("role_id=? and delete=0", role["id"]).Row()
            if !isAssigned{
                var j int
                if i < Len(members){
                    j = i
                }
                m = members[j]
                Roles_Assign("role_id,member_id", Int(role["id"]), Int(m["id"]))
            }
            i=i+1
        }
    }
}