contract voting_UpdateDataForGraphs {
    data {
        votingID int
    }
    
    func safeJsonToMap(m string) map {
        var res map
        if Size(m) > 0 { res = JSONToMap(m) }
        return res
    }
    func percentPartOfTotal(part, total int) int {
        if total == 0{ total = 1 }
        var percent int
        percent = (part * 100.0)/total
        if percent > 100 { percent = 100 }
        return Money(percent)
    }
    
    conditions {
        $voting_map = DBFind("votings").Where("id=?", $votingID).Row()
        if !$voting_map {
            warning "Voting is not found"
        }
    }
    
    action {
        var progress, voting, flags map
        progress = safeJsonToMap($voting_map["progress"])
        voting = safeJsonToMap($voting_map["voting"])
        flags = safeJsonToMap($voting_map["flags"])
        
        var number_voters, flag_success int
        // increment count of voters
        number_voters = Int(progress["number_voters"]) + 1
        
        progress["percent_voters"] = percentPartOfTotal(number_voters, Int(progress["number_participants"]))
        progress["percent_success"] = percentPartOfTotal(progress["percent_voters"], Int(voting["volume"]))
        
        // update the flag of success
        if progress["percent_success"] == 100 {
            flag_success = 1
        }
        
        progress["number_voters"] = number_voters
        flags["success"] = flag_success
        
        DBUpdate("votings", $votingID, "progress,flags", progress, flags)
        
        if progress["percent_voters"] >= voting["quorum"] {
            voting_CheckDecision("votingID", $votingID)
        }
    }
}