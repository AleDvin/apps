contract voting_SubjectContract {
    data {
        votingID int

        contract_accept string
        contract_accept_params string "optional"

        contract_reject string
        contract_reject_params string "optional"
    }

    conditions {
        $voting_map = DBFind("voting").Where("id=? and date_started > now()", $votingID).Row()
        if !$voting_map {
            warning "Voting already started. Can not edit document"
        }

        // get JSON
        var flags_json string
        flags_json = Str($voting_map["flags"])

        // get MAP
        var flags map
        flags = JSONToMap(flags_json)

        // get JSON
        var voting_json string
        voting_json = Str($voting_map["voting"])

        // get MAP
        var voting map
        voting = JSONToMap(voting_json)

        if (Int(flags["full_data"]) == 1 && Int(voting["type"]) == 2) {
            warning "This vote is a system. Change settings not allowed"
        }
    }

    action {
    
        var accept_params_map map
        if (Size($contract_accept_params) > 0) {
            accept_params_map = JSONToMap($contract_accept_params)
        }

        var reject_params_map map
        if (Size($contract_reject_params) > 0) {
            reject_params_map = JSONToMap($contract_reject_params)
        }

        var subject map
        subject["contract_accept"] = Str($contract_accept)
        subject["contract_accept_params"] = accept_params_map
        subject["contract_reject"] = Str($contract_reject)
        subject["contract_reject_params"] = reject_params_map

        $subject_id = DBFind("voting_subject").Where("voting_id = $", $votingID).One("id")
        if !$subject_id {
            DBInsert("voting_subject", "voting_id,subject", $votingID, subject)
        } else {
            DBUpdate("voting_subject", Int($subject_id), "subject", subject)
        }

        voting_SubjectCheckFulldata("votingID", $votingID)
    }
}