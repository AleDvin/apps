contract RopeDepthsUpdate {
    data {
        StartedIds array
        StartedValues array
        FinalIds array
        FinalValues array
    }

    func absF(n float) float{
        if n < 0{
            return -1 * n
        }
        return n
    }
    func isEqual(a, b int) bool {
        var res bool avg float
        res = true
        if $errorRate == 0 {
            if a != b{
                res = false
                break
            }
        }else{
            avg = Float(a+b) / 2
            if avg != 0{
                res = absF(a-avg)/avg <= $errorRate && absF(b-avg)/avg <= $errorRate
            }
        }
        return res
    }
    func isSameDepth(m map, depthType string) bool{
        var a b c int
        if depthType == "started" {
            a = Int(m["manufacturer_started"])
            b = Int(m["servicer_started"])
            c = Int(m["producer_started"])
        }else{
            a = Int(m["manufacturer_final"])
            b = Int(m["servicer_final"])
            c = Int(m["producer_final"])
        }
        if a > 0 && b+c == 0 || b >0 && a+c == 0 || c>0 && a+b==0 {
            return false
        }
        if 0 == a && a == b && b == c && c == a {
            return true
        }
        return isEqual(a,b) || isEqual(a,c) || isEqual(b,c)
    }
    func notesRefresh(did, cid string){
        var depthsLen i notesLen int notes array note map
        depthsLen = Len(DBFind("rope_depths").Where("deleted=0 and rope_drilling_id=? and rope_coil_id=? and (status_started=0 or status_final=0) and operation>0", did, cid))
        notes = DBFind("notifications").Where("page_params->rope_drilling_id=? and page_params->rope_coil_id=?", did, cid)
        notesLen = Len(notes)

        if depthsLen == 0 && notesLen > 0{
            // closing notes
            while i < notesLen {
                note = notes[i]
                notifications_Close("notific_id", Int(note["id"]))
                i = i + 1
            }
        }else{
            if depthsLen > 0 && notesLen == 0{
                // sending notes
                var rid closureType sender int textHeader pageName string params map
                closureType = 2
                sender = 1
                textHeader = "Need your action: correct depths"
                pageName = "rope_depths"
                params["rope_drilling_id"] = did
                params["rope_coil_id"] = cid
                params = JSONEncode(params)
                rid = Int(AppParam($appId, "rope_manufacturer_role_id"))
                notifications_Send("rid,closure_type,sender,text_header,page_name,params_map", rid, closureType, sender, textHeader, pageName, params)

                rid = Int(AppParam($appId, "rope_servicer_role_id"))
                notifications_Send("rid,closure_type,sender,text_header,page_name,params_map", rid, closureType, sender, textHeader, pageName, params)

                rid = Int(AppParam($appId, "rope_producer_role_id"))
                notifications_Send("rid,closure_type,sender,text_header,page_name,params_map", rid, closureType, sender, textHeader, pageName, params)
            }
        }
    }
    func calculateValues(type string){
        Println("calculateValues", type)
        var ids values array i lenIds int depthField fields workField string
        depthField = Sprintf("%v_%v", $userRoles[Str($role_id)], type)

        if type == "started"{
            ids = $StartedIds
            values = $StartedValues
            fields = Sprintf("status_started,depth_started,%v", depthField)
            workField = "depth_started"
        }
        if type == "final"{
            ids = $FinalIds
            values = $FinalValues
            fields = Sprintf("status_final,depth_final,%v", depthField)
            workField = "depth_final"
        }
        lenIds = Len(ids)
        var id value int row map did cid where string
        while i < lenIds {
            id = Int(ids[i])
            value = Int(values[i])
            if id > 0{
                row = DBFind("rope_depths").Where("id=?", id).Row()
                if !(did == row["rope_drilling_id"] || cid == row["rope_coil_id"]){
                    did = row["rope_drilling_id"]
                    cid = row["rope_coil_id"]
                    notesRefresh(did, cid)
                }
                row[depthField] = value
                if isSameDepth(row, type) {
                    var workId int
                    workId = Int(DBFind("rope_works").Where("rope_coil_id=? and rope_drilling_id=? and operation=?", cid, did, row["operation"]).One("id"))
                    if workId > 0{
                        DBUpdate("rope_works", workId, workField, value)
                        DBUpdate("rope_depths", id, fields, 1, value, value)
                    }
                }else{
                    DBUpdate("rope_depths", id, depthField, value)
                }
            }
            i = i + 1
        }
    }

    conditions {
        RopeRolesCondition()
        $appId = Int(DBFind("applications").Columns("id").Where("name='Rope accounting'").One("id"))
        var userRoles map
        userRoles[AppParam($appId, "rope_manufacturer_role_id")] = "manufacturer"
        userRoles[AppParam($appId, "rope_servicer_role_id")] = "servicer"
        userRoles[AppParam($appId, "rope_producer_role_id")] = "producer"
        $userRoles = userRoles
        $errorRate = Float(AppParam($appId, "rope_depth_error_rate"))
    }

    action {
        calculateValues("started")
        calculateValues("final")
    }
}