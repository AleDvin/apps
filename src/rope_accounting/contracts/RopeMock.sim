contract RopeMock {
    data {}
    conditions {}

    action {
        var d map depths array i count val1 val2 int
        count = 3
        val1 = 1000
        val2 = 100
        while i < count {
            d["manufacturer_final"] = val1 + Random(0,4+i) - 2 - i
            d["servicer_final"] = val1 - 10*i + Random(0,4+i) - 2 - i
            d["producer_final"] = val1 - 20*i + Random(0,4+i) - 2 - i

            d["manufacturer_started"] = val2 + Random(0,4+i) - 2 - i
            d["servicer_started"] = val2 - 1*i + Random(0,4+i) - 2 - i
            d["producer_started"] = val2 - 2*i + Random(0,4+i) - 2 - i

            d["operation"] = i + 1
            d["rope_drilling_id"] = 1
            d["status_started"] = 0
            d["status_final"] = 0
            if !DBFind("rope_works").Where("operation=? and rope_drilling_id=1", d["operation"]).One("id"){
                DBInsert("rope_works", "operation,rope_drilling_id", d["operation"], d["rope_drilling_id"])
            }
            var depth map
            depth = DBFind("rope_depths").Where("operation=? and rope_drilling_id=1", d["operation"]).Row()
            if depth{
                DBUpdate("rope_depths", Int(depth["id"]), "manufacturer_final,manufacturer_started,servicer_final,servicer_started,producer_final,producer_started,status_started,status_final", d["manufacturer_final"], d["manufacturer_started"], d["servicer_final"], d["servicer_started"], d["producer_final"], d["producer_started"], d["status_started"], d["status_final"])
            }else{
                DBInsert("rope_depths", "operation,rope_drilling_id,manufacturer_final,manufacturer_started,servicer_final,servicer_started,producer_final,producer_started,status_started,status_final", d["operation"], d["rope_drilling_id"], d["manufacturer_final"], d["manufacturer_started"], d["servicer_final"], d["servicer_started"], d["producer_final"], d["producer_started"], d["status_started"], d["status_final"])
            }
            i=i+1
        }
    }
}