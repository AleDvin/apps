contract RopeDepthSet {
    data {
        StartedIds array
        StartedValues array
        FinalIds array
        FinalValues array
    }

    func getAbsFloat(n float) float{
        if n < 0{
            return -1 * n
        }
        return n
    }
    func isEqualWithErrorRate(rate float, nums ...) bool {
        var i sum numsLen int res bool avg absError float
        res = true
        numsLen = Len(nums)
        if rate == 0 {
            while i < numsLen{
                if i > 0{
                    if nums[i] != nums[i-1]{
                        res = false
                        break
                    }
                }
                i = i + 1
            }
        }else{
            while i < numsLen{
                sum = sum + nums[i]
                i = i + 1
            }
            avg = Float(sum) / numsLen
            i = 0
            if avg != 0{
                while i < numsLen{
                    absError = getAbsFloat(Float(nums[i] - avg))
                    res = absError/avg <= rate
                    if !res {
                        break
                    }
                    i = i + 1
                }
            }
        }
        return res
    }
    func isSameDepth(m map, depthType string) bool{
        var a b c int
        if depthType == "started" {
            a = Int(m["manufacturer_started"])
            b = Int(m["servicer_started"])
            c = Int(m["producer_started"])
        }else{
            a = Int(m["manufacturer_final"])
            b = Int(m["servicer_final"])
            c = Int(m["producer_final"])
        }
        return isEqualWithErrorRate($errorRate, a,b) || isEqualWithErrorRate($errorRate, a,c) || isEqualWithErrorRate($errorRate, b,c)
    }
    func closeNotes(drillingId int){
        var depthsLen int
        depthsLen = Len(DBFind("rope_depths").Where("deleted=0 and rope_drilling_id=? and (status_started=0 or status_final=0)", drillingId))
        if depthsLen == 0 {
            var notes array i notesLen int
            notes = DBFind("notifications").Where("page_params->rope_drilling_id=?", drillingId)
            notesLen = Len(notes)
            while i < notesLen {
                var note map
                note = notes[i]
                notifications_Close("notific_id", Int(note["id"]))
                i = i + 1
            }
        }
    }
    func calculateValues(type string){
        var ids values array i idsLen int depthField fields workField string
        if $role_id == $manufacturerRid {
            depthField = Sprintf("manufacturer_%v", type)
        }
        if $role_id == $servicerRid {
            depthField = Sprintf("servicer_%v", type)
        }
        if $role_id == $producerRid {
            depthField = Sprintf("producer_%v", type)
        }
        if type == "started"{
            ids = $StartedIds
            values = $StartedValues
            fields = Sprintf("status_started,depth_started,%v", depthField)
            workField = "depth_started"
        }
        if type == "final"{
            ids = $FinalIds
            values = $FinalValues
            fields = Sprintf("status_final,depth_final,%v", depthField)
            workField = "depth_final"
        }
        idsLen = Len(ids)
        while i < idsLen {
            var id value int depth row map
            id = Int(ids[i])
            value = Int(values[i])
            if id > 0{
                row = DBFind("rope_depths").Where("id=?", id).Row()
                // issue: "interface conversion: interface {} is map[string]string, not map[string]interface {}"
                depth["manufacturer_started"] = Int(row["manufacturer_started"])
                depth["servicer_started"] = Int(row["servicer_started"])
                depth["producer_started"] = Int(row["producer_started"])
                depth["manufacturer_final"] = Int(row["manufacturer_final"])
                depth["servecer_final"] = Int(row["servecer_final"])
                depth["producer_final"] = Int(row["producer_final"])
                depth[depthField] = value
                //
                if isSameDepth(depth, type) {
                    var workId int
                    workId = Int(DBFind("rope_works").Where("rope_drilling_id=? and operation=?", row["rope_drilling_id"], row["operation"]).One("id"))
                    if workId > 0{
                        DBUpdate("rope_works", workId, workField, value)
                        DBUpdate("rope_depths", id, fields, 1, value, value)
                    }
                }else{
                    DBUpdate("rope_depths", id, depthField, value)
                }

                closeNotes(Int(row["rope_drilling_id"]))
            }
            i = i + 1
        }
    }
    conditions {
        var appId int
        appId = Int(DBFind("applications").Columns("id").Where("name='Rope accounting'").One("id"))
        // RopeRolesCondition()
        $manufacturerRid = Int(AppParam(appId, "rope_manufacturer_role_id"))
        $producerRid = Int(AppParam(appId, "rope_producer_role_id"))
        $servicerRid = Int(AppParam(appId, "rope_servicer_role_id"))
        $errorRate = Float(AppParam(appId, "rope_depth_error_rate"))
    }

    action {
        calculateValues("started")
        calculateValues("final")
    }
}