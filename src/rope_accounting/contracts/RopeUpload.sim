contract RopeUpload {
    data {
        Data string "file"
    }
    func pack(items ...)array{
        return items
    }
    func updateUpload(bid int, name string){
        var inf map fields string values array
        inf = DBFind("rope_uploads").Where("binary_id=?", bid).Row()
        // buffer_Manager("Action,Key,Val", "set", "rope_upload", Str(bid))
        // "deleted_at"
        // "finaled_at"
        // "drilling_id"
        // "coil_id"
        fields = "kid,rid,file_name,binary_id,uploaded_at"
        values = pack($key_id, $role_id, name, bid, $time)
        if inf {
            DBUpdate("rope_uploads", bid, fields, values...)
        }else{
            DBInsert("rope_uploads", fields, values...)
        }
    }
    conditions {
        $appId = Int(DBFind("applications").Columns("id").Where("name='Rope accounting'").One("id"))
        RopeRolesCondition()
    }
    action {
        var name string bid int
        name = Sprintf("rid_%v-import.xlsm", $role_id)
        bid = @1UploadBinary("Name,Data,ApplicationId,DataMimeType", name, $Data, $appId, $DataMimeType)

        updateUpload(bid, name)
    }
}