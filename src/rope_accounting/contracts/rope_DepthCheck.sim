contract rope_DepthCheck {
    data {
        Id int
        Type string
        Value int
    }
    func getField() string {
        var field string
        if $role_id == $manufacturerRid {
            field = Sprintf("manufacturer_%v", $Type)
        }
        if $role_id == $servicerRid {
            field = Sprintf("servicer_%v", $Type)
        }
        if $role_id == $producerRid {
            field = Sprintf("producer_%v", $Type)
        }
        return field

    }
    func absFloat(n float) float{
        if n < 0{
            return -1 * n
        }
        return n
    }
    func isCorrectValue(m map, depthType string) bool{
        var res bool avgValue absError float values array
        if depthType == "started" {
            values[0] = Int(m["manufacturer_started"])
            values[1] = Int(m["servecer_started"])
            values[2] = Int(m["producer_started"])
        }else{
            values[0] = Int(m["manufacturer_final"])
            values[1] = Int(m["servecer_final"])
            values[2] = Int(m["producer_final"])
        }
        if $errorRate == 0 {
            res = values[0] == values[1] == values[2]
        }else{
            avgValue = (values[0] + values[1] + values[2])/3
            absError = absFloat(Float($Value - avgValue))
            if avgValue != 0{
                res = absError/avgValue <= $errorRate
            }else{
                res = true
            }
        }
        return res
    }

    conditions {
        if !($Type == "started" || $Type == "final"){
            warning "Invalid field type"
        }
        $depth = DBFind("rope_depths").Where("id=?", $Id).Row()
        if !$depth {
            warning "rope_depths: row not found"
        }
        $workId = Int(DBFind("rope_works").Where("rope_drilling_id=? and operation=?", $depth["rope_drilling_id"], $depth["operation"]).One("id"))
        if $workId == 0 {
            warning "rope_works: row not found"
        }
        var appId int
        appId = Int(DBFind("applications").Columns("id").Where("name='Rope accounting'").One("id"))
        $manufacturerRid = Int(AppParam(appId, "rope_manufacturer_role_id"))
        $producerRid = Int(AppParam(appId, "rope_producer_role_id"))
        $servicerRid = Int(AppParam(appId, "rope_servicer_role_id"))
        if $manufacturerRid==$producerRid || $producerRid==$servicerRid || $manufacturerRid==$servicerRid {
            warning "Invalid set roles"
        }
        if !($role_id == $servicerRid || $role_id == $producerRid || $role_id == $manufacturerRid){
            warning "Your role not allowed for this action"
        }
        $errorRate = Float(AppParam(appId, "rope_depth_error_rate"))
    }

    action {
        var depthField string depth map
        depthField = getField()

        // issue: "interface conversion: interface {} is map[string]string, not map[string]interface {}"
        depth["manufacturer_started"] = Int($depth["manufacturer_started"])
        depth["servecer_started"] = Int($depth["servecer_started"])
        depth["producer_started"] = Int($depth["producer_started"])
        depth["manufacturer_final"] = Int($depth["manufacturer_final"])
        depth["servecer_final"] = Int($depth["servecer_final"])
        depth["producer_final"] = Int($depth["producer_final"])
        depth[depthField] = $Value
        //
        Println("here")

        if isCorrectValue(depth, $Type) {
            var fields workField string
            if $Type == "started"{
                fields = Sprintf("status_started,%v", depthField)
                workField = "depth_started"
            }else{
                fields = Sprintf("status_final,%v", depthField)
                workField = "depth_final"
            }
            DBUpdate("rope_works", $workId, workField, $Value)
            DBUpdate("rope_depths", $Id, fields, 1, $Value)

        }else{
            DBUpdate("rope_depths", $Id, depthField, $Value)
        }

        var lenDepths int
        lenDepths = Len(DBFind("rope_depths").Where("deleted=0 and rope_drilling_id=? and (status_started=0 or status_final=0)", $depth["rope_drilling_id"]))
        if lenDepths == 0 {
            var notes array i int
            notes = DBFind("notifications").Where("page_params->rope_drilling_id=?",$depth["rope_drilling_id"])
            while i < Len(notes){
                var note map
                note = notes[i]
                notifications_Close("notific_id", Int(note["id"]))
                i = i + 1
            }
        }
    }
}