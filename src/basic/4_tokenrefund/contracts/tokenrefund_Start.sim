contract tokenrefund_Start{
    data{
        VictimAccount string
        SuspectAccount string
        Amount int
        Note string
        DateStart string "date"
        DateEnd string "date"
        DateNow string "date"
        TimeNow string "date"
    }
    func blockAccounts(victimId, attackerId int){
        if victimId==0 {
            error "unblockAccounts. invalid victim key"
        }
        if attackerId==0{
            error "unblockAccounts. invalid attacker key"
        }
        DBUpdate("keys", victimId, "block", 1)
        DBUpdate("keys", attackerId, "block", 1)
        Println(Sprintf("БЛОКИРОВКА АККАУНТОВ (%v, %v)", victimId, attackerId))
    }
    
    conditions{
        Println($this_contract, "conditions")
        
        $victimId = AddressToId($VictimAccount)
        $attackerId = AddressToId($SuspectAccount)
        if $Amount <= 0{
            info "Amount not valid"
        }
        if $victimId == 0{
            info "Victim address not valid"
        }
        if $attackerId == 0{
            info "Suspect address not valid"
        }
        if Size($Note) == 0{
            info "Please add description"
        }
        
        if !DBFind("roles_participants").Where("role->name='Validator' and role->type='3' and deleted=0 and member->member_id=?", $key_id).Row(){
            // commented out for debug
            // warning "You not Validator. You can not to run this"
        }
        var app_id int
        app_id = Int(DBFind("applications").Columns("name,id").Where("name='Basic application'").One("id"))
        var template_id int
        template_id = Int(AppParam(app_id,"voting_tokenrefund_template_id"))
        if  template_id <= 0 {
            warning "Template id not found"
        }
        // template_id = DBFind("laws").Where("name='tokenrefund'").One("voting_template_id")
        // if !template_id {
        // template_id = DBFind("voting_templates").Where("type='law' and type_id=1").One("id")
        // if !template_id{
        // info "Template not found"
        // }
        // }
        
        $template = DBFind("voting_templates").Where("id=?", template_id).Row()
        $votersRoleId = Int($template["voters"])
        $votingName = $template["title"]
        $typeParticipants = 3 // add participants by role
        $typeDecision = 5 // the launch of the contract
        $typeVoting = 2 // the voting system
        $volume = Int($template["volume"])
        $quorum = Int($template["quorum"])
        $contractAccept = $template["contract_accept"]
        $contractReject = $template["contract_reject"]
        
        $desc = Sprintf("%v (victim: %v, attacker: %v, amount: %v)", $votingName, $VictimAccount, $SuspectAccount, $Amount)
        
        if !DBFind("roles_participants").Where("role->id=? and deleted=0", $votersRoleId).One("id") {
            warning Sprintf("Role (id: %v) does not contain members", $votersRoleId)
        }
        
        if DBFind("votings").Where("voting->name=? and voting->description=? and deleted=0", $votingName, $desc).Row(){
            // info "Voting already created" // debug: uncomment on the prod
        }
    }
    
    action{
        Println($this_contract, "action")
        blockAccounts($victimId,$attackerId)
        
        var votingId, status, result, tokenrefundId, roleId, closure, sender int
        var icon, header, body, page, params, jsonParams string
        
        votingId = voting_CreateNew("voting_name,voting_type,description,type_participants,type_decision,volume,quorum,now_date,start_time,end_time,start_date,end_date", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $volume, $quorum, $DateNow, $TimeNow, $TimeNow, $DateStart, $DateEnd)
        
        status = 1 // 0.Accounts blocked 1.Discussion 2.Vote 3.Closed
        result = 0 // 0. discussion and voting 1. cancelled return 2. the tokens returned
        tokenrefundId = DBInsert("tokenrefund", "victim_key_id,attacker_key_id,amount,note,validator_key_id,blocked_at,voting_id,status,result", $victimId, $attackerId, $Amount, $Note, $key_id, $DateNow, votingId,status,result)
        
        jsonParams = Sprintf(`{"Id":"%v"}`, tokenrefundId)
        
        voting_SubjectContract("votingID,contract_reject,contract_accept,contract_reject_params,contract_accept_params", votingId, $contractReject, $contractAccept, jsonParams, jsonParams)
        
        voting_Invite("votingID,var_id", votingId, $votersRoleId)
        
        closure = 2
        sender = 1 // from member
        icon = "icon-bubbles"
        header = "$tokenrefund_note_header$"
        body = $desc
        page = "voting_view"
        params = Sprintf(`{"vID":"%v"}`, votingId)
        Notifications_Roles_Send_str("role_id,closure_type,sender,icon_name,text_header,text_body,page_name,params_val", $votersRoleId, closure, sender, icon, header, body, page, params)
    }
}