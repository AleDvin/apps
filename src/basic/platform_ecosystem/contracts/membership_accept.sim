contract membership_accept {
    data {
        notific_id int
    }
    conditions {
        $request = DBFind("notifications").Where("id = ?", $notific_id).Row()

        if Int($request["closed"]) == 1 {
            warning "Request already processed"
        }

        var founder_id int
        founder_id = DBFind("parameters").Where("name = 'founder_account'").Ecosystem(Int($request["ecosystem_id"])).One("value")

        if founder_id != $key_id {
            warning "Access denied"
        }
    }
    action {

        var sender map
        sender = JSONToMap($request["sender"])

        var params map
        params = JSONToMap($request["page_params"])

        var notifications array
        notifications = DBFind("notifications").Where("page_params->ecosystem_id = ? and sender->member_id = ? and closed = 0 and page_name = 'membership_admin_view'", params["ecosystem_id"], sender["member_id"])


        var notific_len int
        notific_len = Len(notifications)

        var i int
        while i < notific_len {
            var notific map
            notific = notifications[i]

            notifications_Close("notific_id", Int(notific["id"]))
            
            i = i + 1
        }

        params["status"] = 1

        var table_name string
        table_name = Sprintf("@%v_keys", params["ecosystem_id"]) 

        var found array
        found = DBFind(table_name).Where("id = ?", sender["member_id"])

        if Len(found) == 0 {
            var pub string
            pub = DBFind("keys").Where("id = ?", sender["member_id"]).One("pub")

            DBInsert(table_name, "id,pub", sender["member_id"], pub)
        }

        notifications_Send("member_id,sender,icon_name,text_header,text_body,page_name,params_map", sender["member_id"], 1, "icon icon-user-follow", "Request is accepted", "Your request for membership is accepted", "membership_user_view", params)
    }
}