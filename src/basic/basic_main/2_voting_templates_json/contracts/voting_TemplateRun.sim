contract voting_TemplateRun{
    data{
        TemplateId int
        Start string "date"
        End string "date"
        
        EndTime string "date,optional"
        StartTime string "date,optional"
        KeyId int "optional"
        TableWritten string "optional"
        RowId string "optional"
        ColumnName string "optional"
        NewValue string "optional"
        TextDocument string "optional"
    }
    func checkInput(value, name string){
        if Size(value) == 0 || value == "NULL" {
            warning Sprintf("%q not found", name)
        }
    }
    func emptyOrValue(value string) string{
        if value == "NULL" {
            value = ""
        }
        return value
    }
    
    conditions{
        var template map
        template = DBFind("voting_templates").Where("id=?",$TemplateId).Row()
        if !template{
            warning "Voting template not found"
        }
        if $KeyId != 0{
            $keyFind = DBFind("keys").Where("id=?", $KeyId).Row()
            if !$keyFind{
                warning "Key id not found"
            }
        }
        if $StartTime == ""{
            $StartTime = "00:00"
        }
        if $EndTime == ""{
            $EndTime = "23:59"
        }
        
        var initContract string
        initContract = template["init_contract"]
        if initContract != "" && initContract != "NULL"{
            var initParam map
            initParam["KeyId"] = $KeyId
            CallContract(initContract, initParam)
        }
        
        $voters = template["voters"]
        $candidates = template["candidates"]
        $votingName = template["title"]
        $volume = Int(template["volume"])
        $quorum = Int(template["quorum"])
        $voting = Int(template["type_voting"])
        $participants = Int(template["type_participants"])
        $decision = Int(template["type_decision"])
        $vacancies = Int(template["vacancies"])
        
        $desc = Sprintf("%v template #%v]", $votingName, $TemplateId)
        if $voting < 1 || $voting > 2 {
            warning "Invalid type of voting"
        }
        $contractAccept = emptyOrValue(template["contract_accept"])
        $acceptParams = emptyOrValue(template["accept_params"])
        $contractReject = emptyOrValue(template["contract_reject"])
        $rejectParams = emptyOrValue(template["reject_params"])
        
        if $decision == 1 || $decision == 2 {
            // role-candidates
            checkInput($candidates, "Candidate role")
            var candidate map
            candidate = DBFind("roles").Where("id=? and deleted=0", $candidates).Row()
            if !candidate {
                warning Sprintf("Candidates role (%v) not found", candidate["role_name"])
            }
            $candidateId = Int(candidate["id"])
        }
        
        if $decision == 3 {
            // document approval
            checkInput($TextDocument, "TextDocument")
        }
        
        if $decision == 4 {
            // formal decision
            // in the system vote need only a field and a value
            checkInput($ColumnName, "ColumnName")
            checkInput($NewValue, "NewValue")
            if $voting == 2{
                $desc = Sprintf("%v [template #%v] %v %v", $votingName, $TemplateId, $ColumnName, $NewValue)
            }
            
            if $voting == 1{
                checkInput($TableWritten, "TableWritten")
                checkInput($RowId, "RowId")
                $desc = Sprintf("%v [template #%v] %v.%v.%v: %v", $votingName, $TemplateId, $TableWritten, $ColumnName, $RowId, $NewValue)
            }
            if $RowId == "" || $RowId == "NULL"{
                $RowId = 0
            }
            
        }
        $isCreated = DBFind("votings").Where("voting->name=? and voting->description=? and deleted=0", $votingName, $desc).Row()
        if $isCreated{
            // info "Voting already created" // check for duplicate voting
        }
        
        
        if $participants == 3 {
            // if the type of the participants "in role" - check the role
            var role map
            role = DBFind("roles").Where("id=? and deleted=0", $voters).Row()
            if !role {
                warning Sprintf("Voters role (%v) not found", role["role_name"])
            }
            $roleId = Int(role["id"])
        }
    }
    
    action{
        
        $voting_id = 0 // must be installed in voting_CreateNew
        voting_CreateNew("voting_name,voting_type,description,type_participants,type_decision,now_date,start_time,start_date,end_date,end_time,volume,quorum", $votingName, $voting, $desc, $participants, $decision, $Start, $StartTime, $Start, $End, $EndTime, $volume, $quorum)
        if $voting_id == 0 {
            // if unable to set in voting_CreateNew (when/if will be fixed passing of global variables)
            $voting_id = DBFind("votings").Where("voting->name=? and date_started=?", $votingName, $Start).One("id")
            $voting_id = Int($voting_id)
        }
        // the default argument for Contract
        var defaultParams string
        defaultParams = Sprintf(`{"VotingTemplateId":"%v","KeyId":"%v","VotingId":"%v"}`, $TemplateId, $KeyId, $voting_id)
        
        if Size($acceptParams) == 0{
            $acceptParams = defaultParams
        }
        if Size($rejectParams) == 0{
            $rejectParams = defaultParams
        }
        
        if $decision == 1 || $decision == 2{
            // 1. Role candidates with the registration of participants on request
            // 2. Role candidates with manual registration of the participants
            voting_SubjectCandidates("votingID,memberID", $voting_id, $KeyId)
            voting_SubjectSettings("votingID,roleID,vacancies,contract_accept,contract_accept_params,contract_reject,contract_reject_params", $voting_id, $candidateId, $vacancies, $contractAccept, $acceptParams, $contractReject,$rejectParams)
        }
        if $decision == 3 {
            // Document approval
            voting_SubjectDocument("votingID,text_document,contract_accept,contract_accept_params,contract_reject,contract_reject_params", $voting_id,$TextDocument, $contractAccept, $acceptParams, $contractReject, $rejectParams)
        }
        
        if $decision == 4 {
            // Formal decision
            voting_SubjectFormal("votingID,description,table_to_written,row_id,column_name,written_value,contract_accept,contract_accept_params,contract_reject,contract_reject_params",$voting_id, $desc, $TableWritten, $RowId, $ColumnName, $NewValue, $contractAccept, $acceptParams, $contractReject, $rejectParams)
            
        }
        
        if $decision == 5 {
            // Execution of the contract
            voting_SubjectContract("votingID,contract_accept,contract_accept_params,contract_reject,contract_reject_params",$voting_id,$contractAccept, $acceptParams, $contractReject, $rejectParams)
        }
        if $participants == 3 {
            // participants: "by role"
            voting_Invite("votingID,var_id", $voting_id, $roleId)
        }
        if $participants == 1 {
            // if the participants are "all", the invite has already occurred in "voting_CreateNew"
        }
    }
}