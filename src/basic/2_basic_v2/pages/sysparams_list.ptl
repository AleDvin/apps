SetTitle($system_params$)
JsonToSource(nodes){SysParam(full_nodes)}
ForList(nodes){
    Div(#key_id#)
}
Div(content-wrapper){
    Div(breadcrumb){
        Span(Class: text-muted, Body: $system_params$)
    }
    Div(row){
        Div(col-sm-12 col-lg-10 col-lg-offset-1){
            Form(panel panel-primary){
                Div(panel-body){
                    Div(form-group){
                        Div(row){
                            Div(col-sm-4 text-center){Strong($name$)}
                            Div(col-sm-6 text-center){Strong($value$)}
                        }
                    }
                    Data(Source: src_parameters, Columns: name){
                        gap_between_blocks
                        default_ecosystem_page
                        full_nodes
                        ecosystem_price
                        blockchain_url
                        max_block_size
                    }
                    ForList(Source: src_parameters, Index: index){
                        Div(form-group){
                            Div(row){
                                Div(col-sm-4){
                                    #name#
                                }
                                Div(col-sm-6){
                                    SysParam(#name#)
                                }.Style(overflow:hidden;)
                                Div(col-sm-2){
                                    Button(Body: $edit$, Class: btn btn-block btn-primary, Page: sysparams_voting, PageParams: "param_index=#index#,param_name=#name#", Contract: sysparams_UpdateFullNodesKeysList, Params: "Param=#name#")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    DBFind(Name: roles_participants, Source: roles).Columns("id,member->member_id,role->id,role->name,deleted").Where("member->member_id='#key_id#' and role->id='3' and role->name='Validator' and deleted=0").Vars(validator)
    If(#validator_id#>0){
        Div(row){
            Div(col-md-6 col-md-offset-3){
                Div(panel panel-primary text-center){
                    Div(panel-heading){$validator_removing$}
                    Div(panel-body text-center){$validator_removing_desc$}
                    Div(panel-footer text-right){
                        Button(Body: $resign$, Class: btn btn-danger, Page: sysparams_list, Contract: sysparams_ValidatorResign).Alert(Text: $want_resign$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)
                    }
                }
            }
        }
    }
}
If(){
    default_ecosystem_menu
    default_ecosystem_contract
    rb_blocks_1
    new_version_url
    number_of_nodes
    contract_price
    column_price
    table_price
    menu_price
    page_price
    max_tx_size
    max_tx_count
    max_columns
    max_indexes
    max_block_user_tx
    max_fuel_tx
    max_fuel_block
    commission_size
    commission_wallet
    fuel_rate
    extend_cost_address_to_id
    extend_cost_id_to_address
    extend_cost_new_state
    extend_cost_sha256
    extend_cost_pub_to_id
    extend_cost_ecosys_param
    extend_cost_sys_param_string
    extend_cost_sys_param_int
    extend_cost_sys_fuel
    extend_cost_validate_condition
    extend_cost_eval_condition
    extend_cost_has_prefix
    extend_cost_contains
    extend_cost_replace
    extend_cost_join
    extend_cost_update_lang
    extend_cost_size
    extend_cost_substr
    extend_cost_contracts_list
    extend_cost_is_object
    extend_cost_compile_contract
    extend_cost_flush_contract
    extend_cost_eval
    extend_cost_len
    extend_cost_activate
    extend_cost_deactivate
    extend_cost_create_ecosystem
    extend_cost_table_conditions
    extend_cost_create_table
    extend_cost_perm_table
    extend_cost_column_condition
    extend_cost_create_column
    extend_cost_perm_column
    extend_cost_json_to_map
    max_block_generation_time
    block_reward
}