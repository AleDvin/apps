{
    "blocks": [],
    "contracts": [
        {
            "Name": "tokenrefund_Start",
            "Value": "contract tokenrefund_Start{\n    data{\n        Accounts array\n        Amount int\n        Note string\n        DateStart string \"date\"\n        DateEnd string \"date\"\n        DatetimeNow string \"date\"\n        TimeNow string \"date\"\n    }\n    \n    func conditions{\n        // if $key_id != 0{\n        //     $keyFind = DBFind(\"keys\").Where(\"id=?\", $key_id).Row()\n        //     if !$keyFind{\n        //         warning \"Keyid not found\"\n        //     }\n        // }\n        // if $StartTime == \"\"{\n        //     $StartTime = \"00:00\"\n        // }\n        // if $EndTime == \"\"{\n        //     $EndTime = \"23:59\"\n        // }\n        \n        // $condition = $template[\"init_condition\"]\n        // ContractConditions($condition)\n        \n        // $candidateRoleName = $template[\"precondition\"]\n        // $votersRoleName = $template[\"voters\"]\n        // $votingName = $template[\"title\"]\n        // $volume = Int($template[\"volume\"])\n        // $quorum = Int($template[\"quorum\"])\n        // $typeVoting = Int($template[\"type_voting\"])\n        // $typeParticipants = Int($template[\"type_participants\"])\n        // $typeDecision = Int($template[\"type_decision\"])\n        // $vacancies = Int($template[\"vacancies\"])\n        \n        // $desc = Sprintf(\"%v [#%v]\", $votingName, $TemplateId)\n        \n        // $contractAccept = $template[\"contract_accept\"]\n        // $acceptParams = $template[\"contract_accept_params\"]\n        // $contractReject = $template[\"contract_reject\"]\n        // $rejectParams = $template[\"contract_reject_params\"]\n        \n        // $isCreated = DBFind(\"voting_instances\").Where(\"name=? and description=? and delete=0\", $votingName, $desc).Row()\n        // if $isCreated{\n        //     // info \"Voting already created\" // must uncomment on prod\n        // }\n        \n        // // if not special then use default\n        // $defaultParams = Sprintf(\"VotingTemplateId->%v;KeyId->%v\", $TemplateId, $key_id)\n        // if Size($acceptParams) == 0{\n        //     $acceptParams = $defaultParams\n        // }\n        // if Size($rejectParams) == 0{\n        //     $rejectParams = $defaultParams\n        // }\n    }\n    \n    func action{\n        // var roleId int\n        // roleId = DBFind(\"roles_list\").Where(\"role_name=? and delete=0\", $votersRoleName).One(\"id\")\n        \n        // $voting_id = 0 // will be set in voting_CreateNew\n        // voting_CreateNew(\"voting_name,type_voting,description,type_participants,type_decision,volume,quorum,now_date,start_time,end_time,start_date,end_date\", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $volume, $quorum, $DatetimeNow, $TimeNow, $TimeNow, $DateStart, $DateEnd)\n        // if $voting_id == 0 {\n        //     $voting_id = DBFind(\"voting_instances\").Where(\"voting_name=? and start_date=?\", $votingName, $DateStart).One(\"id\")\n        //     $voting_id = Int($voting_id)\n        // }\n        // voting_SubjectCandidates(\"votingID,memberID\", $voting_id, $key_id)\n        // voting_SubjectSettings(\"votingID,roleID,vacancies,contract_reject,contract_accept,accept_params,reject_params\", $voting_id, roleId, $vacancies, \"\", $contractAccept, $acceptParams, $rejectParams)\n        // $value = Sprintf(\"%v : %v\", $voting_id, roleId)\n        \n        // voting_Invite(\"votingID,var_id\", $voting_id, roleId)\n        \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "data": [
        {
            "Table": "voting_templates",
            "Columns": [
                "voters",
                "title",
                "type_participants",
                "volume",
                "quorum",
                "contract_accept",
                "contract_reject"
            ],
            "Data": [
                [
                    "Investor with voting rights",
                    "Token Refund",
                    "3",
                    "70",
                    "51",
                    "tokenrefund_Accept",
                    "tokenrefund_Reject"
                ]
            ]
        }
    ],
    "languages": [
        {
            "Name": "description",
            "Conditions": "",
            "Trans": "{\"en\": \"Description\", \"ru\": \"Описание\"}"
        },
        {
            "Name": "request_refund",
            "Conditions": "",
            "Trans": "{\"en\": \"To request a refund\", \"ru\": \"Запросить возврат средств\"}"
        },
        {
            "Name": "start_refund",
            "Conditions": "",
            "Trans": "{\"en\": \"To start the refund\", \"ru\": \"Начать возврат средств\"}"
        },
        {
            "Name": "tokenrefund_start",
            "Conditions": "",
            "Trans": "{\"en\": \"Closed\", \"ru\": \"Закрыто\"}"
        },
        {
            "Name": "tokenrefund_status0",
            "Conditions": "",
            "Trans": "{\"en\": \"Blocked accounts\", \"ru\": \"Заблокированы аккаунты\"}"
        },
        {
            "Name": "tokenrefund_status1",
            "Conditions": "",
            "Trans": "{\"en\": \"Discussion\", \"ru\": \"Обсуждение\"}"
        },
        {
            "Name": "tokenrefund_status2",
            "Conditions": "",
            "Trans": "{\"en\": \"Voting\", \"ru\": \"Голосование\"}"
        },
        {
            "Name": "tokenrefund_status3",
            "Conditions": "",
            "Trans": "{\"en\": \"Closed\", \"ru\": \"Закрыто\"}"
        }
    ],
    "menus": [
        {
            "Name": "default_menu",
            "Value": "MenuItem(Title:$profile$, Page:profile_view, Icon:\"fa icon-user\")\nMenuItem(Title:$membership$, Page:members_list, Icon:\"fa icon-people\")\nMenuItem(Title:$companies$, Page:companies_list, Icon:\"fa fa-university\")\nMenuItem(Title:$roles$, Page:roles_list, Icon:\"fa fa-list-ul\")\nMenuGroup(Title:$notifications$, Icon:\"fa fa-bell-o\"){\n    MenuItem(Title:$single_notifics$, Page:notifications_single, Icon:\"fa fa-bell-o\")\n    MenuItem(Title:$role_notifics$, Page:notifications_roles, Icon:\"fa fa-bullhorn\")\n    MenuItem(Title:$test_page$, Page:notifications_testpage, Icon:\"icon-settings\")\n}\nMenuGroup(Title:$voting$, Icon:\"fa fa-edit\"){\n    MenuItem(Title:$voting$, Page:voting_list, Icon:\"fa fa-edit\")\n    MenuItem(Title:$voting_templates$, Page:voting_templates, Icon:\"fa icon-pin\")\n    MenuItem(Title:$sysparams_candidate_validators_form$, Page:sysparams_candidate_validators_form, Icon:\"icon-note\")\n    MenuItem(Title:$sysparams_candidates_list$, Page:sysparams_candidates_list, Icon:\"icon-list\")\n}\nMenuGroup(Title:$admin$, Icon:\"fa icon-settings\"){\n\tMenuItem(Title:$tokens_transfer$, Page:money_transfer, Icon:\"icon-energy\")\n\tMenuItem(Title:$new_ecosystem$, Page:ecosystem_new, Icon:\"icon-globe\")\n    MenuItem(Title: $sysparams_list$,Page:sysparams_list, Icon:\"fa icon-settings\")\n} ",
            "Conditions": "ContractAccess(\"@1EditMenu\")"
        }
    ],
    "pages": [
        {
            "Name": "tokenrefund_list",
            "Value": "Div(content-wrapper){\n    SetTitle($tokenrefund_list$)\n    \n    DBFind(Name: tokenrefund, Source: src).Order(id desc).Custom(_status){\n        If(#status#>0){\n            EcosysParam(Name: tokenrefund_status, Index: #status#)\n        }.Else{\n            $tokenrefund_status0$\n        }\n    }.Custom(_blocked){\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #blocked_at#)\n    }.Custom(_closed){\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #closed_at#)\n    }\n    \n    Div(panel panel-primary){\n        Div(list-group-item){\n            Table(Source: src, Columns: \"$accounts$=accounts,$amount$=amount,$description$=note,$validator_id$=validator_id,$_blocked$=blocked_at,$voting_id$=voting_id,$result$=result,$status$=status,$_closed$=closed_at\")\n        }\n        \n        Div(panel-footer clearfix){\n            Form(pull-right){\n                Button(Body: $request_refund$, Class: btn btn-primary, Page: tokenrefund_start)\n            }\n        }\n    }\n}\n\n",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "default_menu"
        },
        {
            "Name": "tokenrefund_start",
            "Value": "Div(content-wrapper){\n    SetTitle($tokenrefund_start$)\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading, Body: $new_voting_value$)\n                Div(panel-body){\n                    Div(row form-group){\n                        Div(col-sm-4){LangRes($account_list$)}\n                        Div(col-sm-8){\n                            Input(Name: Accounts)\n                        }\n                    }\n                    Div(row form-group){\n                        Div(col-sm-4){LangRes($amount$)}\n                        Div(col-sm-8){\n                            Input(Name: Amount)\n                        }\n                    }\n                    Div(row form-group){\n                        Div(col-sm-4){LangRes($description$)}\n                        Div(col-sm-8){\n                            Input(Name: Note)\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Input(Name: DateStart, Type: hidden, Value: Now(\"YYYY-MM-DD\", +1 day))\n                    Input(Name: DateEnd, Type: hidden, Value: Now(\"YYYY-MM-DD\", +2 day))\n                    Input(Name: DatetimeNow, Type: hidden, Value: Now(\"YYYY-MM-DD HH:MI\"))\n                    Input(Name: TimeNow, Type: hidden, Value: Now(\"HH:MI\"))\n                    Button(Body: $start_refund$, Contract:  tokenrefund_Start, Page: tokenrefund_list, Class: btn btn-primary)\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "default_menu"
        }
    ],
    "parameters": [
        {
            "Name": "tokenrefund_status",
            "Value": "tokenrefund_status1,tokenrefund_status2,tokenrefund_status3",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "tables": [
        {
            "Name": "laws",
            "Columns": "[\n    {\n        \"name\": \"name\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"page\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"template\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "tokenrefund",
            "Columns": "[\n    {\n        \"name\": \"accounts\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"amount\",\n        \"type\": \"money\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"note\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"validator_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"blocked_at\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"voting_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"result\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"status\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"closed_at\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}