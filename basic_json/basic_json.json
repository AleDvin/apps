{
    "blocks": [],
    "contracts": [
        {
            "Name": "Notifications_Roles_Close",
            "Value": "contract Notifications_Roles_Close {\r\n    data {\r\n        notific_id int\r\n    }\r\n\r\n    conditions {\r\n        $notifications_map = DBFind(\"notifications\").Where(\"id=$\", $notific_id).Row()\r\n        if !$notifications_map {\r\n            warning \"Notification not found\"\r\n        }\r\n\r\n        if ($notifications_map[\"date_start_processing\"] == \"\") {\r\n            warning \"Sorry, processing of this notification has not yet begun\"\r\n        }\r\n\r\n        // get JSON\r\n        var processing_info_json string\r\n        processing_info_json = Str($notifications_map[\"processing_info\"])\r\n\r\n        // get MAP\r\n        var processing_info map\r\n        processing_info = JSONToMap(processing_info_json)\r\n\r\n        if (Int(processing_info[\"member_id\"]) != $key_id) {\r\n            warning \"Sorry, processing of this notice began another member\"\r\n        }\r\n\r\n        if (Int($notifications_map[\"closed\"]) > 0) {\r\n            warning \"Sorry, this notification has already been closed before\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"notifications\", $notific_id, \"timestamp date_closed,closed\", $block_time, 1)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Notifications_Roles_Processing",
            "Value": "contract Notifications_Roles_Processing {\r\n    data {\r\n        notific_id int\r\n    }\r\n\r\n    conditions {\r\n        $notifications_map = DBFind(\"notifications\").Where(\"id=$\", $notific_id).Row()\r\n        if !$notifications_map {\r\n            warning \"Notification not found\"\r\n        }\r\n\r\n        if ($notifications_map[\"date_start_processing\"] != \"\") {\r\n            warning \"Sorry, processing of this notification has already begun\"\r\n        }\r\n\r\n        $participant_id = DBFind(\"roles_participants\").Where(\"role->id=$ and member->member_id=$ and deleted=$\", Int($notifications_map[\"role_id\"]), $key_id, 0).One(\"id\")\r\n        if ($participant_id == 0) {\r\n            warning \"Sorry, you are not part of the role for which this notification is intended\"\r\n        }\r\n\r\n        $processing_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\r\n        if !$processing_map {\r\n            warning \"Member not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var processing_info map\r\n        processing_info[\"member_id\"] = Str($processing_map[\"id\"])\r\n        processing_info[\"member_name\"] = Str($processing_map[\"member_name\"])\r\n        processing_info[\"image_id\"] = Str($processing_map[\"image_id\"])\r\n\r\n        DBUpdate(\"notifications\", $notific_id, \"timestamp date_start_processing,processing_info\", $block_time, processing_info)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Notifications_Single_Send_map",
            "Value": "contract Notifications_Single_Send_map {\r\n    data {\r\n        member_id int\r\n        sender int\r\n        icon_name string\r\n        text_header string\r\n        text_body string \"optional\"\r\n        page_name string\r\n        params_map map\r\n    }\r\n\r\n    conditions {\r\n        $member_map = DBFind(\"members\").Where(\"id = $\", $member_id).Row()\r\n        if !$member_map {\r\n            warning \"Member not found\"\r\n        }\r\n\r\n        if ($sender == 1) {\r\n            $sender_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\r\n            if !$sender_map {\r\n                warning \"Member not found\"\r\n            }\r\n        }\r\n        if ($sender == 2) {\r\n            // !!! need to fix role_id to the global variable !!!!\r\n            $sender_map = DBFind(\"roles\").Where(\"id = $\", 1).Row()\r\n            if !$sender_map {\r\n                warning \"Member not found\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var recipient map\r\n        recipient[\"member_id\"] = Str($member_map[\"id\"])\r\n        recipient[\"member_name\"] = Str($member_map[\"member_name\"])\r\n        recipient[\"image_id\"] = Str($member_map[\"image_id\"])\r\n\r\n        var sender map\r\n        if ($sender == 1) {\r\n            sender[\"type\"] = \"1\"\r\n            sender[\"member_id\"] = Str($sender_map[\"id\"])\r\n            sender[\"member_name\"] = Str($sender_map[\"member_name\"])\r\n            sender[\"image_id\"] = Str($sender_map[\"image_id\"])\r\n        }\r\n        if ($sender == 2) {\r\n            sender[\"type\"] = \"2\"\r\n            sender[\"role_id\"] = Str($sender_map[\"id\"])\r\n            sender[\"role_name\"] = Str($sender_map[\"role_name\"])\r\n            sender[\"image_id\"] = Str($sender_map[\"image_id\"])\r\n        }\r\n\r\n        var notification map\r\n        notification[\"header\"] = $text_header\r\n        notification[\"type\"] = \"1\"\r\n        notification[\"icon\"] = $icon_name\r\n        notification[\"body\"] = $text_body\r\n\r\n        DBInsert(\"notifications\", \"recipient,sender,notification,page_name,page_params,timestamp date_created\",\r\n            recipient, sender, notification, $page_name, $params_map, $block_time)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Notifications_Single_Send_str",
            "Value": "contract Notifications_Single_Send_str {\r\n    data {\r\n        member_id int\r\n        sender int\r\n        icon_name string\r\n        text_header string\r\n        text_body string \"optional\"\r\n        page_name string\r\n        params_val string \"optional\"\r\n    }\r\n\r\n    conditions {}\r\n\r\n    action {\r\n        var params_map map\r\n        if (Size($params_val) > 0) {\r\n            params_map = JSONToMap($params_val)\r\n        }\r\n        Notifications_Single_Send_map(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\",\r\n            $member_id, $sender, $icon_name, $text_header, $text_body, $page_name, params_map)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Notifications_Single_Close",
            "Value": "contract Notifications_Single_Close {\r\n    data {\r\n        notific_id int\r\n    }\r\n\r\n    conditions {\r\n        $processing_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\r\n        if !$processing_map {\r\n            warning \"Member not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var processing_info map\r\n        processing_info[\"member_id\"] = Str($processing_map[\"id\"])\r\n        processing_info[\"member_name\"] = Str($processing_map[\"member_name\"])\r\n        processing_info[\"image_id\"] = Str($processing_map[\"image_id\"])\r\n\r\n        DBUpdate(\"notifications\", $notific_id, \"timestamp date_start_processing,processing_info,timestamp date_closed,closed\",\r\n            $block_time, processing_info, $block_time, 1)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Notifications_Roles_Send_map",
            "Value": "contract Notifications_Roles_Send_map {\r\n    data {\r\n        role_id int\r\n        closure_type int\r\n        sender int\r\n        icon_name string\r\n        text_header string\r\n        text_body string \"optional\"\r\n        page_name string\r\n\t\tparams_map map\r\n    }\r\n\r\n    conditions {\r\n        $roles_map = DBFind(\"roles\").Where(\"id = $\", $role_id).Row()\r\n        if !$roles_map {\r\n            warning \"Role not found\"\r\n        }\r\n\r\n        $participant_id = DBFind(\"roles_participants\").Where(\"role->id=$ and deleted=$\", $role_id, 0).One(\"id\")\r\n        if !$participant_id {\r\n            warning \"Role does not contain members\"\r\n        }\r\n\r\n        if ($sender == 1) {\r\n            $sender_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\r\n            if !$sender_map {\r\n                warning \"Member not found\"\r\n            }\r\n        }\r\n        if ($sender == 2) {\r\n            // !!! need to fix role_id to the global variable !!!!\r\n            $sender_map = DBFind(\"roles\").Where(\"id = $\", 1).Row()\r\n            if !$sender_map {\r\n                warning \"Member not found\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        //closure_type - Single\r\n        if ($closure_type == 1) {\r\n            var recipient map\r\n            recipient[\"role_id\"] = Str($roles_map[\"id\"])\r\n            recipient[\"role_name\"] = Str($roles_map[\"role_name\"])\r\n            recipient[\"image_id\"] = Str($roles_map[\"image_id\"])\r\n\r\n            var sender map\r\n            if ($sender == 1) {\r\n                sender[\"type\"] = \"1\"\r\n                sender[\"member_id\"] = Str($sender_map[\"id\"])\r\n                sender[\"member_name\"] = Str($sender_map[\"member_name\"])\r\n                sender[\"image_id\"] = Str($sender_map[\"image_id\"])\r\n            }\r\n            if ($sender == 2) {\r\n                sender[\"type\"] = \"2\"\r\n                sender[\"role_id\"] = Str($sender_map[\"id\"])\r\n                sender[\"role_name\"] = Str($sender_map[\"role_name\"])\r\n                sender[\"image_id\"] = Str($sender_map[\"image_id\"])\r\n            }\r\n\r\n            var notification map\r\n            notification[\"header\"] = $text_header\r\n            notification[\"type\"] = \"2\"\r\n            notification[\"icon\"] = $icon_name\r\n            notification[\"body\"] = $text_body\r\n\r\n            DBInsert(\"notifications\", \"recipient,sender,notification,page_name,page_params,timestamp date_created\",\r\n                recipient, sender, notification, $page_name, $params_map, $block_time)\r\n        }\r\n        //closure_type - Multiple \r\n        else {\r\n            $ret_role = DBFind(\"roles_participants\").Columns(\"member->member_id\").Where(\"role->id = $ and deleted = $\", $role_id, 0).Order(\"id\")\r\n\r\n            $len_role = Len($ret_role)\r\n            $i_role = 0\r\n            while ($i_role < $len_role) {\r\n                var vals_role map\r\n                vals_role = $ret_role[$i_role]\r\n\r\n                var member_id int\r\n                member_id = Int(vals_role[\"member.member_id\"])\r\n\r\n                Notifications_Single_Send_str(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\",\r\n                    member_id, $sender, $icon_name, $text_header, $text_body, $page_name, $params_map)\r\n\r\n                $i_role = $i_role + 1\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Notifications_Roles_Send_str",
            "Value": "contract Notifications_Roles_Send_str {\r\n    data {\r\n        role_id int\r\n        closure_type int\r\n        sender int\r\n        icon_name string\r\n        text_header string\r\n        text_body string \"optional\"\r\n        page_name string\r\n        params_val string \"optional\"\r\n    }\r\n\r\n    conditions {}\r\n\r\n    action {\r\n        var params_map map\r\n        if (Size($params_val) > 0) {\r\n            params_map = JSONToMap($params_val)\r\n        }\r\n        Notifications_Roles_Send_map(\"role_id,closure_type,sender,icon_name,text_header,text_body,page_name,params_map\",\r\n            $role_id, $closure_type, $sender, $icon_name, $text_header, $text_body, $page_name, params_map)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Profile_Edit",
            "Value": "contract Profile_Edit {\r\n    data {\r\n        member_name string\r\n        member_image string \"image\"\r\n        information string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        $member_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\r\n\r\n        if !$member_map {\r\n            // check member_name \r\n            $member_id = DBFind(\"members\").Where(\"member_name = $\", $member_name).One(\"id\")\r\n            if $member_id {\r\n                warning \"This member name is busy. Enter another member name, please\"\r\n            }\r\n\r\n            // check avatar\r\n            if (Size($member_image) == 0) {\r\n                warning \"Avatar was not received\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $member_map {\r\n            // update avatar\r\n            if (Size($member_image) > 0) {\r\n                $binary_id = DBFind(\"binary_data\").Where(\"id = $\", Int($member_map[\"image_id\"])).One(\"id\")\r\n                if $binary_id {\r\n                    DBUpdate(\"binary_data\", Int($member_map[\"image_id\"]), \"binary_data\", $member_image)\r\n                } else {\r\n                    var image_id int\r\n                    image_id = DBInsert(\"binary_data\", \"binary_data\", $member_image)\r\n                    DBUpdate(\"members\", Int($member_map[\"id\"]), \"image_id\", image_id)\r\n                }\r\n            }\r\n\r\n            // get JSON\r\n            var member_info_json string\r\n            member_info_json = Str($member_map[\"member_info\"])\r\n\r\n            // get MAP\r\n            var member_info map\r\n            member_info = JSONToMap(member_info_json)\r\n            member_info[\"information\"] = $information\r\n\r\n            // update member\r\n            DBUpdate(\"members\", Int($member_map[\"id\"]), \"member_info\", member_info)\r\n        } else {\r\n            // new image\r\n            var image_id int\r\n            image_id = DBInsert(\"binary_data\", \"binary_data\", $member_image)\r\n\r\n            // new information\r\n            var member_info map\r\n            member_info[\"information\"] = $information\r\n\r\n            // insert member\r\n            DBInsert(\"members\", \"id,member_name,image_id,member_info\", $key_id, $member_name, image_id, member_info)\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "RoleConditions",
            "Value": "contract RoleConditions {\r\n    data{\r\n        role string\r\n    }\r\n    conditions {\r\n        $assigned_id = DBFind(\"roles_assign\").Where(\"role_name=? and member_id=? and delete=0\", $role, $key_id).One(\"id\")\r\n\t\tif ($assigned_id == nil){\r\n            warning Sprintf(\"This action allowed only for role: %v\", $role)\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Roles_Assign",
            "Value": "contract Roles_Assign {\r\n    data {\r\n        role_id int\r\n        member_id int\r\n    }\r\n\r\n    conditions {\r\n        $role_map = DBFind(\"roles\").Where(\"id = $\", $role_id).Row()\r\n        $member_map = DBFind(\"members\").Where(\"id = $\", $member_id).Row()\r\n        $appointer_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\r\n\r\n        if !$role_map {\r\n            warning \"Role not found\"\r\n        }\r\n        if !$member_map {\r\n            warning \"Member not found\"\r\n        }\r\n        if !$appointer_map {\r\n            warning \"Appointer not found\"\r\n        }\r\n\r\n        if (Int($role_map[\"deleted\"]) == 1) {\r\n            warning \"This role has been deleted. The appointment of members is impossible\"\r\n        }\r\n\r\n        if ((Int($role_map[\"role_type\"]) != 1) && (Int($role_map[\"role_type\"]) != 4)) {\r\n            warning \"This role is not assignable. The appointment of members is impossible\"\r\n        }\r\n\r\n        // get JSON\r\n        var creator_json string\r\n        creator_json = Str($role_map[\"creator\"])\r\n\r\n        // get MAP\r\n        var creator map\r\n        creator = JSONToMap(creator_json)\r\n\r\n        // check creator of the role\r\n        if (Int(creator[\"member_id\"]) != $key_id) {\r\n            warning \"Sorry, you are not the creator of this role. The appointment of members is impossible\"\r\n        }\r\n\r\n        $assign_id = DBFind(\"roles_participants\").Where(\"role->id=$ and member->member_id=$ and deleted=0\", $role_id, $member_id).One(\"id\")\r\n        if $assign_id {\r\n            warning \"This member has already been added\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var role map\r\n        role[\"id\"] = Str($role_map[\"id\"])\r\n        role[\"type\"] = Str($role_map[\"role_type\"])\r\n        role[\"name\"] = Str($role_map[\"role_name\"])\r\n        role[\"image_id\"] = Str($role_map[\"image_id\"])\r\n\r\n        var member map\r\n        member[\"member_id\"] = Str($member_map[\"id\"])\r\n        member[\"member_name\"] = Str($member_map[\"member_name\"])\r\n        member[\"image_id\"] = Str($member_map[\"image_id\"])\r\n\r\n        var appointed map\r\n        appointed[\"member_id\"] = Str($appointer_map[\"id\"])\r\n        appointed[\"member_name\"] = Str($appointer_map[\"member_name\"])\r\n        appointed[\"image_id\"] = Str($appointer_map[\"image_id\"])\r\n\r\n        DBInsert(\"roles_participants\", \"role,member,appointed,timestamp date_created\", role, member, appointed, $block_time)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Roles_Create",
            "Value": "contract Roles_Create {\r\n    data {\r\n        role_name string\r\n        role_type int\r\n        icon string \"image\"\r\n        company_id int \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        // check icon\r\n        if (Size($icon) == 0) {\r\n            warning \"Icon was not received\"\r\n        }\r\n\r\n        // system role\r\n        if ($role_type == 3) {\r\n            warning \"System role can not be created\"\r\n        }\r\n\r\n        // company role\r\n        if ($role_type == 4) {\r\n\r\n            // check param\r\n            if ($company_id == 0) {\r\n                warning \"On this page you can not create a role for the company. Go to the company's view page to create a role\"\r\n            }\r\n\r\n            // check creator of the company\r\n            if ($company_id != $key_id) {\r\n                warning \"Sorry, you are not the creator of this company\"\r\n            }\r\n        }\r\n\r\n        // check member\r\n        $member_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\r\n        if !$member_map {\r\n            warning \"You are not a member of the ecosystem\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        // new JSON\r\n        var creator map\r\n        creator[\"member_id\"] = Str($member_map[\"id\"])\r\n        creator[\"member_name\"] = Str($member_map[\"member_name\"])\r\n        creator[\"image_id\"] = Str($member_map[\"image_id\"])\r\n\r\n        // new icon\r\n        var image_id int\r\n        image_id = DBInsert(\"binary_data\", \"binary_data\", $icon)\r\n\r\n        // insert role\r\n        if ($role_type == 4) {\r\n            $result = DBInsert(\"roles\", \"role_name,role_type,image_id,creator,timestamp date_created,company_id\",\r\n                $role_name, $role_type, image_id, creator, $block_time, $company_id)\r\n        } else {\r\n            $result = DBInsert(\"roles\", \"role_name,role_type,image_id,creator,timestamp date_created,company_id\",\r\n                $role_name, $role_type, image_id, creator, $block_time, 0)\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Roles_Unassign",
            "Value": "contract Roles_Unassign {\r\n    data {\r\n        row_id int\r\n    }\r\n\r\n    conditions {\r\n        // check record\r\n        $assign_map = DBFind(\"roles_participants\").Where(\"id=$\", $row_id).Row()\r\n        if !$assign_map {\r\n            warning \"Participant not found\"\r\n        }\r\n\r\n        // check role\r\n        var role_json string\r\n        role_json = Str($assign_map[\"role\"])\r\n        var role map\r\n        role = JSONToMap(role_json)\r\n\r\n        $role_map = DBFind(\"roles\").Where(\"id=$\", Int(role[\"id\"])).Row()\r\n        if !$role_map[\"id\"] {\r\n            warning \"Role not found in the roles registry\"\r\n        }\r\n\r\n        // check creator of the role\r\n        var creator_json string\r\n        creator_json = Str($role_map[\"creator\"])\r\n        var creator map\r\n        creator = JSONToMap(creator_json)\r\n\r\n        if (Int(creator[\"member_id\"]) != $key_id) {\r\n            warning \"Sorry, you are not the creator of this role\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        // delete the member\r\n        DBUpdate(\"roles_participants\", $row_id, \"deleted,timestamp date_deleted\", 1, $block_time)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Roles_Del",
            "Value": "contract Roles_Del {\r\n    data {\r\n        role_id int\r\n    }\r\n\r\n    conditions {\r\n\r\n        // check role\r\n        $role_map = DBFind(\"roles\").Where(\"id=$\", $role_id).Row()\r\n        if !$role_map {\r\n            warning \"Role not found\"\r\n        }\r\n\r\n        // system role can not be deleted\r\n        if (Int($role_map[\"role_type\"]) == 3) {\r\n            warning \"System role can not be removed\"\r\n        }\r\n\r\n        // get JSON\r\n        var creator_json string\r\n        creator_json = Str($role_map[\"creator\"])\r\n\r\n        // get MAP\r\n        var creator map\r\n        creator = JSONToMap(creator_json)\r\n\r\n        // check creator of the role\r\n        if (Int(creator[\"member_id\"]) != $key_id) {\r\n            warning \"Sorry, you are not the creator of this role\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        // get the list of participants\r\n        $ret_assign = DBFind(\"roles_participants\").Columns(\"id\").Where(\"role->id = $ and deleted = $\", $role_id, 0).Order(\"id\")\r\n\r\n        // delete all participants\r\n        $len_assign = Len($ret_assign)\r\n        $i_assign = 0\r\n        while ($i_assign < $len_assign) {\r\n            $vals_assign = $ret_assign[$i_assign]\r\n            Roles_Unassign(\"row_id\", Int($vals_assign[\"id\"]))\r\n            $i_assign = $i_assign + 1\r\n        }\r\n\r\n        // delete the role\r\n        DBUpdate(\"roles\", $role_id, \"deleted,timestamp date_deleted\", 1, $block_time)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "TokenTransfer",
            "Value": "contract TokenTransfer {\r\n    data {\r\n        Amount money\r\n        Sender_AccountId int\r\n        Recipient_AccountId int\r\n\t\tComment string \"optional\"\r\n        Signature string \"optional hidden\"\r\n    }\r\n\r\n    conditions {\r\n        //check amount\r\n        if ($Amount == 0){\r\n            error \"Amount is zero\"\r\n        }\t\t\r\n\t\r\n        //check the sender\r\n        $sender = DBFind(\"keys\").Where(\"id=$\", $Sender_AccountId).One(\"id\")\r\n        if ($sender == nil){\r\n            error Sprintf(\"Sender %v is invalid\", $Sender_AccountId)\r\n        }\r\n\t\t\r\n        //check balance\r\n\t\t$sender_balance = Money(DBFind(\"keys\").Where(\"id=$\", $Sender_AccountId).One(\"amount\"))\r\n        if ($Amount > $sender_balance){\r\n            error Sprintf(\"Money is not enough %v < %v\", $sender_balance, $Amount)\r\n        }\r\n\t\t\r\n        //check the recipient\r\n\t\t$recipient = DBFind(\"keys\").Where(\"id=$\", $Recipient_AccountId).One(\"id\")\r\n\t\tif ($recipient == nil){\r\n            error Sprintf(\"Recipient %v is invalid\", $Recipient_AccountId)\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"keys\", $Sender_AccountId, \"-amount\", $Amount)\r\n        DBUpdate(\"keys\", $Recipient_AccountId, \"+amount\", $Amount)\r\n\t\tDBInsert(\"history\", \"sender_id,recipient_id,amount,comment,block_id,txhash\", $Sender_AccountId, $Recipient_AccountId, $Amount, $Comment, $block, $txhash)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "SendTokens",
            "Value": "contract SendTokens {\r\n    data {\r\n        Amount money\r\n        Recipient_Account string\r\n        Signature string \"signature:TokenTransfer\"\r\n    }\r\n\r\n    conditions {\r\n        $recipient = AddressToId($Recipient_Account)\r\n        if $recipient == 0 {\r\n            error Sprintf(\"Recipient %v is invalid\", $Recipient_Account)\r\n        }\r\n    }\r\n\r\n    action {\r\n        TokenTransfer(\"Amount,Sender_AccountId,Recipient_AccountId,Signature\", $Amount, $key_id, $recipient, $Signature)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "catalog_ecosystems_Add",
            "Value": "contract catalog_ecosystems_Add {\r\n    data {\r\n        Ecosystem_name string\r\n        Ecosystem_number int\r\n        Logo string \"image\"\r\n        Ecosystem_type int\r\n        Description string\r\n        Conditions string\r\n        Flag_free int\r\n        Vde_form_address string \"optional\"\r\n        Vde_page string \"optional\"\r\n        Web_form_address string \"optional\"\r\n        Web_page string \"optional\"\r\n        Email string \"optional\"\r\n        Phone string \"optional\"\r\n    }\r\n    conditions {\r\n\r\n        $founderParam = \"founder_account\"\r\n        $delegateParam = \"delegate_account\"\r\n        $catalogTbl = \"catalog_ecosystems\"\r\n        $meFounder = false\r\n        $meDelegate = false\r\n\r\n        if Size($Email) > 0 {\r\n            if !Contains($Email, \"@\") {\r\n                warning \"Invalid email\"\r\n            }\r\n        }\r\n\r\n        if Size($Logo) == 0 {\r\n            warning \"Required logo\"\r\n        }\r\n\r\n        $ecoExists = DBFind($catalogTbl).Where(\"ecosystem_number=? and deleted=0\", $Ecosystem_number).Row()\r\n        if $ecoExists {\r\n            info \"The ecosystem with same number already added\"\r\n        }\r\n\r\n        $founder = DBFind(\"parameters\").Where(\"name=?\", $founderParam).Ecosystem($Ecosystem_number).Row()\r\n        $meFounder = $founder[\"value\"] == $key_id\r\n\r\n        $delegate = DBFind(\"parameters\").Where(\"name=?\", $delegateParam).Ecosystem($Ecosystem_number).Row()\r\n        if $delegate {\r\n            $meDelegate = $delegate[\"value\"] == $key_id\r\n        }\r\n        if !($meFounder || $meDelegate) {\r\n            warning \"Sorry, you can not add this ecosystem\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var ecosystem_info map\r\n        ecosystem_info[\"description\"] = Str($Description)\r\n        ecosystem_info[\"conditions\"] = Str($Conditions)\r\n        ecosystem_info[\"email\"] = Str($Email)\r\n        ecosystem_info[\"phone\"] = Str($Phone)\r\n\r\n        var url_address map\r\n        url_address[\"web_page\"] = Str($Web_page)\r\n        url_address[\"web_form_address\"] = Str($Web_form_address)\r\n        url_address[\"vde_page\"] = Str($Vde_page)\r\n        url_address[\"vde_form_address\"] = Str($Vde_form_address)\r\n\r\n        var image_id int\r\n        image_id = DBInsert(\"binary_data\", \"binary_data\", $Logo)\r\n\r\n        DBInsert($catalogTbl, \"ecosystem_name,ecosystem_number,ecosystem_type,image_id,ecosystem_info,url_address,flag_free\",\r\n            $Ecosystem_name, $Ecosystem_number, $Ecosystem_type, image_id, ecosystem_info, url_address, $Flag_free)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "catalog_ecosystems_Request",
            "Value": "contract catalog_ecosystems_Request {\r\n    data {\r\n        ecosystem_num int\r\n        pub_key string\r\n        comment string \"optional\" \r\n    }\r\n\r\n    conditions {\r\n        if($ecosystem_num <= 1){\r\n            warning \"Ecosystem number was sent earlier\"\r\n        }\r\n        $table_name = Sprintf(\"%v_membership_requests\", $ecosystem_num)\r\n\r\n        $request_id = DBFind($table_name).Where(\"member_id = $\", $key_id).One(\"id\")\r\n        if ($request_id != nil) {\r\n            warning \"Request was sent earlier\"\r\n        }\r\n\r\n        if(Size($pub_key) == 0){\r\n            warning \"Public key was not received\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBInsert($table_name, \"member_id,pub_key,comment\", $key_id, $pub_key, $comment)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_UpdateDataForGraphs",
            "Value": "contract voting_UpdateDataForGraphs {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    conditions {\r\n        $voting_map = DBFind(\"votings\").Where(\"id=?\", $votingID).Row()\r\n        if !$voting_map {\r\n            warning \"Voting is not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        // get JSON\r\n        var progress_json string\r\n        progress_json = Str($voting_map[\"progress\"])\r\n\r\n        // get MAP\r\n        var progress map\r\n        progress = JSONToMap(progress_json)\r\n\r\n        $number_participants = Int(progress[\"number_participants\"]) // number of participants\r\n        $number_voters = Int(progress[\"number_voters\"]) // number of voters\r\n        $percent_voters = Int(progress[\"percent_voters\"])\r\n\r\n        // get JSON\r\n        var voting_json string\r\n        voting_json = Str($voting_map[\"voting\"])\r\n\r\n        // get MAP\r\n        var voting map\r\n        voting = JSONToMap(voting_json)\r\n\r\n        $volume = Int(voting[\"volume\"])\r\n        $quorum = Int(voting[\"quorum\"])\r\n\r\n        // get JSON\r\n        var flags_json string\r\n        flags_json = Str($voting_map[\"flags\"])\r\n\r\n        // get MAP\r\n        var flags map\r\n        flags = JSONToMap(flags_json)\r\n\r\n        //-----------------------------------------------------------------------------------\r\n\r\n        // increment count of voters\r\n        $number_voters = $number_voters + 1\r\n\r\n        // calculate the percentage of the ratio of the number of voters to the number of participants (for the graph)\r\n        $percent_voters = ($number_voters * 100) / $number_participants\r\n        if ($percent_voters > 100) {\r\n            $percent_voters = 100\r\n        }\r\n\r\n        // update progress\r\n        $percent_success = ($percent_voters * 100) / $volume\r\n        if ($percent_success > 100) {\r\n            $percent_success = 100\r\n        }\r\n\r\n        // update the flag of success\r\n        $flag_success = 0\r\n        if ($percent_success == 100) {\r\n            $flag_success = 1\r\n        }\r\n\r\n        progress[\"percent_success\"] = Str($percent_success)\r\n        progress[\"number_voters\"] = Str($number_voters)\r\n        progress[\"percent_voters\"] = Str($percent_voters)\r\n\r\n        flags[\"success\"] = Str($flag_success)\r\n\r\n        DBUpdate(\"votings\", $votingID, \"progress,flags\", progress, flags)\r\n\r\n        //if ($percent_voters >= $quorum) {\r\n        //    voting_CheckDecision(\"votingID\", $votingID)\r\n        //}\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_AcceptCandidates",
            "Value": "contract voting_AcceptCandidates {\r\n    data {\r\n        votingID int\r\n        candidateID int\r\n    }\r\n\r\n    conditions {\r\n        $voting_map = DBFind(\"votings\").Where(\"id=$\", $votingID).Row()\r\n        if !$voting_map {\r\n            warning \"Voting is not found\"\r\n        }\r\n\r\n        $subject_map = DBFind(\"votings_subject\").Where(\"voting_id=$ and subject->member_id=$\", $votingID, $candidateID).Row()\r\n        if !$subject_map {\r\n            warning \"Subject of voting is not found\"\r\n        }\r\n\r\n        $participant_id = DBFind(\"votings_participants\").Where(\"voting_id=$ and member->member_id=$\", $votingID, $key_id).One(\"id\")\r\n        if !$participant_id {\r\n            warning \"You are not a participant in this voting\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        // get JSON\r\n        var flags_json string\r\n        flags_json = Str($voting_map[\"flags\"])\r\n\r\n        // get MAP\r\n        var flags map\r\n        flags = JSONToMap(flags_json)\r\n\r\n        // if notifications have been sent, then close it\r\n        if (Int(flags[\"notifics\"]) == 1) {\r\n\r\n            $notific_id = DBFind(\"notifications\").Where(\"recipient->member_id=$ and page_name=$ and page_params->voting_id=$ and closed=$\",\r\n                $key_id, \"voting_view\", $votingID, 0).One(\"id\")\r\n\r\n            if $notific_id {\r\n                Notifications_Single_Close(\"notific_id\", Int($notific_id))\r\n            }\r\n        }\r\n\r\n        // check the decision\r\n        if (Int(flags[\"decision\"]) == 1) {\r\n            warning \"Decision was taken. Voting is now not possible\"\r\n        }\r\n\r\n        // check start-end of voting time\r\n        $voting_start = DBFind(\"votings\").Where(\"id=$ and date_started < now()\", $votingID).One(\"id\")\r\n        $voting_end = DBFind(\"votings\").Where(\"id=$ and date_ended > now()\", $votingID).One(\"id\")\r\n        if !$voting_start {\r\n            warning \"Voting has not yet begun. Try again later, please\"\r\n        }\r\n        if !$voting_end {\r\n            warning \"Voting has expired. Voting is now not possible\"\r\n        }\r\n\r\n        //-----------------------------------------------------------------------------------------------\r\n\r\n        // write the result of the voting\r\n        DBUpdate(\"votings_participants\", Int($participant_id), \"timestamp decision_date,decision\", $block_time, $candidateID)\r\n\r\n        // increment count of accept\r\n        $number_accept = Int($subject_map[\"number_accept\"])\r\n        $number_accept = $number_accept + 1\r\n        DBUpdate(\"votings_subject\", Int($subject_map[\"id\"]), \"number_accept\", $number_accept)\r\n\r\n        voting_UpdateDataForGraphs(\"votingID\", $votingID)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_CheckDecision",
            "Value": "contract voting_CheckDecision {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    conditions {\r\n        $voting_map = DBFind(\"votings\").Columns(\"voting->name,voting->type,voting->quorum,voting->type_decision,flags->success,progress->number_voters,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=? and (date_ended < now() or progress->percent_voters >= voting->quorum)\", $votingID).Row()\r\n        if !$voting_map {\r\n            warning \"Voting has not expired. Try again later, please\"\r\n        }\r\n\r\n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id=$\", $votingID).One(\"id\")\r\n        if !$subject_id {\r\n            warning \"Subject of voting is not found\"\r\n        }\r\n\r\n        $voting_name = Str($voting_map[\"voting.name\"])\r\n        $voting_type = Int($voting_map[\"voting.type\"]) //system or custom\r\n        $quorum = Int($voting_map[\"voting.quorum\"])\r\n        $type_decision = Int($voting_map[\"voting.type_decision\"])\r\n        $optional_role_id = Int($voting_map[\"optional.role_id\"])\r\n        $optional_role_vacancies = Int($voting_map[\"optional.role_vacancies\"]) // number of vacancies for the role\r\n        $number_voters = Int($voting_map[\"progress.number_voters\"]) // number of participants who have already voted\r\n        $contract_accept = Str($voting_map[\"optional.contract_accept\"])\r\n        $contract_reject = Str($voting_map[\"optional.contract_reject\"])\r\n        $param_accept = Str($voting_map[\"optional.contract_accept_params\"])\r\n        $param_reject = Str($voting_map[\"optional.contract_reject_params\"])\r\n        $flag_success = Int($voting_map[\"flags.success\"])\r\n    }\r\n\r\n    action {\r\n        // if notifications have been sent, then close it\r\n        $ret_notifics = DBFind(\"notifications\").Where(\"page_name=$ and page_params->voting_id=$ and closed=$\", \"voting_view\", $votingID, 0)\r\n        var i int\r\n        while (i < Len($ret_notifics)) {\r\n            $vals_notifics = $ret_notifics[i]\r\n            Notifications_Single_Close(\"notific_id\", Int($vals_notifics[\"id\"]))\r\n            i = i + 1\r\n        }\r\n\r\n        //if the flag of success = true(enough participants to make a decision)\r\n        if ($flag_success == 1) {\r\n            if (($type_decision == 1) || ($type_decision == 2)) {\r\n    \r\n                $number_inserts = 0 // number of candidates who have already been added(for comparison with the number of vacancies)\r\n                $flag_decision = -1 // none of the candidates has been added yet\r\n\r\n                $ret_subject = DBFind(\"votings_subject\").Columns(\"number_accept,subject->member_id,subject->member_name,subject->image_id\").Where(\"voting_id=$\", $votingID).Order(\"number_accept DESC\")\r\n                i = 0\r\n                while i < Len($ret_subject) {\r\n                    $vals_subject = $ret_subject[i]\r\n\r\n                    // if there are still vacancies\r\n                    if $number_inserts < $optional_role_vacancies {\r\n                        // calculate the percentage to compare it with the quorum\r\n                        $v_percent = Int($vals_subject[\"number_accept\"]) * 100 / $number_voters\r\n                        // if percentage >= quorum values, then this candidate must be added to the role\r\n\r\n                        if $v_percent >= $quorum {\r\n                            // get role name\r\n                            $role_map = DBFind(\"roles\").Columns(\"id,role_type,role_name,image_id\").Where(\"id=$\", $optional_role_id).Row()\r\n                            if $role_map {\r\n\r\n                                var role map\r\n                                role[\"id\"] = Str($role_map[\"id\"])\r\n                                role[\"type\"] = Str($role_map[\"role_type\"])\r\n                                role[\"name\"] = Str($role_map[\"role_name\"])\r\n                                role[\"image_id\"] = Str($role_map[\"image_id\"])\r\n\r\n                                var member map\r\n                                member[\"member_id\"] = Str($vals_subject[\"subject.member_id\"])\r\n                                member[\"member_name\"] = Str($vals_subject[\"subject.member_name\"])\r\n                                member[\"image_id\"] = Str($vals_subject[\"subject.image_id\"])\r\n\r\n                                var appointed map\r\n                                appointed[\"voting_id\"] = Str($votingID)\r\n                                appointed[\"voting_name\"] = Str($voting_name)\r\n\r\n                                // add a candidate to the role\r\n                                DBInsert(\"roles_participants\", \"role,member,appointed,timestamp date_created\", role, member, appointed, $block_time)\r\n\r\n                                // increment of the counter of candidates\r\n                                $number_inserts = $number_inserts + 1\r\n                                // if at least one of the candidates was added to the role, then the voting decision is considered successful\r\n                                $flag_decision = 1\r\n                            }\r\n                        }\r\n                    }\r\n                    i = i + 1\r\n                }\r\n\r\n                DBUpdate(\"votings\", $votingID, \"flags->decision\", $flag_decision)\r\n\r\n                // starting optional contract\r\n                if ($flag_decision == 1) {\r\n                    if (Size($contract_accept) > 0) {\r\n                        var params map\r\n                        if (Size($param_accept) > 0) {\r\n                            params = JSONToMap($param_accept)\r\n                        }\r\n                        CallContract($contract_accept, params)\r\n                    }\r\n                } else {\r\n                    if (Size($contract_reject) > 0) {\r\n                        var params map\r\n                        if (Size($param_reject) > 0) {\r\n                            params = JSONToMap($param_reject)\r\n                        }\r\n                        CallContract($contract_reject, params)\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            if ($type_decision == 3) {\r\n                $subject_map = DBFind(\"votings_subject\").Columns(\"id,number_accept\").Where(\"voting_id=$\", $votingID).Row()\r\n                if $subject_map {\r\n                    $number_accept = Int($subject_map[\"number_accept\"])\r\n\r\n                    // calculate the percentage to compare it with the quorum\r\n                    $v_percent = $number_accept * 100 / $number_voters\r\n\r\n                    // if percentage >= quorum values, then this document will be approved\r\n                    if ($v_percent >= $quorum) {\r\n                        $flag_decision = 1\r\n                    }\r\n                    // otherwise the document will be rejected\r\n                    else {\r\n                        $flag_decision = -1\r\n                    }\r\n                    \r\n                    DBUpdate(\"votings\", $votingID, \"flags->decision\", $flag_decision)\r\n\r\n                    // starting optional contract\r\n                    if ($flag_decision == 1) {\r\n                        if (Size($contract_accept) > 0) {\r\n                            var params map\r\n                            if (Size($param_accept) > 0) {\r\n                                params = JSONToMap($param_accept)\r\n                            }\r\n                            CallContract($contract_accept, params)\r\n                        }\r\n                    } else {\r\n                        if (Size($contract_reject) > 0) {\r\n                            var params map\r\n                            if (Size($param_reject) > 0) {\r\n                                params = JSONToMap($param_reject)\r\n                            }\r\n                            CallContract($contract_reject, params)\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            if ($type_decision == 4) {\r\n                $subject_map = DBFind(\"votings_subject\").Columns(\"id,number_accept,subject->table,subject->table_id,subject->column,subject->column_value\").Where(\"voting_id=$\", $votingID).Row()\r\n                if $subject_map {\r\n                    $number_accept = Int($subject_map[\"number_accept\"])\r\n\r\n                    // calculate the percentage to compare it with the quorum\r\n                    $v_percent = $number_accept * 100 / $number_voters\r\n\r\n                    // if percentage >= quorum values, then this document will be approved\r\n                    if ($v_percent >= $quorum) {\r\n                        $flag_decision = 1\r\n\r\n                        $decisionTable = Str($subject_map[\"subject.table\"])\r\n                        $decisionId = Int($subject_map[\"subject.table_id\"])\r\n                        $decisionColumn = Str($subject_map[\"subject.column\"])\r\n                        $decisionValue = Str($subject_map[\"subject.column_value\"])\r\n\r\n                        // type of voting - custom\r\n                        if ($voting_type == 1) {\r\n                            // ALWAYS CHECK THE PERMISSION\r\n                            DBUpdate($decisionTable, $decisionId, $decisionColumn, $decisionValue)\r\n                        }\r\n\r\n                        // type of voting - system\r\n                        if ($voting_type == 2) {\r\n                            DBUpdateSysParam($decisionColumn, $decisionValue, \"\")\r\n                        }\r\n                    }\r\n                    // otherwise the document will be rejected\r\n                    else {\r\n                        $flag_decision = -1\r\n                    }\r\n\r\n                    DBUpdate(\"votings\", $votingID, \"flags->decision\", $flag_decision)\r\n\r\n                    // starting optional contract\r\n                    if ($flag_decision == 1) {\r\n                        if (Size($contract_accept) > 0) {\r\n                            var params map\r\n                            if (Size($param_accept) > 0) {\r\n                                params = JSONToMap($param_accept)\r\n                            }\r\n                            CallContract($contract_accept, params)\r\n                        }\r\n                    } else {\r\n                        if (Size($contract_reject) > 0) {\r\n                            var params map\r\n                            if (Size($param_reject) > 0) {\r\n                                params = JSONToMap($param_reject)\r\n                            }\r\n                            CallContract($contract_reject, params)\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            if ($type_decision == 5) {\r\n                $subject_map = DBFind(\"votings_subject\").Columns(\"id,number_accept,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Where(\"voting_id=$\", $votingID).Row()\r\n                if $subject_map {\r\n                    $number_accept = Int($subject_map[\"number_accept\"])\r\n\r\n                    // calculate the percentage to compare it with the quorum\r\n                    $v_percent = $number_accept * 100 / $number_voters\r\n\r\n                    $con_accept = Str($subject_map[\"subject.contract_accept\"])\r\n                    $con_reject = Str($subject_map[\"subject.contract_reject\"])\r\n                    $param_accept = Str($subject_map[\"subject.contract_accept_params\"])\r\n                    $param_reject = Str($subject_map[\"subject.contract_reject_params\"])\r\n\r\n                    // if percentage >= quorum values, then this document will be approved\r\n                    if ($v_percent >= $quorum) {\r\n                        $flag_decision = 1\r\n\r\n                        var params map\r\n                        if (Size($param_accept) > 0) {\r\n                            params = JSONToMap($param_accept)\r\n                        }\r\n                        CallContract($con_accept, params)\r\n                    }\r\n                    // otherwise the document will be rejected\r\n                    else {\r\n                        $flag_decision = -1\r\n\r\n                        var params map\r\n                        if (Size($param_reject) > 0) {\r\n                            params = JSONToMap($param_reject)\r\n                        }\r\n                        CallContract($con_reject, params)\r\n                    }\r\n                }\r\n\r\n                DBUpdate(\"votings\", $votingID, \"flags->decision\", $flag_decision)\r\n            }\r\n        }\r\n        // decision can not be made(not enough participants to make a decision)\r\n        else {\r\n            DBUpdate(\"votings\", $votingID, \"flags->decision\", -2)\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_Invite",
            "Value": "contract voting_Invite {\r\n    data {\r\n        votingID int\r\n        var_id int //0, member_id, role_id\r\n    }\r\n\r\n    conditions {\r\n        $voting_map = DBFind(\"votings\").Where(\"id=$ and date_ended > now()\", $votingID).Row()\r\n        if !$voting_map {\r\n            warning \"Voting has expired. Can not add new participants\"\r\n        }\r\n\r\n        // get JSON\r\n        var voting_json string\r\n        voting_json = Str($voting_map[\"voting\"])\r\n\r\n        // get MAP\r\n        var voting map\r\n        voting = JSONToMap(voting_json)\r\n\r\n        $type_participants = Int(voting[\"type_participants\"])\r\n        $type_voting = Int(voting[\"type\"])\r\n\r\n        // get JSON\r\n        var progress_json string\r\n        progress_json = Str($voting_map[\"progress\"])\r\n\r\n        // get MAP\r\n        var progress map\r\n        progress = JSONToMap(progress_json)\r\n\r\n        $number_participants = Int(progress[\"number_participants\"])\r\n\r\n        if (($number_participants > 1) && ($type_voting == 2)) {\r\n            warning \"This vote is a system. Add new participants are not possible\"\r\n        }\r\n\r\n        if ($type_participants == 2) { //list of candidates\r\n            $participant_id = DBFind(\"votings_participants\").Where(\"voting_id=$ and member->member_id=$\", $votingID, $var_id).One(\"id\")\r\n            if $participant_id {\r\n                warning \"Member has already been added before\"\r\n            }\r\n        }\r\n\r\n        if ($type_participants == 3) { //list of candidates\r\n            $participant_id = DBFind(\"votings_participants\").Where(\"voting_id=$\", $votingID).One(\"id\")\r\n            if $participant_id {\r\n                warning \"Voting participants have already been added before\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if ($type_participants == 1) {\r\n            $ret_member = DBFind(\"members\").Where(\"id != $\", 0).Order(\"id\")\r\n            $i = 0\r\n            while ($i < Len($ret_member)) {\r\n                $vals_member = $ret_member[$i]\r\n\r\n                var member map\r\n                member[\"member_id\"] = Str($vals_member[\"id\"])\r\n                member[\"member_name\"] = Str($vals_member[\"member_name\"])\r\n                member[\"image_id\"] = Str($vals_member[\"image_id\"])\r\n\r\n                DBInsert(\"votings_participants\", \"voting_id,member\", $votingID, member)\r\n                $number_participants = $number_participants + 1\r\n                $i = $i + 1\r\n            }\r\n        }\r\n\r\n        if ($type_participants == 2) {\r\n            $member_map = DBFind(\"members\").Where(\"id = $\", $var_id).Row()\r\n            if $member_map {\r\n\r\n                var member map\r\n                member[\"member_id\"] = Str($member_map[\"id\"])\r\n                member[\"member_name\"] = Str($member_map[\"member_name\"])\r\n                member[\"image_id\"] = Str($member_map[\"image_id\"])\r\n\r\n                DBInsert(\"votings_participants\", \"voting_id,member\", $votingID, member)\r\n                $number_participants = $number_participants + 1\r\n            }\r\n        }\r\n\r\n        if ($type_participants == 3) {\r\n            $ret_role = DBFind(\"roles_participants\").Where(\"role->id=$ and deleted=0\", $var_id).Order(\"id\")\r\n            $i = 0\r\n            while ($i < Len($ret_role)) {\r\n                $vals_role = $ret_role[$i]\r\n\r\n                DBInsert(\"votings_participants\", \"voting_id,member\", $votingID, Str($vals_role[\"member\"]))\r\n                $number_participants = $number_participants + 1\r\n                $i = $i + 1\r\n            }\r\n        }\r\n\r\n        // get JSON\r\n        var progress_json string\r\n        progress_json = Str($voting_map[\"progress\"])\r\n\r\n        // get MAP\r\n        var progress map\r\n        progress = JSONToMap(progress_json)\r\n\r\n\t\tprogress[\"number_participants\"] = Str($number_participants)\r\n        DBUpdate(\"votings\", $votingID, \"progress\", progress)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_Delete",
            "Value": "contract voting_Delete {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    conditions {\r\n        $voting_map = DBFind(\"votings\").Where(\"id=? and date_started > now()\", $votingID).Row()\r\n        if !$voting_map {\r\n            warning \"Voting already started. Delete voting impossible\"\r\n        }\r\n\r\n        // get JSON\r\n        var creator_json string\r\n        creator_json = Str($voting_map[\"creator\"])\r\n\r\n        // get MAP\r\n        var creator map\r\n        creator = JSONToMap(creator_json)\r\n\r\n        if (Int(creator[\"member_id\"]) != $key_id) {\r\n            warning \"You are not the creator of the voting\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"votings\", $votingID, \"deleted\", 1)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_CreateNew",
            "Value": "contract voting_CreateNew {\r\n    data {\r\n        voting_name string\r\n        voting_type int\r\n        type_participants int\r\n        type_decision int\r\n\r\n        volume int\r\n        quorum int\r\n\r\n        now_date string \"date\"\r\n        start_time string \"date\"\r\n        start_date string \"date\"\r\n        end_date string \"date\"\r\n        end_time string \"date\"\r\n\r\n        description string \"optional\"\r\n    }\r\n\r\n    func conditions {\r\n        $date_started = $start_date + \" \" + $start_time\r\n        $date_ended = $end_date + \" \" + $end_time\r\n        var m string\r\n\r\n        if ($now_date >= $date_started) {\r\n            m = Sprintf(\"Voting start date [%v] is less than the current date [%v]\", $date_started, $now_date)\r\n            warning m\r\n        }\r\n\r\n        if ($date_started >= $date_ended) {\r\n            m = Sprintf(\"Voting end date [%v] is less than the start date [%v]\", $date_ended, $date_started)\r\n            warning m\r\n        }\r\n\r\n        if (($volume < 50) || ($volume > 100)) {\r\n            m = Sprintf(\"Volume [%v] should be in the range from 50 to 100\", $volume)\r\n            warning m\r\n        }\r\n\r\n        if (($quorum < 5) || ($quorum > 100)) {\r\n            m = Sprintf(\"Quorum [%v] should be in the range from 5 to 100\", $quorum)\r\n            warning m\r\n        }\r\n\r\n        $member_map = DBFind(\"members\").Where(\"id=$\", $key_id).Row()\r\n        if !$member_map {\r\n            warning \"You are not a member of the ecosystem\"\r\n        }\r\n    }\r\n\r\n    func action {\r\n        var voting map\r\n        voting[\"name\"] = Str($voting_name)\r\n        voting[\"type\"] = Str($voting_type)\r\n        voting[\"description\"] = Str($description)\r\n        voting[\"type_participants\"] = Str($type_participants)\r\n        voting[\"type_decision\"] = Str($type_decision)\r\n        voting[\"volume\"] = Str($volume)\r\n        voting[\"quorum\"] = Str($quorum)\r\n\r\n        var progress map\r\n        progress[\"number_participants\"] = \"0\"\r\n        progress[\"number_voters\"] = \"0\"\r\n        progress[\"percent_success\"] = \"0\"\r\n        progress[\"percent_voters\"] = \"0\"\r\n\r\n        var flags map\r\n        flags[\"success\"] = \"0\"\r\n        flags[\"decision\"] = \"0\"\r\n        flags[\"full_data\"] = \"0\"\r\n        flags[\"notifics\"] = \"0\"\r\n\r\n        var creator map\r\n        creator[\"member_id\"] = Str($member_map[\"id\"])\r\n        creator[\"member_name\"] = Str($member_map[\"member_name\"])\r\n        creator[\"image_id\"] = Str($member_map[\"image_id\"])\r\n\r\n        $voting_id = DBInsert(\"votings\", \"voting,progress,flags,creator,date_started,date_ended\",\r\n            voting, progress, flags, creator, $date_started, $date_ended)\r\n\r\n        // if all members are voting participants\r\n        if ($type_participants == 1) {\r\n            voting_Invite(\"votingID,var_id\", $voting_id, 0)\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_AcceptDecision",
            "Value": "contract voting_AcceptDecision {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    conditions {\r\n        $voting_map = DBFind(\"votings\").Where(\"id=$\", $votingID).Row()\r\n        if !$voting_map {\r\n            warning \"Voting is not found\"\r\n        }\r\n\r\n        $subject_map = DBFind(\"votings_subject\").Where(\"voting_id=$\", $votingID).Row()\r\n        if !$subject_map {\r\n            warning \"Subject of voting is not found\"\r\n        }\r\n\r\n        $participant_id = DBFind(\"votings_participants\").Where(\"voting_id=$ and member->member_id=$\", $votingID, $key_id).One(\"id\")\r\n        if !$participant_id {\r\n            warning \"You are not a participant in this voting\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        // get JSON\r\n        var flags_json string\r\n        flags_json = Str($voting_map[\"flags\"])\r\n\r\n        // get MAP\r\n        var flags map\r\n        flags = JSONToMap(flags_json)\r\n\r\n        // if notifications have been sent, then close it\r\n        if (Int(flags[\"notifics\"]) == 1) {\r\n\r\n            $notific_id = DBFind(\"notifications\").Where(\"recipient->member_id=$ and page_name=$ and page_params->voting_id=$ and closed=$\",\r\n                $key_id, \"voting_view\", $votingID, 0).One(\"id\")\r\n\r\n            if $notific_id {\r\n                Notifications_Single_Close(\"notific_id\", Int($notific_id))\r\n            }\r\n        }\r\n\r\n        // check the decision\r\n        if (Int(flags[\"decision\"]) == 1) {\r\n            warning \"Decision was taken. Voting is now not possible\"\r\n        }\r\n\r\n        // check start-end of voting time\r\n        $voting_start = DBFind(\"votings\").Where(\"id=$ and date_started < now()\", $votingID).One(\"id\")\r\n        $voting_end = DBFind(\"votings\").Where(\"id=$ and date_ended > now()\", $votingID).One(\"id\")\r\n        if !$voting_start {\r\n            warning \"Voting has not yet begun. Try again later, please\"\r\n        }\r\n        if !$voting_end {\r\n            warning \"Voting has expired. Voting is now not possible\"\r\n        }\r\n\r\n        //-----------------------------------------------------------------------------------------------\r\n\r\n        // write the result of the voting\r\n        DBUpdate(\"votings_participants\", Int($participant_id), \"timestamp decision_date,decision\", $block_time, 1)\r\n\r\n\t\t// increment count of accept\r\n        $number_accept = Int($subject_map[\"number_accept\"])\r\n        $number_accept = $number_accept + 1\r\n        DBUpdate(\"votings_subject\", Int($subject_map[\"id\"]), \"number_accept\", $number_accept)\r\n\r\n        voting_UpdateDataForGraphs(\"votingID\", $votingID)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SendNotifics",
            "Value": "contract voting_SendNotifics {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    conditions {\r\n        $voting_id = DBFind(\"votings\").Where(\"id=$ and date_ended > now()\", $votingID).One(\"id\")\r\n        if !$voting_id {\r\n            warning \"Voting has expired. Notifications can not be sent\"\r\n        }\r\n\r\n        $voting_map = DBFind(\"votings\").Where(\"id=$ and date_started < now()\", $votingID).Row()\r\n        if !$voting_map {\r\n            warning \"Voting has not yet begun. Try again later, please\"\r\n        }\r\n\r\n        // get JSON\r\n        var creator_json string\r\n        creator_json = Str($voting_map[\"creator\"])\r\n\r\n        // get MAP\r\n        var creator map\r\n        creator = JSONToMap(creator_json)\r\n\r\n        if (Int(creator[\"member_id\"]) != $key_id) {\r\n            warning \"You are not the creator of the voting\"\r\n        }\r\n\r\n        // get JSON\r\n        var flags_json string\r\n        flags_json = Str($voting_map[\"flags\"])\r\n\r\n        // get MAP\r\n        var flags map\r\n        flags = JSONToMap(flags_json)\r\n\r\n        if (Int(flags[\"notifics\"]) == 1) {\r\n            warning \"Notifications have already been sent\"\r\n        }\r\n\r\n        // get JSON\r\n        var voting_json string\r\n        voting_json = Str($voting_map[\"voting\"])\r\n\r\n        // get MAP\r\n        var voting map\r\n        voting = JSONToMap(voting_json)\r\n\r\n        $voting_name = Str(voting[\"name\"])\r\n    }\r\n\r\n    action {\r\n        $ret_participants = DBFind(\"votings_participants\").Where(\"voting_id=$ and decision=$\", $votingID, 0)\r\n        $i = 0\r\n        while ($i < Len($ret_participants)) {\r\n            $vals_participants = $ret_participants[$i]\r\n\r\n\t\t\t// get JSON\r\n\t\t\tvar member_json string\r\n\t\t\tmember_json = Str($vals_participants[\"member\"])\r\n\r\n\t\t\t// get MAP\r\n\t\t\tvar member map\r\n\t\t\tmember = JSONToMap(member_json)\r\n\r\n            $recipient = Int(member[\"member_id\"])\r\n\r\n            var params map\r\n            params[\"voting_id\"] = Str($votingID)\r\n\r\n            Notifications_Single_Send_map(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\",\r\n                $recipient, 1, \"fa-check\", \"Voting\", $voting_name, \"voting_view\", params)\r\n\r\n            $i = $i + 1\r\n        }\r\n\r\n        // get JSON\r\n        var flags_json string\r\n        flags_json = Str($voting_map[\"flags\"])\r\n\r\n        // get MAP\r\n        var flags map\r\n        flags = JSONToMap(flags_json)\r\n\r\n\t\tflags[\"notifics\"] = \"1\"\r\n        DBUpdate(\"votings\", $votingID, \"flags\", flags)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SubjectCandidates",
            "Value": "contract voting_SubjectCandidates {\r\n    data {\r\n        votingID int\r\n        memberID int\r\n    }\r\n\r\n    conditions {\r\n        $voting_map = DBFind(\"votings\").Where(\"id=? and date_started > now()\", $votingID).Row()\r\n        if !$voting_map {\r\n            warning \"Voting already started. Can not edit document\"\r\n        }\r\n\r\n        // get JSON\r\n        var flags_json string\r\n        flags_json = Str($voting_map[\"flags\"])\r\n\r\n        // get MAP\r\n        var flags map\r\n        flags = JSONToMap(flags_json)\r\n\r\n        // get JSON\r\n        var voting_json string\r\n        voting_json = Str($voting_map[\"voting\"])\r\n\r\n        // get MAP\r\n        var voting map\r\n        voting = JSONToMap(voting_json)\r\n\r\n        if (Int(flags[\"full_data\"]) == 1 && Int(voting[\"type\"]) == 2) {\r\n            warning \"This vote is a system. Change settings not allowed\"\r\n        }\r\n\r\n        if ($memberID == 0) {\r\n            $memberID = $key_id\r\n        }\r\n\r\n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id=$ and subject->member_id=$\", $votingID, $memberID).One(\"id\")\r\n        if $subject_id {\r\n            warning \"This candidature for this role has already been added before\"\r\n        }\r\n\r\n        $member_map = DBFind(\"members\").Where(\"id = $\", $memberID).Row()\r\n        if !$member_map {\r\n            warning \"Member not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n\r\n        var subject map\r\n        subject[\"member_id\"] = Str($member_map[\"id\"])\r\n        subject[\"member_name\"] = Str($member_map[\"member_name\"])\r\n        subject[\"image_id\"] = Str($member_map[\"image_id\"])\r\n\r\n        DBInsert(\"votings_subject\", \"voting_id,subject\", $votingID, subject)\r\n\r\n        // get JSON\r\n        var optional_json string\r\n        optional_json = Str($voting_map[\"optional\"])\r\n\r\n        // get MAP\r\n        var optional map\r\n        optional = JSONToMap(optional_json)\r\n\r\n\t\tvar number_candidates int\r\n\t\tif optional[\"number_candidates\"]{\r\n\t\t\tnumber_candidates = Int(optional[\"number_candidates\"])\r\n\t\t\tnumber_candidates = number_candidates + 1\r\n\t\t} else {\r\n\t\t\tnumber_candidates = 1\r\n\t\t}\r\n\r\n\t\toptional[\"number_candidates\"] = Str(number_candidates)\r\n        DBUpdate(\"votings\", $votingID, \"optional\", optional)\r\n\r\n        //voting_SubjectCheckFulldata(\"votingID\", $votingID)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SubjectCheckFulldata",
            "Value": "contract voting_SubjectCheckFulldata {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    conditions {\r\n        $voting_map = DBFind(\"votings\").Where(\"id=?\", $votingID).Row()\r\n        if !$voting_map {\r\n            warning \"Voting is not found\"\r\n        }\r\n\r\n        // get JSON\r\n        var voting_json string\r\n        voting_json = Str($voting_map[\"voting\"])\r\n\r\n        // get MAP\r\n        var voting map\r\n        voting = JSONToMap(voting_json)\r\n\r\n        $type_decision = Int(voting[\"type_decision\"])\r\n\r\n\r\n        $subject_map = DBFind(\"votings_subject\").Where(\"voting_id=?\", $votingID).Row()\r\n        if !$subject_map {\r\n            warning \"Subject of voting is not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        if (($type_decision == 1) || ($type_decision == 2)) {\r\n            // get JSON\r\n            var optional_json string\r\n            optional_json = Str($voting_map[\"optional\"])\r\n\r\n            // get MAP\r\n            var optional map\r\n            optional = JSONToMap(optional_json)\r\n\r\n            if ((Int(optional[\"number_candidates\"]) > 0) && (Int(optional[\"role_vacancies\"]) > 0) && (Int(optional[\"role_id\"]) > 0)) {\r\n                // get JSON\r\n                var flags_json string\r\n                flags_json = Str($voting_map[\"flags\"])\r\n\r\n                // get MAP\r\n                var flags map\r\n                flags = JSONToMap(flags_json)\r\n\r\n                flags[\"full_data\"] = \"1\"\r\n                DBUpdate(\"votings\", $votingID, \"flags\", flags)\r\n            }\r\n        }\r\n\r\n        if ($type_decision == 3) {\r\n            // get JSON\r\n            var subject_json string\r\n            subject_json = Str($subject_map[\"subject\"])\r\n\r\n            // get MAP\r\n            var subject map\r\n            subject = JSONToMap(subject_json)\r\n\r\n            if (Str(subject[\"text\"]) != \"\" && Str(subject[\"hash\"]) != \"\") {\r\n                // get JSON\r\n                var flags_json string\r\n                flags_json = Str($voting_map[\"flags\"])\r\n\r\n                // get MAP\r\n                var flags map\r\n                flags = JSONToMap(flags_json)\r\n\r\n                flags[\"full_data\"] = \"1\"\r\n                DBUpdate(\"votings\", $votingID, \"flags\", flags)\r\n            }\r\n        }\r\n\r\n        if ($type_decision == 4) {\r\n            // get JSON\r\n            var subject_json string\r\n            subject_json = Str($subject_map[\"subject\"])\r\n\r\n            // get MAP\r\n            var subject map\r\n            subject = JSONToMap(subject_json)\r\n\r\n            if (Str(subject[\"table\"]) != \"\" && Str(subject[\"table_id\"]) != \"\" &&\r\n                Str(subject[\"column\"]) != \"\" && Str(subject[\"column_value\"]) != \"\") {\r\n\r\n                // get JSON\r\n                var flags_json string\r\n                flags_json = Str($voting_map[\"flags\"])\r\n\r\n                // get MAP\r\n                var flags map\r\n                flags = JSONToMap(flags_json)\r\n\r\n                flags[\"full_data\"] = \"1\"\r\n                DBUpdate(\"votings\", $votingID, \"flags\", flags)\r\n            }\r\n        }\r\n\r\n        if ($type_decision == 5) {\r\n            // get JSON\r\n            var subject_json string\r\n            subject_json = Str($subject_map[\"subject\"])\r\n\r\n            // get MAP\r\n            var subject map\r\n            subject = JSONToMap(subject_json)\r\n\r\n            if (Str(subject[\"contract_accept\"]) != \"\" && Str(subject[\"contract_reject\"]) != \"\") {\r\n                // get JSON\r\n                var flags_json string\r\n                flags_json = Str($voting_map[\"flags\"])\r\n\r\n                // get MAP\r\n                var flags map\r\n                flags = JSONToMap(flags_json)\r\n\r\n                flags[\"full_data\"] = \"1\"\r\n                DBUpdate(\"votings\", $votingID, \"flags\", flags)\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SubjectContract",
            "Value": "contract voting_SubjectContract {\r\n    data {\r\n        votingID int\r\n\r\n        contract_accept string\r\n        contract_accept_params string \"optional\"\r\n\r\n        contract_reject string\r\n        contract_reject_params string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        $voting_map = DBFind(\"votings\").Where(\"id=? and date_started > now()\", $votingID).Row()\r\n        if !$voting_map {\r\n            warning \"Voting already started. Can not edit document\"\r\n        }\r\n\r\n        // get JSON\r\n        var flags_json string\r\n        flags_json = Str($voting_map[\"flags\"])\r\n\r\n        // get MAP\r\n        var flags map\r\n        flags = JSONToMap(flags_json)\r\n\r\n        // get JSON\r\n        var voting_json string\r\n        voting_json = Str($voting_map[\"voting\"])\r\n\r\n        // get MAP\r\n        var voting map\r\n        voting = JSONToMap(voting_json)\r\n\r\n        if (Int(flags[\"full_data\"]) == 1 && Int(voting[\"type\"]) == 2) {\r\n            warning \"This vote is a system. Change settings not allowed\"\r\n        }\r\n    }\r\n\r\n    action {\r\n    \r\n        var accept_params_map map\r\n        if (Size($contract_accept_params) > 0) {\r\n            accept_params_map = JSONToMap($contract_accept_params)\r\n        }\r\n\r\n        var reject_params_map map\r\n        if (Size($contract_reject_params) > 0) {\r\n            reject_params_map = JSONToMap($contract_reject_params)\r\n        }\r\n\r\n        var subject map\r\n        subject[\"contract_accept\"] = Str($contract_accept)\r\n        subject[\"contract_accept_params\"] = accept_params_map\r\n        subject[\"contract_reject\"] = Str($contract_reject)\r\n        subject[\"contract_reject_params\"] = reject_params_map\r\n\r\n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id = $\", $votingID).One(\"id\")\r\n        if !$subject_id {\r\n            DBInsert(\"votings_subject\", \"voting_id,subject\", $votingID, subject)\r\n        } else {\r\n            DBUpdate(\"votings_subject\", Int($subject_id), \"subject\", subject)\r\n        }\r\n\r\n        voting_SubjectCheckFulldata(\"votingID\", $votingID)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SubjectDocument",
            "Value": "contract voting_SubjectDocument {\r\n    data {\r\n        votingID int\r\n        text_document string\r\n\r\n        contract_accept string \"optional\"\r\n        contract_accept_params string \"optional\"\r\n        contract_reject string \"optional\"\r\n        contract_reject_params string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        $voting_map = DBFind(\"votings\").Where(\"id=? and date_started > now()\", $votingID).Row()\r\n        if !$voting_map {\r\n            warning \"Voting already started. Can not edit document\"\r\n        }\r\n\r\n        // get JSON\r\n        var flags_json string\r\n        flags_json = Str($voting_map[\"flags\"])\r\n\r\n        // get MAP\r\n        var flags map\r\n        flags = JSONToMap(flags_json)\r\n\r\n        // get JSON\r\n        var voting_json string\r\n        voting_json = Str($voting_map[\"voting\"])\r\n\r\n        // get MAP\r\n        var voting map\r\n        voting = JSONToMap(voting_json)\r\n\r\n        if (Int(flags[\"full_data\"]) == 1 && Int(voting[\"type\"]) == 2) {\r\n            warning \"This vote is a system. Change settings not allowed\"\r\n        }\r\n\r\n        $hash = Sha256($text_document)\r\n    }\r\n\r\n    action {\r\n        var subject map\r\n        subject[\"text\"] = Str($text_document)\r\n        subject[\"hash\"] = Str($hash)\r\n\r\n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id = $\", $votingID).One(\"id\")\r\n        if !$subject_id {\r\n            DBInsert(\"votings_subject\", \"voting_id,subject\", $votingID, subject)\r\n        } else {\r\n            DBUpdate(\"votings_subject\", Int($subject_id), \"subject\", subject)\r\n        }\r\n\r\n        var accept_params_map map\r\n        if (Size($contract_accept_params) > 0) {\r\n            accept_params_map = JSONToMap($contract_accept_params)\r\n        }\r\n\r\n        var reject_params_map map\r\n        if (Size($contract_reject_params) > 0) {\r\n            reject_params_map = JSONToMap($contract_reject_params)\r\n        }\r\n\r\n        // get JSON\r\n        var optional_json string\r\n        optional_json = Str($voting_map[\"optional\"])\r\n\r\n        // get MAP\r\n        var optional map\r\n        optional = JSONToMap(optional_json)\r\n\r\n        optional[\"contract_accept\"] = Str($contract_accept)\r\n        optional[\"contract_accept_params\"] = accept_params_map\r\n        optional[\"contract_reject\"] = Str($contract_reject)\r\n        optional[\"contract_reject_params\"] = reject_params_map\r\n\r\n        DBUpdate(\"votings\", $votingID, \"optional\", optional)\r\n\r\n        voting_SubjectCheckFulldata(\"votingID\", $votingID)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SubjectFormal",
            "Value": "contract voting_SubjectFormal {\r\n    data {\r\n        votingID int\r\n\r\n        description string \"optional\"\r\n        table_to_written string\r\n        row_id string\r\n        column_name string\r\n        written_value string\r\n\r\n        contract_accept string \"optional\"\r\n        contract_accept_params string \"optional\"\r\n        contract_reject string \"optional\"\r\n        contract_reject_params string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        $voting_map = DBFind(\"votings\").Where(\"id=? and date_started > now()\", $votingID).Row()\r\n        if !$voting_map {\r\n            warning \"Voting already started. Can not edit document\"\r\n        }\r\n\r\n        // get JSON\r\n        var flags_json string\r\n        flags_json = Str($voting_map[\"flags\"])\r\n\r\n        // get MAP\r\n        var flags map\r\n        flags = JSONToMap(flags_json)\r\n\r\n        // get JSON\r\n        var voting_json string\r\n        voting_json = Str($voting_map[\"voting\"])\r\n\r\n        // get MAP\r\n        var voting map\r\n        voting = JSONToMap(voting_json)\r\n\r\n        if (Int(flags[\"full_data\"]) == 1 && Int(voting[\"type\"]) == 2) {\r\n            warning \"This vote is a system. Change settings not allowed\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var subject map\r\n        subject[\"description\"] = Str($description)\r\n        subject[\"table\"] = Str($table_to_written)\r\n        subject[\"table_id\"] = Str($row_id)\r\n        subject[\"column\"] = Str($column_name)\r\n        subject[\"column_value\"] = Str($written_value)\r\n\r\n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id = $\", $votingID).One(\"id\")\r\n        if !$subject_id {\r\n            DBInsert(\"votings_subject\", \"voting_id,subject\", $votingID, subject)\r\n        } else {\r\n            DBUpdate(\"votings_subject\", Int($subject_id), \"subject\", subject)\r\n        }\r\n\r\n        var accept_params_map map\r\n        if (Size($contract_accept_params) > 0) {\r\n            accept_params_map = JSONToMap($contract_accept_params)\r\n        }\r\n\r\n        var reject_params_map map\r\n        if (Size($contract_reject_params) > 0) {\r\n            reject_params_map = JSONToMap($contract_reject_params)\r\n        }\r\n\r\n        // get JSON\r\n        var optional_json string\r\n        optional_json = Str($voting_map[\"optional\"])\r\n\r\n        // get MAP\r\n        var optional map\r\n        optional = JSONToMap(optional_json)\r\n\r\n        optional[\"contract_accept\"] = Str($contract_accept)\r\n        optional[\"contract_accept_params\"] = accept_params_map\r\n        optional[\"contract_reject\"] = Str($contract_reject)\r\n        optional[\"contract_reject_params\"] = reject_params_map\r\n\r\n        DBUpdate(\"votings\", $votingID, \"optional\", optional)\r\n\r\n        voting_SubjectCheckFulldata(\"votingID\", $votingID)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SubjectSettings",
            "Value": "contract voting_SubjectSettings {\r\n    data {\r\n        votingID int\r\n\r\n        roleID int\r\n        vacancies int\r\n\r\n        contract_accept string \"optional\"\r\n        contract_accept_params string \"optional\"\r\n        contract_reject string \"optional\"\r\n        contract_reject_params string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        if ($vacancies < 1) {\r\n            warning \"Number of vacancies can not be less than 1\"\r\n        }\r\n\r\n        $voting_map = DBFind(\"votings\").Where(\"id=? and date_started > now()\", $votingID).Row()\r\n        if !$voting_map {\r\n            warning \"Voting already started. Can not edit document\"\r\n        }\r\n\r\n        // get JSON\r\n        var flags_json string\r\n        flags_json = Str($voting_map[\"flags\"])\r\n\r\n        // get MAP\r\n        var flags map\r\n        flags = JSONToMap(flags_json)\r\n\r\n        // get JSON\r\n        var voting_json string\r\n        voting_json = Str($voting_map[\"voting\"])\r\n\r\n        // get MAP\r\n        var voting map\r\n        voting = JSONToMap(voting_json)\r\n\r\n        if (Int(flags[\"full_data\"]) == 1 && Int(voting[\"type\"]) == 2) {\r\n            warning \"This vote is a system. Change settings not allowed\"\r\n        }\r\n\r\n        $role_map = DBFind(\"roles\").Where(\"id=? and deleted=0\", $roleID).Row()\r\n        if !$role_map {\r\n            warning \"Specified role not found\"\r\n        }\r\n\r\n        // not elective or not \"Candidate for validators\"\r\n        // roles_types: 1. assigned_role, 2. elective_role, 3. system_role, 4. company_role\r\n        if !($role_map[\"role_type\"] == 2 || $role_map[\"role_type\"] == 3) {\r\n            warning \"The chosen role is not elective or has been removed\"\r\n        }\r\n    }\r\n\r\n    action {\r\n\r\n        var accept_params_map map\r\n        if (Size($contract_accept_params) > 0) {\r\n            accept_params_map = JSONToMap($contract_accept_params)\r\n        }\r\n\r\n        var reject_params_map map\r\n        if (Size($contract_reject_params) > 0) {\r\n            reject_params_map = JSONToMap($contract_reject_params)\r\n        }\r\n\r\n        // get JSON\r\n        var optional_json string\r\n        optional_json = Str($voting_map[\"optional\"])\r\n\r\n        // get MAP\r\n        var optional map\r\n        optional = JSONToMap(optional_json)\r\n\r\n        optional[\"contract_accept\"] = Str($contract_accept)\r\n        optional[\"contract_accept_params\"] = accept_params_map\r\n        optional[\"contract_reject\"] = Str($contract_reject)\r\n        optional[\"contract_reject_params\"] = reject_params_map\r\n        optional[\"role_id\"] = Str($roleID)\r\n        optional[\"role_vacancies\"] = Str($vacancies)\r\n\r\n        DBUpdate(\"votings\", $votingID, \"optional\", optional)\r\n\r\n        voting_SubjectCheckFulldata(\"votingID\", $votingID)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_RejectDecision",
            "Value": "contract voting_RejectDecision {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    conditions {\r\n        $voting_map = DBFind(\"votings\").Where(\"id=$\", $votingID).Row()\r\n        if !$voting_map {\r\n            warning \"Voting is not found\"\r\n        }\r\n\r\n        $participant_id = DBFind(\"votings_participants\").Where(\"voting_id=$ and member->member_id=$\", $votingID, $key_id).One(\"id\")\r\n        if !$participant_id {\r\n            warning \"You are not a participant in this voting\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        // get JSON\r\n        var flags_json string\r\n        flags_json = Str($voting_map[\"flags\"])\r\n\r\n        // get MAP\r\n        var flags map\r\n        flags = JSONToMap(flags_json)\r\n\r\n        // if notifications have been sent, then close it\r\n        if (Int(flags[\"notifics\"]) == 1) {\r\n\r\n            $notific_id = DBFind(\"notifications\").Where(\"recipient->member_id=$ and page_name=$ and page_params->voting_id=$ and closed=$\",\r\n                $key_id, \"voting_view\", $votingID, 0).One(\"id\")\r\n\r\n            if $notific_id {\r\n                Notifications_Single_Close(\"notific_id\", Int($notific_id))\r\n            }\r\n        }\r\n\r\n        // check the decision\r\n        if (Int(flags[\"decision\"]) == 1) {\r\n            warning \"Decision was taken. Voting is now not possible\"\r\n        }\r\n\r\n        // check start-end of voting time\r\n        $voting_start = DBFind(\"votings\").Where(\"id=$ and date_started < now()\", $votingID).One(\"id\")\r\n        $voting_end = DBFind(\"votings\").Where(\"id=$ and date_ended > now()\", $votingID).One(\"id\")\r\n        if !$voting_start {\r\n            warning \"Voting has not yet begun. Try again later, please\"\r\n        }\r\n        if !$voting_end {\r\n            warning \"Voting has expired. Voting is now not possible\"\r\n        }\r\n\r\n        //-----------------------------------------------------------------------------------------------\r\n\r\n        // write the result of the voting\r\n        DBUpdate(\"votings_participants\", Int($participant_id), \"timestamp decision_date,decision\", $block_time, -1)\r\n\r\n        voting_UpdateDataForGraphs(\"votingID\", $votingID)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "data": [],
    "languages": [
        {
            "Name": "APL_not_required",
            "Conditions": "",
            "Trans": "{\"en\":\"APL not required\",\"ru\":\"Не требуется наличие APL\"}"
        },
        {
            "Name": "APL_required",
            "Conditions": "",
            "Trans": "{\"en\":\"APL required\",\"ru\":\"Требуется наличие APL\"}"
        },
        {
            "Name": "accept",
            "Conditions": "",
            "Trans": "{\"en\": \"Accept\", \"ru\": \"Принять\"}"
        },
        {
            "Name": "accept_request_member",
            "Conditions": "",
            "Trans": "{\"en\": \"Accept the request of this member?\", \"ru\": \"Принять запрос этого члена?\"}"
        },
        {
            "Name": "accepted",
            "Conditions": "",
            "Trans": "{\"en\": \"Accepted\", \"ru\": \"Принят\"}"
        },
        {
            "Name": "account",
            "Conditions": "",
            "Trans": "{\"en\": \"Account\", \"ru\": \"Счет\"}"
        },
        {
            "Name": "accounts",
            "Conditions": "",
            "Trans": "{\"en\": \"Accounts\", \"ru\": \"Счета\"}"
        },
        {
            "Name": "actions",
            "Conditions": "",
            "Trans": "{\"en\": \"Actions\", \"ru\": \"Действия\"}"
        },
        {
            "Name": "active",
            "Conditions": "",
            "Trans": "{\"en\": \"Active\", \"ru\": \"Активно\"}"
        },
        {
            "Name": "add",
            "Conditions": "",
            "Trans": "{\"en\": \"Add\", \"ru\": \"Добавить\"}"
        },
        {
            "Name": "add_member",
            "Conditions": "",
            "Trans": "{\"en\": \"Add member\", \"ru\": \"Добавить члена\"}"
        },
        {
            "Name": "add_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Add role\", \"ru\": \"Добавить роль\"}"
        },
        {
            "Name": "address",
            "Conditions": "",
            "Trans": "{\"en\":\"Address\",\"ru\":\"Адрес\"}"
        },
        {
            "Name": "admin",
            "Conditions": "",
            "Trans": "{\"en\":\"Administrator\",\"ru\":\"Администратор\"}"
        },
        {
            "Name": "admin_tools",
            "Conditions": "",
            "Trans": "{\"en\": \"Admin tools\", \"ru\": \"Инструменты администратора\"}"
        },
        {
            "Name": "agency",
            "Conditions": "",
            "Trans": "{\"en\": \"Agency\", \"ru\": \"Агенский\"}"
        },
        {
            "Name": "all",
            "Conditions": "",
            "Trans": "{\"en\": \"All\", \"ru\": \"Все\"}"
        },
        {
            "Name": "amount",
            "Conditions": "",
            "Trans": "{\"en\": \"Amount\", \"ru\": \"Сумма\"}"
        },
        {
            "Name": "apply",
            "Conditions": "",
            "Trans": "{\"en\": \"Apply\", \"ru\": \"Подать\"}"
        },
        {
            "Name": "appointed",
            "Conditions": "",
            "Trans": "{\"en\": \"Appointed\", \"ru\": \"Назначен\"}"
        },
        {
            "Name": "appointment_impossible",
            "Conditions": "",
            "Trans": "{\"ru\":\"*Эта роль не является назначаемой. Назначение членов невозможно\",\"en\":\"*This role is not assignable. The appointment of members is impossible\"}"
        },
        {
            "Name": "assign",
            "Conditions": "",
            "Trans": "{\"en\": \"Assign\", \"ru\": \"Назначить\"}"
        },
        {
            "Name": "assigned",
            "Conditions": "",
            "Trans": "{\"en\": \"Assigned\", \"ru\": \"Назначен\"}"
        },
        {
            "Name": "assigned_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Assigned\", \"ru\": \"Назначаемая\"}"
        },
        {
            "Name": "at",
            "Conditions": "",
            "Trans": "{\"en\": \"at\", \"ru\": \"в\"}"
        },
        {
            "Name": "attention",
            "Conditions": "",
            "Trans": "{\"en\": \"ATTENTION! The page has not received parameters and is unavailable for viewing.\", \"ru\": \"ВНИМАНИЕ! Страница не получила параметров и не доступна для просмотра.\"}"
        },
        {
            "Name": "available",
            "Conditions": "",
            "Trans": "{\"en\":\"Available\",\"ru\":\"Доступно\"}"
        },
        {
            "Name": "avatar",
            "Conditions": "",
            "Trans": "{\"en\": \"Avatar\", \"ru\": \"Фото\"}"
        },
        {
            "Name": "back",
            "Conditions": "",
            "Trans": "{\"en\": \"Back\", \"ru\": \"Назад\"}"
        },
        {
            "Name": "balance",
            "Conditions": "",
            "Trans": "{\"en\": \"Balance\", \"ru\": \"Баланс\"}"
        },
        {
            "Name": "begin",
            "Conditions": "",
            "Trans": "{\"en\": \"Begin\", \"ru\": \"Начать\"}"
        },
        {
            "Name": "birthdate",
            "Conditions": "",
            "Trans": "{\"en\": \"Birthdate\", \"ru\": \"Дата рождения\"}"
        },
        {
            "Name": "body_text",
            "Conditions": "",
            "Trans": "{\"en\":\"Text\",\"ru\":\"Текст\"}"
        },
        {
            "Name": "business",
            "Conditions": "",
            "Trans": "{\"en\":\"Business\",\"ru\":\"Бизнес\"}"
        },
        {
            "Name": "can_apply_voting",
            "Conditions": "",
            "Trans": "{\"en\": \"You can apply for voting\", \"ru\": \"Вы можете подать заявку на голосование\"}"
        },
        {
            "Name": "candidates",
            "Conditions": "",
            "Trans": "{\"en\": \"Candidates\", \"ru\": \"Кандидаты\"}"
        },
        {
            "Name": "catalog_ecosystems",
            "Conditions": "",
            "Trans": "{\"en\":\"Catalog of ecosystems\",\"ru\":\"Каталог экосистем\"}"
        },
        {
            "Name": "catalog_ecosystems_conditions",
            "Conditions": "",
            "Trans": "{\"en\":\"Ecosystem conditions and procedure for accession\",\"ru\":\"Условия и порядок присоединения к экосистеме\"}"
        },
        {
            "Name": "catalog_ecosystems_contact_email",
            "Conditions": "",
            "Trans": "{\"en\":\"Contact e-mail\",\"ru\":\"Почта для контактов\"}"
        },
        {
            "Name": "catalog_ecosystems_contact_phone",
            "Conditions": "",
            "Trans": "{\"en\":\"Contact phone\",\"ru\":\"Контактный телефон\"}"
        },
        {
            "Name": "catalog_ecosystems_contact_vde_page",
            "Conditions": "",
            "Trans": "{\"en\":\"Web site\",\"ru\":\"Веб сайт\"}"
        },
        {
            "Name": "catalog_ecosystems_description",
            "Conditions": "",
            "Trans": "{\"en\":\"Ecosystem hardware description\",\"ru\":\"Описание оборудования экосистемы\"}"
        },
        {
            "Name": "catalog_ecosystems_form",
            "Conditions": "",
            "Trans": "{\"en\":\"Add ecosystem to Catalog\",\"ru\":\"Добавить экосистему в каталог\"}"
        },
        {
            "Name": "catalog_ecosystems_freetype",
            "Conditions": "",
            "Trans": "{\"en\":\"Availability of own funds for entry\",\"ru\":\"Наличие собственных средств для вступления\"}"
        },
        {
            "Name": "catalog_ecosystems_logo",
            "Conditions": "",
            "Trans": "{\"en\":\"Logotype image\",\"ru\":\"Изображение логотипа\"}"
        },
        {
            "Name": "catalog_ecosystems_name",
            "Conditions": "",
            "Trans": "{\"en\":\"Ecosystem name in the Catalog\",\"ru\":\"Имя экосистемы в Каталоге\"}"
        },
        {
            "Name": "catalog_ecosystems_number",
            "Conditions": "",
            "Trans": "{\"en\":\"Ecosystem\",\"ru\":\"Экосистема\"}"
        },
        {
            "Name": "catalog_ecosystems_type",
            "Conditions": "",
            "Trans": "{\"en\":\"Ecosystem type\",\"ru\":\"Тип экосистемы\"}"
        },
        {
            "Name": "change",
            "Conditions": "",
            "Trans": "{\"en\": \"Change\", \"ru\": \"Изменить\"}"
        },
        {
            "Name": "check_expiration",
            "Conditions": "",
            "Trans": "{\"en\": \"Check expiration\", \"ru\": \"Проверить истечение\"}"
        },
        {
            "Name": "close",
            "Conditions": "",
            "Trans": "{\"en\": \"Close\", \"ru\": \"Закрыть\"}"
        },
        {
            "Name": "closure_type",
            "Conditions": "",
            "Trans": "{\"en\": \"Closure type\", \"ru\": \"Тип закрытия\"}"
        },
        {
            "Name": "column_name",
            "Conditions": "",
            "Trans": "{\"en\": \"Column name\", \"ru\": \"Название столбца\"}"
        },
        {
            "Name": "column_name_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Column name to which the value will be written (Example: onhold)\", \"ru\": \"Название столбца, в который будет записано значение (Пример: onhold)\"}"
        },
        {
            "Name": "comment",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Comment\",\r\n    \"ru\": \"Комментарий\"\r\n}"
        },
        {
            "Name": "commission_address",
            "Conditions": "",
            "Trans": "{\"en\":\"Account address\",\"ru\":\"Адрес аккаунта\"}"
        },
        {
            "Name": "commission_pub",
            "Conditions": "",
            "Trans": "{\"en\":\"Account public key\",\"ru\":\"Публичный ключ аккаунта\"}"
        },
        {
            "Name": "companies",
            "Conditions": "",
            "Trans": "{\"en\":\"Companies\",\"ru\":\"Компании\"}"
        },
        {
            "Name": "company",
            "Conditions": "",
            "Trans": "{\"en\": \"Company\", \"ru\": \"Компания\"}"
        },
        {
            "Name": "company_add",
            "Conditions": "",
            "Trans": "{\"en\":\"Add company\",\"ru\":\"Добавить компанию\"}"
        },
        {
            "Name": "company_role",
            "Conditions": "",
            "Trans": "{\"en\":\"Company role\",\"ru\":\"Роль компании\"}"
        },
        {
            "Name": "confirmation",
            "Conditions": "",
            "Trans": "{\"en\":\"Confirmation\",\"ru\":\"Подтверждение\"}"
        },
        {
            "Name": "contract_accept",
            "Conditions": "",
            "Trans": "{\"en\": \"Contract of accept\", \"ru\": \"Контракт при принятии\"}"
        },
        {
            "Name": "contract_accept_des",
            "Conditions": "",
            "Trans": "{\"en\": \"Name of the contract, which should be started if the decision is accepted\", \"ru\": \"Название контракта, который должен быть запущен, если решение будет одобрено\"}"
        },
        {
            "Name": "contract_accepted",
            "Conditions": "",
            "Trans": "{\"en\": \"Contractaccept\", \"ru\": \"Контракт принят\"}"
        },
        {
            "Name": "contract_params_des",
            "Conditions": "",
            "Trans": "{\"ru\":\"Строка в формате JSON\",\"en\":\"String in JSON format\"}"
        },
        {
            "Name": "contract_reject",
            "Conditions": "",
            "Trans": "{\"en\": \"Contract of reject\", \"ru\": \"Контракт при отклонении\"}"
        },
        {
            "Name": "contract_reject_des",
            "Conditions": "",
            "Trans": "{\"en\": \"Name of the contract, which should be started if the decision is rejected\", \"ru\": \"Название контракта, который должен быть запущен, если решение будет отклонено\"}"
        },
        {
            "Name": "contract_rejected",
            "Conditions": "",
            "Trans": "{\"en\": \"Contract reject\", \"ru\": \"Контракт отклонен\"}"
        },
        {
            "Name": "copy",
            "Conditions": "",
            "Trans": "{\"en\": \"Copy\", \"ru\": \"Копировать\"}"
        },
        {
            "Name": "create",
            "Conditions": "",
            "Trans": "{\"en\": \"Create\", \"ru\": \"Создать\"}"
        },
        {
            "Name": "create_account",
            "Conditions": "",
            "Trans": "{\"en\": \"Create account\", \"ru\": \"Создать счет\"}"
        },
        {
            "Name": "created",
            "Conditions": "",
            "Trans": "{\"en\": \"Created\", \"ru\": \"Создан\"}"
        },
        {
            "Name": "creator",
            "Conditions": "",
            "Trans": "{\"en\": \"Creator\", \"ru\": \"Кто создал\"}"
        },
        {
            "Name": "dashboard",
            "Conditions": "",
            "Trans": "{\"en\": \"Dashboard\", \"ru\": \"Приборная панель\"}"
        },
        {
            "Name": "date_created",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Date created\",\r\n    \"ru\": \"Дата создания\"\r\n}"
        },
        {
            "Name": "date_end",
            "Conditions": "",
            "Trans": "{\"en\": \"Date end\", \"ru\": \"Дата окончания\"}"
        },
        {
            "Name": "date_start",
            "Conditions": "",
            "Trans": "{\"en\": \"Date start\", \"ru\": \"Дата начала\"}"
        },
        {
            "Name": "decision",
            "Conditions": "",
            "Trans": "{\"en\": \"Decision\", \"ru\": \"Решение\"}"
        },
        {
            "Name": "decision_accept",
            "Conditions": "",
            "Trans": "{\"en\": \"Decision accept\", \"ru\": \"Решение одобрено\"}"
        },
        {
            "Name": "decision_reject",
            "Conditions": "",
            "Trans": "{\"en\": \"Decision reject\", \"ru\": \"Решение отклонено\"}"
        },
        {
            "Name": "deleted",
            "Conditions": "",
            "Trans": "{\"en\": \"Deleted\", \"ru\": \"Удалено\"}"
        },
        {
            "Name": "description",
            "Conditions": "",
            "Trans": "{\"en\": \"Description\", \"ru\": \"Описание\"}"
        },
        {
            "Name": "description_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Text description of the subject of voting\", \"ru\": \"Текстовое описание предмета голосования\"}"
        },
        {
            "Name": "description_equipment",
            "Conditions": "",
            "Trans": "{\"en\":\"Description equipment\",\"ru\":\"Описание оборудования\"}"
        },
        {
            "Name": "did_not_vote",
            "Conditions": "",
            "Trans": "{\"en\": \"Did not vote\", \"ru\": \"Не голосовал\"}"
        },
        {
            "Name": "document_accept",
            "Conditions": "",
            "Trans": "{\"en\": \"Document accept\", \"ru\": \"Документ одобрен\"}"
        },
        {
            "Name": "document_reject",
            "Conditions": "",
            "Trans": "{\"en\": \"Document reject\", \"ru\": \"Документ отклонен\"}"
        },
        {
            "Name": "ecosystem_number",
            "Conditions": "",
            "Trans": "{\"en\":\"Number\",\"ru\":\"Номер\"}"
        },
        {
            "Name": "edit",
            "Conditions": "",
            "Trans": "{\"en\":\"Edit\",\"ru\":\"Редактировать\"}"
        },
        {
            "Name": "editing_profile",
            "Conditions": "",
            "Trans": "{\"en\": \"Editing profile\", \"ru\": \"Редактирование профиля\"}"
        },
        {
            "Name": "elective",
            "Conditions": "",
            "Trans": "{\"en\": \"Elective\", \"ru\": \"Выбран\"}"
        },
        {
            "Name": "elective_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Elective\", \"ru\": \"Выборная\"}"
        },
        {
            "Name": "email",
            "Conditions": "",
            "Trans": "{\"en\": \"Email\", \"ru\": \"Почта\"}"
        },
        {
            "Name": "emission",
            "Conditions": "",
            "Trans": "{\"en\": \"Emission\", \"ru\": \"Эмиссия\"}"
        },
        {
            "Name": "emission_account_not_found",
            "Conditions": "",
            "Trans": "{\"en\":\"System emission account is not found\",\"ru\":\"Системный эмиссионный счет не найден\"}"
        },
        {
            "Name": "empty",
            "Conditions": "",
            "Trans": "{\"en\": \"[no]\", \"ru\": \"[нет]\"}"
        },
        {
            "Name": "execute",
            "Conditions": "",
            "Trans": "{\"en\": \"Execute\", \"ru\": \"Выполнить\"}"
        },
        {
            "Name": "expiration",
            "Conditions": "",
            "Trans": "{\"en\": \"Expiration\", \"ru\": \"Окончание\"}"
        },
        {
            "Name": "expiration_only_visitor",
            "Conditions": "",
            "Trans": "{\"en\": \"Expiration only for visitor\", \"ru\": \"Окончание только для посетителя\"}"
        },
        {
            "Name": "expired",
            "Conditions": "",
            "Trans": "{\"en\": \"Expired\", \"ru\": \"Истекло\"}"
        },
        {
            "Name": "female",
            "Conditions": "",
            "Trans": "{\"en\": \"Female\", \"ru\": \"Женский\"}"
        },
        {
            "Name": "filled",
            "Conditions": "",
            "Trans": "{\"en\": \"Filled\", \"ru\": \"Заполнено\"}"
        },
        {
            "Name": "finance",
            "Conditions": "",
            "Trans": "{\"en\":\"Finance\",\"ru\":\"Финансы\"}"
        },
        {
            "Name": "finished",
            "Conditions": "",
            "Trans": "{\"en\": \"Finished\", \"ru\": \"Завершено\"}"
        },
        {
            "Name": "freetype",
            "Conditions": "",
            "Trans": "{\"en\":\"Pay type\",\"ru\":\"Тип оплаты\"}"
        },
        {
            "Name": "gender",
            "Conditions": "",
            "Trans": "{\"en\": \"Gender\", \"ru\": \"Пол\"}"
        },
        {
            "Name": "group_person",
            "Conditions": "",
            "Trans": "{\"en\":\"Group of person\",\"ru\":\"Группа персон\"}"
        },
        {
            "Name": "header",
            "Conditions": "",
            "Trans": "{\"en\": \"Header\", \"ru\": \"Заголовок\"}"
        },
        {
            "Name": "host_ip",
            "Conditions": "",
            "Trans": "{\"en\":\"IP\",\"ru\":\"IP\"}"
        },
        {
            "Name": "icon",
            "Conditions": "",
            "Trans": "{\"en\": \"Icon\", \"ru\": \"Иконка\"}"
        },
        {
            "Name": "id",
            "Conditions": "",
            "Trans": "{\"en\": \"ID\", \"ru\": \"ID\"}"
        },
        {
            "Name": "image",
            "Conditions": "",
            "Trans": "{\"ru\":\"Изображение\",\"en\":\"Image\"}"
        },
        {
            "Name": "impossible",
            "Conditions": "",
            "Trans": "{\"en\": \"Impossible\", \"ru\": \"Не возможно\"}"
        },
        {
            "Name": "include_in_role",
            "Conditions": "",
            "Trans": "{\"en\":\"YES - Include a member in the role\",\"ru\":\"ДА - Включить члена в роль\"}"
        },
        {
            "Name": "information",
            "Conditions": "",
            "Trans": "{\"en\":\"Information\",\"ru\":\"Информация\"}"
        },
        {
            "Name": "init_condition",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Initiate process condition\",\r\n    \"ru\": \"Условие для начала процесса\"\r\n}"
        },
        {
            "Name": "institution",
            "Conditions": "",
            "Trans": "{\"en\":\"Institution\",\"ru\":\"Учреждение\"}"
        },
        {
            "Name": "limited",
            "Conditions": "",
            "Trans": "{\"en\": \"Limited\", \"ru\": \"Ограничены\"}"
        },
        {
            "Name": "lists_of_roles",
            "Conditions": "",
            "Trans": "{\"en\": \"Lists of roles and\", \"ru\": \"Список ролей и\"}"
        },
        {
            "Name": "logo",
            "Conditions": "",
            "Trans": "{\"en\":\"Logo\",\"ru\":\"Лого\"}"
        },
        {
            "Name": "male",
            "Conditions": "",
            "Trans": "{\"en\": \"Male\", \"ru\": \"Мужской\"}"
        },
        {
            "Name": "member",
            "Conditions": "",
            "Trans": "{\"en\": \"Member\", \"ru\": \"Член\"}"
        },
        {
            "Name": "member_id",
            "Conditions": "",
            "Trans": "{\"en\": \"Member ID\", \"ru\": \"ID члена\"}"
        },
        {
            "Name": "member_image",
            "Conditions": "",
            "Trans": "{\"en\":\"Avatar\",\"ru\":\"Фото\"}"
        },
        {
            "Name": "member_name",
            "Conditions": "",
            "Trans": "{\"en\":\"Member name\",\"ru\":\"Никнейм\"}"
        },
        {
            "Name": "members",
            "Conditions": "",
            "Trans": "{\"en\": \"Members\", \"ru\": \"Члены\"}"
        },
        {
            "Name": "membership",
            "Conditions": "",
            "Trans": "{\"en\": \"Membership\", \"ru\": \"Членство\"}"
        },
        {
            "Name": "membership_management",
            "Conditions": "",
            "Trans": "{\"en\": \"Membership management and\", \"ru\": \"Управление членами и\"}"
        },
        {
            "Name": "membership_request_accept",
            "Conditions": "",
            "Trans": "{\"ru\":\"Вы хотите принять этот запрос?\",\"en\":\"Do you want to accept this request?\"}"
        },
        {
            "Name": "membership_request_reject",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to reject this request?\",\"ru\":\"Вы хотите отклонить этот запрос?\"}"
        },
        {
            "Name": "membership_requests",
            "Conditions": "",
            "Trans": "{\"en\": \"Membership requests\", \"ru\": \"Запросы на членство\"}"
        },
        {
            "Name": "membership_roles_notifications",
            "Conditions": "",
            "Trans": "{\"en\": \"Membership, roles, notifications\", \"ru\": \"Членство, роли, уведомления\"}"
        },
        {
            "Name": "multiple",
            "Conditions": "",
            "Trans": "{\"en\": \"Multiple\", \"ru\": \"Множественные\"}"
        },
        {
            "Name": "my_account",
            "Conditions": "",
            "Trans": "{\"en\": \"My account\", \"ru\": \"Мой счет\"}"
        },
        {
            "Name": "name",
            "Conditions": "",
            "Trans": "{\"en\": \"Name\", \"ru\": \"Название\"}"
        },
        {
            "Name": "name_first",
            "Conditions": "",
            "Trans": "{\"en\": \"First name\", \"ru\": \"Имя\"}"
        },
        {
            "Name": "name_last",
            "Conditions": "",
            "Trans": "{\"en\": \"Last name\", \"ru\": \"Фамилия\"}"
        },
        {
            "Name": "name_middle",
            "Conditions": "",
            "Trans": "{\"en\": \"Middle name\", \"ru\": \"Отчество\"}"
        },
        {
            "Name": "need_fuel",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Need APL\",\r\n    \"ru\": \"Нужно APL\"\r\n}"
        },
        {
            "Name": "new_ecosystem",
            "Conditions": "",
            "Trans": "{\"en\":\"New ecosystem\",\"ru\":\"Создать экосистему\"}"
        },
        {
            "Name": "new_role",
            "Conditions": "",
            "Trans": "{\"en\": \"New role\", \"ru\": \"Новая роль\"}"
        },
        {
            "Name": "new_template",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"New template\",\r\n    \"ru\": \"Новый шаблон\"\r\n}"
        },
        {
            "Name": "new_voting",
            "Conditions": "",
            "Trans": "{\"en\": \"New voting\", \"ru\": \"Новое голосование\"}"
        },
        {
            "Name": "no",
            "Conditions": "",
            "Trans": "{\"en\":\"No\",\"ru\":\"Нет\"}"
        },
        {
            "Name": "no_expiration",
            "Conditions": "",
            "Trans": "{\"en\": \"No expiration\", \"ru\": \"Без окончания\"}"
        },
        {
            "Name": "no_include_in_role",
            "Conditions": "",
            "Trans": "{\"en\":\"NO - Do not include a member in the role\",\"ru\":\"НЕТ - Не включать члена в роль\"}"
        },
        {
            "Name": "not_enough_votes",
            "Conditions": "",
            "Trans": "{\"en\": \"Not enough votes\", \"ru\": \"Недостаточно голосов\"}"
        },
        {
            "Name": "not_need_fuel",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Not need APL\",\r\n    \"ru\": \"Не нужно APL\"\r\n}"
        },
        {
            "Name": "not_started",
            "Conditions": "",
            "Trans": "{\"ru\":\"Не начата\",\"en\":\"Not started\"}"
        },
        {
            "Name": "notification_sender_member",
            "Conditions": "",
            "Trans": "{\"en\":\"Send from member\",\"ru\":\"Отправить от члена\"}"
        },
        {
            "Name": "notification_sender_role",
            "Conditions": "",
            "Trans": "{\"en\":\"Send from role\",\"ru\":\"Отправить от роли\"}"
        },
        {
            "Name": "notifications",
            "Conditions": "",
            "Trans": "{\"en\": \"Notifications\", \"ru\": \"Уведомления\"}"
        },
        {
            "Name": "notifics",
            "Conditions": "",
            "Trans": "{\"en\": \"Notifications\", \"ru\": \"Уведомления\"}"
        },
        {
            "Name": "num_members",
            "Conditions": "",
            "Trans": "{\"en\": \"Number of members\", \"ru\": \"Количество членов\"}"
        },
        {
            "Name": "onhold",
            "Conditions": "",
            "Trans": "{\"en\": \"onHold\", \"ru\": \"Закрыт\"}"
        },
        {
            "Name": "only_if_role_type",
            "Conditions": "",
            "Trans": "{\"en\":\"Only if role type -> Company role. For all other types is not used\",\"ru\":\"Только если тип роли - Роль компании. Для всех других типов не используется\"}"
        },
        {
            "Name": "optional",
            "Conditions": "",
            "Trans": "{\"en\": \"[Optional]\", \"ru\": \"[Необязательный]\"}"
        },
        {
            "Name": "organization",
            "Conditions": "",
            "Trans": "{\"en\":\"Organization\",\"ru\":\"Организация\"}"
        },
        {
            "Name": "page",
            "Conditions": "",
            "Trans": "{\"en\":\"Page\",\"ru\":\"Страница\"}"
        },
        {
            "Name": "page_name",
            "Conditions": "",
            "Trans": "{\"en\":\"Page\",\"ru\":\"Страница\"}"
        },
        {
            "Name": "params",
            "Conditions": "",
            "Trans": "{\"en\":\"Parameters\",\"ru\":\"Параметры\"}"
        },
        {
            "Name": "participants",
            "Conditions": "",
            "Trans": "{\"en\": \"Participants\", \"ru\": \"Участники\"}"
        },
        {
            "Name": "participants_add",
            "Conditions": "",
            "Trans": "{\"en\": \"Add participants\", \"ru\": \"Добавить участников\"}"
        },
        {
            "Name": "pending_notifics",
            "Conditions": "",
            "Trans": "{\"en\": \"Pending notifications\", \"ru\": \"Ожидающие уведомления\"}"
        },
        {
            "Name": "person",
            "Conditions": "",
            "Trans": "{\"en\": \"Person\", \"ru\": \"Персональный\"}"
        },
        {
            "Name": "phone",
            "Conditions": "",
            "Trans": "{\"en\": \"Phone\", \"ru\": \"Телефон\"}"
        },
        {
            "Name": "possible",
            "Conditions": "",
            "Trans": "{\"en\": \"Possible\", \"ru\": \"Возможно\"}"
        },
        {
            "Name": "processing",
            "Conditions": "",
            "Trans": "{\"en\": \"Processing\", \"ru\": \"Обработка\"}"
        },
        {
            "Name": "profile",
            "Conditions": "",
            "Trans": "{\"en\": \"Profile\", \"ru\": \"Профиль\"}"
        },
        {
            "Name": "progress",
            "Conditions": "",
            "Trans": "{\"en\": \"Progress\", \"ru\": \"Прогресс\"}"
        },
        {
            "Name": "pub_key",
            "Conditions": "",
            "Trans": "{\"en\":\"Public key\",\"ru\":\"Публичный ключ\"}"
        },
        {
            "Name": "public_org",
            "Conditions": "",
            "Trans": "{\"en\":\"Public organization\",\"ru\":\"Публичная организация\"}"
        },
        {
            "Name": "quorum",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Quorum\",\r\n    \"ru\": \"Кворум\"\r\n}"
        },
        {
            "Name": "recipient",
            "Conditions": "",
            "Trans": "{\"en\": \"Recipient\", \"ru\": \"Получатель\"}"
        },
        {
            "Name": "recipient_account",
            "Conditions": "",
            "Trans": "{\"en\": \"Recipient account\", \"ru\": \"Счет получателя\"}"
        },
        {
            "Name": "reject",
            "Conditions": "",
            "Trans": "{\"en\": \"Reject\", \"ru\": \"Отклонить\"}"
        },
        {
            "Name": "rejected",
            "Conditions": "",
            "Trans": "{\"en\": \"Rejected\", \"ru\": \"Отклонено\"}"
        },
        {
            "Name": "request",
            "Conditions": "",
            "Trans": "{\"en\": \"Request\", \"ru\": \"Запрос\"}"
        },
        {
            "Name": "request_accepted",
            "Conditions": "",
            "Trans": "{\"en\":\"Request was approved\",\"ru\":\"Запрос был одобрен\"}"
        },
        {
            "Name": "request_info",
            "Conditions": "",
            "Trans": "{\"en\":\"Request info\",\"ru\":\"Информация о запросе\"}"
        },
        {
            "Name": "request_membership",
            "Conditions": "",
            "Trans": "{\"ru\":\"Запрос членства\",\"en\":\"Request for membership\"}"
        },
        {
            "Name": "request_not_sent",
            "Conditions": "",
            "Trans": "{\"ru\":\"Запрос не отправлялся\",\"en\":\"Request not sent\"}"
        },
        {
            "Name": "request_rejected",
            "Conditions": "",
            "Trans": "{\"en\":\"Request was rejected\",\"ru\":\"Запрос был отклонен\"}"
        },
        {
            "Name": "request_wating",
            "Conditions": "",
            "Trans": "{\"en\":\"Request has been sent. Wait for administrator's decision\",\"ru\":\"Запрос отправлен. Ожидайте решение\"}"
        },
        {
            "Name": "required_logo",
            "Conditions": "",
            "Trans": "{\"en\":\"Required logo\",\"ru\":\"Требуется логотип\"}"
        },
        {
            "Name": "right_sign",
            "Conditions": "",
            "Trans": "{\"en\":\"Signature right\",\"ru\":\"Право подписи\"}"
        },
        {
            "Name": "right_sign_no",
            "Conditions": "",
            "Trans": "{\"en\":\"No signature right\",\"ru\":\"Нет права подписи\"}"
        },
        {
            "Name": "right_sign_yes",
            "Conditions": "",
            "Trans": "{\"en\":\"Have signature rights\",\"ru\":\"Имеет право подписи\"}"
        },
        {
            "Name": "role",
            "Conditions": "",
            "Trans": "{\"en\": \"Role\", \"ru\": \"Роль\"}"
        },
        {
            "Name": "role_notifics",
            "Conditions": "",
            "Trans": "{\"en\": \"Role notifications\", \"ru\": \"Ролевые уведомления\"}"
        },
        {
            "Name": "roles",
            "Conditions": "",
            "Trans": "{\"en\": \"Roles\", \"ru\": \"Роли\"}"
        },
        {
            "Name": "rollback",
            "Conditions": "",
            "Trans": "{\"en\": \"Rollback\", \"ru\": \"Откат\"}"
        },
        {
            "Name": "row_id",
            "Conditions": "",
            "Trans": "{\"en\": \"Row ID\", \"ru\": \"ID строки\"}"
        },
        {
            "Name": "row_id_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Row ID to which the value will be written (Example: 14)\", \"ru\": \"ID строки, в которую будет записано значение (Пример: 14)\"}"
        },
        {
            "Name": "save",
            "Conditions": "",
            "Trans": "{\"en\": \"Save\", \"ru\": \"Сохранить\"}"
        },
        {
            "Name": "select_member",
            "Conditions": "",
            "Trans": "{\"en\": \"Select a member to add\", \"ru\": \"Укажите члена, чтобы добавить\"}"
        },
        {
            "Name": "select_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Select a role to add all members of this role\", \"ru\": \"Выберите роль, чтобы добавить всех участников этой роли\"}"
        },
        {
            "Name": "select_role_if_include",
            "Conditions": "",
            "Trans": "{\"ru\":\"Выберите роль, если вы хотите включить члена в роль\",\"en\":\"Select a role if you want to include a member in the role\"}"
        },
        {
            "Name": "send",
            "Conditions": "",
            "Trans": "{\"en\": \"Send\", \"ru\": \"Отправить\"}"
        },
        {
            "Name": "sender",
            "Conditions": "",
            "Trans": "{\"en\":\"Sender\",\"ru\":\"Отправитель\"}"
        },
        {
            "Name": "sender_account",
            "Conditions": "",
            "Trans": "{\"en\":\"Sender account\",\"ru\":\"Счет отправителя\"}"
        },
        {
            "Name": "sent",
            "Conditions": "",
            "Trans": "{\"ru\":\"Отправлено\",\"en\":\"Sent\"}"
        },
        {
            "Name": "single",
            "Conditions": "",
            "Trans": "{\"en\": \"Single\", \"ru\": \"Одиночные\"}"
        },
        {
            "Name": "single_and_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Single and Role\", \"ru\": \"Одиночные и ролевые\"}"
        },
        {
            "Name": "single_notifics",
            "Conditions": "",
            "Trans": "{\"en\": \"Single notifications\", \"ru\": \"Одиночные уведомления\"}"
        },
        {
            "Name": "start",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Start\",\r\n    \"ru\": \"Начать\"\r\n}"
        },
        {
            "Name": "started",
            "Conditions": "",
            "Trans": "{\"en\": \"Started\", \"ru\": \"Начато\"}"
        },
        {
            "Name": "status",
            "Conditions": "",
            "Trans": "{\"en\": \"Status\", \"ru\": \"Статус\"}"
        },
        {
            "Name": "subject_voting",
            "Conditions": "",
            "Trans": "{\"en\": \"Subject of voting\", \"ru\": \"Предмет голосования\"}"
        },
        {
            "Name": "subject_voting_edit",
            "Conditions": "",
            "Trans": "{\"en\": \"Edit subject of voting\", \"ru\": \"Редактировать предмет голосования\"}"
        },
        {
            "Name": "success",
            "Conditions": "",
            "Trans": "{\"en\": \"Success\", \"ru\": \"Успешно\"}"
        },
        {
            "Name": "sure_want_delete",
            "Conditions": "",
            "Trans": "{\"ru\":\"Вы уверены что хотите удалить?\",\"en\":\"Are you sure you want to delete?\"}"
        },
        {
            "Name": "sys_emission",
            "Conditions": "",
            "Trans": "{\"en\":\"sys-emission\",\"ru\":\"Эмиссия (системный)\"}"
        },
        {
            "Name": "sys_trash",
            "Conditions": "",
            "Trans": "{\"en\":\"sys-trash\",\"ru\":\"Корзина (системный)\"}"
        },
        {
            "Name": "sysparams_candidate_validators_form",
            "Conditions": "",
            "Trans": "{\"en\":\"Request form of candidate for validators\",\"ru\":\"Форма запроса кандидата в валидаторы\"}"
        },
        {
            "Name": "sysparams_candidates_list",
            "Conditions": "",
            "Trans": "{\"en\":\"Candidate for validators list\",\"ru\":\"Список кандидатов в валидаторы\"}"
        },
        {
            "Name": "sysparams_list",
            "Conditions": "",
            "Trans": "{\"en\":\"System parameters list\",\"ru\":\"Список системных параметров\"}"
        },
        {
            "Name": "system_params",
            "Conditions": "",
            "Trans": "{\"en\":\"System parameters\",\"ru\":\"Системные параметры\"}"
        },
        {
            "Name": "system_role",
            "Conditions": "",
            "Trans": "{\"en\":\"System\",\"ru\":\"Системная\"}"
        },
        {
            "Name": "system_tokens",
            "Conditions": "",
            "Trans": "{\"en\": \"System of tokens\", \"ru\": \"Система токенов\"}"
        },
        {
            "Name": "table_to_written",
            "Conditions": "",
            "Trans": "{\"en\": \"Table name\", \"ru\": \"Название таблицы\"}"
        },
        {
            "Name": "table_to_written_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Table to which the value will be written (Example: accounts)\", \"ru\": \"Таблица, в которую будет записано значение (Пример: accounts)\"}"
        },
        {
            "Name": "template_create",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Creating template\",\"ru\": \"Создание шаблона\"}"
        },
        {
            "Name": "test_page",
            "Conditions": "",
            "Trans": "{\"en\": \"Test page\", \"ru\": \"Тестовая страница\"}"
        },
        {
            "Name": "text_document",
            "Conditions": "",
            "Trans": "{\"en\": \"Text of the document\", \"ru\": \"Текст документа\"}"
        },
        {
            "Name": "their_members",
            "Conditions": "",
            "Trans": "{\"en\": \"their members\", \"ru\": \"их члены\"}"
        },
        {
            "Name": "title",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Title\",\r\n    \"ru\": \"Название\"\r\n}"
        },
        {
            "Name": "tokens",
            "Conditions": "",
            "Trans": "{\"en\": \"Tokens\", \"ru\": \"Токены\"}"
        },
        {
            "Name": "tokens_rollback",
            "Conditions": "",
            "Trans": "{\"en\": \"Tokens rollback\", \"ru\": \"Удаление токенов\"}"
        },
        {
            "Name": "tokens_transfer",
            "Conditions": "",
            "Trans": "{\"en\": \"Tokens transfer\", \"ru\": \"Перевод токенов\"}"
        },
        {
            "Name": "tranche",
            "Conditions": "",
            "Trans": "{\"en\":\"Tranche\",\"ru\":\"Транш\"}"
        },
        {
            "Name": "trash_account_not_found",
            "Conditions": "",
            "Trans": "{\"en\":\"System trash account is not found\",\"ru\":\"Системный счет корзины не найден\"}"
        },
        {
            "Name": "type",
            "Conditions": "",
            "Trans": "{\"en\": \"Type\", \"ru\": \"Тип\"}"
        },
        {
            "Name": "type_voting_custom",
            "Conditions": "",
            "Trans": "{\"en\":\"Custom\",\"ru\":\"Пользовательское\"}"
        },
        {
            "Name": "type_voting_system",
            "Conditions": "",
            "Trans": "{\"en\":\"System\",\"ru\":\"Системное\"}"
        },
        {
            "Name": "unlimited",
            "Conditions": "",
            "Trans": "{\"en\": \"Unlimited\", \"ru\": \"Не ограничены\"}"
        },
        {
            "Name": "use",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Use\",\r\n    \"ru\": \"Использовать\"\r\n}"
        },
        {
            "Name": "user_info",
            "Conditions": "",
            "Trans": "{\"en\": \"User information\", \"ru\": \"Информация о пользователе\"}"
        },
        {
            "Name": "username",
            "Conditions": "",
            "Trans": "{\"en\": \"Username\", \"ru\": \"Никнейм\"}"
        },
        {
            "Name": "vacancies",
            "Conditions": "",
            "Trans": "{\"en\": \"Vacancies\", \"ru\": \"Вакансии\"}"
        },
        {
            "Name": "validate_contract_name",
            "Conditions": "",
            "Trans": "{\"en\":\"must be between 3 and 255 characters\",\"ru\":\"должно быть от 3 до 255 символов\"}"
        },
        {
            "Name": "validate_member_name",
            "Conditions": "",
            "Trans": "{\"en\":\"must be between 5 and 20 characters\",\"ru\":\"должно быть от 5 до 20 символов\"}"
        },
        {
            "Name": "validate_notification",
            "Conditions": "",
            "Trans": "{\"en\":\"must be between 3 and 255 characters\",\"ru\":\"должно быть от 3 до 255 символов\"}"
        },
        {
            "Name": "validate_role_name",
            "Conditions": "",
            "Trans": "{\"en\":\"must be between 3 and 30 characters\",\"ru\":\"должно быть от 3 до 30 символов\"}"
        },
        {
            "Name": "value",
            "Conditions": "",
            "Trans": "{\"en\":\"Value\",\"ru\":\"Значение\"}"
        },
        {
            "Name": "value_number",
            "Conditions": "",
            "Trans": "{\"en\": \"Value number\", \"ru\": \"Значение (число)\"}"
        },
        {
            "Name": "value_string",
            "Conditions": "",
            "Trans": "{\"en\": \"Value string\", \"ru\": \"Значение (строка)\"}"
        },
        {
            "Name": "vde_form",
            "Conditions": "",
            "Trans": "{\"en\":\"VDE form address\",\"ru\":\"Адрес VDE-формы\"}"
        },
        {
            "Name": "vde_form_desc",
            "Conditions": "",
            "Trans": "{\"en\":\"Address of the VDE form in VDE system for applying for membership (who do not yet have APL)\",\"ru\":\"Адрес VDE-формы для подачи заявки на членство (у кого еще нет APL)\"}"
        },
        {
            "Name": "vde_page",
            "Conditions": "",
            "Trans": "{\"en\":\"VDE page address\",\"ru\":\"Адрес страницы VDE\"}"
        },
        {
            "Name": "view",
            "Conditions": "",
            "Trans": "{\"en\": \"View\", \"ru\": \"Просмотр\"}"
        },
        {
            "Name": "view_all",
            "Conditions": "",
            "Trans": "{\"en\": \"View all\", \"ru\": \"Посмотреть все\"}"
        },
        {
            "Name": "visitor",
            "Conditions": "",
            "Trans": "{\"en\": \"Visitor\", \"ru\": \"Посетитель\"}"
        },
        {
            "Name": "visitor_rights",
            "Conditions": "",
            "Trans": "{\"en\": \"Visitor (with SR)\", \"ru\": \"Посетитель (с правами)\"}"
        },
        {
            "Name": "volume",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Volume\",\r\n    \"ru\": \"Объем\"\r\n}"
        },
        {
            "Name": "vote",
            "Conditions": "",
            "Trans": "{\"en\": \"Vote\", \"ru\": \"Голосовать\"}"
        },
        {
            "Name": "vote_for_candidate",
            "Conditions": "",
            "Trans": "{\"en\": \"Vote for the candidate\", \"ru\": \"Проголосовал за кандидата\"}"
        },
        {
            "Name": "voted",
            "Conditions": "",
            "Trans": "{\"en\": \"Voted\", \"ru\": \"Проголосовавшие\"}"
        },
        {
            "Name": "voters",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Voters\",\r\n    \"ru\": \"Голосующие\"\r\n}"
        },
        {
            "Name": "voting",
            "Conditions": "",
            "Trans": "{\"en\": \"Voting\", \"ru\": \"Голосование\"}"
        },
        {
            "Name": "voting_all_members",
            "Conditions": "",
            "Trans": "{\"en\":\"All members were added automatically\",\"ru\":\"Все члены были добавлены автоматически\"}"
        },
        {
            "Name": "voting_contract_accept",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Run contract after accept decision\",\r\n    \"ru\": \"Выполнить контракт при положительном решении\"\r\n}"
        },
        {
            "Name": "voting_contract_reject",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Run contract after reject decision\",\r\n    \"ru\": \"Выполнить контракт при отрицательном решении\"\r\n}"
        },
        {
            "Name": "voting_decisions_candidate_manual",
            "Conditions": "",
            "Trans": "{\"en\": \"Role candidates with manual registration of participants\", \"ru\": \"Ролевые кандидаты с ручной регистрацией участников\"}"
        },
        {
            "Name": "voting_decisions_candidate_requests",
            "Conditions": "",
            "Trans": "{\"en\": \"Role candidates with registration of participants by request\", \"ru\": \"Ролевые кандидаты с регистрацией участников по запросу\"}"
        },
        {
            "Name": "voting_decisions_contract",
            "Conditions": "",
            "Trans": "{\"en\": \"Performance of the contract\", \"ru\": \"Выполнение контракта\"}"
        },
        {
            "Name": "voting_decisions_db",
            "Conditions": "",
            "Trans": "{\"en\": \"Formal decision\", \"ru\": \"Формальное решение\"}"
        },
        {
            "Name": "voting_decisions_document",
            "Conditions": "",
            "Trans": "{\"en\": \"Document approval\", \"ru\": \"Утверждение документа\"}"
        },
        {
            "Name": "voting_graph_progress",
            "Conditions": "",
            "Trans": "{\"en\": \"Graph of the percentages of votes needed to make a decision\", \"ru\": \"График процента голосов, необходимых для принятия решения\"}"
        },
        {
            "Name": "voting_graph_voted",
            "Conditions": "",
            "Trans": "{\"en\": \"Graph of the proportion of voters from the total number of participants\", \"ru\": \"График отношения проголосовавших от общего числа участников\"}"
        },
        {
            "Name": "voting_init_condition",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Initial Сondition for starts\",\r\n    \"ru\": \"Условие при запуске\"\r\n}"
        },
        {
            "Name": "voting_init_condition_desc",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Contract for check rights for starts voting\",\r\n    \"ru\": \"Контракт для проверки права начать голосование\"\r\n}"
        },
        {
            "Name": "voting_participants_everybody",
            "Conditions": "",
            "Trans": "{\"en\": \"Anybody\", \"ru\": \"Все\"}"
        },
        {
            "Name": "voting_participants_manual",
            "Conditions": "",
            "Trans": "{\"en\": \"Choose manually\", \"ru\": \"Ручной выбор\"}"
        },
        {
            "Name": "voting_participants_role",
            "Conditions": "",
            "Trans": "{\"en\": \"By role\", \"ru\": \"По роли\"}"
        },
        {
            "Name": "voting_precondition",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Initial condition for the subject of voting\",\r\n    \"ru\": \"Начальное условие для предмета голосования\"\r\n}"
        },
        {
            "Name": "voting_quorum",
            "Conditions": "",
            "Trans": "{\"en\": \"Quorum\", \"ru\": \"Кворум\"}"
        },
        {
            "Name": "voting_quorum_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Percentage value of votes for a decision (from 5 to 100)\", \"ru\": \"Процентная доля голосов для принятия решения (от 5 до 100)\"}"
        },
        {
            "Name": "voting_start",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Voting start\",\r\n    \"ru\": \"Начать голосование\"\r\n}"
        },
        {
            "Name": "voting_subject",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Voting subject\",\r\n    \"ru\": \"Предмет голосования\"\r\n}"
        },
        {
            "Name": "voting_templates",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Voting templates\",\r\n    \"ru\": \"Шаблоны голосования\"\r\n}"
        },
        {
            "Name": "voting_type",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Voting type\",\r\n    \"ru\": \"Тип голосования\"\r\n}"
        },
        {
            "Name": "voting_volume",
            "Conditions": "",
            "Trans": "{\"en\": \"Volume\", \"ru\": \"Объем\"}"
        },
        {
            "Name": "voting_volume_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Percentage value of votes to fulfill requirements of this voting (from 50 to 100)\", \"ru\": \"Процентная доля голосов для выполнения этого голосования (от 50 до 100)\"}"
        },
        {
            "Name": "waiting",
            "Conditions": "",
            "Trans": "{\"en\": \"Waiting\", \"ru\": \"Ожидание\"}"
        },
        {
            "Name": "want_accept_contract",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to accept this contract?\", \"ru\": \"Вы хотите принять этот контракт?\"}"
        },
        {
            "Name": "want_accept_decision",
            "Conditions": "",
            "Trans": "{\"en\": \"Are you sure you want to accept decision?\", \"ru\": \"Вы уверены, что хотите принять решение?\"}"
        },
        {
            "Name": "want_accept_document",
            "Conditions": "",
            "Trans": "{\"en\": \"Are you sure you want to accept document?\", \"ru\": \"Вы уверены, что хотите принять документ?\"}"
        },
        {
            "Name": "want_assign_member_to_role",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to assign this member of the ecosystem to this role?\",\"ru\":\"Вы хотите назначить этого члена экосистемы на эту роль?\"}"
        },
        {
            "Name": "want_change_status",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to change the status of this member?\", \"ru\": \"Вы хотите изменить статус этого члена?\"}"
        },
        {
            "Name": "want_check_decision",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to check decision?\", \"ru\": \"Вы хотите проверить решение?\"}"
        },
        {
            "Name": "want_check_tokens",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to check the expiration of the tokens?\", \"ru\": \"Вы хотите проверить истечение токенов?\"}"
        },
        {
            "Name": "want_close_account",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to close this account?\", \"ru\": \"Вы хотите закрыть этот счет?\"}"
        },
        {
            "Name": "want_close_notification",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to close this notification?\", \"ru\": \"Вы хотите закрыть это уведомление?\"}"
        },
        {
            "Name": "want_create_new_account",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to create a new account?\",\"ru\":\"Вы хотите создать новый счет?\"}"
        },
        {
            "Name": "want_create_new_company",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to add a new company? The current account will become a multi-account. This action is not reversible.\",\"ru\":\"Вы хотите добавить новую компанию? Текущий аккаунт станет мульти-аккаунтом. Это действие не обратимо.\"}"
        },
        {
            "Name": "want_create_new_role",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to create a new role?\",\"ru\":\"Вы хотите создать новую роль?\"}"
        },
        {
            "Name": "want_create_role_company",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to create a new role for the company?\",\"ru\":\"Вы хотите создать новую роль для компании?\"}"
        },
        {
            "Name": "want_delete_company",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to delete the company? All company roles will also be deleted\",\"ru\":\"Вы хотите удалить компанию? Также будут удалены все роли компании\"}"
        },
        {
            "Name": "want_delete_from_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Are you sure you want to delete this member from the role?\", \"ru\": \"Вы уверены, что хотите удалить этого члена из роли?\"}"
        },
        {
            "Name": "want_delete_member",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to delete this member?\", \"ru\": \"Вы хотите удалить этого члена?\"}"
        },
        {
            "Name": "want_delete_participant_company",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to remove a participant from the company?\",\"ru\":\"Вы хотите удалить участника из компании?\"}"
        },
        {
            "Name": "want_delete_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to delete this role?\", \"ru\": \"Вы хотите удалить эту роль?\"}"
        },
        {
            "Name": "want_delete_tokens",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to delete this tokens?\", \"ru\": \"Вы хотите удалить эти токены?\"}"
        },
        {
            "Name": "want_delete_voting",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to delete this voting?\", \"ru\": \"Вы хотите удалить это голосование?\"}"
        },
        {
            "Name": "want_finish_processing",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to finish processing this notification?\", \"ru\": \"Вы хотите завершить обработку этого уведомления?\"}"
        },
        {
            "Name": "want_make_emission",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to make an emission?\",\"ru\":\"Вы хотите выполнить эмиссию?\"}"
        },
        {
            "Name": "want_reject_contract",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to reject this contract?\", \"ru\": \"Вы хотите отклонить этот контракт?\"}"
        },
        {
            "Name": "want_reject_decision",
            "Conditions": "",
            "Trans": "{\"en\": \"Are you sure you want to reject decision?\", \"ru\": \"Вы уверены, что хотите отклонить решение?\"}"
        },
        {
            "Name": "want_reject_document",
            "Conditions": "",
            "Trans": "{\"en\": \"Are you sure you want to reject document?\", \"ru\": \"Вы уверены, что хотите отклонить документ?\"}"
        },
        {
            "Name": "want_reject_request",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to reject the request?\", \"ru\": \"Вы хотите отклонить запрос?\"}"
        },
        {
            "Name": "want_release_tokens",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to release new tokens?\",\"ru\":\"Вы хотите выпустить новые токены?\"}"
        },
        {
            "Name": "want_return_member",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to return this member?\", \"ru\": \"Вы хотите восстановить этого члена?\"}"
        },
        {
            "Name": "want_rollback_tokens",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to rollback the tokens?\",\"ru\":\"Вы хотите откатить токены?\"}"
        },
        {
            "Name": "want_save_changes",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to save the changes?\",\"ru\":\"Вы хотите сохранить изменения?\"}"
        },
        {
            "Name": "want_send_notific_voters",
            "Conditions": "",
            "Trans": "{\"en\": \" Do you want to send a notification to all the voters?\", \"ru\": \"Вы хотите отправить уведомление всем участникам голосования?\"}"
        },
        {
            "Name": "want_send_tokens",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to send tokens?\",\"ru\":\"Вы хотите отправить токены?\"}"
        },
        {
            "Name": "want_start_processing",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to start processing this notification?\", \"ru\": \"Вы хотите начать обработку этого уведомления?\"}"
        },
        {
            "Name": "want_start_processing_notification",
            "Conditions": "",
            "Trans": "{\"ru\":\"Вы хотите начать обработку уведомления?\",\"en\":\"Do you want to start processing the notification?\"}"
        },
        {
            "Name": "want_vote_for_candidate",
            "Conditions": "",
            "Trans": "{\"en\": \"Are you sure you want to vote for this candidate?\", \"ru\": \"Вы уверены, что хотите проголосовать за этого кандидата?\"}"
        },
        {
            "Name": "web_form",
            "Conditions": "",
            "Trans": "{\"en\":\"Web form address\",\"ru\":\"Адрес web-формы\"}"
        },
        {
            "Name": "web_form_desc",
            "Conditions": "",
            "Trans": "{\"en\":\"Web address of the form for applying for membership (who do not yet have APL)\",\"ru\":\"Адрес web-формы для подачи заявки на членство (у кого еще нет APL)\"}"
        },
        {
            "Name": "web_page",
            "Conditions": "",
            "Trans": "{\r\n    \"en\": \"Page web-address\",\r\n    \"ru\": \"Вэб-адрес страницы\"\r\n}"
        },
        {
            "Name": "written_value",
            "Conditions": "",
            "Trans": "{\"en\": \"Written value\", \"ru\": \"Записываемое значение\"}"
        },
        {
            "Name": "written_value_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Value to be written to the table (Example: 1)\", \"ru\": \"Значение, которое должно быть записано в таблицу (Пример: 1)\"}"
        },
        {
            "Name": "yes",
            "Conditions": "",
            "Trans": "{\"en\":\"Yes\",\"ru\":\"Да\"}"
        },
        {
            "Name": "сlosed",
            "Conditions": "",
            "Trans": "{\"en\": \"Closed\", \"ru\": \"Закрыто\"}"
        }
    ],
    "menus": [
        {
            "Name": "default_menu",
            "Value": "MenuItem(Title:$profile$, Page:profile_view, Icon:\"fa icon-user\")\r\nMenuItem(Title:$membership$, Page:members_list, Icon:\"fa icon-people\")\r\nMenuGroup(Title:$notifications$, Icon:\"fa fa-bell-o\"){\r\n    MenuItem(Title:$single_notifics$, Page:notifications_single, Icon:\"fa fa-bell-o\")\r\n    MenuItem(Title:$role_notifics$, Page:notifications_roles, Icon:\"fa fa-bullhorn\")\r\n    MenuItem(Title:$test_page$, Page:notifications_testpage, Icon:\"icon-settings\")\r\n}\r\nMenuItem(Title:$roles$, Page:roles_list, Icon:\"fa fa-list-ul\")\r\nMenuItem(Title: $catalog_ecosystems$, Page: catalog_ecosystems, Icon:\"fa fa-book\")\r\nMenuGroup(Title:$admin$, Icon:\"fa icon-settings\"){\r\n\tMenuItem(Title:$tokens_transfer$, Page:money_transfer, Icon:\"icon-energy\")\r\n\tMenuItem(Title:$new_ecosystem$, Page:ecosystem_new, Icon:\"icon-globe\")\r\n}\r\nMenuGroup(Title:$voting$, Icon:\"fa fa-edit\"){\r\n    MenuItem(Title:$voting$, Page:voting_list, Icon:\"fa fa-edit\")\r\n}",
            "Conditions": "ContractAccess(\"@1EditMenu\")"
        }
    ],
    "pages": [
        {
            "Name": "catalog_ecosystems",
            "Value": "Div(content-wrapper){\r\n\r\n    SetTitle($catalog_ecosystems$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $catalog_ecosystems$)\r\n    }\r\n\t\r\n\tIf(#param_flag_free#==0){\r\n\t\tSetVar(Name: v_where, Value: \"deleted=0\")\r\n\t}.ElseIf(#param_flag_free#==1){\r\n\t\tSetVar(Name: v_where, Value: \"deleted=0 and flag_free=1\")\r\n\t}.ElseIf(#param_flag_free#==2){\r\n\t\tSetVar(Name: v_where, Value: \"deleted=0 and flag_free=2\")\r\n\t}.Else{\r\n\t\tSetVar(Name: v_where, Value: \"deleted=0\")\r\n\t\tSetVar(Name: param_flag_free, Value:  0)\r\n\t}\r\n\r\n    Div(Class: row){\r\n        Div(Class: col-md-12 text-right){\r\n            Div(Class: btn-group){\r\n                If(#param_flag_free#==1){\r\n\t\t\t\t\tSpan(Button(Body: Em(Class: fa fa-user-o) $not_need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=1\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{    \r\n\t\t\t\t\tSpan(Button(Body: Em(Class: fa fa-user-o) $not_need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=1\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n                If(#param_flag_free#==2){\r\n                    Span(Button(Body: Em(Class: fa fa-money) $need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=2\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-money) $need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=2\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n                If(#param_flag_free#==0){\r\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $all$, Page: catalog_ecosystems, PageParams: \"param_flag_free=0\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $all$, Page: catalog_ecosystems, PageParams: \"param_flag_free=0\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n            }\r\n        }\r\n        Div(Class: col-md-12){\r\n            Div(Class: panel panel-primary){\r\n                DBFind(Name: catalog_ecosystems, Source: src_catalog).Columns(\"id,ecosystem_number,ecosystem_name,ecosystem_type,image_id,flag_free\").Where(#v_where#).Custom(custom_logo){\r\n\t\t\t\t\tDBFind(Name: binary_data, Source: src_binary).Columns(\"binary_data\").Where(\"id=#image_id#\").Vars(img)\r\n                    Image(Src: \"#img_binary_data#\").Style(width:100px;)\r\n                }.Custom(custom_name){\r\n                    LinkPage(Page: catalog_ecosystems_view, PageParams: \"v_id=#id#\"){\r\n                        Span(Class: h5 text-bold, Body: #ecosystem_name#)\r\n                    }\r\n                }.Custom(custom_type){\r\n                    Span(EcosysParam(Name: catalog_ecosystems_type, Index: #ecosystem_type#))\r\n                }.Custom(custom_free){\r\n                    Span(EcosysParam(Name: catalog_ecosystems_freetype, Index: #flag_free#))\r\n                }.Order(\"ecosystem_number\")\r\n\r\n                Div(Class: panel-body){\r\n                    Div(Class: table-responsive){\r\n                        Table(Source: src_catalog, Columns:\"$ecosystem_number$=ecosystem_number,$logo$=custom_logo,$name$=custom_name,$type$=custom_type,$freetype$=custom_free\")\r\n                    }\r\n                }\r\n                Div(Class: panel-footer clearfix){\r\n                    Div(Class: pull-right){\r\n                        Button(Class: btn btn-primary, Page: catalog_ecosystems_add, Body: LangRes(add))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "catalog_ecosystems_add",
            "Value": "Div(content-wrapper){\r\n\r\n    SetTitle($catalog_ecosystems_form$)\r\n    Div(Class: breadcrumb){\r\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $catalog_ecosystems_form$)\r\n    }\r\n\r\n\tDiv(Class: row df f-valign){\r\n\t\tDiv(Class: col-lg-10 col-lg-offset-1){\r\n\t\t\tDiv(Class: panel panel-primary){\r\n\t\t\t\tForm(){\r\n\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-5 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(catalog_ecosystems_number))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-7 mb-sm text-left){\r\n\t\t\t\t\t\t\t\tEcosysParam(Name: catalog_ecosystems_list, Source: src_num)\r\n\t\t\t\t\t\t\t\tSelect(Name: Ecosystem_number, Source: src_num, Class: form-control, NameColumn: name, ValueColumn: id).Validate(required)\r\n\t\t\t\t\t\t\t\tInputErr(Name: Ecosystem_number, required: need)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-5 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(catalog_ecosystems_logo))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-7 mb-sm text-left){\r\n\t\t\t\t\t\t\t\tImageInput(Name: Logo, Width: 300, Ratio: 2/1)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-5 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(catalog_ecosystems_name))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-7 mb-sm text-left){\r\n\t\t\t\t\t\t\t\tInput(Name: Ecosystem_name, Type: text)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-5 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(catalog_ecosystems_type))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-7 mc-sm text-left){\r\n\t\t\t\t\t\t\t\tEcosysParam(Name: catalog_ecosystems_type, Source: src_type)\r\n\t\t\t\t\t\t\t\tSelect(Name: Ecosystem_type, Source: src_type, NameColumn: name, ValueColumn: id)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-5 mt-lg text-right){\r\n\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(catalog_ecosystems_freetype))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-7 mc-sm text-left){\r\n\t\t\t\t\t\t\t\tEcosysParam(Name: catalog_ecosystems_freetype, Source: src_freetype)\r\n\t\t\t\t\t\t\t\tRadioGroup(Name: Flag_free, Source: src_freetype, NameColumn: name, ValueColumn: id)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-5 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(catalog_ecosystems_description))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-7 mb-sm text-left){\r\n\t\t\t\t\t\t\t\tInput(Name: Description, Type: textarea)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-5 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(catalog_ecosystems_conditions))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-7 mc-sm text-left){\r\n\t\t\t\t\t\t\t\tInput(Name: Conditions, Type: textarea)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-5 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(vde_page))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-7 mb-sm text-left){\r\n\t\t\t\t\t\t\t\tInput(Name: Vde_page, Type: text)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-5 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(vde_form_desc))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-7 mc-sm text-left){\r\n\t\t\t\t\t\t\t\tInput(Name: Vde_form_address, Type: text)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-5 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(web_page))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-7 mb-sm text-left){\r\n\t\t\t\t\t\t\t\tInput(Name: Web_page, Type: text)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-5 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(web_form_desc))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-7 mc-sm text-left){\r\n\t\t\t\t\t\t\t\tInput(Name: Web_form_address, Type: text)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-5 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(catalog_ecosystems_contact_email))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-7 mb-sm text-left){\r\n\t\t\t\t\t\t\t\tInput(Name: Email, Type: text)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-5 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(catalog_ecosystems_contact_phone))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-7 mc-sm text-left){\r\n\t\t\t\t\t\t\t\tInput(Name: Phone, Type: text)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(Class: panel-footer clearfix){\r\n\t\t\t\t\t\tDiv(Class: pull-right){\r\n\t\t\t\t\t\t\tButton(Body: LangRes(back), Class: btn btn-default, Page: catalog_ecosystems)\r\n\t\t\t\t\t\t\tButton(Contract: catalog_ecosystems_Add, Class: btn btn-primary, Page: catalog_ecosystems, Body: $send$)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "catalog_ecosystems_request",
            "Value": "Div(Class: content-wrapper){\r\n    DBFind(Name: catalog_ecosystems, Source: src_catalog).Columns(\"ecosystem_name,ecosystem_number\").Where(\"id=#v_id#\").Vars(prefix)\r\n\r\n    SetTitle($request_membership$)\r\n    Div(Class: breadcrumb){\r\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        LinkPage(#prefix_ecosystem_name#, catalog_ecosystems_view,, \"v_id=#v_id#\")\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $request_membership$)\r\n    }\r\n\r\n    Div(Class: row df f-valign){\r\n        Div(Class: col-md-10 col-md-offset-1){\r\n            Div(Class: panel panel-primary){\r\n                Div(Class: panel-heading, Body: LangRes(request_membership))\r\n                Form(){ \r\n\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tLabel(For: pub_key){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(pub_key))\r\n      \t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-9 mb-sm text-left){\r\n\t\t\t\t\t\t\t\tInput(Class: form-control, Type: text, Name: pub_key)\r\n\t\t\t\t\t\t\t} \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                \t\t\tDiv(Class: col-md-3 mt-lg text-right){\r\n                                Label(For: comment){\r\n                                    Span(Body: LangRes(comment))\r\n                                }\r\n                            }\r\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\r\n                \t\t\t    Input(Name: comment, Class: form-control, Type: textarea, Value: no)\r\n                \t\t\t}\r\n                        }\r\n                    }\r\n\t\t\t\t\tDiv(Class: panel-footer clearfix){\r\n\t\t\t\t\t\tDiv(Class: pull-right){\r\n\t\t\t\t\t\t\tButton(Body: LangRes(back), Class: btn btn-default, Page: catalog_ecosystems_view, PageParams: \"v_id=#v_id#\")\r\n\t\t\t\t\t\t\tButton(Body: LangRes(send), Class: btn btn-primary, Contract: catalog_ecosystems_Request, Params: \"ecosystem_num=#prefix_ecosystem_number#\", Page: catalog_ecosystems_view, PageParams: \"v_id=#v_id#\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "catalog_ecosystems_view",
            "Value": "Div(Class: content-wrapper){\r\n    DBFind(Name: catalog_ecosystems, Source: src_catalog).Columns(\"id,ecosystem_name,ecosystem_type,ecosystem_number,image_id,flag_free,ecosystem_info->email,ecosystem_info->phone,ecosystem_info->description,ecosystem_info->conditions,url_address->vde_form_address,url_address->web_page,url_address->vde_page,url_address->web_form_address\").Where(\"id=#v_id#\").Vars(prefix)\r\n\r\n    SetTitle($catalog_ecosystems_number$: #prefix_ecosystem_name#)\r\n    Div(Class: breadcrumb){\r\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: #prefix_ecosystem_name#)\r\n    }\r\n\r\n    Div(Class: row df f-valign){\r\n        Div(Class: col-md-10 col-md-offset-1){\r\n            Div(Class: panel panel-default){\r\n                Form(){ \r\n\t\t\t\t\tDiv(Class: list-group-item text-center){\r\n\t\t\t\t\t\tSpan(Class: text-bold h3, Body: #prefix_ecosystem_name# (##prefix_ecosystem_number#))\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-12 mt-sm text-center){\r\n                                If(#prefix_image_id# > 0){\r\n\t\t\t\t\t\t\t\t\tDBFind(Name: binary_data, Source: src_binary).Columns(\"binary_data\").Where(\"id=#prefix_image_id#\").Vars(img)\r\n                                    Image(Src: \"#img_binary_data#\").Style(width: 300px;)\r\n                                }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n                    Div(Class: list-group-item text-center){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-6 mc-sm text-right){\r\n\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(type))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t}\r\n                            }\r\n                            Div(Class: col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: EcosysParam(Name: catalog_ecosystems_type, Index: #prefix_ecosystem_type#))\r\n                            }\r\n                        }\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-6 mc-sm text-right){\r\n\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(catalog_ecosystems_description))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t}\r\n                            }\r\n                            Div(Class: col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_description#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(Class: list-group-item text-center){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-6 mc-sm text-right){\r\n\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(catalog_ecosystems_freetype))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t}\r\n                            }\r\n                            Div(Class: col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: EcosysParam(Name: catalog_ecosystems_freetype, Index: #prefix_flag_free#))\r\n                            }\r\n                        }\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-6 mc-sm text-right){\r\n\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(catalog_ecosystems_conditions))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t}\r\n                            }\r\n                            Div(Class: col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_conditions#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(Class: list-group-item text-center){ \r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(vde_form_desc))\r\n                            }\r\n                            Div(Class: col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_form_address#)\r\n                            }\r\n                        }\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(vde_page))\r\n                            }\r\n                            Div(Class: col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_page#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(Class: list-group-item text-center){ \r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(web_form_desc))\r\n                            }\r\n                            Div(Class: col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_form_address#)\r\n                            }\r\n                        }\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(web_page))\r\n                            }\r\n                            Div(Class: col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_page#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(Class: list-group-item text-center){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(catalog_ecosystems_contact_email))\r\n                            }\r\n                            Div(Class: col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_email#)\r\n                            }\r\n                        }\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(catalog_ecosystems_contact_phone))\r\n                            }\r\n                            Div(Class: col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_phone#)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\t\t\t\t\tDBFind(Name: keys, Source: src_keys).Where(\"id = #key_id#\").Vars(key)\r\n\t\t\t\t\tIf(#key_amount# > 0){\r\n\t\t\t\t\t\tDBFind(Name: membership_requests, Source: src_membership).Ecosystem(#prefix_ecosystem_number#).Where(\"member_id = #key_id#\").Vars(request)\r\n\t\t\t\t\t\tIf(#request_id#>0){\r\n\t\t\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-12 mt-sm text-center){\r\n\t\t\t\t\t\t\t\t\t\tIf(#request_status# == 0){\r\n\t\t\t\t\t\t\t\t\t\t\tEm(Class: fa fa-question-circle fa-5x text-warning)\r\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: text-center h4 text-bold text-warning, Body: LangRes(request_wating))\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tIf(#request_status# == 1){\r\n\t\t\t\t\t\t\t\t\t\t\tEm(Class: fa fa-check-circle fa-5x text-success)\r\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: text-center h4 text-bold text-success, Body: LangRes(request_accepted))\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tIf(#request_status# == -1){\r\n\t\t\t\t\t\t\t\t\t\t\tEm(Class: fa fa-minus-circle fa-5x text-danger)\r\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: text-center h4 text-bold text-danger, Body: LangRes(request_rejected))\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-12 mt-sm text-center){\r\n\t\t\t\t\t\t\t\t\t\tEm(Class: fa fa-exclamation-circle fa-5x text-primary)\r\n\t\t\t\t\t\t\t\t\t\tDiv(Class: text-center h4 text-bold text-primary, Body: LangRes(request_not_sent))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: panel-footer clearfix){\r\n\t\t\t\t\t\t\t\tDiv(Class: pull-right){\r\n\t\t\t\t\t\t\t\t\tButton(Body: LangRes(send), Class: btn btn-primary, Page: catalog_ecosystems_request, PageParams: \"v_id=#v_id#\")\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "ecosystem_new",
            "Value": "Div(Class: content-wrapper){\r\n\r\n    SetTitle(New Ecosystem)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: New Ecosystem)\r\n    }\r\n\r\n    Div(row df f-valign){\r\n        Div(col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4){\r\n            Div(panel panel-primary){\r\n                Div(panel-heading, New Ecosystem)\r\n                Form(){ \r\n\t\t\t\t\tDiv(list-group-item){\r\n\t\t\t\t\t\tDiv(row df f-valign){\r\n\t\t\t\t\t\t\tDiv(col-md-3 mt-sm  text-right){\r\n\t\t\t\t\t\t\t\tLabel(For: Name){\r\n\t\t\t\t\t\t\t\t\tSpan(Name)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(col-md-9 mc-sm text-left){\r\n\t\t\t\t\t\t\t\tInput(Class:form-control, Placeholder:text, Type:text, Name:Name)\r\n\t\t\t\t\t\t\t} \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(panel-footer clearfix){\r\n\t\t\t\t\t\tDiv(pull-right){\r\n\t\t\t\t\t\t\tButton(Body: LangRes(create), Class: btn btn-primary, Contract: NewEcosystem)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "members_list",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($membership$)\r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: $membership$)\r\n\t}\r\n\r\n    If(GetVar(isSearch) == 1){\r\n        SetVar(Name: v_Where, Value: \"member_name='#v_Search#'\")\r\n    }.Else{\r\n        SetVar(Name: v_Where, Value: \"id!=0\")\r\n        SetVar(Name: v_Search, Value: \"\")\r\n    }\r\n\r\n    DBFind(Name: members, Source: src_member).Columns(\"id,member_name,image_id\").Custom(custom_member_id){\r\n\t\tSetVar(Name: style_text, Value: \"text-normal\")\r\n\t\tSetVar(Name: style_link, Value: \"text-primary\")\r\n\t\tSpan(Class: #style_text#, Body: Address(#id#))\r\n\t}.Custom(custom_username){\r\n\t\tSetVar(Name: img_id, Value: 0)\r\n\t\tDBFind(Name: binary_data, Source: src_binary).Columns(\"binary_data\").Where(\"id=#image_id#\").Vars(img)\r\n\t\tLinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#id#\"){\r\n\t\t\tIf(#img_id#>0){\r\n\t\t\t\tImage(Src: \"#img_binary_data#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\r\n\t\t\t\tSpan(#member_name#)\r\n\t\t\t}.Else{\r\n\t\t\t\tDiv(){\r\n\t\t\t\t\tSpan(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n\t\t\t\t\tSpan(#member_name#)\r\n\t\t\t\t}.Style(display:flex; align-items:center;)\r\n\t\t\t}\r\n\t\t}\r\n    }.Where(#v_Where#).Order(\"member_name\")\r\n\r\n    Div(Class: panel panel-primary){\r\n        Form(){\r\n            Div(Class: list-group-item){\r\n                Div(Class: row df f-valign){\r\n                    Div(Class: col-md-1 mt-sm text-right){\r\n                        Label(For: Search){\r\n                            Span(Body: LangRes(username))\r\n                        }\r\n                    }\r\n                    Div(Class: col-md-11 mc-sm){\r\n                        Div(Class: input-group){\r\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\r\n                            Div(Class: input-group-btn){\r\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: members_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: list-group-item){ \r\n                Table(Source: src_member, Columns: \"$username$=custom_username,$id$=id,$address$=custom_member_id\")\r\n                If(GetVar(isSearch) == 1){\r\n                    Div(Class: text-center){  \r\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: members_list, PageParams: \"isSearch=0\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "money_transfer",
            "Value": "SetTitle(Money transfer)\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: Money transfer)\r\n    }\r\n    Div(row df f-valign){\r\n        Div(col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4){\r\n            Div(panel panel-primary){\r\n                Div(panel-heading, Body: Money transfer)\r\n                Form(){\r\n                    Div(list-group-item){\r\n                        Div(row df f-valign){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(\"Recipient\")\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                Input(Name: \"Recipient\", Type: \"text\", Placeholder: \"xxxx-xxxx-xxxx-xxxx\")\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row df f-valign){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(\"Pub\")\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                Input(Name: \"Pub\", Type: \"text\")\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row df f-valign){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(\"Amount\")\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                Input(Name: \"Amount\", Type: \"text\", Placeholder: \"0\", Value: \"50000000000000000000000\")\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Button(Contract: \"@1MoneyTransfer\", Body: \"Send\", Class: \"btn btn-primary\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        DBFind(Name: keys, Source: src_key)\r\n        Div(col-md-12){\r\n            Div(table-responsive){\r\n                Table(Source: src_key)\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "notifications",
            "Value": "DBFind(Name: notifications, Source: notifications_members).Columns(\"id,page_name,notification->icon,notification->header,notification->body\").Where(\"closed=0 and notification->type='1' and recipient->member_id='#key_id#'\")\r\nForList(notifications_members){\r\n\tDiv(Class: list-group-item){\r\n\t\tLinkPage(Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n\t\t\tDiv(media-box){\r\n\t\t\t\tDiv(Class: pull-left){\r\n\t\t\t\t\tEm(Class: fa #notification.icon# fa-1x text-primary)\r\n\t\t\t\t}\r\n\t\t\t\tDiv(media-box-body clearfix){\r\n\t\t\t\t\tDiv(Class: m0 text-normal, Body: #notification.header#)\r\n\t\t\t\t\tDiv(Class: m0 text-muted h6, Body: #notification.body#)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nDBFind(Name: notifications, Source: notifications_roles).Columns(\"id,page_name,notification->icon,notification->header,notification->body,recipient->role_id\").Where(\"closed=0 and notification->type='2' and (date_start_processing is null or processing_info->member_id='#key_id#')\")\r\nForList(notifications_roles){\r\n    DBFind(Name: roles_participants, Source: src_roles).Columns(\"id\").Where(\"member->member_id='#key_id#' and role->id='#recipient.role_id#' and deleted=0\").Vars(prefix)\r\n    If(#prefix_id# > 0){\r\n\t\tDiv(Class: list-group-item){\r\n\t\t\tLinkPage(Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n\t\t\t\tDiv(media-box){\r\n\t\t\t\t\tDiv(Class: pull-left){\r\n\t\t\t\t\t\tEm(Class: fa #notification.icon# fa-1x text-primary)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(media-box-body clearfix){ \r\n\t\t\t\t\t\tDiv(Class: m0 text-normal, Body: #notification.header#)\r\n\t\t\t\t\t\tDiv(Class: m0 text-muted h6, Body: #notification.body#)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "notifications_roles",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($role_notifics$)\r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: $role_notifics$)\r\n\t}\r\n\r\n    If(GetVar(isSearch) == 1){\r\n        SetVar(Name: v_Where, Value: \"notification->type='2' and recipient->role_name='#v_Search#'\")\r\n    }.Else{\r\n        SetVar(Name: v_Where, Value: \"notification->type='2'\")\r\n        SetVar(Name: v_Search, Value: \"\")\r\n    }\r\n\r\n    DBFind(Name: notifications, Source: src_notifications).Columns(\"id,recipient->role_id,recipient->role_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,page_name,page_params,date_created,date_closed,date_start_processing,processing_info->member_name,closed\").Custom(custom_id){\r\n\t\tIf(#closed# == 0){\r\n\t\t\tSetVar(Name: style_text, Value: \"text-normal\")\r\n\t\t\tSetVar(Name: style_link, Value: \"text-primary\")\r\n\t\t}.Else{\r\n\t\t\tSetVar(Name: style_text, Value: \"text-muted\")\r\n\t\t\tSetVar(Name: style_link, Value: \"text-muted\")\r\n\t\t}\r\n        Span(Class: #style_text#, Body: #id#)\r\n    }.Custom(custom_recipient){\r\n\t\tSetVar(Name: img_id, Value: 0)\r\n\t\tDBFind(Name: binary_data, Source: src_binary).Columns(\"binary_data\").Where(\"id=#recipient.image_id#\").Vars(img)\r\n\t\tLinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#recipient.role_id#\"){\r\n\t\t\tIf(#img_id#>0){\r\n\t\t\t\tImage(Src: \"#img_binary_data#\").Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n\t\t\t\tSpan(#recipient.role_name#)\r\n\t\t\t}.Else{\r\n\t\t\t\tDiv(){\r\n\t\t\t\t\tSpan(Em(Class: fa icon-settings fa-2x)).Style(margin-right:10px;)\r\n\t\t\t\t\tSpan(#recipient.role_name#)\r\n\t\t\t\t}.Style(display:flex; align-items:center;)\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n    }.Custom(custom_sender){\r\n\t\tIf(#sender.type#==1){\r\n\t\t\tLinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#sender.member_id#\"){\r\n\t\t\t\tSpan(Body: #sender.member_name#)\r\n\t\t\t}\r\n\t\t}\r\n\t\tIf(#sender.type#==2){\r\n\t\t\tLinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#sender.role_id#\"){\r\n\t\t\t\tSpan(Body: #sender.role_name#)\r\n\t\t\t}\r\n\t\t}\r\n    }.Custom(custom_icon){\r\n        Em(Class: fa #notification.icon# fa-2x #style_text#)\r\n    }.Custom(custom_page){\r\n\t\tLinkPage(Class: #style_link# h5 text-bold, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n\t\t\tSpan(Body: #page_name#)\r\n\t\t}\r\n    }.Custom(custom_date){\r\n\t\tDiv(Class: #style_text# h6 m0 , Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n\t\tDiv(Class: #style_text# h6 m0 , Body: DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\"))\r\n    }.Custom(custom_processing){\r\n        If(#date_start_processing# == NULL){\r\n\t\t\tP(Class: #style_text# h6 m0, Body: $not_started$)\r\n        }.Else{\r\n\t\t\tP(Class: #style_text# h6 m0, Body: $started$ #processing_info.member_name# $at$)\r\n            P(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_start_processing#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        }\r\n    }.Custom(custom_status){\r\n        If(#closed# == 0){\r\n            If(#date_start_processing# == NULL){\r\n                Span(Class: #style_text#, Body: LangRes(active))\r\n            }.Else{\r\n                Span(Class: #style_text#, Body: LangRes(processing))\r\n            }\r\n        }.Else{\r\n            Span(Class: #style_text#, Body: LangRes(сlosed))\r\n        }\r\n    }.Custom(actions){\r\n\t\tDiv(Class: pull-right){\r\n\t\t\tIf(#closed# == 0){\r\n\t\t\t\tIf(#date_start_processing# == NULL){\r\n\t\t\t\t\tButton(Body: Em(Class: fa fa-recycle), Class: btn btn-default, Contract: Notifications_Roles_Processing, Params: \"notific_id=#id#\", Page: notifications_roles).Alert(Text: $want_start_processing_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n\t\t\t\t}.Else{\r\n\t\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: Notifications_Roles_Close, Params: \"notific_id=#id#\", Page: notifications_roles).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\r\n    }.Where(#v_Where#).Order(\"closed ASC, id ASC\")\r\n\r\n    Div(Class: panel panel-primary){\r\n        Form(){\r\n            Div(Class: list-group-item){\r\n                Div(Class: row df f-valign){\r\n                    Div(Class: col-md-1 mt-sm text-right){\r\n                        Label(For: Search){\r\n                            Span(Body: LangRes(role))\r\n                        }\r\n                    }\r\n                    Div(Class: col-md-11 mc-sm){\r\n                        Div(Class: input-group){\r\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\r\n                            Div(Class: input-group-btn){\r\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: notifications_roles, PageParams: \"isSearch=1,v_Search=Val(Search)\")\r\n                            }\r\n                        }\r\n                    }\r\n                }  \r\n            }\r\n\r\n            Div(Class: list-group-item){ \r\n                Table(Source: src_notifications, Columns: \"$id$=custom_id,$icon$=custom_icon,$recipient$=custom_recipient,$page_name$=custom_page,$sender$=custom_sender,$processing$=custom_processing,$sent$/$сlosed$=custom_date,$status$=custom_status,=actions\")\r\n                If(GetVar(isSearch) == 1){\r\n                    Div(Class: text-center){  \r\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_roles, PageParams: \"isSearch=0\")\r\n                    }\r\n                }\r\n            }\r\n\r\n            Div(Class: panel-footer clearfix){\r\n                Div(Class: pull-right){\r\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_roles_send)\r\n                }\r\n            }\r\n            \r\n        }           \r\n    }\r\n\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "notifications_roles_send",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($role_notifics$)\r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: $role_notifics$)\r\n\t}\r\n\r\n    Div(Class: row df f-valign){\r\n        Div(Class: col-md-6 col-md-offset-3){\r\n            Div(Class: panel panel-primary){\r\n                Div(Class: panel-heading, Body: LangRes(role_notifics))\r\n                Form(){\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(recipient))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mb-sm text-left){\r\n                                DBFind(Name: roles, Source: source_roles).Columns(\"id,role_name\").Where(\"deleted=0\")\r\n                                Select(Name: role_id, Source: source_roles, NameColumn: role_name, ValueColumn: id)\r\n                            } \r\n                        }\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(closure_type))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                EcosysParam(Name: notification_closure, Source: src_closure_type)\r\n                                Select(Name: closure_type, Source: src_closure_type, NameColumn: name, ValueColumn: id)\r\n                            } \r\n                        }\r\n                    }\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(sender))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                EcosysParam(Name: notification_sender, Source: src_sender)\r\n                                Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\r\n                            } \r\n                        }\r\n                    }\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(icon))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mb-sm text-left){\r\n                                EcosysParam(Name: notification_icon, Source: src_icon)\r\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\r\n                            } \r\n                        }\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(header))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mb-sm text-left){\r\n                                Input(Class: form-control, Value: \"Header text\", Type: text, Name: text_header).Validate(minLength:3, maxLength:255)\r\n\t\t\t\t\t\t\t\tInputErr(Name: text_header, minLength: $validate_notification$, maxLength: $validate_role_name$)\r\n                            } \r\n                        }\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(body_text))\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                Input(Class: form-control, Value: \"Body text\", Type: text, Name: text_body)\r\n                            } \r\n                        }\r\n                    }\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(page_name))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mb-sm text-left){\r\n                                Input(Class: form-control, Value: \"notifications_testpage\", Type: text, Name: page_name).Validate(minLength:3, maxLength:255)\r\n\t\t\t\t\t\t\t\tInputErr(Name: page_name, minLength: $validate_notification$, maxLength: $validate_role_name$)\r\n                            } \r\n                        }\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(params))\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                Input(Class: form-control, Value: \"\", Type: text, Name: params_val)\r\n                            } \r\n                        }\r\n                    }\r\n                    Div(Class: panel-footer clearfix){\r\n                        Div(Class: pull-right){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: notifications_roles)\r\n                            Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_roles, Contract: Notifications_Roles_Send_str)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "notifications_single",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($single_notifics$)\r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: $single_notifics$)\r\n\t}\r\n\r\n    If(GetVar(isSearch) == 1){\r\n        SetVar(Name: v_Where, Value: \"notification->type='1' and recipient->member_name='#v_Search#'\")\r\n    }.Else{\r\n        SetVar(Name: v_Where, Value: \"notification->type='1'\")\r\n        SetVar(Name: v_Search, Value: \"\")\r\n    }\r\n\t\r\n    DBFind(Name: notifications, Source: src_notifications).Columns(\"id,recipient->member_id,recipient->member_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,page_name,page_params,date_created,date_closed,closed\").Custom(custom_id){\r\n\t\tIf(#closed# == 0){\r\n\t\t\tSetVar(Name: style_text, Value: \"text-normal\")\r\n\t\t\tSetVar(Name: style_link, Value: \"text-primary\")\r\n\t\t}.Else{\r\n\t\t\tSetVar(Name: style_text, Value: \"text-muted\")\r\n\t\t\tSetVar(Name: style_link, Value: \"text-muted\")\r\n\t\t}\r\n\t\tSpan(Class: #style_text#, Body: #id#)\r\n    }.Custom(custom_recipient){\r\n\t\tSetVar(Name: img_id, Value: 0)\r\n\t\tDBFind(Name: binary_data, Source: src_binary).Columns(\"binary_data\").Where(\"id=#recipient.image_id#\").Vars(img)\r\n\t\tLinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#recipient.member_id#\"){\r\n\t\t\tIf(#img_id#>0){\r\n\t\t\t\tImage(Src: \"#img_binary_data#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\r\n\t\t\t\tSpan(#recipient.member_name#)\r\n\t\t\t}.Else{\r\n\t\t\t\tDiv(){\r\n\t\t\t\t\tSpan(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n\t\t\t\t\tSpan(#recipient.member_name#)\r\n\t\t\t\t}.Style(display:flex; align-items:center;)\r\n\t\t\t}\r\n\t\t}\r\n    }.Custom(custom_sender){\r\n\t\tIf(#sender.type#==1){\r\n\t\t\tLinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#sender.member_id#\"){\r\n\t\t\t\tSpan(Body: #sender.member_name#)\r\n\t\t\t}\r\n\t\t}\r\n\t\tIf(#sender.type#==2){\r\n\t\t\tLinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#sender.role_id#\"){\r\n\t\t\t\tSpan(Body: #sender.role_name#)\r\n\t\t\t}\r\n\t\t}\r\n    }.Custom(custom_icon){\r\n\t\tEm(Class: fa #notification.icon# fa-2x #style_text#)\r\n    }.Custom(custom_page){\r\n\t\tLinkPage(Class: #style_link# h5 text-bold, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n\t\t\tSpan(Body: #page_name#)\r\n\t\t}\r\n    }.Custom(custom_date){\r\n\t\tDiv(Class: #style_text# h6 m0 , Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n\t\tDiv(Class: #style_text# h6 m0 , Body: DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\"))\t\r\n    }.Custom(custom_status){\r\n\t\tIf(#closed# == 0){\r\n\t\t\tSpan(Class: #style_text#, Body: LangRes(active))\r\n\t\t}.Else{\r\n\t\t\tSpan(Class: #style_text#, Body: LangRes(сlosed))\r\n\t\t}\r\n    }.Custom(actions){\r\n\t\tDiv(Class: pull-right){\r\n\t\t\tIf(#closed# == 0){\r\n\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: Notifications_Single_Close, Params: \"notific_id=#id#\", Page: notifications_single).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n\t\t\t}\r\n\t\t}\r\n    }.Where(#v_Where#).Order(\"closed ASC, id ASC\")\r\n\r\n    Div(Class: panel panel-primary){\r\n        Form(){\r\n            Div(Class: list-group-item){\r\n                Div(Class: row df f-valign){\r\n                    Div(Class: col-md-1 mt-sm text-right){\r\n                        Label(For: Search){\r\n                            Span(Body: LangRes(recipient))\r\n                        }\r\n                    }\r\n                    Div(Class: col-md-11 mc-sm){\r\n                        Div(Class: input-group){\r\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\r\n                            Div(Class: input-group-btn){\r\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: notifications_single, PageParams: \"isSearch=1,v_Search=Val(Search)\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: list-group-item){\r\n                Table(Source: src_notifications, Columns: \"$id$=custom_id,$icon$=custom_icon,$recipient$=custom_recipient,$page_name$=custom_page,$sender$=custom_sender,$sent$/$сlosed$=custom_date,$status$=custom_status,=actions\")\r\n                If(GetVar(isSearch) == 1){\r\n                    Div(Class: text-center){\r\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_single, PageParams: \"isSearch=0\")\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: panel-footer clearfix){\r\n                Div(Class: pull-right){\r\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_single_send)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "notifications_single_send",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($single_notifics$)\r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: $single_notifics$)\r\n\t}\r\n\r\n    Div(Class: row df f-valign){\r\n        Div(Class: col-md-6 col-md-offset-3){\r\n            Div(Class: panel panel-primary){\r\n                Div(Class: panel-heading, Body: LangRes(single_notifics))\r\n                Form(){\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(recipient))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                DBFind(Name: members, Source: source_members).Columns(\"id,member_name\")\r\n                                Select(Name: member_id, Source: source_members, NameColumn: member_name, ValueColumn: id)\r\n                            } \r\n                        }\r\n                    }\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(sender))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                EcosysParam(Name: notification_sender, Source: src_sender)\r\n                                Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\r\n                            } \r\n                        }\r\n                    }\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(icon))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mb-sm text-left){\r\n                                EcosysParam(Name: notification_icon, Source: src_icon)\r\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\r\n                            } \r\n                        }\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(header))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mb-sm text-left){\r\n                                Input(Class: form-control, Value: \"Header text\", Type: text, Name: text_header).Validate(minLength:3, maxLength:255)\r\n\t\t\t\t\t\t\t\tInputErr(Name: text_header, minLength: $validate_notification$, maxLength: $validate_role_name$)\r\n                            } \r\n                        }\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(body_text))\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                Input(Class: form-control, Value: \"Body text\", Type: text, Name: text_body)\r\n                            } \r\n                        }\r\n                    }\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(page_name))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mb-sm text-left){\r\n                                Input(Class: form-control, Value: \"notifications_testpage\", Type: text, Name: page_name).Validate(minLength:3, maxLength:255)\r\n\t\t\t\t\t\t\t\tInputErr(Name: page_name, minLength: $validate_notification$, maxLength: $validate_role_name$)\r\n                            } \r\n                        }\r\n                        Div(Class: row df f-valign){\r\n                            Div(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(params))\r\n                                }\r\n                            }\r\n                            Div(Class: col-md-9 mc-sm text-left){\r\n                                Input(Class: form-control, Value: \"\", Type: text, Name: params_val)\r\n                            } \r\n                        }\r\n                    }\r\n                    Div(Class: panel-footer clearfix){\r\n                        Div(Class: pull-right){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: notifications_single)\r\n                            Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_single, Contract: Notifications_Single_Send_str)\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "notifications_testpage",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($test_page$)\r\n\tDiv(Class: breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: LangRes(test_page))\r\n\t}\r\n\r\n    If(#notific_id# > 0){\r\n\t\tDBFind(Name: notifications, Source: src_notifications).Columns(\"id,notification->type,notification->header,page_params->param_int,page_params->param_str,date_start_processing,closed\").Where(\"id=#notific_id#\").Vars(prefix)\r\n        SetVar(Name: notific_type, Value: #prefix_notification_type#)\r\n        SetVar(Name: notific_header, Value: #prefix_notification_header#)\r\n        SetVar(Name: notific_val_int, Value: #prefix_page_params_param_int#)\r\n        SetVar(Name: notific_val_str, Value: #prefix_page_params_param_str#)\r\n\t}.Else{\r\n        Div(Class: md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n        SetVar(Name: notific_id, Value: \"0\")\r\n        SetVar(Name: notific_type, Value: \"0\")\r\n        SetVar(Name: notific_header, Value: \"null\")\r\n        SetVar(Name: notific_val_int, Value: \"null\")\r\n        SetVar(Name: notific_val_str, Value: \"null\")\r\n    }\r\n\r\n    Div(Class: row df f-valign){\r\n        Div(Class: col-md-6 col-md-offset-3){\r\n            Div(Class: panel panel-default){\r\n                Form(){\r\n\t\t\t\t\tDiv(Class: list-group-item text-center){\r\n\t\t\t\t\t\tSpan(Class: h3 , Body: #notific_header#)\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: LangRes(id))\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\r\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: #notific_id#)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: LangRes(type))\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\r\n                                If(#notific_type# > 0){\r\n\t\t\t\t\t\t\t\t    Span(Class: h4, Body: EcosysParam(Name: notification_type, Index: #notific_type#))\r\n                                }.Else{\r\n                                    Span(Class: h4, Body: #notific_type#)\r\n                                }\r\n                            }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: LangRes(value_number))\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\r\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: #notific_val_int#)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: LangRes(value_string))\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\r\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: #notific_val_str#)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tIf(#notific_type# == 1){\r\n\t\t\t\t\t\tIf(#prefix_closed# == 0){\r\n\t\t\t\t\t\t\tDiv(Class: panel-footer clearfix){\r\n\t\t\t\t\t\t\t\tDiv(Class: pull-right){\r\n\t\t\t\t\t\t\t\t\tButton(Body: LangRes(close), Class: btn btn-primary, Contract: Notifications_Single_Close, Params: \"notific_id=#notific_id#\", Page: notifications_single).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tIf(#notific_type# == 2){\r\n\t\t\t\t\t\tIf(#prefix_closed# == 0){\r\n\t\t\t\t\t\t\tDiv(Class: panel-footer clearfix){\r\n\t\t\t\t\t\t\t\tDiv(Class: pull-right){\r\n\t\t\t\t\t\t\t\t\tIf(#prefix_date_start_processing# == \"\"){\r\n\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(begin), Class: btn btn-primary, Contract: Notifications_Roles_Processing, Params: \"notific_id=#notific_id#\", Page: notifications_roles).Alert(Text: $want_start_processing_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(close), Class: btn btn-primary, Contract: Notifications_Roles_Close, Params: \"notific_id=#notific_id#\", Page: notifications_roles).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "profile_edit",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($editing_profile$)\r\n\tDiv(Class: breadcrumb){\r\n\t\tLinkPage($user_info$, profile_view)\r\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\tSpan(Class: text-muted, Body: $editing_profile$)\r\n\t}\r\n\r\n\tIf(Or(#v_member_id#>0,#v_member_id#<0)){\r\n        DBFind(Name: members, Source: src_member).Columns(\"id,member_name,image_id,member_info->information\").Where(id=#v_member_id#).Vars(prefix)\r\n    }.Else{\r\n        DBFind(Name: members, Source: src_member).Columns(\"id,member_name,image_id,member_info->information\").Where(id=#key_id#).Vars(prefix)\r\n    }\r\n\r\n    Div(Class: row df f-valign){\r\n        Div(Class: col-md-6 col-md-offset-3){\r\n            Div(Class: panel panel-primary){\r\n                Div(Class: panel-heading, Body: LangRes(editing_profile))\r\n                Form(){ \r\n\r\n\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tLabel(For: member_name){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(member_name))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-9 mb-sm text-left){\r\n\t\t\t\t\t\t\t\tIf(Or(#prefix_id#>0,#prefix_id#<0)){\r\n\t\t\t\t\t\t\t\t\tInput(Class: form-control, Type: text, Name: member_name, Value: #prefix_member_name#, Disabled: true)\r\n\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\tInput(Class: form-control, Type: text, Name: member_name).Validate(minLength:5, maxLength:20)\r\n\t\t\t\t\t\t\t\t\tInputErr(Name: member_name, minLength: $validate_member_name$, maxLength: $validate_member_name$)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tLabel(For: member_image){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(member_image))\r\n\t\t\t\t\t\t\t\t\tIf(Or(#prefix_id#>0,#prefix_id#<0)){\r\n\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(col-md-9 mc-sm text-left){\r\n\t\t\t\t\t\t\t\tImageInput(Name: member_image, Width: 100, Ratio: 1/1)\r\n\t\t\t\t\t\t\t} \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                \t\t\tDiv(Class: col-md-3 mt-lg text-right){\r\n                                Label(For: information){\r\n                                    Span(Body: LangRes(information))\r\n                                }\r\n                            }\r\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\r\n\t\t\t\t\t\t\t\tIf(Or(#prefix_id#>0,#prefix_id#<0)){\r\n\t\t\t\t\t\t\t\t\tInput(Name: information, Class: form-control, Type: textarea, Value: #prefix_member_info_information#)\r\n\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\tInput(Name: information, Class: form-control, Type: textarea)\r\n\t\t\t\t\t\t\t\t}\r\n                \t\t\t}\r\n                        }                      \r\n                    }\r\n\t\t\t\t\t\r\n\t\t\t\t\tDiv(Class: panel-footer clearfix){\r\n\t\t\t\t\t\tDiv(Class: pull-right){\r\n\t\t\t\t\t\t\tButton(Body: LangRes(save), Class: btn btn-primary, Contract: Profile_Edit , Page: members_list,).Alert(Text: $want_save_changes$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "profile_view",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($user_info$)\r\n\tDiv(Class: breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: LangRes(user_info))\r\n\t}\r\n\r\n    If(Or(#v_member_id#>0,#v_member_id#<0)){\r\n    }.Else{\r\n\t\tSetVar(Name: v_member_id, Value: #key_id#)\r\n    }\r\n\tDBFind(Name: members, Source: src_member).Where(id=#v_member_id#).Vars(prefix)\r\n\tDBFind(Name: keys, Source: src_keys).Where(id=#key_id#).Vars(tokens)\t\r\n\t\r\n    If(Or(#prefix_id#>0,#prefix_id#<0)){\r\n    }.Else{\r\n        SetVar(Name: prefix_member_name, Value: \"\")\r\n    }\r\n\r\n    Div(Class: row df f-valign){\r\n        Div(Class: col-lg-6 col-lg-offset-3){\r\n            Div(Class: panel panel-default){\r\n                Form(){ \r\n\t\t\t\t\tDiv(Class: list-group-item text-center){\r\n\t\t\t\t\t\tSpan(Class: h3, Body: LangRes(user_info))\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-12 mt-sm text-center){\r\n\t\t\t\t\t\t\t\tIf(Or(#prefix_id#>0,#prefix_id#<0)){\r\n\t\t\t\t\t\t\t\t\tDBFind(Name: binary_data, Source: src_binary).Columns(\"binary_data\").Where(id=#prefix_image_id#).Vars(img)\r\n\t\t\t\t\t\t\t\t\tIf(#prefix_id# == #key_id#){\r\n\t\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: profile_edit, PageParams: \"v_member_id=#id#\"){\r\n\t\t\t\t\t\t\t\t\t\t\tIf(#img_id#>0){\r\n\t\t\t\t\t\t\t\t\t\t\t\tImage(Src: \"#img_binary_data#\", Class: img-circle).Style(width: 80px;  border: 1px solid #5A5D63; margin-bottom: 0px;)\r\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Em(Class: fa icon-user fa-5x text-primary))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: m0 h3 text-bold, Body: #prefix_member_name#)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\tIf(#img_id#>0){\r\n\t\t\t\t\t\t\t\t\t\t\tImage(Src: \"#prefix_avatar#\", Class: img-circle).Style(width: 80px;  border: 1px solid #5A5D63; margin-bottom: 0px;)\r\n\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Em(Class: fa icon-user fa-5x text-primary))\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tDiv(Body: Span(Class: h3 text-bold, Body: #prefix_member_name#))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: profile_edit){\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h3 text-bold, Body: LangRes(editing_profile))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(Class: list-group-item text-center){\r\n\t\t\t\t\t\tDiv(Class: text-muted m0 h5, Body: LangRes(address))\r\n\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: Address(#prefix_id#))\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(Class: list-group-item text-center){\r\n\t\t\t\t\t\tDiv(Class: text-muted m0 h5, Body: LangRes(roles))\r\n\t\t\t\t\t\tDBFind(Name: roles_participants, Source: src_check).Columns(\"id\").Where(\"member->member_id='#v_member_id#' and deleted=0\").Vars(check)\r\n\t\t\t\t\t\tIf(#check_id#>0){\r\n\t\t\t\t\t\t\tDBFind(Name: roles_participants, Source: src_roles).Columns(\"role->id,role->name\").Where(\"member->member_id='#v_member_id#' and deleted=0\").Order(\"id\")\r\n\t\t\t\t\t\t\tForList(src_roles){\r\n\t\t\t\t\t\t\t\tSpan(){\r\n\t\t\t\t\t\t\t\t\tLinkPage(Page: roles_view, PageParams: \"v_role_id=#role.id#\"){\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: \"#role.name#\")\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}.Style(margin-right: 5px; margin-left: 5px;)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\tSpan(LangRes(no))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n                }\r\n            }\r\n        }\r\n\t}\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "roles_assign",
            "Value": "Div(Class: content-wrapper){\r\n    \r\n    If(#v_role_id# > 0){\r\n\t\tDBFind(Name: roles, Source: src_roles).Columns(\"id,role_name,role_type\").Where(\"id=#v_role_id#\").Vars(prefix)\r\n\t\t\r\n        SetTitle($assign$)\r\n        Div(Class: breadcrumb){\r\n            LinkPage($roles$, roles_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            LinkPage(#prefix_role_name#, roles_view,, \"v_role_id=#v_role_id#\")\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: $assign$)\r\n        }\r\n        \r\n        Div(Class: row df f-valign){\r\n            Div(Class: col-md-6 col-md-offset-3){\r\n                Div(Class: panel panel-primary){\r\n                    Div(Class: panel-heading, Body: LangRes(assign))\r\n                    Form(){\r\n                        Div(Class: list-group-item){\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(role))\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    Input(Class: form-control hidden, Type: text, Name: role_id, Value: #prefix_id#)\r\n\t\t\t\t\t\t\t\t\tSetVar(Name: var_prefix_role_name, Value: LangRes(#prefix_role_name#))\r\n\t\t\t\t\t\t\t\t\tInput(Class: form-control, Type: text, Name: input_prefix_role_name, Value: #var_prefix_role_name#, Disabled: true)\r\n                                }\r\n                            }\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(type))\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n\t\t\t\t\t\t\t\t\tSetVar(Name: var_prefix_role_type, Value: EcosysParam(Name: roles_types, Index: #prefix_role_type#))\r\n\t\t\t\t\t\t\t\t\tInput(Class: form-control, Type: text, Name: input_prefix_role_type, Value: #var_prefix_role_type#, Disabled: true)\r\n                                    If(#prefix_role_type# != 1){\r\n                                        P(Class: m0 text-danger h6, Body: LangRes(appointment_impossible))\r\n                                    }\r\n                                }\r\n                            }\r\n\t\t\t\t\t\t\tIf(#prefix_role_type# == 1){\r\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\r\n\t\t\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(member))\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-9 mc-sm text-left){\r\n\t\t\t\t\t\t\t\t\t\tDBFind(Name: members, Source: source_members).Columns(\"id,member_name\").Custom(custom_username){\r\n\t\t\t\t\t\t\t\t\t\t\t#member_name# (Address(#id#) )\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tSelect(Name: member_id, Source: source_members, NameColumn: custom_username, ValueColumn: id)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n                        Div(Class: panel-footer clearfix){\r\n                            Div(Class: pull-right){\r\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: roles_view, PageParams: \"v_role_id=#v_role_id#\")\r\n                                If(#prefix_role_type# == 1){\r\n                                    Button(Body: LangRes(assign), Class: btn btn-primary, Page: roles_view, PageParams: \"v_role_id=#v_role_id#\", Contract: Roles_Assign, Params: \"member_id=Val(member_id)\").Alert(Text: $want_assign_member_to_role$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(Class: md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "roles_create",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($new_role$)\r\n\tDiv(Class: breadcrumb){\r\n\t\tLinkPage($roles$, roles_list)\r\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\tSpan(Class: text-muted, Body: $new_role$)\r\n\t}\r\n\t\r\n    Div(Class: row df f-valign){\r\n        Div(Class: col-md-6 col-md-offset-3){\r\n            Div(Class: panel panel-primary){\r\n                Div(Class: panel-heading, Body: LangRes(new_role))\r\n                Form(){\r\n\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(name))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-9 mb-sm text-left){\r\n\t\t\t\t\t\t\t\tInput(Class: form-control, Type: text, Name: role_name).Validate(minLength:3, maxLength:30)\r\n\t\t\t\t\t\t\t\tInputErr(Name: role_name, minLength: $validate_role_name$, maxLength: $validate_role_name$)\r\n\t\t\t\t\t\t\t} \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(type))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: col-md-9 mb-sm text-left){\r\n\t\t\t\t\t\t\t\tEcosysParam(Name: roles_types, Source: src_roles)\r\n\t\t\t\t\t\t\t\tSelect(Name: role_type, Source: src_roles, NameColumn: name, ValueColumn: id)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\r\n\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(icon))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(col-md-9 mc-sm text-left){\r\n\t\t\t\t\t\t\t\tImageInput(Name: icon, Width: 100, Ratio: 1/1)\r\n\t\t\t\t\t\t\t} \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(Class: panel-footer clearfix){\r\n\t\t\t\t\t\tDiv(Class: pull-right){\r\n\t\t\t\t\t\t\tButton(Body: LangRes(back), Class: btn btn-default, Page: roles_list)\r\n                            Button(Body: LangRes(create), Class: btn btn-primary, Page: roles_list, Contract: Roles_Create).Alert(Text: $want_create_new_role$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "roles_list",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($roles$)\r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: $roles$)\r\n\t}\r\n\r\n    If(GetVar(isSearch) == 1){\r\n        SetVar(Name: v_Where, Value: \"role_name='#v_Search#'\")\r\n    }.Else{\r\n        SetVar(Name: v_Where, Value: \"id>0\")\r\n        SetVar(Name: v_Search, Value: \"\")\r\n    }\r\n\r\n    DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name,role_type,image_id,creator->member_id,creator->member_name,date_created,date_deleted,deleted\").Custom(custom_id){\r\n\t\tIf(#deleted# == 0){\r\n\t\t\tSetVar(Name: style_text, Value: \"text-normal\")\r\n\t\t\tSetVar(Name: style_link, Value: \"text-primary\")\r\n\t\t}.Else{\r\n\t\t\tSetVar(Name: style_text, Value: \"text-muted\")\r\n\t\t\tSetVar(Name: style_link, Value: \"text-muted\")\r\n\t\t}\r\n        Span(Class: #style_text#, Body: #id#)\r\n    }.Custom(custom_creator){\r\n        If(#role_type#==3){\r\n        }.Else{\r\n\t\t\tLinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#creator.member_id#\"){\r\n\t\t\t\tSpan(Body: #creator.member_name#)\t\t\r\n\t\t\t}\r\n        }\t\r\n    }.Custom(custom_name){\r\n\t\tSetVar(Name: img_id, Value: 0)\r\n\t\tDBFind(Name: binary_data, Source: src_binary).Columns(\"binary_data\").Where(\"id=#image_id#\").Vars(img)\r\n\t\tLinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#id#\"){\r\n\t\t\tIf(#img_id#>0){\r\n\t\t\t\tImage(Src: \"#img_binary_data#\").Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n\t\t\t\tSpan(#role_name#)\r\n\t\t\t}.Else{\r\n\t\t\t\tDiv(){\r\n\t\t\t\t\tSpan(Em(Class: fa icon-settings fa-2x)).Style(margin-right:10px;)\r\n\t\t\t\t\tSpan(#role_name#)\r\n\t\t\t\t}.Style(display:flex; align-items:center;)\r\n\t\t\t}\r\n\t\t}\r\n\t}.Custom(custom_date){\r\n\t\tDiv(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n\t\tDiv(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\"))\r\n\t}.Custom(custom_type){\r\n\t\tSpan(Class: #style_text#, Body: EcosysParam(Name: roles_types, Index: #role_type#))\r\n    }.Custom(custom_status){\r\n        If(#deleted# == 0){\r\n            Span(Class: #style_text#, Body: LangRes(active))\r\n        }.Else{\r\n            Span(Class: #style_text#, Body: LangRes(deleted))\r\n        }\r\n    }.Custom(actions){\r\n\t\tDiv(Class: pull-right){\r\n\t\t\tIf(And(#deleted#==0,#role_type#!=3)){\r\n\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: Roles_Del, Params: \"role_id=#id#\", Page: roles_list).Alert(Text: $sure_want_delete$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n\t\t\t}\r\n        }\r\n   }.Where(#v_Where#).Order(\"deleted ASC, id ASC\")\r\n\r\n    Div(Class: panel panel-primary){\r\n        Form(){\r\n            Div(Class: list-group-item){\r\n                Div(Class: row df f-valign){\r\n                    Div(Class: col-md-1 mt-sm text-right){\r\n                        Label(For: Search){\r\n                            Span(Body: LangRes(name))\r\n                        }\r\n                    }\r\n                    Div(Class: col-md-11 mc-sm){\r\n                        Div(Class: input-group){\r\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\r\n                            Div(Class: input-group-btn){\r\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: roles_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\r\n                            }\r\n                        }\r\n                    }\r\n                }  \r\n            }\r\n            Div(Class: list-group-item){ \r\n                Table(Source: src_roles, Columns: \"$id$=custom_id,$name$=custom_name,$type$=custom_type,$creator$=custom_creator,$created$ / $deleted$=custom_date,$status$=custom_status,=actions\")\r\n                If(GetVar(isSearch) == 1){\r\n                    Div(Class: text-center){  \r\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: roles_list, PageParams: \"isSearch=0\")\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: panel-footer clearfix){\r\n                Div(Class: pull-right){\r\n                    Button(Body: LangRes(create), Class: btn btn-primary, Page: roles_create)\r\n                }\r\n            }\r\n        }           \r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "roles_view",
            "Value": "Div(Class: content-wrapper){\r\n    \r\n    If(#v_role_id# > 0){\r\n\t\tDBFind(Name: roles, Source: src_roles).Columns(\"role_name,role_type,deleted\").Where(\"id=#v_role_id#\").Vars(prefix)\r\n\t\t\r\n        SetTitle($role$: #prefix_role_name#)\r\n        Div(Class: breadcrumb){\r\n            LinkPage($roles$, roles_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: #prefix_role_name#)\r\n        }\r\n        \r\n        DBFind(Name: roles_participants, Source: src_participants).Columns(\"id,member->member_id,member->member_name,member->image_id,appointed->member_id,appointed->member_name,appointed->voting_id,appointed->voting_name,date_created,date_deleted,deleted\").Custom(custom_id){\r\n            If(#deleted# == 0){\r\n\t\t\t\tSetVar(Name: style_text, Value: \"text-normal\")\r\n\t\t\t\tSetVar(Name: style_link, Value: \"text-primary\")\r\n            }.Else{\r\n\t\t\t\tSetVar(Name: style_text, Value: \"text-muted\")\r\n\t\t\t\tSetVar(Name: style_link, Value: \"text-muted\")\r\n            }\r\n\t\t\tSpan(Class: #style_text#, Body: #id#)\r\n        }.Custom(custom_appointed){\r\n\t\t\tIf(Or(#appointed.member_id#>0,#appointed.member_id#<0)){\r\n\t\t\t\tLinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#appointed.member_id#\"){\r\n\t\t\t\t\tSpan(Body: #appointed.member_name#)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tIf(#appointed.voting_id#>0){\r\n\t\t\t\tLinkPage(Page: voting_view, PageParams: \"vID=#appointed.voting_id#\"){\r\n\t\t\t\t\tSpan(Class: h5 text-bold, Body: #appointed.voting_name#)\r\n\t\t\t\t}\r\n\t\t\t}\r\n        }.Custom(custom_member){\r\n\t\t\tSetVar(Name: img_id, Value: 0)\r\n\t\t\tDBFind(Name: binary_data, Source: src_binary).Columns(\"binary_data\").Where(\"id=#member.image_id#\").Vars(img)\r\n\t\t\tLinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#member.member_id#\"){\r\n\t\t\t\tIf(#img_id#>0){\r\n\t\t\t\t\tImage(Src: \"#img_binary_data#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\r\n\t\t\t\t\tSpan(#member.member_name#)\r\n\t\t\t\t}.Else{\r\n\t\t\t\t\tDiv(){\r\n\t\t\t\t\t\tSpan(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n\t\t\t\t\t\tSpan(#member.member_name#)\r\n\t\t\t\t\t}.Style(display:flex; align-items:center;)\r\n\t\t\t\t}\r\n\t\t\t}\r\n        }.Custom(custom_address){\r\n            Span(Class: #style_text#, Body: Address(#member.member_id#))\r\n        }.Custom(custom_date){\r\n\t\t\tDiv(Class: #style_text# h6 m0 , Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n\t\t\tDiv(Class: #style_text# h6 m0 , Body: DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        }.Custom(custom_status){\r\n\t\t\tIf(#deleted# == 0){\r\n\t\t\t\tSpan(Class: #style_text#, Body: LangRes(active))\r\n\t\t\t}.Else{\r\n\t\t\t\tSpan(Class: #style_text#, Body: LangRes(deleted))\r\n\t\t\t}\r\n        }.Custom(actions){\r\n\t\t\tDiv(Class: pull-right){\r\n\t\t\t\tIf(And(#deleted#==0,#prefix_role_type#!=3)){\r\n\t\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: Roles_Unassign, Params: \"row_id=#id#\", Page: roles_view, PageParams: \"v_role_id=#v_role_id#\").Alert(Text: $sure_want_delete$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n\t\t\t\t}\r\n\t\t\t}\r\n        }.Where(\"role->id='#v_role_id#'\").Order(\"deleted ASC, id ASC\")\r\n        \r\n        Div(Class: panel panel-primary){\r\n            Form(){\r\n                Div(Class: list-group-item){\r\n                    Table(Source: src_participants, Columns: \"$id$=custom_id,$member$=custom_member,$address$=custom_address,$appointed$=custom_appointed,$appointed$ / $deleted$=custom_date,$status$=custom_status,=actions\")\r\n                }\r\n\t\t\t\tDiv(Class: panel-footer clearfix){\r\n\t\t\t\t\tDiv(Class: pull-right){\r\n\t\t\t\t\t\tButton(Body: LangRes(back), Class: btn btn-default, Page: roles_list)\r\n\t\t\t\t\t\tIf(#prefix_deleted#==0){\r\n\t\t\t\t\t\t\tButton(Body: LangRes(assign), Class: btn btn-primary, Page: roles_assign, PageParams: \"v_role_id=#v_role_id#\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(Class: md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_create",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tSetTitle($new_voting$)\r\n\tDiv(Class: breadcrumb){\r\n\t\tLinkPage($voting$, voting_list)\r\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\tSpan(Class: text-muted, Body: $new_voting$)\r\n\t}\r\n\r\n    Div(Class: row df f-valign){\r\n        Div(Class: col-md-10 col-md-offset-1){\r\n            Div(Class: panel panel-primary){\r\n                Div(Class: panel-heading, Body: LangRes(new_voting))\r\n                Form(){\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(name))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                }\r\n                \t\t\t}\r\n                \t\t\tDiv(Class: col-md-9 mb-sm text-left){\r\n                \t\t\t    Input(Name: voting_name, Class: form-control, Type: text, Value: New voting)\r\n                \t\t\t}\r\n                        }                   \r\n                        Div(Class: row df f-valign){\r\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(decision))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                }\r\n                \t\t\t}\r\n                \t\t\tDiv(Class: col-md-9 mb-sm text-left){\r\n                                EcosysParam(Name: type_voting_decisions, Source: type_voting_decisions)\r\n                \t\t\t    Select(Name: type_decision, Source: type_voting_decisions, NameColumn: name, ValueColumn: id)\r\n                \t\t\t}\r\n                        }                       \r\n                        Div(Class: row df f-valign){\r\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(participants))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                }\r\n                \t\t\t}\r\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\r\n                                EcosysParam(Name: type_voting_participants, Source: type_voting_participants)\r\n                \t\t\t    Select(Name: type_participants, Source: type_voting_participants, NameColumn: name, ValueColumn: id)\r\n                \t\t\t}\r\n                        }  \r\n                    }\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(voting_volume))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                \t\t\tDiv(Class: col-md-9 mb-sm text-left){\r\n                                Input(Name: volume, Class: form-control, Type: number, Value: 75)\r\n                                P(Class: m0 text-muted, Body: $voting_volume_desc$)\r\n                            }\r\n                        }                       \r\n                        Div(Class: row df f-valign){\r\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(voting_quorum))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\r\n                                Input(Name: quorum, Class: form-control, Type: number, Value: 50)\r\n                                P(Class: m0 text-muted, Body: $voting_quorum_desc$)\r\n                            }\r\n                        }                     \r\n                    }\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(date_start))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                \t\t\tDiv(Class: col-md-5 mb-sm text-left){\r\n                                Input(Name: start_date, Class: form-control, Type: date, Value: Now(\"YYYY-MM-DD\", 3 days))\r\n                            }\r\n                \t\t\tDiv(Class: col-md-4 mb-sm text-left){\r\n                                Input(Name: start_time, Class: form-control, Type: time, Value: Now(\"HH:MI\"))\r\n                            }\r\n                        }                       \r\n                        Div(Class: row df f-valign){\r\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(date_end))\r\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                \t\t\tDiv(Class: col-md-5 mc-sm text-left){\r\n                                Input(Name: end_date, Class: form-control, Type: date, Value: Now(\"YYYY-MM-DD\", 21 days))\r\n                            }\r\n                \t\t\tDiv(Class: col-md-4 mc-sm text-left){\r\n                                Input(Name: end_time, Class: form-control, Type: time, Value: Now(\"HH:MI\"))\r\n                            }\r\n                        }                       \r\n                    }\r\n                    Div(Class: list-group-item){\r\n                        Div(Class: row df f-valign){\r\n                \t\t\tDiv(Class: col-md-3 mt-lg text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(description))\r\n                                }\r\n                            }\r\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\r\n                \t\t\t    Input(Name: description, Class: form-control, Type: textarea)\r\n                \t\t\t}\r\n                        }                      \r\n                    }\r\n                    Div(Class: panel-footer clearfix){\r\n                        Div(Class: pull-left){\r\n                            Input(Name: now_date, Class: form-control hidden, Type: text, Value: Now(\"YYYY-MM-DD HH:MI\"))\r\n                            Input(Name: voting_type, Class: form-control hidden, Type: text, Value: 1)\r\n                        }\r\n                        Div(Class: pull-right){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_list)\r\n                            Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_list, Contract: voting_CreateNew)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\t\t}\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_decision_candidates",
            "Value": "Div(Class: content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=#vID#\").Vars(instance)\r\n\r\n        SetTitle($subject_voting$)\r\n        Div(Class: breadcrumb){\r\n            LinkPage($voting$, voting_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: $subject_voting$)\r\n        }\r\n\r\n        Div(Class: row df f-valign){\r\n            Div(Class: col-lg-10 col-lg-offset-1){\r\n                Div(Class: panel panel-primary){\r\n                    Form(){\r\n\t\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\r\n\t\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(candidates))\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-9 mc-sm text-left){\r\n                                    Div(Class: input-group){\r\n\t\t\t\t\t\t\t\t\t\tInput(Name: can_apply_voting, Class: form-control, Disabled: 1, Type: text, Value: \"$can_apply_voting$\")\t\r\n                                        Div(Class: input-group-btn){\r\n                                            Button(Body: LangRes(apply), Class: btn btn-primary, Page: voting_decision_candidates, PageParams: \"vID=#vID#\", Contract: voting_SubjectCandidates)\r\n                                        }\r\n                                    }\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n                            Div(Class: row df){\r\n                    \t\t\tDiv(Class: col-lg-8 col-lg-offset-3){\r\n                                    DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->member_id,subject->member_name\").Where(\"voting_id=#vID#\").Custom(custom_address){\r\n                                        Address(#subject.member_id#)\r\n\t                                }.Custom(custom_member){\r\n\t\t\t\t\t\t\t\t\t\tLinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: #subject.member_name#)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n                                    Table(src_voting_subject, \"$candidates$=custom_member,$address$=custom_address\")\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(Class: list-group-item){\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(role))\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name\").Where(\"role_type=2 and deleted=0\")\r\n                                    Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\r\n                                } \r\n                            }\r\n                            Div(row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(vacancies))\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                    \t\t\tDiv(Class: col-md-9 mc-sm text-left){\r\n                    \t\t\t    Input(Name: vacancies, Class: form-control, Type: Number, Value: #instance_optional_role_vacancies#)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(Class: list-group-item){\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_accept))\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_accept, Class: form-control, Type: text, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n\t\t\t\t\t\t\t\t\tInputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_accept_params, Class: form-control, Type: text, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_reject))\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_reject, Class: form-control, Type: text, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n\t\t\t\t\t\t\t\t\tInputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mc-sm text-left){\r\n                                    Input(Name: contract_reject_params, Class: form-control, Type: text, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(Class: panel-footer clearfix){\r\n                            Div(Class: pull-left){\r\n\t\t\t\t\t\t\t\tInput(Name: memberID, Class: form-control hidden, Type: text, Value: 0)\r\n\t\t\t\t\t\t\t\tInput(Name: votingID, Class: form-control hidden, Type: text, Value: #vID#)\r\n                            }\r\n                            Div(Class: pull-right){\r\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\r\n                                Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectSettings)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(Class: md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_decision_contract",
            "Value": "Div(Class: content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name\").Where(\"id=#vID#\").Vars(instance)\r\n        DBFind(Name: votings_subject, Source: src_subject).Columns(\"id,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Where(\"voting_id=#vID#\").Vars(prefix)\r\n        \r\n        If(#prefix_id#>0){\r\n        }.Else{\r\n            SetVar(Name: prefix_subject_contract_accept, Value: \"\")\r\n\t\t\tSetVar(Name: prefix_subject_contract_accept_params, Value: \"\")\r\n            SetVar(Name: prefix_subject_contract_reject, Value: \"\")\r\n\t\t\tSetVar(Name: prefix_subject_contract_reject_params, Value: \"\")\r\n        }\r\n        \r\n        SetTitle($subject_voting$)\r\n        Div(Class: breadcrumb){\r\n            LinkPage($voting$, voting_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: $subject_voting$)\r\n        }\r\n        \r\n        Div(Class: row df f-valign){\r\n            Div(Class: col-lg-10 col-lg-offset-1){\r\n                Div(Class: panel panel-primary){\r\n                    Form(){\r\n                        Div(Class: list-group-item){\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_accept))\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_accept, Class: form-control, Type: text, Value: #prefix_subject_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n\t\t\t\t\t\t\t\t\tInputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mc-sm text-left){\r\n                                    Input(Name: contract_accept_params, Class: form-control, Type: text, Value: #prefix_subject_contract_accept_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: list-group-item){\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_reject))\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_reject, Class: form-control, Type: text, Value: #prefix_subject_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n\t\t\t\t\t\t\t\t\tInputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mc-sm text-left){\r\n                                    Input(Name: contract_reject_params, Class: form-control, Type: text, Value: #prefix_subject_contract_reject_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(Class: panel-footer clearfix){\r\n                            Div(Class: pull-left){\r\n\t\t\t\t\t\t\t\tInput(Name: votingID, Class: form-control hidden, Type: text, Value: #vID#)\r\n                            }\r\n                            Div(Class: pull-right){\r\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\r\n                                Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectContract)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(Class: md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_decision_document",
            "Value": "Div(Class: content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=#vID#\").Vars(instance)\r\n        DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->text\").Where(\"voting_id=#vID#\").Vars(prefix)\r\n\t\t\r\n\t\tIf(#prefix_id#>0){\r\n\t\t}.Else{\r\n\t\t\tSetVar(Name: prefix_subject_text, Value: \"\")\r\n\t\t}\r\n\r\n        SetTitle($subject_voting$)\r\n        Div(Class: breadcrumb){\r\n            LinkPage($voting$, voting_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: $subject_voting$)\r\n        }\r\n\r\n        Div(Class: row df f-valign){\r\n            Div(Class: col-lg-10 col-lg-offset-1){\r\n                Div(Class: panel panel-primary){\r\n                    Form(){\r\n\t\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-12 mt-sm){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(text_document))\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                    }\r\n                                    Input(Name: text_document, Class: form-control, Type: textarea, Value: #prefix_subject_text#)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n                        }\r\n                        Div(Class: list-group-item){\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_accept))\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_accept, Class: form-control, Type: text, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n\t\t\t\t\t\t\t\t\tInputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_accept_params, Class: form-control, Type: text, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_reject))\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_reject, Class: form-control, Type: text, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n\t\t\t\t\t\t\t\t\tInputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mc-sm text-left){\r\n                                    Input(Name: contract_reject_params, Class: form-control, Type: text, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(Class: panel-footer clearfix){\r\n                            Div(Class: pull-left){\r\n\t\t\t\t\t\t\t\tInput(Name: votingID, Class: form-control hidden, Type: text, Value: #vID#)\r\n                            }\r\n                            Div(Class: pull-right){\r\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\r\n                                Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectDocument)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: col-md-2)\r\n        }\r\n    }.Else{\r\n        Div(Class: md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_decision_election",
            "Value": "Div(Class: content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=#vID#\").Vars(instance)\r\n\r\n        SetTitle($subject_voting$)\r\n        Div(Class: breadcrumb){\r\n            LinkPage($voting$, voting_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: $subject_voting$)\r\n        }\r\n\r\n        Div(Class: row df f-valign){\r\n            Div(Class: col-lg-10 col-lg-offset-1){\r\n                Div(Class: panel panel-primary){\r\n                    Form(){\r\n\t\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\r\n\t\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(candidates))\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-9 mc-sm text-left){\r\n                                    Div(Class: input-group){\r\n                                        DBFind(Name: members, Source: src_members).Columns(\"id,member_name\").Custom(custom_username){\r\n                                            #member_name# ( Address(#id#) ) \r\n                                        }\r\n                                        Select(Name: memberID, Source: src_members, NameColumn: custom_username, ValueColumn: id)\r\n                                        Div(Class: input-group-btn){\r\n                                            Button(Body: LangRes(add), Class: btn btn-primary, Page: voting_decision_election, PageParams: \"vID=#vID#\", Contract: voting_SubjectCandidates)\r\n                                        }\r\n                                    }\r\n\t\t\t\t\t\t\t\t} \r\n\t\t\t\t\t\t\t}\r\n                            Div(Class: row df){\r\n\t\t\t\t\t\t\t\tDiv(Class: col-lg-8 col-lg-offset-3){\r\n                                    DBFind(Name: votings_subject, Source: src_subject).Columns(\"id,subject->member_id,subject->member_name\").Where(\"voting_id=#vID#\").Custom(custom_address){\r\n                                        Address(#subject.member_id#)\r\n\t                                }.Custom(custom_member){\r\n\t\t\t\t\t\t\t\t\t\tLinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: #subject.member_name#)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n                                    Table(src_subject, \"$candidates$=custom_member,$address$=custom_address\")\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(Class: list-group-item){\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(role))\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name\").Where(\"role_type=2 and deleted=0\")\r\n                                    Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\r\n                                }\r\n                            }\r\n\r\n                            Div(row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(vacancies))\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                    \t\t\tDiv(Class: col-md-9 mc-sm text-left){\r\n                    \t\t\t    Input(Name: vacancies, Class: form-control, Type: Number, Value: #instance_optional_role_vacancies#)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(Class: list-group-item){\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_accept))\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_accept, Class: form-control, Type: text, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n\t\t\t\t\t\t\t\t\tInputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_accept_params, Class: form-control, Type: text, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_reject))\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_reject, Class: form-control, Type: text, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n\t\t\t\t\t\t\t\t\tInputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mc-sm text-left){\r\n                                    Input(Name: contract_reject_params, Class: form-control, Type: text, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(Class: panel-footer clearfix){\r\n                            Div(Class: pull-left){\r\n\t\t\t\t\t\t\t\tInput(Name: votingID, Class: form-control hidden, Type: text, Value: #vID#)\r\n                            }\r\n                            Div(Class: pull-right){\r\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\r\n                                Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectSettings)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(Class: md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_decision_formal",
            "Value": "Div(Class: content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=#vID#\").Vars(instance)\r\n\t\tDBFind(Name: votings_subject, Source: src_subject).Columns(\"id,subject->column,subject->column_value,subject->table_id,subject->table,subject->description\").Where(\"voting_id=#vID#\").Vars(prefix)\r\n\t\t\r\n\t\tIf(#prefix_id#>0){\r\n\t\t}.Else{\r\n\t\t\tSetVar(Name: prefix_subject_description, Value: \"\")\r\n\t\t\tSetVar(Name: prefix_subject_table, Value: \"\")\r\n\t\t\tSetVar(Name: prefix_subject_table_id, Value: \"\")\r\n\t\t\tSetVar(Name: prefix_subject_column, Value: \"\")\r\n\t\t\tSetVar(Name: prefix_subject_column_value, Value: \"\")\r\n\t\t}\r\n\r\n        SetTitle($subject_voting$)\r\n        Div(Class: breadcrumb){\r\n            LinkPage($voting$, voting_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: $subject_voting$)\r\n        }\r\n\r\n        Div(Class: row df f-valign){\r\n            Div(Class: col-lg-10 col-lg-offset-1){\r\n                Div(Class: panel panel-primary){\r\n                    Form(){\r\n                        Div(Class: list-group-item){\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(table_to_written))\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    Input(Name: table_to_written, Class: form-control, Type: text, Value: #prefix_subject_table#, Placeholder: \"$table_to_written_desc$\")\r\n                                }\r\n                            }\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(row_id))\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    Input(Name: row_id, Class: form-control, Type: number, Value: #prefix_subject_table_id#, Placeholder: \"$row_id_desc$\")\r\n                                }\r\n                            }  \r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(column_name))\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    Input(Name: column_name, Class: form-control, Type: text, Value: #prefix_subject_column#, Placeholder: \"$column_name_desc$\")\r\n                                }\r\n                            }\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(written_value))\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mc-sm text-left){\r\n                                    Input(Name: written_value, Class: form-control, Type: text, Value: #prefix_subject_column_value#, Placeholder: \"$written_value_desc$\")\r\n                                }\r\n                            }\r\n                        }\r\n\t\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-lg text-right){\r\n\t\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(description))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-9 mc-sm text-left){\r\n\t\t\t\t\t\t\t\t\tInput(Name: description, Class: form-control, Type: textarea, Value: #prefix_subject_description#)\r\n                                }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n                        Div(Class: list-group-item){\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_accept))\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_accept, Class: form-control, Type: text, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n\t\t\t\t\t\t\t\t\tInputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_accept_params, Class: form-control, Type: text, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_reject))\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_reject, Class: form-control, Type: text, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n\t\t\t\t\t\t\t\t\tInputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n                                Div(Class: col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(Class: col-md-9 mc-sm text-left){\r\n                                    Input(Name: contract_reject_params, Class: form-control, Type: text, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(Class: panel-footer clearfix){\r\n                            Div(Class: pull-left){\r\n\t\t\t\t\t\t\t\tInput(Name: votingID, Class: form-control hidden, Type: text, Value: #vID#)\r\n                            }\r\n                            Div(Class: pull-right){\r\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\r\n                                Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectFormal)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(Class: md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_invite",
            "Value": "Div(Class: content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,voting->type_participants\").Where(\"id=#vID#\").Vars(instance)\r\n\t\t\r\n        SetTitle($participants$)\r\n        Div(Class: breadcrumb){\r\n            LinkPage($voting$, voting_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: $participants$)\r\n        }\r\n\r\n        Div(Class: row df f-valign){\r\n            Div(Class: col-lg-10 col-lg-offset-1){\r\n                Div(Class: panel panel-primary){\r\n\t\t\t\t\tDiv(Class: panel-heading, Body: LangRes(participants))\r\n                    Form(){\r\n\t\t\t\t\t\tDiv(Class: list-group-item){\r\n                            If(#instance_voting_type_participants# == 1){\r\n                                Div(Class: row df f-valign){\r\n                                    Div(Class: col-md-12){\r\n\t\t\t\t\t\t\t\t\t\tInput(Name: voting_all_members, Class: form-control, Disabled: 1, Type: text, Value: \"$voting_all_members$\")\t\r\n                                    }\r\n                                }\r\n                            }\r\n                            If(#instance_voting_type_participants# == 2){\r\n                                Div(Class: row df f-valign){\r\n                                    Div(Class: col-md-12){\r\n\t\t\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(select_member))\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                        DBFind(Name: members, Source: src_members).Columns(\"id,member_name\").Custom(custom_username){\r\n                                            #member_name# ( Address(#id#) )\r\n                                        }\r\n                                        Select(Name: var_id, Source: src_members, NameColumn: custom_username, ValueColumn: id)\r\n                                    }\r\n                                }\r\n                            }\r\n                            If(#instance_voting_type_participants# == 3){\r\n                                Div(Class: row df f-valign){\r\n                                    Div(Class: col-md-12){\r\n\t\t\t\t\t\t\t\t\t\tLabel(){\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(select_role))\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                        DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name\").Where(\"deleted=0\")\r\n                                        Select(Name: var_id, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n                                    }\r\n                                }\r\n                            }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDBFind(Name: votings_participants, Source: src_participants).Columns(\"id\").Where(\"voting_id=#vID#\").Vars(participant)\r\n\t\t\t\t\t\tIf(#participant_id#>0){\r\n\t\t\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-12){\r\n\t\t\t\t\t\t\t\t\t\tDBFind(Name: votings_participants, Source: src_participants).Columns(\"id,member->member_id,member->member_name\").Where(\"voting_id=#vID#\").Custom(custom_id){\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body:  #id#)\r\n\t\t\t\t\t\t\t\t\t\t}.Custom(custom_member){\r\n\t\t\t\t\t\t\t\t\t\t\tLinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#member.member_id#\"){\r\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Body: #member.member_name#)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tTable(src_participants, \"$id$=custom_id,$member_name$=custom_member\")\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n                        Div(Class: panel-footer clearfix){\r\n                            Div(Class: pull-left){\r\n\t\t\t\t\t\t\t\tInput(Name: votingID, Class: form-control hidden, Type: text, Value: #vID#)\r\n                            }\r\n                            Div(Class: pull-right){\r\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\r\n                                If(#instance_voting_type_participants# == 2){\r\n                                    Button(Body: LangRes(add_member), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_Invite)\r\n                                }\r\n                                If(#instance_voting_type_participants# == 3){\r\n                                    Button(Body: LangRes(add_role), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_Invite)\r\n                                }\r\n                            }\r\n                        }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(Class: md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_list",
            "Value": "Div(Class: content-wrapper){\r\n    \r\n    SetTitle($voting$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $voting$)\r\n    }\r\n    \r\n    If(GetVar(isSearch) == 1){\r\n        SetVar(Name: v_Where, Value: \"name='#v_Search#' and deleted = 0\")\r\n    }.Else{\r\n        SetVar(Name: v_Where, Value: \"deleted=0\")\r\n        SetVar(Name: v_Search, Value: \"\")\r\n    }\r\n    \r\n    DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,voting->type,voting->type_decision,voting->type_participants,flags->notifics,flags->success,flags->decision,progress->percent_success,creator->member_id,creator->member_name,date_started,date_ended,deleted\").Custom(custom_id){\r\n        Span(Class: h5, Body: #id#)\r\n        SetVar(Name: vDateNow, Value: Now(\"YYYY-MM-DD HH:MI\"))\r\n        SetVar(Name: vStartDate, Value: DateTime(DateTime: #date_started#, Format: \"YYYY-MM-DD HH:MI\"))\r\n        SetVar(Name: vEndDate, Value: DateTime(#date_ended#, \"YYYY-MM-DD HH:MI\"))\r\n        SetVar(Name: vCmpStartDate, Value: CmpTime(#vStartDate#,#vDateNow#))\r\n        SetVar(Name: vCmpEndDate, Value: CmpTime(#vEndDate#,#vDateNow#))\r\n    }.Custom(custom_name){\r\n        LinkPage(Page: voting_view, PageParams: \"vID=#id#\"){\r\n            Span(Class: h5 text-bold, Body: #voting.name#)\r\n        }\r\n    }.Custom(custom_subject){\r\n        If(Or(#vCmpStartDate#<=0,#voting.type#==2)){\r\n            Span(Class: h6, Body: EcosysParam(Name: type_voting_decisions, Index: #voting.type_decision#))\r\n        }.Else{\r\n            If(#voting.type_decision# == 1){\r\n\t\t\t\tLinkPage(Page: voting_decision_candidates, PageParams: \"vID=#id#\"){\r\n\t\t\t\t\tSpan(Class: h6 text-bold, Body: EcosysParam(Name: type_voting_decisions, Index: #voting.type_decision#))\r\n\t\t\t\t}\r\n            }\r\n\t\t\tIf(#voting.type_decision# == 2){\r\n\t\t\t\tLinkPage(Page: voting_decision_election, PageParams: \"vID=#id#\"){\r\n\t\t\t\t\tSpan(Class: h6 text-bold, Body: EcosysParam(Name: type_voting_decisions, Index: #voting.type_decision#))\r\n\t\t\t\t}\r\n            }\r\n\t\t\tIf(#voting.type_decision# == 3){\r\n\t\t\t\tLinkPage(Page: voting_decision_document, PageParams: \"vID=#id#\"){\r\n\t\t\t\t\tSpan(Class: h6 text-bold, Body: EcosysParam(Name: type_voting_decisions, Index: #voting.type_decision#))\r\n\t\t\t\t}\r\n            }\r\n\t\t\tIf(#voting.type_decision# == 4){\r\n\t\t\t\tLinkPage(Page: voting_decision_formal, PageParams: \"vID=#id#\"){\r\n\t\t\t\t\tSpan(Class: h6 text-bold, Body: EcosysParam(Name: type_voting_decisions, Index: #voting.type_decision#))\r\n\t\t\t\t}\r\n            }\r\n\t\t\tIf(#voting.type_decision# == 5){\r\n\t\t\t\tLinkPage(Page: voting_decision_contract, PageParams: \"vID=#id#\"){\r\n\t\t\t\t\tSpan(Class: h6 text-bold, Body: EcosysParam(Name: type_voting_decisions, Index: #voting.type_decision#))\r\n\t\t\t\t}\r\n            }\r\n        }\r\n    }.Custom(custom_participants){\r\n        If(Or(#vCmpStartDate#<=0,#voting.type#==2)){\r\n            Span(Class: h6, Body: EcosysParam(Name: type_voting_participants, Index: #voting.type_participants#))\r\n        }.Else{\r\n            LinkPage(Page: voting_invite, PageParams: \"vID=#id#\"){\r\n                Span(Class: h6 text-bold, Body: EcosysParam(Name: type_voting_participants, Index: #voting.type_participants#))\r\n            }\r\n        }\r\n    }.Custom(custom_notifics){\r\n        If(#flags.notifics# == 1){\r\n            Div(Class: text-center text-bold, Body: LangRes(yes))\r\n        }.Else{\r\n            If(And(#flags.success#!=1,#vCmpEndDate#>0,#vCmpStartDate#<0,#creator.member_id#==#key_id#)){\r\n                Div(Class: text-center, Body: Button(Body: LangRes(send), Class: btn btn-primary, Contract: voting_SendNotifics, Params: \"votingID=#id#\", Page: voting_list))\r\n            }.Else{\r\n                Div(Class: text-center text-bold, Body: LangRes(no))\r\n            }\r\n        }\r\n    }.Custom(custom_creator){\r\n\t\tLinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#creator.member_id#\"){\r\n\t\t\tSpan(Body: #creator.member_name#)\r\n\t\t}\r\n    }.Custom(custom_date){\r\n        If(#vCmpStartDate# < 0){\r\n            Div(Class: text-muted, Body: DateTime(DateTime: #date_started#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        }.Else{\r\n            Div(Class: text-bold, Body: DateTime(DateTime: #date_started#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        }\r\n        If(#vCmpEndDate# < 0){\r\n            Div(Class: text-muted, Body: DateTime(DateTime: #date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        }.Else{\r\n            Div(Class: text-bold, Body: DateTime(DateTime: #date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        }\r\n    }.Custom(custom_type){\r\n        Span(Class: h6, Body: EcosysParam(Name: type_voting, Index: #voting.type#))\r\n    }.Custom(custom_progress){\r\n        Div(Class: text-center h5 text-bold, Body: #progress.percent_success# %)\r\n    }.Custom(custom_decision){\r\n        If(#flags.decision# == 0){\r\n            If(And(#vCmpEndDate#<0,#creator.member_id#==#key_id#)){\r\n                Div(Class: text-center, Body: Button(Body: LangRes(decision), Class: btn btn-primary, Contract: voting_CheckDecision, Params: \"votingID=#id#\", Page: voting_list))\r\n            }.Else{\r\n                Div(Class: text-muted text-center, Body: LangRes(no))\r\n            }\r\n        }\r\n        If(#flags.decision# == -2){\r\n            Div(Class: text-muted text-center, Body: LangRes(not_enough_votes))\r\n        }\r\n        If(#flags.decision# == 1){\r\n            Div(Class: text-success text-center, Body: LangRes(accepted))\r\n        }\r\n        If(#flags.decision# == -1){\r\n            Div(Class: text-danger text-center, Body: LangRes(rejected))\r\n        }\r\n    }.Custom(custom_status){\r\n        If(#flags.success# == 1){\r\n            Div(Class: text-success text-center, Body: LangRes(success))\r\n        }.Else{\r\n            If(#vCmpEndDate# < 0){\r\n                Div(Class: text-muted text-center, Body: LangRes(finished))\r\n            }.Else{\r\n                If(#vCmpStartDate# < 0){\r\n                    Div(Class: text-center){\r\n                        Button(Class: btn btn-link, Page: voting_view, PageParams: \"vID=#id#\"){\r\n                            Span(Class: h4, Body: Em(Class: fa icon-eye))\r\n                        }\r\n                    }\r\n                }.Else{\r\n                    Div(Class: text-warning text-center, Body: LangRes(waiting))\r\n                }\r\n            }\r\n        }\r\n    }.Custom(actions){\r\n\t\tDiv(Class: pull-right){\r\n\t\t\tIf(#vCmpStartDate# > 0){\r\n\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: voting_Delete, Params: \"votingID=#id#\", Page: voting_list).Alert(Text: $want_delete_voting$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n\t\t\t}\r\n\t\t}\r\n        Div(Class: text-center, Body: )\r\n    }.Where(#v_Where#).Order(id desc)\r\n    \r\n    Div(Class: panel panel-primary){\r\n        Form(){\r\n            Div(Class: list-group-item){\r\n                Div(Class: row df f-valign){\r\n                    Div(Class: col-md-1 mt-sm text-right){\r\n                        Label(For: Search){\r\n                            Span(Body: LangRes(name))\r\n                        }\r\n                    }\r\n                    Div(Class: col-md-11 mc-sm){\r\n                        Div(Class: input-group){\r\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\r\n                            Div(Class: input-group-btn){\r\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: voting_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: list-group-item){\r\n                Table(src_voting, \"$id$=custom_id,$name$=custom_name,$type$=custom_type,$subject_voting$=custom_subject,$participants$=custom_participants,$date_start$/$date_end$=custom_date,$creator$=custom_creator,$notifications$=custom_notifics,$progress$=custom_progress,$decision$=custom_decision,$status$=custom_status,=actions\")\r\n                If(GetVar(isSearch) == 1){\r\n                    Div(Class: text-center){\r\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: voting_list, PageParams: \"isSearch=0\")\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: panel-footer clearfix){\r\n                Div(Class: pull-right){\r\n                    Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_create)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_view",
            "Value": "Div(Class: content-wrapper){\r\n\tIf(#notific_id#>0){\r\n\t\tDBFind(Name: notifications, Source: src_notifications).Where(\"id=#notific_id#\").Columns(\"page_params->voting_id\").Vars(notific)\r\n\t\tSetVar(Name: vID, Value: #notific_page_params_voting_id#)\r\n\t}\r\n\r\n    If(#vID# > 0){\r\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,voting->volume,voting->quorum,voting->type,voting->type_decision,voting->description,optional->role_id,optional->role_vacancies,optional->number_candidates,optional->contract_accept,optional->contract_reject,progress->number_participants,progress->number_voters,progress->percent_success,progress->percent_voters,flags->success,flags->full_data,flags->decision,flags->notifics,date_started,date_ended\").Where(\"id=#vID#\").Vars(instance)\r\n\r\n        SetTitle(#instance_voting_name#)\r\n        Div(Class: breadcrumb){\r\n            LinkPage($voting$, voting_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: #instance_voting_name#)\r\n        }\r\n\r\n\t\tSetVar(Name: vDateNow, Value: Now(\"YYYY-MM-DD HH:MI\")) \r\n\t\tSetVar(Name: vStartDate, Value: DateTime(DateTime: #instance_date_started#, Format: \"YYYY-MM-DD HH:MI\"))\r\n\t\tSetVar(Name: vEndDate, Value: DateTime(#instance_date_ended#, \"YYYY-MM-DD HH:MI\"))\r\n\t\tSetVar(Name: vCmpStartDate, Value: CmpTime(#vStartDate#,#vDateNow#)) \r\n\t\tSetVar(Name: vCmpEndDate, Value: CmpTime(#vEndDate#,#vDateNow#))\r\n\r\n\t\tDBFind(Name: votings_participants, Source: src_check).Columns(\"id\").Where(\"voting_id=#vID# and member->member_id='#key_id#' and decision=0\").Vars(participant)\r\n        If(And(#vCmpStartDate#<0,#vCmpEndDate#>0,#instance_flags_full_data#==1,#instance_flags_decision#==0,#participant_id#>0)){\r\n            SetVar(Name: vOpportunityVote, Value: 1)\r\n        }.Else{\r\n            SetVar(Name: vOpportunityVote, Value: 0)\r\n        }\r\n\r\n        Div(Class: row df f-valign){\r\n            Div(Class: col-lg-10 col-lg-offset-1){\r\n                Div(Class: panel panel-default){\r\n                    Form(){ \r\n\t\t\t\t\t\tInput(Class: form-control hidden, Type: text, Name: votingID, Value: #vID#)\r\n\r\n                        Div(Class: list-group-item text-center){\r\n                            P(Class: h3 text-bold m0, Body: #instance_voting_name#)\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-12 mt-sm){\r\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: EcosysParam(Name: type_voting_decisions, Index: #instance_voting_type_decision#))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-6 mc-sm text-right){\r\n                                    P(Class: h5 text-muted m0, Body: LangRes(description))\r\n                                }\r\n                                Div(Class: col-md-6 mc-sm text-left){\r\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: #instance_voting_description#)\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        Div(Class: list-group-item text-center){\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-6 mt-sm text-right){\r\n                                    P(Class: h4 text-normal m0, Body: LangRes(type))\r\n                                }\r\n                                Div(Class: col-md-6 mt-sm text-left){\r\n\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: EcosysParam(Name: type_voting, Index: #instance_voting_type#))\r\n                                }\r\n                            }\r\n\t\t\t\t\t\t\tIf(Or(#instance_voting_type_decision#==1,#instance_voting_type_decision#==2,#instance_voting_type_decision#==3,#instance_voting_type_decision#==4)){\r\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\r\n\t\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: LangRes(contract_accept))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\r\n\t\t\t\t\t\t\t\t\t\tIf(#instance_optional_contract_accept# == \"\"){\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h4 text-muted m0, Body: LangRes(optional))\r\n\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: #instance_optional_contract_accept#)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\r\n\t\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: LangRes(contract_reject))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\r\n\t\t\t\t\t\t\t\t\t\tIf(#instance_optional_contract_reject# == \"\"){\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h4 text-muted m0, Body: LangRes(optional))\r\n\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: #instance_optional_contract_reject#)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-6 mc-sm text-right){\r\n                                    P(Class: h4 text-normal m0, Body: LangRes(filled))\r\n                                }\r\n                                Div(Class: col-md-6 mc-sm text-left){\r\n                                    If(#instance_flags_full_data# == 1){\r\n                                        P(Class: h4 text-success m0, Body: LangRes(yes))\r\n                                    }.Else{\r\n                                        P(Class: h4 text-danger m0, Body: LangRes(no))\r\n                                    } \r\n                                }\r\n                            }\r\n                            If(Or(#instance_voting_type_decision#==1,#instance_voting_type_decision#==2)){\r\n                                Div(Class: row df f-valign){\r\n                                    Div(Class: col-md-6 mt-sm text-right){\r\n                                        P(Class: h5 text-normal m0){\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(role))\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                    Div(Class: col-md-6 mt-sm text-left){\r\n\t\t\t\t\t\t\t\t\t\tIf(#instance_optional_role_id# > 0){\r\n\t\t\t\t\t\t\t\t\t\t\tDBFind(Name: roles, Source: src_roles).Columns(\"id,role_name\").Where(\"id=#instance_optional_role_id#\").Vars(prefix)\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #prefix_role_name# (LangRes(id): #prefix_id#))\r\n\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                }\r\n                                Div(Class: row df f-valign){\r\n                                    Div(Class: col-md-6 mc-sm text-right){\r\n                                        P(Class: h5 text-normal m0){\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(vacancies))\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                    Div(Class: col-md-6 mc-sm text-left){\r\n\t\t\t\t\t\t\t\t\t\tIf(#instance_optional_role_vacancies# > 0){\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #instance_optional_role_vacancies#)\r\n\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: #instance_optional_role_vacancies#)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                }\r\n                                Div(Class: row df f-valign){\r\n                                    Div(Class: col-md-6 mc-sm text-right){\r\n                                        P(Class: h5 text-normal m0){\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(candidates))\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                    Div(Class: col-md-6 mc-sm text-left){\r\n\t\t\t\t\t\t\t\t\t\tIf(#instance_optional_number_candidates# > 0){\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #instance_optional_number_candidates#)\r\n\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: #instance_optional_number_candidates#)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                }\r\n                                Div(Class: row df){\r\n\t\t\t\t\t\t\t\t\tDiv(Class: col-lg-8 col-lg-offset-2){\r\n                                        DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->member_id,subject->member_name\").Where(\"voting_id=#vID#\").Custom(custom_address){\r\n                                            Span(Class: h6, Body: Address(#subject.member_id#))\r\n                                        }.Custom(custom_member){\r\n\t\t\t\t\t\t\t\t\t\t\tLinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\r\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Body: #subject.member_name#)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n                                        }.Custom(custom_voting){\r\n\t\t\t\t\t\t\t\t\t\t\tIf(#vOpportunityVote#==1){\r\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(vote), Class: btn btn-success, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_AcceptCandidates, Params: \"candidateID=#subject.member_id#\")\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}.Order(\"id\")\r\n                                        Table(src_voting_subject, \"=custom_member,=custom_address,=custom_voting\")\r\n                                    }\r\n                                }\r\n                                Div(Class: row df f-valign){\r\n                                    Div(Class: col-md-12 mc-sm){\r\n                                        If(And(#vCmpStartDate#>0,#instance_voting_type#==1)){\r\n                                            If(#instance_voting_type_decision#==1){\r\n                                                Button(Class: btn btn-link, Page: voting_decision_candidates, PageParams: \"vID=#vID#\"){\r\n                                                    Span(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\r\n                                                }\r\n                                            }\r\n                                            If(#instance_voting_type_decision#==2){\r\n                                                Button(Class: btn btn-link, Page: voting_decision_election, PageParams: \"vID=#vID#\"){\r\n                                                    Span(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\t\t\t\t\t\t\tIf(#instance_voting_type_decision#==3){\r\n\t\t\t\t\t\t\t\tDBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->text,subject->hash\").Where(\"voting_id=#vID#\").Vars(subject)\r\n                                Div(Class: row df f-valign){\r\n                                    Div(Class: col-lg-10 col-lg-offset-1 mt-lg){\r\n\t\t\t\t\t\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_subject_text#)\r\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\r\n\t\t\t\t\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tDiv(Class: list-group-item){\r\n\t\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h6 text-muted m0, Body: Hash: #subject_subject_hash#)\r\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h6 text-muted m0, Body: Hash: LangRes(empty))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                }\r\n                                Div(Class: row df f-valign){\r\n                                    Div(Class: col-md-12 mc-sm){\r\n\t\t\t\t\t\t\t\t\t\tIf(And(#vCmpStartDate#>0,#instance_voting_type#==1)){\r\n\t\t\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: voting_decision_document, PageParams: \"vID=#vID#\"){\r\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                }\r\n                                Div(Class: row df f-valign){\r\n                                    Div(Class: col-lg-10 col-lg-offset-1){\r\n\t\t\t\t\t\t\t\t\t\tIf(#vOpportunityVote#==1){\r\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: pull-left){\r\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(reject), Class: btn btn-danger, Contract: voting_RejectDecision, PageParams: \"vID=#vID#\", Page: voting_view)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: pull-right){\r\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(accept), Class: btn btn-success, Contract: voting_AcceptDecision, PageParams: \"vID=#vID#\", Page: voting_view)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tIf(#instance_voting_type_decision#==4){\r\n\t\t\t\t\t\t\t\tDBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->description,subject->table,subject->table_id,subject->column,subject->column_value\").Where(\"voting_id=#vID#\").Vars(subject)\r\n                                Div(Class: row df f-valign){\r\n                                    Div(Class: col-md-6 mt-sm text-right){\r\n                                        P(Class: h5 text-normal m0){\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(table_to_written))\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                    Div(Class: col-md-6 mt-sm text-left){\r\n\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_subject_table#)\r\n\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                }\r\n\t\t\t\t\t\t\t\tIf(#instance_voting_type#==1){\r\n\t\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0){\r\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(row_id))\r\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\r\n\t\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_subject_table_id#)\r\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n                                Div(Class: row df f-valign){\r\n                                    Div(Class: col-md-6 mc-sm text-right){\r\n                                        P(Class: h5 text-normal m0){\r\n\t\t\t\t\t\t\t\t\t\t\tIf(#instance_voting_type#==1){\r\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(column_name))\r\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(parameter_name))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                    Div(Class: col-md-6 mc-sm text-left){\r\n\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_subject_column#)\r\n\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                }\r\n                                Div(Class: row df f-valign){\r\n                                    Div(Class: col-md-6 mc-sm text-right){\r\n                                        P(Class: h5 text-normal m0){\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(written_value))\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                    Div(Class: col-md-6 mc-sm text-left){\r\n\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_subject_column_value#)\r\n\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                }\r\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n                                    Div(Class: col-md-6 mc-sm text-right){\r\n                                        P(Class: h5 text-normal m0){\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(description))\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                    Div(Class: col-md-6 mc-sm text-left){\r\n\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\r\n\t\t\t\t\t\t\t\t\t\t\tIf(#subject_subject_description# == \"\"){\r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: LangRes(optional))\r\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_subject_description#)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                }\r\n                                Div(Class: row df f-valign){\r\n                                    Div(Class: col-md-12 mc-sm){\r\n\t\t\t\t\t\t\t\t\t\tIf(And(#vCmpStartDate#>0,#instance_voting_type#==1)){\r\n\t\t\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: voting_decision_formal, PageParams: \"vID=#vID#\"){\r\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                }\r\n                                Div(Class: row df f-valign){\r\n                                    Div(Class: col-lg-10 col-lg-offset-1){\r\n\t\t\t\t\t\t\t\t\t\tIf(#vOpportunityVote#==1){\r\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: pull-left){\r\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(reject), Class: btn btn-danger, Contract: voting_RejectDecision, PageParams: \"vID=#vID#\", Page: voting_view)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: pull-right){\r\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(accept), Class: btn btn-success, Contract: voting_AcceptDecision, PageParams: \"vID=#vID#\", Page: voting_view)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tIf(#instance_voting_type_decision#==5){\r\n\t\t\t\t\t\t\t\tDBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->contract_accept,subject->contract_reject\").Where(\"voting_id=#vID#\").Vars(subject)\r\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\r\n                                        P(Class: h5 text-normal m0){\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(contract_accept))\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\r\n\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_subject_contract_accept#)\r\n\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\r\n                                        P(Class: h5 text-normal m0){\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(contract_reject))\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\r\n\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_subject_contract_reject#)\r\n\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n                                Div(Class: row df f-valign){\r\n                                    Div(Class: col-md-12 mc-sm){\r\n\t\t\t\t\t\t\t\t\t\tIf(And(#vCmpStartDate#>0,#instance_voting_type#==1)){\r\n\t\t\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: voting_decision_contract, PageParams: \"vID=#vID#\"){\r\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                }\r\n                                Div(Class: row df f-valign){\r\n                                    Div(Class: col-lg-10 col-lg-offset-1){\r\n\t\t\t\t\t\t\t\t\t\tIf(#vOpportunityVote#==1){\r\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: pull-left){\r\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(reject), Class: btn btn-danger, Contract: voting_RejectDecision, PageParams: \"vID=#vID#\", Page: voting_view)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: pull-right){\r\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(accept), Class: btn btn-success, Contract: voting_AcceptDecision, PageParams: \"vID=#vID#\", Page: voting_view)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                                    }\r\n                                }\r\n\t\t\t\t\t\t\t}\r\n                        }\r\n\r\n                        Div(Class: list-group-item text-center){\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-6 mt-sm text-right){\r\n                                    P(Class: h5 text-normal m0, Body: LangRes(status))\r\n                                }\r\n                                Div(Class: col-md-6 mt-sm text-left){\r\n\t\t\t\t\t\t\t\t\tIf(#instance_flags_success#==1){ \r\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-success m0, Body: LangRes(success))\r\n\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\tIf(#vCmpEndDate#<0){\r\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: LangRes(finished))\r\n\t\t\t\t\t\t\t\t\t\t}.Else{\t\r\n\t\t\t\t\t\t\t\t\t\t\tIf(#vCmpStartDate#<0){ \r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-success m0, Body: LangRes(started))\r\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\t\r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-warning m0, Body: LangRes(waiting))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n                                }\r\n                            }\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\r\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(notifications))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\r\n\t\t\t\t\t\t\t\t\tIf(#instance_flags_notifics#==1){\r\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(yes))\r\n\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(no))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-6 mc-sm text-right){\r\n                                    P(Class: h5 text-normal m0, Body: LangRes(decision))\r\n                                }\r\n                                Div(Class: col-md-6 mc-sm text-left){\r\n\t\t\t\t\t\t\t\t\tIf(#instance_flags_decision#==-2){\r\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(not_enough_votes))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tIf(#instance_flags_decision#==-1){ \r\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(rejected))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tIf(#instance_flags_decision#==0){\r\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(no))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tIf(#instance_flags_decision#==1){\r\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-success m0, Body: LangRes(accepted))\r\n\t\t\t\t\t\t\t\t\t}\r\n                                }\r\n                            }\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\r\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(date_start))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\r\n\t\t\t\t\t\t\t\t\tIf(#vCmpStartDate#<0){\r\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: DateTime(DateTime: #instance_date_started#, Format: \"DD.MM.YYYY HH:MI\"))\r\n\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: DateTime(DateTime: #instance_date_started#, Format: \"DD.MM.YYYY HH:MI\"))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\r\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(date_end))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\r\n\t\t\t\t\t\t\t\t\tIf(#vCmpEndDate#<0){\r\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: DateTime(DateTime: #instance_date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\r\n\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: DateTime(DateTime: #instance_date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\r\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(voting_volume))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\r\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #instance_voting_volume#)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\r\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(voting_quorum))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\r\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #instance_voting_quorum#)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\r\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0){\r\n\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(participants))\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\r\n\t\t\t\t\t\t\t\t\tIf(#instance_progress_number_participants# > 0){\r\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #instance_progress_number_participants#)\r\n\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: #instance_progress_number_participants#)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-lg-8 col-lg-offset-2){\r\n\t\t\t\t\t\t\t\t\tDBFind(Name: votings_participants, Source: src_voting_participants).Columns(\"id,member->member_id,member->member_name,decision_date,decision\").Where(\"voting_id=#vID#\").Custom(custom_address){\r\n\t\t\t\t\t\t\t\t\t\tP(Class: h6 m0, Body: Address(#member.member_id#))\r\n\t\t\t\t\t\t\t\t\t}.Custom(custom_member){\r\n\t\t\t\t\t\t\t\t\t\tLinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#member.member_id#\"){\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: #member.member_name#)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}.Custom(custom_decision){\r\n\r\n\t\t\t\t\t\t\t\t\t\tIf(Or(#instance_voting_type_decision#==1,#instance_voting_type_decision#==2)){ \r\n\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==0){ \r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h6 m0, Body: LangRes(did_not_vote))\r\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-success text-center h6 m0, Body: $vote_for_candidate$:)\r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-success text-center h6 m0, Body: Address(#decision#) )\r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-success text-center h6 m0, Body: $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tIf(#instance_voting_type_decision#==3){ \r\n\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==0){\r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h6 m0, Body: LangRes(did_not_vote))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==1){ \r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-success h6 m0, Body: $document_accept$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==-1){ \r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-danger h6 m0, Body: $document_reject$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tIf(#instance_voting_type_decision#==4){\r\n\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==0){\r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h6 m0, Body: LangRes(did_not_vote))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==1){\r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-success h6 m0, Body: $decision_accept$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==-1){ \r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-danger h6 m0, Body: $decision_reject$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tIf(#instance_voting_type_decision#==5){ \r\n\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==0){\r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h6 m0, Body: LangRes(did_not_vote))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==1){ \r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-success h6 m0, Body: $contract_accepted$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==-1){ \r\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-danger h6 m0, Body: $contract_rejected$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}.Order(\"id\")\r\n\t\t\t\t\t\t\t\t\tTable(src_voting_participants, \"=custom_member,=custom_decision\")\r\n                                }\r\n                            }\r\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\r\n\t\t\t\t\t\t\t\tDiv(Class: col-md-12 mc-sm){\r\n\t\t\t\t\t\t\t\t\tIf(And(#vCmpStartDate#>0,#instance_voting_type#==1)){\r\n\t\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: voting_invite, PageParams: \"vID=#vID#\"){\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: LangRes(participants_add))\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n                        Div(Class: list-group-item text-center){\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-1 mt-sm )\r\n                                Div(Class: col-md-5 mt-sm text-center){\r\n\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: LangRes(voted))\r\n                                }\r\n                                Div(Class: col-md-5 mt-sm text-center){\r\n\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: LangRes(progress))\r\n                                }\r\n                                Div(Class: col-md-1 mt-sm)\r\n                            }\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-1 mt-sm )\r\n                                Div(Class: col-md-5 mt-sm text-center){\r\n\t\t\t\t\t\t\t\t\tP(Class: h6 text-muted m0, Body: LangRes(voting_graph_voted))\r\n                                }\r\n                                Div(Class: col-md-5 mt-sm text-center){\r\n\t\t\t\t\t\t\t\t\tP(Class: h6 text-muted m0, Body: LangRes(voting_graph_progress))\r\n                                }\r\n                                Div(Class: col-md-1 mt-sm)\r\n                            }\r\n                            Div(Class: row df f-valign){\r\n                                Div(Class: col-md-1 mt-sm )\r\n                                Div(Class: col-md-5 mt-sm text-center){\r\n                                    P(Class: h3 text-normal m0, Body: #instance_progress_number_voters# / #instance_progress_percent_voters#)\r\n                                }\r\n                                Div(Class: col-md-5 mt-sm text-center){\r\n                                    P(Class: h3 text-normal m0, Body: #instance_progress_percent_success# / 100)\r\n                                }\r\n                                Div(Class: col-md-1 mt-sm)\r\n                            }\r\n\t\t\t\t\t\t}\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(Class: md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        }
    ],
    "parameters": [
        {
            "Name": "catalog_ecosystems_freetype",
            "Value": "APL_not_required,APL_required",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "catalog_ecosystems_list",
            "Value": "Ecosystem #1,Ecosystem #2,Ecosystem #3,Ecosystem #4,Ecosystem #5,Ecosystem #6,Ecosystem #7,Ecosystem #8,Ecosystem #9,Ecosystem #10,Ecosystem #11,Ecosystem #12,Ecosystem #13,Ecosystem #14,Ecosystem #15,Ecosystem #16,Ecosystem #17,Ecosystem #18,Ecosystem #19,Ecosystem #20,Ecosystem #21,Ecosystem #22,Ecosystem #23,Ecosystem #24,Ecosystem #25,Ecosystem #26,Ecosystem #27,Ecosystem #28,Ecosystem #29,Ecosystem #30,Ecosystem #31,Ecosystem #32,Ecosystem #33,Ecosystem #34,Ecosystem #35,Ecosystem #36,Ecosystem #37,Ecosystem #38,Ecosystem #39,Ecosystem #40,Ecosystem #41,Ecosystem #42,Ecosystem #43,Ecosystem #44,land_registry #45,Ecosystem #46,Ecosystem #47,dashboard_default #48,demo_page #49,Ecosystem #50,Ecosystem #51,membership_request #52,Ecosystem #53,member_pages #54,profile_messenger #55,Ecosystem #56,Ecosystem #57,Ecosystem #58,Ecosystem #59,voting #60",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "catalog_ecosystems_type",
            "Value": "public_org,business,finance",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "notification_closure",
            "Value": "single,multiple",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "notification_icon",
            "Value": "fa-bell,fa-comment,fa-envelope,fa-bookmark,fa-check,fa-exclamation-triangle,fa-info-circle",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "notification_sender",
            "Value": "notification_sender_member,notification_sender_role",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "notification_type",
            "Value": "single,role",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "roles_types",
            "Value": "assigned_role,elective_role,system_role,company_role",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "type_voting",
            "Value": "type_voting_custom,type_voting_system",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "type_voting_decisions",
            "Value": "voting_decisions_candidate_requests,voting_decisions_candidate_manual,voting_decisions_document,voting_decisions_db,voting_decisions_contract",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "type_voting_participants",
            "Value": "voting_participants_everybody,voting_participants_manual,voting_participants_role",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "tables": [
        {
            "Name": "binary_data",
            "Columns": "[{\"name\":\"binary_data\",\"type\":\"bytea\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "catalog_ecosystems",
            "Columns": "[{\"name\":\"url_address\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"ecosystem_info\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"ecosystem_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"ecosystem_type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"ecosystem_number\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"image_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"flag_free\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "members",
            "Columns": "[{\"name\":\"image_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"member_info\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"member_name\",\"type\":\"varchar\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "notifications",
            "Columns": "[{\"name\":\"closed\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"sender\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"page_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"date_created\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"notification\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"date_start_processing\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"recipient\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"date_closed\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"page_params\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"processing_info\",\"type\":\"json\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "roles",
            "Columns": "[{\"name\":\"date_deleted\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"image_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"role_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"company_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"creator\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"role_type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"date_created\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"default_page\",\"type\":\"varchar\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "roles_participants",
            "Columns": "[{\"name\":\"appointed\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"date_created\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"date_deleted\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"role\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"member\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "votings",
            "Columns": "[{\"name\":\"date_ended\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"date_started\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"flags\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"voting\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"creator\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"optional\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"progress\",\"type\":\"json\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "votings_participants",
            "Columns": "[{\"name\":\"member\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"decision\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"voting_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"decision_date\",\"type\":\"datetime\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "votings_subject",
            "Columns": "[{\"name\":\"subject\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"voting_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"number_accept\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}