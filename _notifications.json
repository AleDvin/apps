{
    "name": "Basic application",
    "data": [
        {
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuGroup(Title:$notifications$, Icon:\"icon-arrow-right\"){\n    MenuItem(Title:$single_notifics$, Page:notifications_single, Icon:\"fa fa-bell-o\")\n    MenuItem(Title:$role_notifics$, Page:notifications_roles, Icon:\"fa fa-bullhorn\")\n    MenuItem(Title:$test_page$, Page:notifications_testpage, Icon:\"icon-settings\")\n}",
            "Name": "default_menu",
            "Type": "menu"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "single,multiple",
            "Name": "notification_closure",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "fa-bell,fa-comment,fa-envelope,fa-bookmark,fa-check,fa-exclamation-triangle,fa-info-circle",
            "Name": "notification_icon",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "notification_sender_member,notification_sender_role",
            "Name": "notification_sender",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "single,role",
            "Name": "notification_type",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div()",
            "Name": "default_ecosystem_page",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle($role_notifics$)\n    AddToolButton(Title: $send$, Page: notifications_roles_send, Icon: icon-plus)\n\n    If(GetVar(Search)){\n        SetVar(Where,\"notification->type='2' and recipient->role_name='#Search#'\")\n    }.Else{\n        SetVar(Where,\"notification->type='2'\").(Search,)\n    }\n\n    DBFind(Name: notifications, Source: src_notifications).Limit(20).Columns(\"id,recipient->role_id,recipient->role_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,page_name,page_params,date_created,date_closed,date_start_processing,processing_info->member_name,closed\").Custom(_id){\n        If(#closed# == 0){\n            SetVar(style_text,\"text-normal\").(style_link,\"text-primary\")\n        }.Else{\n            SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\n        }\n        Span(Class: #style_text#, Body: #id#)\n    }.Custom(_recipient){\n        LinkPage(Class: #style_link# t5 text-bold, Page: roles_view, PageParams: \"v_role_id=#recipient.role_id#\"){\n            If(#recipient.image_id#>0){\n                Image(Src: Binary().ById(#recipient.image_id#) \"#img_data#\", Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\n                #recipient.role_name#\n            }.Else{\n                Div(){\n                    Span(Em(Class: fa icon-settings fa-2x)).Style(margin-right:10px;)\n                    Span(#recipient.role_name#)\n                }.Style(display:flex; align-items:center;)\n            }\n        }\n    }.Custom(_sender){\n        If(#sender.type#==1){\n            LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#sender.member_id#\"){#sender.member_name#}\n        }\n        If(#sender.type#==2){\n            LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#sender.role_id#\"){#sender.role_name#}\n        }\n    }.Custom(_icon){\n        Span(Class: fa #notification.icon# fa-2x #style_text#)\n    }.Custom(_page){\n        LinkPage(Class: #style_link# t5 text-bold, Page: #page_name#, PageParams: \"notific_id=#id#\"){\n            #page_name#\n        }\n    }.Custom(_date){\n        Div(#style_text# t6){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\n        Div(#style_text# t6){DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\")}\n    }.Custom(_processing){\n        Div(Class: #style_text# t6){\n            If(#date_start_processing# == NULL){\n                $not_started$\n            }.Else{\n                Span(LangRes(started), mr-sm) #processing_info.member_name# \n                Span(LangRes(at), mr-sm)\n                DateTime(DateTime: #date_start_processing#, Format: \"DD.MM.YYYY HH:MI\")\n            }\n        }\n    }.Custom(_status){\n        If(#closed# == 0){\n            Span(Class: #style_text#){\n                If(#date_start_processing# == NULL){\n                    LangRes(active)\n                }.Else{\n                    LangRes(processing)\n                }\n            }\n        }.Else{\n            Span(Class: #style_text#, Body: LangRes(closed))\n        }\n    }.Custom(_actions){\n        Div(text-right){\n            If(#closed# == 0){\n                If(#date_start_processing# == NULL){\n                    Button(Class: btn btn-default fa fa-play, Contract: notifications_Process, Params: \"notific_id=#id#\", Page: notifications_roles).Alert(Text: $want_start_processing_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }.Else{\n                    Button(Class: btn btn-default fa fa-trash, Contract: notifications_Close, Params: \"notific_id=#id#\", Page: notifications_roles).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }\n            }\n        }\n    }.Where(#Where#).Order(\"closed ASC, id DESC\")\n\n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-12){\n                    Div(input-group){\n                        Div(input-group-addon){\n                            LangRes(recipient)\n                        }\n                        Input(Name: Search, Value: #Search#)\n                        Div(input-group-btn){\n                            Button(Class: btn btn-default fa fa-search, Page: notifications_roles, PageParams: \"Search=Val(Search)\")\n                        }\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12){\n                    Table(Source: src_notifications, Columns: \"$id$=_id,$icon$=_icon,$recipient$=_recipient,$page_name$=_page,$sender$=_sender,$processing$=_processing,$sent$/$—Ålosed$=_date,$status$=_status,=_actions\")\n                }\n            }\n            If(GetVar(Search)){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_roles)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "notifications_roles",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n\n    SetTitle($role_notifics$)\n    Div(breadcrumb){\n        LinkPage($role_notifics$, notifications_roles)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $send$)\n    }\n\n    Div(row){\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading){LangRes(role_notifics)}\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(recipient))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                DBFind(Name: roles, Source: source_roles).Columns(\"id,role_name\").Where(\"deleted=0\")\n                                Select(Name: rid, Source: source_roles, NameColumn: role_name, ValueColumn: id)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(closure_type))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                AppParam(App:#app_id#, Name: notification_closure, Source: src_closure_type)\n                                Select(Name: closure_type, Source: src_closure_type, NameColumn: name, ValueColumn: id)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(sender))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                AppParam(App:#app_id#, Name: notification_sender, Source: src_sender)\n                                Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(icon))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                AppParam(App:#app_id#, Name: notification_icon, Source: src_icon)\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(header))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\n                                InputErr(Name: text_header, minLength: $validate_notification$, maxLength: $validate_role_name$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(body_text))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: text_body, Value: \"Body text\")\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(page_name))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: page_name, Value: \"notifications_testpage\").Validate(minLength:3, maxLength:255)\n                                InputErr(Name: page_name, minLength: $validate_notification$, maxLength: $validate_role_name$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(params))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: params_map, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: notifications_roles)\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_roles, Contract: notifications_Send)\n                }\n            }\n        }\n    }\n}",
            "Name": "notifications_roles_send",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle($single_notifics$)\n    AddToolButton(Title: $send$, Page: notifications_single_send, Icon: icon-plus)\n\n    If(GetVar(Search)){\n        SetVar(Where,\"notification->type='1' and recipient->member_name='#Search#'\")\n    }.Else{\n        SetVar(Where,\"notification->type='1'\").(Search,)\n    }\n    \n    DBFind(Name: notifications, Source: src_notifications).Limit(20).Columns(\"id,recipient->member_id,recipient->member_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,page_name,page_params,date_created,date_closed,closed\").Custom(custom_id){\n        If(#closed# == 0){\n            SetVar(Name: style_text, Value: \"text-normal\")\n            SetVar(Name: style_link, Value: \"text-primary\")\n        }.Else{\n            SetVar(Name: style_text, Value: \"text-muted\")\n            SetVar(Name: style_link, Value: \"text-muted\")\n        }\n        Span(Class: #style_text#, Body: #id#)\n    }.Custom(custom_recipient){\n        LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#recipient.member_id#\"){\n            If(#recipient.image_id#>0){\n                Image(Src: Binary().ById(#recipient.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                Span(#recipient.member_name#)\n            }.Else{\n                Div(){\n                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                    Span(#recipient.member_name#)\n                }.Style(display:flex; align-items:center;)\n            }\n        }\n    }.Custom(custom_sender){\n        If(#sender.type#==1){\n            LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#sender.member_id#\"){\n                Span(Body: #sender.member_name#)\n            }\n        }\n        If(#sender.type#==2){\n            LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#sender.role_id#\"){\n                Span(Body: #sender.role_name#)\n            }\n        }\n    }.Custom(custom_icon){\n        Em(Class: fa #notification.icon# fa-2x #style_text#)\n    }.Custom(custom_page){\n        LinkPage(Class: #style_link# h5 text-bold, Page: #page_name#, PageParams: \"notific_id=#id#\"){\n            Span(Body: #page_name#)\n        }\n    }.Custom(custom_date){\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\"))\n    }.Custom(custom_status){\n        If(#closed# == 0){\n            Span(Class: #style_text#, Body: LangRes(active))\n        }.Else{\n            Span(Class: #style_text#, Body: LangRes(—Ålosed))\n        }\n    }.Custom(actions){\n        Div(pull-right){\n            If(#closed# == 0){\n                Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: notifications_Close, Params: \"notific_id=#id#\", Page: notifications_single).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n            }\n        }\n    }.Where(#Where#).Order(\"closed ASC, id DESC\")\n\n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-12){\n                    Div(input-group){\n                        Div(input-group-addon){\n                            LangRes(recipient)\n                        }\n                        Input(Name: Search, Value: #Search#)\n                        Div(input-group-btn){\n                            Button(Class: btn btn-default fa fa-search, Page: notifications_single, PageParams: \"Search=Val(Search)\")\n                        }\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12){\n                    Table(Source: src_notifications, Columns: \"$id$=custom_id,$icon$=custom_icon,$recipient$=custom_recipient,$page_name$=custom_page,$sender$=custom_sender,$sent$/$—Ålosed$=custom_date,$status$=custom_status,=actions\")\n                }\n            }\n            If(GetVar(Search)){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_single)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "notifications_single",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(applications,src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    DBFind(members,members).Ecosystem(1).Columns(\"id,member_name\").Custom(name){#member_name#}\n    DBFind(ecosystems,ecosystems).Ecosystem(1).Columns(\"id,name\")\n    AppParam(App:#app_id#, Name: notification_sender, Source: senders)\n    AppParam(App:#app_id#, Name: notification_icon, Source: icons)\n    SetVar(params_map,`{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\n    Data(section0,\"Name,Type,Res,Req,Src\"){\n        eco,select,ecosystem,,ecosystems\n    }\n    Data(section1,\"Name,Type,Res,Req,Src\"){\n        member_id,select,recipient,*,members\n    }\n    Data(section2,\"Name,Type,Res,Req,Src\"){\n        sender,select,sender,*,senders\n    }\n    Data(section3,\"Name,Type,Res,Req,Src,Val\"){\n        icon_name,name_select,icon,,icons,\n        text_header,validated_input,header,*,,\"Header text\"\n        text_body,input,body_text,*,,\"Body text\"\n    }\n    Data(section4,\"Name,Type,Res,Req,Src,Val\"){\n        page_name,validated_input,page_name,*,,\"notifications_testpage\"\n        params_map,input,params,,,#params_map#\n    }\n\n    Data(sections, \"Section\"){\n        section0\n        section1\n        section2\n        section3\n        section4\n    }\n\n    SetTitle($single_notifics$)\n    Div(breadcrumb){\n        LinkPage($single_notifics$, notifications_single)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $send$)\n    }\n    Div(container){\n        Div(row){\n            Div(col-md-8 col-md-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-heading){LangRes(single_notifics)}\n                    Div(panel-body){\n                        ForList(sections){\n                            Div(list-group-item){\n                                ForList(#Section#){\n                                    Div(row mt-sm){\n                                        Div(col-md-3 text-right text-nowrap){\n                                            Label(For:#Name#){LangRes(#Res#)}\n                                            If(#Req#==*){\n                                                Span(*,text-danger)\n                                            }\n                                        }\n                                        Div(col-md-9 text-left){\n                                            If(#Type#==select){\n                                                Select(Name: #Name#, Source: #Src#, NameColumn: name, ValueColumn: id)\n                                            }.ElseIf(#Type#==name_select){\n                                                Select(Name: #Name#, Source: #Src#, NameColumn: name, ValueColumn: name)\n                                            }.ElseIf(#Type#==validated_input){\n                                                Input(Name: #Name#, Value: #Val#).Validate(minLength:3, maxLength:255)\n                                                InputErr(Name: #Name#, minLength: \"Too short\", maxLength: \"Too long\")\n                                            }.ElseIf(#Type#==input){\n                                                Input(Name: #Name#, Value: #Val#)\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Button(Body: LangRes(back), Class: btn btn-default pull-left, Page: notifications_single)\n                        Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_single, Contract: notifications_Send)\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "notifications_single_send",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    SetTitle($test_page$)\n\n    If(#notific_id# > 0){\n        DBFind(Name: notifications, Source: src_notifications).Columns(\"id,notification->type,notification->header,page_params->param_int,page_params->param_str,date_start_processing,closed\").Where(\"id=#notific_id#\").Vars(prefix)\n        SetVar(Name: notific_type, Value: #prefix_notification_type#)\n        SetVar(Name: notific_header, Value: #prefix_notification_header#)\n        SetVar(Name: notific_val_int, Value: #prefix_page_params_param_int#)\n        SetVar(Name: notific_val_str, Value: #prefix_page_params_param_str#)\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n        SetVar(Name: notific_id, Value: \"0\")\n        SetVar(Name: notific_type, Value: \"0\")\n        SetVar(Name: notific_header, Value: \"null\")\n        SetVar(Name: notific_val_int, Value: \"null\")\n        SetVar(Name: notific_val_str, Value: \"null\")\n    }\n\n    Div(row){\n        Div(col-md-6 col-md-offset-3){\n            Form(panel panel-default){\n                Div(panel-body){\n                    Div(list-group-item text-center){\n                        Span(Class: h3, Body: #notific_header#)\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(id))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                Span(Class: h4, Body: #notific_id#)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(type))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                If(#notific_type# > 0){\n                                    Span(Class: h4, Body: AppParam(App:#app_id#, Name: notification_type, Index: #notific_type#))\n                                }.Else{\n                                    Span(Class: h4, Body: #notific_type#)\n                                }\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(value_number))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                Span(Class: h4, Body: #notific_val_int#)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(value_string))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                Span(Class: h4, Body: #notific_val_str#)\n                            }\n                        }\n                    }\n                }\n                If(#notific_type# == 1){\n                    If(#prefix_closed# == 0){\n                        Div(panel-footer text-right){\n                            Button(Body: LangRes(close), Class: btn btn-primary, Contract: notifications_Close, Params: \"notific_id=#notific_id#\", Page: notifications_single).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                        }\n                    }\n                }\n                If(#notific_type# == 2){\n                    If(#prefix_closed# == 0){\n                        Div(panel-footer text-right){\n                            If(#prefix_date_start_processing# == \"\"){\n                                Button(Body: LangRes(begin), Class: btn btn-primary, Contract: notifications_Process, Params: \"notific_id=#notific_id#\", Page: notifications_roles).Alert(Text: $want_start_processing_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                            }.Else{\n                                Button(Body: LangRes(close), Class: btn btn-primary, Contract: notifications_Close, Params: \"notific_id=#notific_id#\", Page: notifications_roles).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "notifications_testpage",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract notifications_Process {\n    data {\n        notific_id int\n    }\n\n    conditions {\n        $notify = DBFind(\"notifications\").Columns(\"recipient->role_id,sender->type,date_start_processing\").Where(\"id=?\", $notific_id).Row()\n        if !$notify {\n            warning \"Notification not found\"\n        }\n\n        if $notify[\"sender.type\"] == 2{\n            if $notify[\"date_start_processing\"] != \"\" {\n                warning \"Sorry, processing of this notification has already begun\"\n            }\n            if !DBFind(\"roles_participants\").Where(\"role->id=? and member->member_id=? and deleted=0\", Int($notify[\"recipient.role_id\"]), $key_id).One(\"id\") {\n                warning \"Sorry, you are not part of the role for which this notification is intended\"\n            }\n        }else{\n            if $notify[\"sender.type\"] != 1 {\n                warning \"Notification type not found\"\n            }\n        }\n\n        $member = DBFind(\"members\").Where(\"id=?\", $key_id).Row()\n        if !$member {\n            warning \"Member not found\"\n        }\n    }\n\n    action {\n        var member_info map\n        member_info[\"member_id\"] = $member[\"id\"]\n        member_info[\"member_name\"] = $member[\"member_name\"]\n        member_info[\"image_id\"] = $member[\"image_id\"]\n\n        DBUpdate(\"notifications\", $notific_id, \"timestamp date_start_processing,processing_info\", $block_time, JSONEncode(member_info))\n    }\n}",
            "Name": "notifications_Process",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract notifications_Close {\n    data {\n        notific_id int\n    }\n\n    conditions {\n        $notify = DBFind(\"notifications\").Columns(\"id,date_start_processing,processing_info->member_id,closed,sender->type\").Where(\"id=$\", $notific_id).Row()\n        if !$notify {\n            warning \"Notification not found\"\n        }\n        if $notify[\"sender.type\"] == 2{\n            //role has processing check\n            if $notify[\"date_start_processing\"] == \"\" {\n                warning \"Sorry, processing of this notification has not yet begun\"\n            }\n\n            if $notify[\"processing_info.member_id\"] != $key_id {\n                warning \"Sorry, processing of this notice began another member\"\n            }\n\n            if $notify[\"closed\"] > 0 {\n                warning \"Sorry, this notification has already been closed before\"\n            }\n        }else {\n            if $notify[\"sender.type\"] != 1 { // not single\n                warning \"Notification type not found\"\n            }\n        }\n    }\n\n    action {\n        if $notify[\"sender.type\"] == 1{\n            notifications_Process(\"notific_id\", $notific_id)\n        }\n\n        DBUpdate(\"notifications\", $notific_id, \"timestamp date_closed,closed\", $block_time, 1)\n    }\n}",
            "Name": "notifications_Close",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract notifications_Send {\n    data {\n        member_id int \"optional\"\n        rid int \"optional\"\n        closure_type int \"optional\"\n\n        sender int\n        icon_name string \"optional\"\n        text_header string\n        text_body string \"optional\"\n        page_name string\n        params_map string // json encoded expected\n        eco string \"optional\"\n    }\n    func sendNotify(recipient map){\n        var notification map\n        notification[\"header\"] = $text_header\n        notification[\"type\"] = $notify_type\n        notification[\"icon\"] = $icon_name\n        notification[\"body\"] = $text_body\n        var sender map\n        if $sender == 1 && $senderMember {\n            // send from member\n            sender[\"type\"] = $sender\n            sender[\"member_id\"] = $senderMember[\"id\"]\n            sender[\"member_name\"] = $senderMember[\"member_name\"]\n            sender[\"image_id\"] = $senderMember[\"image_id\"]\n        }else{\n            if $sender == 2 && $senderRole{\n                // send from role\n                sender[\"type\"] = $sender\n                sender[\"role_id\"] = $senderRole[\"id\"]\n                sender[\"role_name\"] = $senderRole[\"role_name\"]\n                sender[\"image_id\"] = $senderRole[\"image_id\"]\n            }\n        }\n        var notifications string\n        if $eco > 0 {\n            notifications = Sprintf(\"@%v_notifications\", $eco)\n        }else{\n            notifications = \"notifications\"\n        }\n        DBInsert(notifications, \"recipient,sender,notification,page_name,page_params,timestamp date_created\", recipient, sender, notification, $page_name, $params_map, $block_time)\n    }\n    func sendToMember(memberId int){\n        var member map\n        member = DBFind(\"members\").Where(\"id=?\", memberId).Row()\n        if !member {\n            warning Sprintf(\"%v: Member not found (%v)\", $this_contract, memberId)\n        }\n        var recipient map\n        recipient[\"member_id\"] = member[\"id\"]\n        recipient[\"member_name\"] = member[\"member_name\"]\n        recipient[\"image_id\"] = member[\"image_id\"]\n\n        sendNotify(recipient)\n    }\n\n    func sendToRole(roleId int){\n        var role map\n        role = DBFind(\"roles\").Where(\"id=?\", roleId).Row()\n        var recipient map\n        recipient[\"role_id\"] = role[\"id\"]\n        recipient[\"role_name\"] = role[\"role_name\"]\n        recipient[\"image_id\"] = role[\"image_id\"]\n\n        sendNotify(recipient)\n    }\n\n    conditions {\n        $member_id = Int($member_id)\n        $eco = Int($eco)\n        $rid = Int($rid)\n        if Size($icon_name) < 1{\n            $icon_name = \"icon-envelope\"\n        }\n        if $member_id != 0 {\n            $notify_type = 1 // is \"member\"\n        }else{\n            if $rid > 0{\n                $notify_type = 2 // is \"role\"\n                if !DBFind(\"roles\").Where(\"id=?\", $rid).One(\"id\") {\n                    warning $this_contract+\": Recipient role not found\"\n                }\n                if !DBFind(\"roles_participants\").Where(\"role->id=? and deleted=0\", $rid).One(\"id\") {\n                    warning $this_contract+\": Recipient role does not contain members\"\n                }\n            } else{\n                warning $this_contract+\": Notification type not defined\"\n            }\n        }\n        $senderMember = nil\n        $senderRole = nil\n        if $sender == 1 {\n            $senderMember = DBFind(\"members\").Where(\"id=?\", $key_id).Row()\n            if !$senderMember {\n                warning $this_contract+\": Sender not member\"\n            }\n        }else{\n            if $sender == 2 {\n                $senderRole = DBFind(\"roles\").Where(\"id=?\", $role_id).Row()\n                if !$senderRole {\n                    warning $this_contract+\": Sender role not found\"\n                }\n            }else{\n                warning $this_contract+\": Sender invalid\"\n            }\n        }\n    }\n    action {\n        if $member_id != 0 {\n            sendToMember($member_id)\n        }else{\n            if $rid > 0 {\n                if $closure_type == 1 {\n                    // Single closure: one begins the process - the others do not see\n                    // –û–¥–∏–Ω–æ—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ: –≤—Å–µ –∏–º–µ—é—â–∏–µ —Ä–æ–ª—å –ø–æ–ª—É—á–∞—é—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, –Ω–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –∑–∞–ø—É—Å—Ç–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã —Å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ–º –æ–Ω–æ —Å–∫—Ä–æ–µ—Ç—Å—è –æ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö\n                    sendToRole($rid)\n                } else {\n                    // Multiple closure: to each his own notification\n                    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ: –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Ä–æ–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–µ –æ–¥–∏–Ω–æ—á–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ\n                    $notify_type = 1\n                    var participants array\n                    participants = DBFind(\"roles_participants\").Columns(\"member->member_id\").Where(\"role->id=? and deleted=0\", $rid)\n                    var i int\n                    while i < Len(participants) {\n                        var p map\n                        p = participants[i]\n                        sendToMember(Int(p[\"member.member_id\"]))\n                        i=i+1\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "notifications_Send",
            "Type": "contracts"
        }
    ]
}