contract sysparams_StartRoleVoting{
    data{
        Id int
        VotingParamId int
        Start string "date"
        StartTime "date"
        End string "date"
    }
    
    func conditions{
        $votingParams = DBFind("sysparams_voting_roles").WhereId($VotingParamId).Row()
        if !$votingParams{
            warning "Voting params not found"
        }
        
        $starterRole = $votingParams["allowed_started"]
        $starterRoleId = DBFind("roles_list").Where("delete=0 and role_name=?", $starterRole).One("id")
        if $starterRoleId == nil{
            warning "Starter role not found"
        }
        
        $isVotingStarter = DBFind("roles_assign").Where("delete=0 and member_id=? and role_id=?", $key_id, $starterRoleId).Row()
        if $isVotingStarter == nil{
            info "You can not start to voting"
        }
        $roleName = $votingParams["candidate_role"]
        
        
        if $VotingParamId == 1{ // Delegate to Validators voting : Голосование экосистем за валидаторов
            // renew Delegates
            sysparams_DelegateRefresh()
            $candidate = DBFind("sysparams_candidate").Where("id=?",$Id).Row()
            if $candidate == nil{
                warning "Candidate not found %v"
            }
            $KeyId = Int($candidate["candidate_key_id"])
            $votingName = Sprintf("%v %v",$votingParams["title"], IdToAddress($KeyId))
            $isCreated = DBFind("voting_instances").Where("name=? and delete=0", $votingName).Row()
            if $isCreated != nil{
                info "Voting already created"
            }
            
        }
        
        if $VotingParamId == 2{ // Investor voting for Main Ecos : Голосование инвесторов за значимые экосистемы
            // renew Delegates
            sysparams_DelegateRefresh()
            $candidate = DBFind("sysparams_candidate").Where("id=?",$Id).Row()
            if $candidate == nil{
                warning "Candidate not found %v"
            }
            $KeyId = Int($candidate["candidate_key_id"])
            $votingName = Sprintf("%v %v",$votingParams["title"], IdToAddress($KeyId))
            $isCreated = DBFind("voting_instances").Where("name=? and delete=0", $votingName).Row()
            if $isCreated != nil{
                info "Voting already created"
            }
            
        }
        
        $contractAccept = Sprintf("sysparams_AcceptRole(`ParamId,KeyId`, %v, %v)",$votingParams["id"], $KeyId)
    }
    
    func action{
        var typeDecision, typeParticipants, typeVoting, volume, quorum, vacancies, roleId int
        var desc string
        var role, member, candidate map
        // start voting for Candidate with Params = 50%
        volume = 50
        quorum = 50
        typeVoting = 2 // system
        typeParticipants = 3 // voting on Role
        typeDecision = 2 // Role candidates with manual registration members
        vacancies = 1
        
        role = DBFind("roles_list").Where("role_name=? and delete=0", $roleName).Row()
        roleId = Int(role["id"])
        
        member = DBFind("member").WhereId($KeyId).Row()
        
        $voting_id = 0 // will be set in voting_CreateNew
        voting_CreateNew("voting_name,type_voting,description,type_participants,type_decision,now_date,start_time,start_date,end_date,end_time,volume,quorum", $votingName, typeVoting, desc, typeParticipants, typeDecision, $Start, $StartTime, $Start, $End, "23:59:59", volume, quorum)
        if $voting_id == 0{
            $voting_id = DBFind("voting_instances").Where("voting_name=? and start_date=?", $votingName, $Start).One("id")
            $voting_id = Int($voting_id)
        }
        // after success voting set Validator Role to Candidate
        voting_SubjectCandidates("votingID,memberID", $voting_id, $KeyId)
        voting_SubjectSettings("votingID,roleID,vacancies,contract_reject,contract_accept", $voting_id, roleId, vacancies, "", $contractAccept)
        voting_Invite("votingID,var_id", $voting_id, roleId)
        
    }
}