SetTitle(Voting test)
Div(content-wrapper){
    Div(row){
        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){
            проверяю все экосистемы с 1 по 60 включительно. если в параметрах экосистемы присутствует Strong(delegate_account) забираю его значение, иначе беру значение Strong(founder_account). Роль назначается членам настоящей экосистемы имеющим заполненный профиль Strong(member)
        }
        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){
            Div(panel panel-primary){
                Div(panel-body){
                    DBFind(Name: roles_assign, Source: src_roles_assign).Where("delete=0").Custom(amount){
                        DBFind(Name: keys, Source: src_keys).Where("id=#member_id#").Vars(key)
                        Span(#key_amount#)
                    }.Custom(address){
                        Span(Address(#member_id#))
                    }
                    Table(Source: src_roles_assign, Columns: "member_id=member_id,address=address,amount=amount,role_name=role_name")
                }
                Div(panel-footer){
                    Button(Contract: sysparams_DelegateRefresh, Class: btn btn-primary, Page: test_delegates_check, Body: $check$)
                }
            }
        }
    }
}