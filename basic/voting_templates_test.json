{
    "blocks": [],
    "contracts": [
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract test_voting_Accept{\n    data{\n        VotingTemplateId string \"optional\"\n        KeyId string \"optional\"\n        VotingId string \"optional\"\n    }\n    \n     action{\n        var voting, params map\n        voting = DBFind(\"votings\").Where(\"id=?\", Int($VotingId)).Row()\n        params = JSONToMap(voting[\"voting\"])\n        var value1, value2, value3 string\n        value1 = \"voting\"\n        value2 = params[\"description\"]\n        value3 = Sprintf(\"ACCEPT template_id:%v voting_id:%v KeyId:%v\", $VotingTemplateId, $VotingId, $KeyId)\n        DBInsert(\"debug\", \"value1,value2,value3\", value1,value2,value3)\n    }\n}",
            "Name": "test_voting_Accept"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract test_voting_Reject{\n    data{\n        VotingTemplateId string \"optional\"\n        KeyId string \"optional\"\n        VotingId string \"optional\"\n    }\n    \n    action{\n        var voting, params map\n        voting = DBFind(\"votings\").Where(\"id=?\", Int($VotingId)).Row()\n        params = JSONToMap(voting[\"voting\"])\n        var value1, value2, value3 string\n        value1 = \"voting\"\n        value2 = params[\"description\"]\n        value3 = Sprintf(\"REJECT template_id:%v voting_id:%v KeyId:%v\", $VotingTemplateId, $VotingId, $KeyId)\n        DBInsert(\"debug\", \"value1,value2,value3\", value1,value2,value3)\n    }\n}",
            "Name": "test_voting_Reject"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract test_voting_Init{\n    data{}\n    \n    conditions{\n        ContractConditions(\"MainCondition\")\n    }\n    \n    action{\n        DBInsert(\"debug\", \"value1,value2,value3\", \"voting\", \"INIT\", \"init OK\")\n    }\n}",
            "Name": "test_voting_Init"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract test_voting_Create{\n    data{\n        Start string \"datetime\"\n        End string \"datetime\"\n        StartTime string \"datetime\"\n        EndTime string \"datetime\"\n    }\n    \n    action{\n        var volume, quorum, vacancies int\n        volume = 50\n        quorum = 51\n        vacancies = 1\n        \n        var SUBJ, voters, candidates, INIT, ACCEPT, ACCEPT_PARAMS, REJECT, REJECT_PARAMS, CANDIDATE_ROLE, VOTER_ROLE string\n        SUBJ = \"voting template subject\"\n        INIT = \"test_voting_Init\"\n        ACCEPT = \"test_voting_Accept\"\n        ACCEPT_PARAMS = \"\"\n        REJECT = \"test_voting_Reject\"\n        REJECT_PARAMS = \"\"\n        CANDIDATE_ROLE = \"Testing Elective role\"\n        VOTER_ROLE = \"Testing Voter role\"\n\n        candidates = DBFind(\"roles\").Where(\"role_name=? and deleted=0\", CANDIDATE_ROLE).One(\"id\")\n        if !candidates {\n            candidates = Roles_Create(\"role_name,role_type,icon,company_id\", CANDIDATE_ROLE, 2, \"\", 0)\n        }\n        voters = DBFind(\"roles\").Where(\"role_name=? and deleted=0\", VOTER_ROLE).One(\"id\")\n        if !voters {\n            voters = Roles_Create(\"role_name,role_type,icon,company_id\", VOTER_ROLE, 1, \"\", 0)\n            Roles_Assign(\"rid,member_id\", voters, $key_id)\n        }\n        \n        \n        var p, d, v int // types of participant, decision, voting\n        d = 1\n        while d <= 5 {\n            p = 1\n            while p <= 3 {\n                if p==2 {\n                    // passed with manually entering participants\n                    p=p+1\n                    continue\n                }\n                v = 1\n                while v <= 2 {\n                    var title string\n                    title = Sprintf(\"New Voting d%v:p%v:v%v\", d, p, v)\n                    \n                    var templateId, kid int\n                    templateId = voting_TemplateStore(\"Title,TypeParticipants,TypeVoting,TypeDecision,Volume,Quorum,Subject,Voters,Candidates,InitContract,Vacancies,ContractAccept,ParamsAccept,ContractReject,ParamsReject\", title,p,v,d,volume,quorum,SUBJ,Str(voters),Str(candidates),INIT,vacancies,ACCEPT,ACCEPT_PARAMS,REJECT,REJECT_PARAMS)\n                    \n                    var tableWritten, rowId, columnName, newValue, textDocument string\n                    tableWritten = \"debug\"\n                    rowId = \"1\"\n                    columnName = \"value1\"\n                    newValue = Sprintf(\"It is new value for template #%v\", templateId)\n                    textDocument = Sprintf(\"Test text Document for voting template #%v\", templateId)\n                    \n                    voting_TemplateRun(\"TemplateId,Start,End,EndTime,StartTime,KeyId,TableWritten,RowId,ColumnName,NewValue,TextDocument\", templateId, $Start, $End, $EndTime, $StartTime, kid, tableWritten, rowId, columnName, newValue, textDocument)\n                    \n                    v = v+1\n                }\n                p = p+1\n            }\n            d = d+1\n        }\n    }\n}",
            "Name": "test_voting_Create"
        }
    ],
    "data": [],
    "languages": [],
    "menus": [
        {
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:testing $voting_templates$, Page:test_voting_templates, Icon:fa fa-thumbs-up)",
            "Name": "default_menu"
        }
    ],
    "pages": [
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2){\n            Form(panel panel-primary){\n                Input(Name:Start, Type: hidden, Value: Now(\"YYYY-MM-DD\"))\n                Input(Name:End, Type: hidden, Value: Now(\"YYYY-MM-DD\", +1 days))\n                Input(Name:StartTime, Type: hidden, Value: Now(\"HH:MI\", +2 minute))\n                Input(Name:EndTime, Type: hidden, Value: Now(\"HH:MI\", +15 minute))\n              \n                Div(panel-footer){\n                    Button(Page:voting_list, Contract:test_voting_Create, Class:btn btn-primary, Body: create tests of votings)\n                }\n            }\n        }\n    }\n}",
            "Name": "test_voting_templates",
            "Menu": "default_menu"
        }
    ],
    "parameters": [],
    "tables": [
        {
            "Name": "debug",
            "Columns": "[\n    {\n        \"name\": \"value1\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"value2\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"value3\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"json\",\n        \"type\": \"json\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}