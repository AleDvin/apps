{
    "name": "Basic application",
    "data": [
        {
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:$voting_templates$, Page:voting_templates, Icon:\"fa icon-pin\")\nMenuGroup(Title:$admin$, Icon:\"icon-arrow-right\"){\n    MenuItem(Title: $sysparams_list$,Page:sysparams_list, Icon:\"fa icon-settings\")\n    MenuItem(Title:$sysparams_candidates$, Page:sysparams_candidates, Icon:\"icon-list\")\n    MenuItem(Title:$sysparams_ecos$, Page:sysparams_ecos, Icon:\"icon-list\")\n    MenuItem(Title:$tokenrefund_list$, Page:tokenrefund_list, Icon:\"icon-list\")\n    MenuItem(Title:$tokens_transfer$, Page:tokens_transfer, Icon:\"icon-credit-card\")\n}",
            "Name": "default_menu",
            "Type": "menu"
        },
        {
            "Name": "laws",
            "Columns": "[\n    {\n        \"name\": \"name\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"page\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"voting_template_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "sysparams_candidate",
            "Columns": "[\n    {\n        \"name\": \"commission_address\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"comment\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"deleted\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"host_ip\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"description\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"date_created\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"commission_pub\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"candidate_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "tokenrefund",
            "Columns": "[\n    {\n        \"name\": \"victim_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"attacker_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"amount\",\n        \"type\": \"money\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"note\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"validator_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"blocked_at\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"voting_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"result\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"status\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"closed_at\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "voting_templates",
            "Columns": "[\n    {\n        \"name\": \"voters\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"candidates\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_participants\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"init_contract\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"title\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_decision\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"quorum\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"subject\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_voting\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"volume\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"vacancies\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"contract_accept\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"accept_params\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"contract_reject\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"reject_params\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "investors_number",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "tokenrefund_result1,tokenrefund_result2,tokenrefund_result3",
            "Name": "tokenrefund_result",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "tokenrefund_status1,tokenrefund_status2,tokenrefund_status3",
            "Name": "tokenrefund_status",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "voting_sysparams_template_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "voting_tokenrefund_template_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "voting_validators_template_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "voting_ves_template_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    \n    SetTitle($sysparams_candidate_validators_form$)\n    Div(Class: breadcrumb){\n        LinkPage($sysparams_candidates$, sysparams_candidates)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $sysparams_candidate_validators_form$)\n    }\n    \n    Div(row){\n        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(form-group) {\n                        Label(LangRes(host_ip)*)\n                        Input(Name: HostIp, Type: text, Placeholder: xxx.xxx.xxx.xxx).Validate(minLength:7, maxLength:15)\n                        InputErr(Name: HostIp, minLength: Value is too short, maxLength: Value is too long)\n                    }\n                    If(){\n                        Div(form-group) {\n                            Label(LangRes(commission_pub)*)\n                            Input(Name: CommissionPub, Type: text).Validate(minLength:128)\n                            InputErr(Name: CommissionPub, minLength: Invalid pub-key)\n                        }\n                    }\n                    Div(form-group) {\n                        Label(LangRes(commission_address)*)\n                        Input(Name: CommissionAddress, Type: text,Placeholder:xxxx-xxxx-xxxx-xxxx-xxxx).Validate(minLength:24, maxLength:24)\n                        InputErr(Name: CommissionAddress, minLength: Invalid address, maxLength: Invalid address)\n                    }\n                    Div(form-group) {\n                        Label(LangRes(description_equipment))\n                        Input(Name: Description, Type: textarea)\n                    }\n                    Div(form-group) {\n                        Label(LangRes(comment))\n                        Input(Name: Comment, Type: textarea)\n                    }\n                }\n\t\t\t\tDiv(panel-footer clearfix){\n\t\t\t\t\tDiv(pull-right){\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_candidates)\n                    \tButton(Contract: sysparams_CandidateValidatorRequest, Class: btn btn-primary, Page: sysparams_candidates, Body: $send$)\n\t\t\t\t\t}\n\t\t\t\t}\n            }\n        }\n    }\n}",
            "Name": "sysparams_candidate_validators_form",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    SetVar(template_id, AppParam(App:#app_id#, Name: voting_validators_template_id))\n    SetTitle($sysparams_candidates$)\n\n    DBFind(Name:sysparams_candidate, Source: src_candidates).Where(\"deleted=0\").Custom(_actions){\n        If(#template_id#>0){\n            Div(btn-group){\n                Input(Name:KeyId, Type: hidden, Value: #candidate_key_id#)\n                Input(Name:TemplateId, Type: hidden, Value: #template_id#)\n                Button(Body: $voting_start$, Contract: voting_TemplateRun, Page: voting_list, Class: btn btn-success)\n            }\n        }.Else{\n            Button(Class: btn btn-warning icon-question, Page: sysparams_candidates).Alert(Text: $voting_template_not_found$, ConfirmButton: $yes$, CancelButton: $no$, Icon: info)\n        }\n\n    }.Custom(_date){\n        DateTime(DateTime: #date_created#, Format: YYYY-MM-DD HH:MI)\n    }\n\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: $sysparams_candidates$)\n    }\n\n    Div(row){\n        Div(col-md-12){\n            Div(panel panel-primary){\n                Form(table-responsive){\n                    Input(Name:Start, Type: hidden, Value: Now(\"YYYY-MM-DD\", +1 days))\n                    Input(Name:StartTime, Type: hidden, Value: Now(\"HH:MI\"))\n                    Input(Name:End, Type: hidden, Value: Now(\"YYYY-MM-DD\", +14 days))\n                    Input(Name:EndTime, Type: hidden, Value: Now(\"HH:MI\"))\n                    Table(Source: src_candidates, Columns: \"$id$=id,$host_ip$=host_ip,$commission_address$=commission_address,$description_equipment$=description,$comment$=comment,$date_created$=_date,=_actions\")\n                }\n                Div(panel-footer text-right){\n                    Button(Body: $add$, Class: btn btn-primary, Page: sysparams_candidate_validators_form)\n                }\n            }\n        }\n    }\n}",
            "Name": "sysparams_candidates",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    SetVar(template_id, AppParam(App:#app_id#, Name: voting_ves_template_id))\n\n    SetTitle($sysparams_ecos$)\n    DBFind(Name: ecosystems, Source:ecos).Order(id).Custom(_actions){\n        If(#template_id#>0){\n            If(#is_valued#==0){\n                Input(Name: RowId, Type: hidden, Value: #id#)\n                Input(Name: NewValue, Type: hidden, Value: 1)\n                Button(Body: $start_voting_ves$, Class: btn btn-block btn-primary, Page: sysparams_ecos, Contract: voting_TemplateRun)\n            }\n        }.Else{\n            Span(voting id template not found in parameters, text-muted)\n        }\n    }.Custom(_valued){\n        If(#is_valued#==1){\n            is valued\n        }\n    }\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Form(table-responsive){\n                        Input(Name: TableWritten, Type: hidden, Value: ecosystems)\n                        Input(Name: ColumnName, Type: hidden, Value: is_valued)\n                        Input(Name: Start, Type: hidden, Value: Now(\"YYYY-MM-DD\"))\n                        Input(Name: End, Type: hidden, Value: Now(\"YYYY-MM-DD\", 3 days))\n                        Input(Name: StartTime, Type: hidden, Value: Now(\"HH:MI\", +5 minute))\n                        Input(Name: EndTime, Type: hidden, Value: Now(\"HH:MI\", +5 minute))\n                        Input(Name: TemplateId, Type: hidden, Value: #template_id#)\n                        Table(ecos, \"$name$=name,=_valued,=_actions\")\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "sysparams_ecos",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetTitle($system_params$)\nJsonToSource(nodes){SysParam(full_nodes)}\nForList(nodes){\n    Div(#key_id#)\n}\nDiv(content-wrapper){\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: $system_params$)\n    }\n    Div(row){\n        Div(col-sm-12 col-lg-10 col-lg-offset-1){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(form-group){\n                        Div(row){\n                            Div(col-sm-4 text-center){Strong($name$)}\n                            Div(col-sm-6 text-center){Strong($value$)}\n                        }\n                    }\n                    Data(Source: src_parameters, Columns: name){\n                        gap_between_blocks\n                        default_ecosystem_page\n                        full_nodes\n                        ecosystem_price\n                        blockchain_url\n                        max_block_size\n                    }\n                    ForList(Source: src_parameters, Index: index){\n                        Div(form-group){\n                            Div(row){\n                                Div(col-sm-4){\n                                    #name#\n                                }\n                                Div(col-sm-6){\n                                    SysParam(#name#)\n                                }.Style(overflow:hidden;)\n                                Div(col-sm-2){\n                                    Button(Body: $edit$, Class: btn btn-block btn-primary, Page: sysparams_voting, PageParams: \"param_index=#index#,param_name=#name#\", Contract: sysparams_UpdateFullNodesKeysList, Params: \"Param=#name#\")\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    DBFind(Name: roles_participants, Source: roles).Columns(\"id,member->member_id,role->id,role->name,deleted\").Where(\"member->member_id='#key_id#' and role->id='3' and role->name='Validator' and deleted=0\").Vars(validator)\n    If(#validator_id#>0){\n        Div(row){\n            Div(col-md-6 col-md-offset-3){\n                Div(panel panel-primary text-center){\n                    Div(panel-heading){$validator_removing$}\n                    Div(panel-body text-center){$validator_removing_desc$}\n                    Div(panel-footer text-right){\n                        Button(Body: $resign$, Class: btn btn-danger, Page: sysparams_list, Contract: sysparams_ValidatorResign).Alert(Text: $want_resign$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                    }\n                }\n            }\n        }\n    }\n}\nIf(){\n    default_ecosystem_menu\n    default_ecosystem_contract\n    rb_blocks_1\n    new_version_url\n    number_of_nodes\n    contract_price\n    column_price\n    table_price\n    menu_price\n    page_price\n    max_tx_size\n    max_tx_count\n    max_columns\n    max_indexes\n    max_block_user_tx\n    max_fuel_tx\n    max_fuel_block\n    commission_size\n    commission_wallet\n    fuel_rate\n    extend_cost_address_to_id\n    extend_cost_id_to_address\n    extend_cost_new_state\n    extend_cost_sha256\n    extend_cost_pub_to_id\n    extend_cost_ecosys_param\n    extend_cost_sys_param_string\n    extend_cost_sys_param_int\n    extend_cost_sys_fuel\n    extend_cost_validate_condition\n    extend_cost_eval_condition\n    extend_cost_has_prefix\n    extend_cost_contains\n    extend_cost_replace\n    extend_cost_join\n    extend_cost_update_lang\n    extend_cost_size\n    extend_cost_substr\n    extend_cost_contracts_list\n    extend_cost_is_object\n    extend_cost_compile_contract\n    extend_cost_flush_contract\n    extend_cost_eval\n    extend_cost_len\n    extend_cost_activate\n    extend_cost_deactivate\n    extend_cost_create_ecosystem\n    extend_cost_table_conditions\n    extend_cost_create_table\n    extend_cost_perm_table\n    extend_cost_column_condition\n    extend_cost_create_column\n    extend_cost_perm_column\n    extend_cost_json_to_map\n    max_block_generation_time\n    block_reward\n}",
            "Name": "sysparams_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    SetVar(template_id, AppParam(App:#app_id#, Name: voting_sysparams_template_id))\n    SetTitle($voting$)\n\n    Div(breadcrumb){\n        LinkPage($system_params$, sysparams_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $voting$)\n    }\n\n    If(And(#template_id#>0,#param_index#>0,#param_name#!=\"\")){\n        Div(row){\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n                If(#param_name#==\"full_nodes\"){\n                    Form(panel panel-primary){\n                        Input(Name: Start, Type: hidden, Value: Now(\"YYYY-MM-DD\"))\n                        Input(Name: End, Type: hidden, Value: Now(\"YYYY-MM-DD\", 21 days))\n                        Input(Name: StartTime, Type: hidden, Value: Now(\"HH:MI\", +5 minute))\n                        Input(Name: EndTime, Type: hidden, Value: Now(\"HH:MI\", +5 minute))\n                        Input(Name: TemplateId, Type: hidden, Value: #template_id#)\n                        Div(panel-heading text-center h3){\n                            Span(#param_name#).Style(text-transform:uppercase;): Span($add$ $new_value$).Style(text-transform:lowercase;)\n                        }\n                        Data(new_node_form, \"name,type,placeholder,value\"){\n                            TcpAddress,text,tcp_address,\"\"\n                            ApiAddress,text,api_address,\"\"\n                            KeyId,number,key_id,#key_id#\n                            PubKey,text,public_key,\"\"\n                        }\n                        Div(panel-body){\n                            ForList(new_node_form){\n                                Div(row form-group){\n                                    Div(col-md-3 text-right){\n                                        Label(For: #name#){LangRes(#name#)}\n                                    }\n                                    Div(col-md-9 text-left){\n                                        Input(Name: #name#, Placeholder: #placeholder#, Type: #type#, Value: #value#)\n                                    }\n                                }\n                            }\n                        }\n                        Div(panel-footer text-right){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_list)\n                            Button(Body: LangRes(voting), Class: btn btn-primary, Contract: sysparams_StartNodeAdd, Page: voting_list)\n                        }\n                    }\n                    AppParam(App:#app_id#, Name:full_nodes_keys, Source:src_keys)\n                    ForList(Source:src_catalog){\n                        If(#name#==\"key_id\"){\n                            SetVar(node_owner, 1)\n                        }\n                    }\n\n                    If(#node_owner#==1){\n                        Form(panel panel-primary){\n                            Div(panel-heading text-center h3){$delete_node$}\n                            Div(panel-body text-center){$delete_node_desc$}\n                            Div(panel-footer text-right){\n                                Button(Body: LangRes(delete), Class: btn btn-danger, Page: sysparams_list, Contract: sysparams_RemoveNode)\n                            }\n                        }\n                    }\n                    If(\"\" != SysParam(full_nodes)){\n                        Div(panel panel-primary){\n                            Div(panel-heading text-center h3){full_nodes}\n                            Div(panel-body text-center){\n                                Div(col-sm-12 text-center){\n                                    SysParam(full_nodes)\n                                }.Style(overflow-x:hidden)\n                            }\n                        }\n                    }\n                }.Else{\n                    Form(panel panel-primary){\n                        Input(Name: Start, Type: hidden, Value: Now(\"YYYY-MM-DD\"))\n                        Input(Name: End, Type: hidden, Value: Now(\"YYYY-MM-DD\", 21 days))\n                        Input(Name: StartTime, Type: hidden, Value: Now(\"HH:MI\", +2 minute))\n                        Input(Name: EndTime, Type: hidden, Value: Now(\"HH:MI\", +2 minute))\n                        Input(Name: TemplateId, Type: hidden, Value: #template_id#)\n                        Div(panel-heading text-center h3){#param_name#}\n                        Div(panel-body){\n                            Div(form-group){\n                                Div(row){\n                                    Div(col-md-3 mt-sm text-right){\n                                        Label(For: NewValue){LangRes(new_value)}\n                                    }\n                                    Div(col-md-9 mc-sm text-left){\n                                        Input(Name: NewValue, Value: \"SysParam(#param_name#)\", Type: textarea)\n                                    }\n                                }\n                            }\n                        }\n                        Div(panel-footer text-right){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_list)\n                            Button(Body: LangRes(voting), Class: btn btn-primary, Contract: voting_TemplateRun, Params: \"ColumnName=#param_name#\", Page: voting_list)\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        If(#param_index#>0){}.Else{\n            Div(col-md-12 alert alert-danger text-center){\n                Div(){LangRes(attention)}\n            }\n        }\n        If(#template_id#>0){}.Else{\n            Div(col-md-12 alert alert-danger text-center){\n                Div(){LangRes(voting_template_not_found)}\n            }\n        }\n    }\n}",
            "Name": "sysparams_voting",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\n    SetTitle($tokenrefund_list$)\n\n    DBFind(Name: tokenrefund, Source: src).Order(id desc).Custom(_status){\n        If(#status#>0){\n            SetVar(sta,AppParam(App:#application_id#, Name: tokenrefund_status, Index: #status#))\n            LangRes(#sta#)\n        }.Else{\n            $tokenrefund_status0$\n        }\n    }.Custom(_result){\n        If(#result#>0){\n            SetVar(res,AppParam(App:#application_id#, Name: tokenrefund_result, Index: #result#))\n            LangRes(#res#)\n        }.Else{\n            $tokenrefund_result0$\n        }\n    }.Custom(_blocked){\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #blocked_at#)\n    }.Custom(_closed){\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #closed_at#)\n    }.Custom(_accounts){\n        Div(){$tokenrefund_victim$: #victim_key_id#}\n        Div(){$tokenrefund_attacker$: #attacker_key_id#}\n    }.Custom(_voting){\n        LinkPage(Page: voting_view, PageParams: \"vID=#voting_id#\"){##voting_id#}\n    }\n\n    Div(panel panel-primary){\n        Div(table-responsive){\n            Table(Source: src, Columns: \"$accounts$=_accounts,$amount$=amount,$description$=note,$validator_id$=validator_id,$blocked_at$=_blocked,$voting$=_voting,$result$=_result,$status$=_status,$closed$=_closed\")\n        }\n\n        Form(panel-footer text-right){\n            Button(Body: $request_refund$, Class: btn btn-primary, Page: tokenrefund_start)\n        }\n    }\n}\n\n",
            "Name": "tokenrefund_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Data(Source: inputs, Columns:\"name,type,res,placeholder\"){\n    Amount,number,amount,\"\"\n    VictimAccount,text,tokenrefund_victim,\"Key ID or Wallet\"\n    SuspectAccount,text,tokenrefund_attacker,\"Key ID or Wallet\"\n    Note,textarea,description,\"\"\n}\nDiv(content-wrapper){\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading, Body: $tokenrefund_start$)\n                Div(panel-body){\n                    ForList(Source: inputs){\n                        Div(row form-group){\n                            Div(col-sm-4){LangRes(#res#)}\n                            Div(col-sm-8){\n                                Input(Name: #name#, Type: #type#, Placeholder: #placeholder#)\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Input(Name: DateStart, Type: hidden, Value: Now(\"YYYY-MM-DD\", +1 day))\n                    Input(Name: DateEnd, Type: hidden, Value: Now(\"YYYY-MM-DD\", +2 day))\n                    Input(Name: DateNow, Type: hidden, Value: Now(\"YYYY-MM-DD HH:MI\"))\n                    Input(Name: TimeNow, Type: hidden, Value: Now(\"HH:MI\"))\n                    Button(Body: $start_refund$, Contract: tokenrefund_Start, Page: tokenrefund_list, Class: btn btn-primary)\n                    Div(pull-left){\n                        Button(Class: icon-arrow-left btn btn-default, Page: tokenrefund_list)\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "tokenrefund_start",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetTitle($tokens_transfer$)\nData(inputs, \"name,res\"){\n    RecipientId,recipient\n    Amount,amount\n}\nDiv(content-wrapper){\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading, Body: LangRes(tokens_transfer))\n                Div(panel-body){\n                    ForList(inputs){\n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-3 text-right){Label(LangRes(#res#))}\n                                Div(col-md-9 text-left){\n                                    Input(Name: #name#, Value: \"\")\n                                }\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Input(Name:SenderId, Value: #key_id#, Type:hidden)\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: tokens_transfer, Contract: TokensTransfer).Alert(Text: $want_send_tokens$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }\n            }\n        }\n    }\n    DBFind(keys, src).Order(id).Custom(_address){\n        If(#id#==#key_id#){\n            Div(text-success){\n                Address(#id#)\n            }\n        }.Else{\n            Address(#id#)\n        }\n    }\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Table(src, \"=_address,Amount=amount\")\n        }\n    }\n    \n}",
            "Name": "tokens_transfer",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    SetTitle($template_create$)\n\n    If(#TemplateId#>0){\n        DBFind(Name:voting_templates, Source: templates).Where(id=#TemplateId#).Vars(template)\n        SetVar(title, #template_title#)\n        SetVar(typevoting, #template_type_voting#)\n        SetVar(volume, #template_volume#)\n        SetVar(subj, #template_subject#)\n        SetVar(quorum, #template_quorum#)\n        SetVar(voters, #template_voters#)\n        SetVar(candidates, #template_voters#)\n        SetVar(vacancies, #template_vacancies#)\n        SetVar(contract_init, #template_init_contract#)\n        SetVar(contract_accept, #template_contract_accept#)\n        SetVar(accept_params, #template_accept_params#)\n        SetVar(contract_reject, #template_contract_reject#)\n        SetVar(reject_params, #template_reject_params#)\n\n    }.Else{\n        SetVar(template_id, 0)\n        SetVar(title, New voting)\n        SetVar(typevoting, 0)\n        SetVar(volume, 50)\n        SetVar(quorum, 50)\n        SetVar(subj, \"\")\n        SetVar(voters, \"\")\n        SetVar(candidates, \"\")\n        SetVar(vacancies, 1)\n        SetVar(contract_init, \"\")\n        SetVar(contract_accept, \"\")\n        SetVar(accept_params, \"\")\n        SetVar(contract_reject, \"\")\n        SetVar(reject_params, \"\")\n\n    }\n    If(#TypeDecision#>0){\n        SetVar(typedec, #TypeDecision#)\n    }.Else{\n        SetVar(typedec, 0)\n    }\n    If(#TypeParticipants#>0){\n        SetVar(typepart, #TypeParticipants#)\n    }.Else{\n        SetVar(typepart, 0)\n    }\n    AppParam(App:#app_id#, Name: type_voting_participants, Source: src_typepart)\n    AppParam(App:#app_id#, Name: type_voting, Source: src_typevoting)\n    AppParam(App:#app_id#, Name: type_voting_decisions, Source: src_typedec)\n    DBFind(Name: roles, Source: src_roles).Where(\"deleted=0\").Order(id).Custom(name){\n        #role_name#\n    }\n\n    If(#typedec#>0){\n        Data(data_inputs, Columns: \"data\"){\n            commons_req\n            decisions\n            participants\n            commons\n        }\n        Data(commons_req, Columns: \"name,type,res,star,value,control,src,desc\"){\n            Title,text,name,*,#title#,input,\"\",\"\"\n            TypeParticipants,text,participants,*,#typepart#,disabled,\"AppParam(App:#app_id#, Name: type_voting_participants, Index: #typepart#)\",\"\"\n            TypeDecision,text,decision,*,#typedec#,disabled,\"AppParam(App:#app_id#, Name: type_voting_decisions, Index: #typedec#)\",\"\"\n            TypeVoting,text,voting_type,*,#typevoting#,select,src_typevoting,\"\"\n            Volume,number,voting_volume,*,#volume#,validate,\"\",$voting_volume_desc$\n            Quorum,number,voting_quorum,*,#quorum#,validate,\"\",$voting_quorum_desc$\n            Subject,text,voting_subject,*,#subj#,input,\"\",\"\"\n        }\n        Data(commons, Columns: \"name,type,res,star,value,control,src,desc\"){\n            InitContract,text,voting_init_contract,\"\",#contract_init#,input,\"\",$voting_init_contract_desc$\n            ContractAccept,text,voting_contract_accept,\"\",#contract_accept#,contract,ParamsAccept,#accept_params#\n            ContractReject,text,voting_contract_reject,\"\",#contract_reject#,contract,ParamsReject,#reject_params#\n        }\n        If(Or(#typedec#==1,#typedec#==2)){\n            Data(decisions, Columns: \"name,type,res,star,value,control,src,desc\"){\n                Vacancies,number,vacancies,\"*\",#vacancies#,input,\"\",\"\"\n                Candidates,text,candidates_role,\"*\",#voters#,select,src_roles,\"\"\n            }\n        }.Else{\n            Data(decisions, Columns: \"name,type,res,star,value,control,src,desc\"){}\n        }\n        If(#typepart#==3){\n            Data(participants, Columns: \"name,type,res,star,value,control,src,desc\"){\n                Voters,text,voters_role,\"*\",#voters#,select,src_roles,\"\"\n            }\n        }.Else{\n            Data(participants, Columns: \"name,type,res,star,value,control,src,desc\"){}\n        }\n    }.Else{\n        Data(data_inputs, Columns: \"data\"){\n            commons\n        }\n        Data(commons, Columns: \"name,type,res,star,value,control,src,desc\"){\n            TypeDecision,text,decision,*,#typedec#,radio,src_typedec,\"\"\n            TypeParticipants,text,participants,*,#typepart#,select,src_typepart,\"\"\n        }\n    }\n    Div(breadcrumb){\n        LinkPage($voting_templates$, voting_templates)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $template_create$)\n    }\n    Div(row){\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading){LangRes(voting_params)}\n                Div(panel-body){\n                    ForList(data_inputs){\n                        ForList(#data#){\n                            Div(row form-group){\n                                Div(col-md-4 mt-sm text-right){\n                                    Label(For: #name#){\n                                        LangRes(#res#)\n                                        If(#star#==\"*\"){\n                                            Span(Class: text-danger, Body:*)\n                                        }\n                                    }\n                                }\n                                Div(col-md-8 text-left){\n                                    If(#control#==\"select\"){\n                                        Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id, Value: #value#)\n                                    }\n                                    If(#control#==\"disabled\"){\n                                        #src#\n                                        Input(Name: #name#, Type: hidden, Value: #value#)\n                                    }\n                                    If(#control#==\"input\"){\n                                        Input(Name: #name#, Value: #value#, Type: #type#)\n                                    }\n                                    If(#control#==\"validate\"){\n                                        Input(Name: #name#, Type: #type#, Value: #value#).Validate(minLength: 1)\n                                        InputErr(Name: #name#, minLength: Please enter #name#)\n                                    }\n                                    If(#control#==\"contract\"){\n                                        Div(row){\n                                            Div(col-md-6){\n                                                Input(Name: #name#, Type: #type#, Placeholder: $contract$, Value: #value#)\n                                            }\n                                            Div(col-md-6){\n                                                Input(Name: #src#, Type: #type#, Placeholder: $arguments$, Value: #desc#)\n                                            }\n                                        }\n                                    }\n                                    If(#control#==\"radio\"){\n                                        RadioGroup(Name: #name#, Value: #value#, Source: #src#, ValueColumn: id, NameColumn: name)\n                                    }\n                                    If(And(#desc#!=\"\",#desc#!=\"NULL\")){\n                                        P(Class: m0 text-muted, Body: #desc#)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                Div(panel-footer text-right){\n\n                    If(#typedec#>0){\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: voting_template_create, PageParams: \"TemplateId=#TemplateId#\")\n                        Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_templates, Contract: voting_TemplateStore)\n                    }.Else{\n                        If(#TemplateId#>0){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_template_start, PageParams: \"TemplateId=#TemplateId#\")\n                        }.Else{\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_templates)\n                        }\n                        Button(Body: LangRes(next), Class: btn btn-primary, Page: voting_template_create, PageParams: \"TemplateId=#TemplateId#,TypeDecision=Val(TypeDecision),TypeParticipants=Val(TypeParticipants)\")\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "voting_template_create",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    SetTitle($voting_start$)\n    If(#TemplateId#>0){\n        DBFind(Name:voting_templates, Source: templates).Where(id=#TemplateId#).Vars(template)\n        If(#template_voters#>0){\n            DBFind(Name:roles, Source: vid_roles).Columns(\"role_name\").Where(\"id=#template_voters#\").Vars(vid)\n            SetVar(v_role, \"#vid_role_name#\")\n        }.Else{\n            SetVar(v_role, \"\")\n        }\n\n        If(#template_candidates#>0){\n            DBFind(Name:roles, Source: cid_roles).Columns(\"role_name\").Where(\"id=#template_candidates#\").Vars(cid)\n            SetVar(c_role, \"#cid_role_name#\")\n        }.Else{\n            SetVar(c_role, \"\")\n        }\n        Data(inputs, \"res,value\"){\n            name,\"#template_title#\"\n            participants,\"AppParam(App:#app_id#, Name: type_voting_participants, Index: #template_type_participants#)\"\n            voting_type,\"AppParam(App:#app_id#, Name: type_voting, Index: #template_type_voting#)\"\n            decision,\"AppParam(App:#app_id#, Name: type_voting_decisions, Index: #template_type_decision#)\"\n            voting_volume,\"#template_volume#\"\n            voting_quorum,\"#template_quorum#\"\n            voting_subject,\"#template_subject#\"\n            voters,\"#v_role#\"\n            candidates,\"#c_role#\"\n            vacancies,\"#template_vacancies#\"\n            init_contract,\"#template_init_contract#\"\n            voting_contract_accept,\"#template_contract_accept#(#template_accept_params#)\"\n            voting_contract_reject,\"#template_contract_reject#(#template_reject_params#)\"\n            date_start,\"Input(Name:Start, Type: date)\"\n            date_end,\"Input(Name:End, Type: date)\"\n        }\n\n        If(#template_type_decision#==3){\n            Data(decision_inputs, Columns: \"name,type,res,star,value,control\"){\n                TextDocument,textarea,text_document,*,\"\",textarea\n            }\n        }.Else{\n            If(#template_type_decision#==4){\n                Data(decision_inputs, Columns: \"name,type,res,star,value,control\"){\n                    TableWritten,text,table_to_written,*,\"\",input\n                    RowId,number,row_id,*,\"\",input\n                    ColumnName,text,column_name,*,\"\",input\n                    NewValue,text,written_value,*,\"\",input\n                }\n            }.Else{\n                Data(decision_inputs, Columns: \"name,type,res,star,value,control\"){}\n            }\n        }\n    }\n    Div(breadcrumb){\n        LinkPage($voting_templates$, voting_templates)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $voting_start$)\n    }\n\n    If(#TemplateId#>0){\n        Div(row){\n            Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n                Form(panel panel-primary){\n                    Div(panel-heading){LangRes(voting_params)}\n                    Div(panel-body){\n                        ForList(inputs){\n                            Div(row form-group){\n                                Div(col-md-4 text-right){\n                                    Strong(LangRes(#res#))\n                                }\n                                Div(col-md-8 text-left){\n                                    If(\"#value#\"!=\"()\"){\n                                        #value#\n                                    }\n                                }\n                            }\n                        }\n                        ForList(decision_inputs){\n                            Div(row form-group){\n                                If(#control#!=\"textarea\"){\n                                    Div(col-md-4 mt-sm text-right){\n                                        Label(For: #name#){\n                                            LangRes(#res#)\n                                            If(#star#==\"*\"){\n                                                Span(Class: text-danger, Body:*)\n                                            }\n                                        }\n                                    }\n                                    Div(col-md-8 text-left){\n                                        If(#control#==\"input\"){\n                                            Input(Name: #name#, Value: #value#, Type: #type#)\n                                        }\n                                    }\n                                }\n                                If(#control#==\"textarea\"){\n                                    Div(col-md-12){\n                                        Label(For: #name#){LangRes(#res#)}\n                                        Input(Name: #name#, Type: textarea, Value: #value#)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Input(Name:StartTime, Type: hidden, Value: Now(\"HH:MI\", 5 minutes))\n                    Div(panel-footer){\n                        Div(pull-left){\n                            Button(Class: fa fa-copy btn btn-default, Page: voting_template_create, PageParams: \"TemplateId=#TemplateId#\")\n                        }\n                        Div(text-right){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_templates)\n                            Button(Body: LangRes(voting_start), Class: btn btn-primary, Page: voting_list, Contract: voting_TemplateRun, Params: \"TemplateId=#TemplateId#\")\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(col-md-12 alert alert-danger text-center){\n            LangRes(attention)\n        }\n    }\n}",
            "Name": "voting_template_start",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    SetTitle($voting_templates$)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: $voting_templates$)\n    }\n    DBFind(Name:voting_templates, Source: templates).Order(id desc).Custom(_participants){\n        AppParam(App:#app_id#, Name:type_voting_participants, #type_participants#)\n    }.Custom(_decision){\n        AppParam(App:#app_id#, Name:type_voting_decisions, #type_decision#)\n    }.Custom(_type){\n        AppParam(App:#app_id#, Name:type_voting, #type_voting#)\n    }.Custom(_buttons){\n        Button(Class: btn btn-success, Page: voting_template_start, PageParams: \"TemplateId=#id#\", Body: $use$)\n    }.Custom(_contracts){\n        If(And(#init_contract#!=\"\",#init_contract#!=\"NULL\")){\n            Div(){#init_contract#}\n        }\n        If(And(#contract_accept#!=\"\",#contract_accept#!=\"NULL\")){\n            Div(){#contract_accept#}\n        }\n        If(And(#contract_reject#!=\"\",#contract_reject#!=\"NULL\")){\n            Div(){#contract_reject#}\n        }\n    }.Custom(_vq){\n        #volume#/#quorum#\n    }\n\n    Div(panel panel-primary){\n        Form(){\n            Div(table-responsive){\n                Table(Source: templates, Columns:\"id=id,$title$=title,$voting_subject$=subject,$volume$/$quorum$=_vq,$voting_type$=_type,$participants$=_participants,$decision$=_decision,$vacancies$=vacancies,$contracts$=_contracts,=_buttons\")\n            }\n            Div(panel-footer text-right){\n                Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_template_create)\n            }\n        }\n    }\n}",
            "Name": "voting_templates",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensTransfer {\n    data {\n        SenderId string \"optional\"\n        RecipientId string\n        Amount string\n    }\n    \n    conditions {\n        if !($SenderId == $key_id || (Size($SenderId) > 0 && $original_contract == \"voting_AcceptDecision\")) {\n            Println($SenderId, $original_contract)\n            error \"sender id error\"\n        }\n        var addressLen int\n        addressLen = 24\n        \n        $amount = Money($Amount)\n        if $SenderId == \"\"{\n            $SenderId = Sprintf(\"%v\", $key_id)\n        }\n        if $amount <= 0 {\n            error \"TokensTransfer. Amount less than or equal to zero\"\n        }\n        \n        if !HasPrefix($SenderId, \"-\") && Contains($SenderId, \"-\"){\n            // is address. convert to key id\n            $SenderId = Sprintf(\"%v\", AddressToId($SenderId))\n        }\n        if !HasPrefix($RecipientId, \"-\") && Contains($RecipientId, \"-\"){\n            // is address. convert to key id\n            $RecipientId = Sprintf(\"%v\", AddressToId($RecipientId))\n        }\n        \n        if Size($SenderId) > addressLen{\n            $SenderId = Sprintf(\"%v\", PubToID($SenderId))\n        }\n        if Size($RecipientId) > addressLen{\n            $RecipientId = Sprintf(\"%v\", PubToID($RecipientId))\n        }\n        \n        \n        var sender map\n        sender = DBFind(\"keys\").Where(\"id=?\", $SenderId).Row()\n        if !sender{\n            error \"TokensTransfer. Sender is invalid\"\n        }\n        if sender[\"blocked\"] == 1{\n            error \"Sender blocked\"\n        }\n        if sender[\"amount\"] < $amount{\n            error Sprintf(\"The number of tokens of the sender (%v) is not enough\", sender[\"amount\"])\n        }\n    }\n    \n    action {\n        DBUpdate(\"keys\", Int($SenderId),\"-amount\", $amount)\n        DBUpdate(\"keys\", Int($RecipientId),\"+amount\", $amount)\n        DBInsert(\"history\", \"sender_id,recipient_id,amount,block_id,txhash\", $SenderId, $RecipientId, $amount, $block, $txhash)\n    }\n}",
            "Name": "TokensTransfer",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_AcceptValidator{\n    data{\n        VotingTemplateId string\n        KeyId string\n        VotingId string\n    }\n    func conditions{\n        var app_id int\n        app_id = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\n        var templateId int\n        templateId = Int(AppParam(app_id,\"voting_validators_template_id\"))\n        \n        var params map\n        params = DBFind(\"voting_templates\").Where(\"id=?\", templateId).Row()\n        if params{\n            warning \"Voting params not found\"\n        }\n\n        $Id = Int($KeyId)\n        var candidateId, oldRoleId, roleId int\n        oldRoleId = 2 // Candidate for validators\n        roleId = 3 // Validator\n        \n        candidateId = DBFind(\"sysparams_candidate\").Where(\"id=?\",$Id).One(\"candidate_key_id\")\n        if !candidateId {\n            warning \"Candidate key id not found\"\n        }\n        $rowId = Int(DBFind(\"roles_participants\").Where(\"deleted=0 and role->id=? and member->member_id=?\", oldRoleId, candidateId).One(\"id\"))\n        \n        $roleId = Int(DBFind(\"roles\").Where(\"role->id=? and deleted=0\", roleId).One(\"id\"))\n        if $roleId == 0 {\n            warning \"Validator role not found\"\n        }\n    }\n    \n    func action{\n        if $rowId > 0 {\n            Roles_Unassign(\"row_id\", $rowId)\n        }\n        Roles_Assign(\"rid,member_id\", $roleId, $Id)\n    }\n}",
            "Name": "sysparams_AcceptValidator",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_CandidateValidatorRequest{\n    data{\n        HostIp string\n        // CommissionPub string\n        CommissionAddress string\n        Description string \"optional\"\n        Comment string \"optional\"\n    }\n    \n    func IsNotValidIp(ip string)bool{\n        var parts array\n        var i, lenParts, part int\n        parts = Split(ip, \".\")\n        \n        lenParts = Len(parts)\n        if lenParts != 4{\n            return true\n        }\n        while i< lenParts {\n            part = Int(parts[i])\n            if part < 0{\n                return true\n            }\n            if part > 255{\n                return true\n            }\n            i = i+1\n        }\n        \n        return false\n    }\n    \n    conditions{\n        // $CommissionPub = Replace($CommissionPub, \" \", \"\")\n        // info Sprintf(\"%v %v\", $CommissionAddress, PubToID($CommissionPub))\n        // if $CommissionAddress != PubToID($CommissionPub) {\n        // info \"Address or Public key are invalid\"\n        // }\n        \n        $CommissionAddress = AddressToId($CommissionAddress)\n        if !DBFind(\"keys\").Where(\"id=?\", $CommissionAddress).Row(){\n            warning \"Address not valid\"\n        }\n        \n        if IsNotValidIp($HostIp){\n            warning \"Please enter a valid ip address\"\n        }\n        var roleName string\n        var roleId int\n        var role map\n        roleName = \"Candidate for validators\"\n        roleId = 2\n        role = DBFind(\"roles\").Where(\"role_name=? and id=? and deleted=0\", roleName, roleId).Row()\n        if !role{\n            warning Sprintf(\"Role %q not found\", roleName)\n        }\n        Roles_Assign(\"rid,member_id\", roleId, $key_id)\n    }\n    \n    action{\n        \n        DBInsert(\"sysparams_candidate\", \"host_ip,commission_pub,commission_address,description,comment,candidate_key_id,timestamp date_created,deleted\", $HostIp, \"\", $CommissionAddress, $Description, $Comment, $key_id, $block_time, 0)\n        \n    }\n    \n}",
            "Name": "sysparams_CandidateValidatorRequest",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_CandidateValidator_Delete{\n    data{\n        Id int\n    }\n    conditions{\n        var candidateId, roleId int\n        roleId = 2 // Candidate for validators\n        candidateId = DBFind(\"sysparams_candidate\").Where(\"id=?\",$Id).One(\"candidate_key_id\")\n        \n        $role = DBFind(\"roles_participants\").Where(\"deleted=0 and role->id=? and member->member_id=?\", roleId, candidateId).Row()\n        if !$role {\n            warning \"Candidate role not found\"\n        }\n    }\n    action{\n        DBUpdate(\"sysparams_candidate\", $Id, \"deleted\", 1)\n        Roles_Unassign(\"row_id\", Int($role[\"id\"]))\n    }\n}",
            "Name": "sysparams_CandidateValidator_Delete",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_DelegateRefresh{\n    func NotInArray(val string, arr array) bool{\n        var i int\n        // info arr\n        while i< Len(arr){\n            if val == arr[i]{\n                return false\n            }\n            i=i+1\n        }\n        return true\n    }\n\n    conditions{\n        MainCondition()\n\n        var ROLE_NAME string\n        var ROLE_ID int\n        ROLE_NAME = \"Delegate\"\n        ROLE_ID = 5\n\n        // get role Id and Type\n        $role = DBFind(\"roles\").Where(\"role_name=? and id=? and delete=0\", ROLE_NAME, ROLE_ID).Row()\n        if !$role{\n            warning Sprintf(\"Role %q not found\", ROLE_NAME)\n        }\n    }\n\n    action{\n        var DELEGATE_ACCOUNT string\n        DELEGATE_ACCOUNT = \"delegate_account\"\n        // get delegates ids\n        var delegateIds currentDelegates ecosystems array\n        ecosystems = DBFind(\"ecosystems\").Columns(\"id\").Ecosystem(1)\n        var i ecoId int\n        while i < Len(ecosystems) {\n            var eco delegateParam map\n            eco = ecosystems[i]\n            ecoId = Int(eco[\"id\"])\n            delegateParam = DBFind(\"parameters\").Where(\"name=?\", DELEGATE_ACCOUNT).Ecosystem(ecoId).Row()\n            if !delegateParam{\n                delegateParam = DBFind(\"parameters\").Where(\"name='founder_account'\").Ecosystem(ecoId).Row()\n            }\n\n            if NotInArray(delegateParam[\"value\"], delegateIds){\n                delegateIds[Len(delegateIds)] = delegateParam[\"value\"]\n            }\n            i = i + 1\n        }\n\n        // remove old role assigns\n        currentDelegates = DBFind(\"roles_participants\").Where(\"role->id=? and deleted=0\", $role[\"id\"])\n        i = 0\n        while i < Len(currentDelegates){\n            var delegate map\n            delegate = currentDelegates[i]\n            if NotInArray(delegate[\"member_id\"], delegateIds){\n                var id int\n                id = Int(delegate[\"id\"])\n                Roles_Unassign(\"row_id\", id)\n            }\n            i = i + 1\n        }\n\n        // assign new roles\n        i = 0\n        while i < Len(delegateIds) {\n            var delegateId int\n            delegateId = Int(delegateIds[i])\n            var member map\n            member = DBFind(\"members\").Where(\"id=?\",delegateId).Row()\n            if member{\n                // check role dup\n                var assigned map\n                assigned = DBFind(\"roles_participants\").Where(\"member->member_id=? and role->id=? and deleted=0\", delegateId, $role[\"id\"]).Row()\n                if !assigned{\n                    Roles_Assign(\"rid,member_id\", Int($role[\"id\"]), Int(member[\"id\"]))\n                }\n            }\n            i=i+1\n        }\n    }\n}",
            "Name": "sysparams_DelegateRefresh",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_InvestorRefresh {\n    func NotInArray(val string, arr array) bool{\n        var i int\n        while i< Len(arr){\n            if val == Str(arr[i]){\n                return false\n            }\n            i=i+1\n        }\n        return true\n    }\n    conditions{\n         if $role_id != 3 {\n            warning \"You not Validator. You can not to run this\"\n        }\n\n        // roles:id == 4 Investor with voting rights\n        $roleId = Int(DBFind(\"roles\").Where(\"id=4 and deleted=0\").One(\"id\"))\n        if !$roleId{\n            warning \"Investor role not found or deleted\"\n        }\n        var appId int\n        appId = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\n        $limitInvestors = Int(AppParam(appId,\"investors_number\"))\n        if $limitInvestors == 0 {\n            warning \"Investors number not set in application params\"\n        }\n    }\n\n    action{\n        // get investors ids\n        var keysInvestors assignedInvestors investorsIds assignedIds array\n        keysInvestors = DBFind(\"keys\").Order(\"amount desc, id\").Limit($limitInvestors)\n        assignedInvestors = DBFind(\"roles_participants\").Columns(\"member->member_id\").Where(\"role->id=? and deleted=0\", $roleId)\n\n        // get ids\n        var i int\n        while i < Len(keysInvestors) {\n            var inv map\n            inv = keysInvestors[i]\n            investorsIds[i] = inv[\"id\"]\n            i = i + 1\n        }\n        i=0\n        while i < Len(assignedInvestors) {\n            var inv map\n            inv = assignedInvestors[i]\n            assignedIds[i] = inv[\"member.member_id\"]\n            i = i + 1\n        }\n\n        // remove old investors\n        i=0\n        while i < Len(assignedIds) {\n            if NotInArray(assignedIds[i], investorsIds){\n                var assigned map\n                assigned = DBFind(\"roles_participants\").Where(\"member->member_id=? and role->id=?\", assignedIds[i], $roleId).Row()\n                if assigned {\n                    Roles_Unassign(\"row_id\", Int(assigned[\"id\"]))\n                }\n            }\n            i = i+1\n        }\n        // add new investors\n        i=0\n        while i < Len(investorsIds) {\n            if NotInArray(investorsIds[i], assignedIds){\n                Roles_Assign(\"rid,member_id\", $roleId, Int(investorsIds[i]))\n            }\n            i = i+1\n        }\n    }\n}",
            "Name": "sysparams_InvestorRefresh",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_RemoveNode{\n    data{}\n    func nodesRemove(keyId int) array{\n        var nodesJSON string\n        var nodes, res array\n        nodesJSON = SysParamString(\"full_nodes\")\n        if !HasPrefix(nodesJSON, \"[\") {\n            // empty string nodes\n            return res\n        }\n        nodes = JSONDecode(nodesJSON)\n        var i, i_res int\n        while i < Len(nodes){\n            var node map\n            node = nodes[i]\n            if node[\"key_id\"] != keyId {\n                res[i_res] = node\n                i_res = i_res+1\n            }\n            i=i+1\n        }\n        return res\n    }\n    conditions{\n        if $original_contract != \"sysparams_ValidatorResign\"{\n            warning \"Unknown contract\"\n        }\n    }\n    \n    action{\n        var nodes array\n        nodes = nodesRemove($key_id)\n        var fullNodes string\n        fullNodes = JSONEncode(nodes)\n        DBUpdateSysParam(\"full_nodes\", fullNodes, \"\")\n    }\n}",
            "Name": "sysparams_RemoveNode",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_TemplateRun{\n    data{\n        TemplateId int\n        Start string \"date\"\n        End string \"date\"\n\n        EndTime string \"date,optional\"\n        StartTime string \"date,optional\"\n        KeyId int \"optional\"\n        TableWritten string \"optional\"\n        RowId string \"optional\"\n        ColumnName string \"optional\"\n        NewValue string \"optional\"\n        TextDocument string \"optional\"\n    }\n    func checkInput(value, name string){\n        if Size(value) == 0 || value == \"NULL\" {\n            warning Sprintf(\"%q not found\", name)\n        }\n    }\n    func emptyOrValue(value string) string{\n        if value == \"NULL\" {\n            value = \"\"\n        }\n        return value\n    }\n\n    conditions{\n        var template map\n        template = DBFind(\"voting_templates\").Where(\"id=?\",$TemplateId).Row()\n        if !template{\n            warning \"Voting template not found\"\n        }\n        if $KeyId != 0{\n            $keyFind = DBFind(\"keys\").Where(\"id=?\", $KeyId).Row()\n            if !$keyFind{\n                warning \"Key id not found\"\n            }\n        }\n        if $StartTime == \"\"{\n            $StartTime = \"00:00\"\n        }\n        if $EndTime == \"\"{\n            $EndTime = \"23:59\"\n        }\n\n        var initContract string\n        initContract = template[\"init_contract\"]\n        if initContract != \"\" && initContract != \"NULL\"{\n            var initParam map\n            initParam[\"KeyId\"] = $KeyId\n            CallContract(initContract, initParam)\n        }\n        $voters = template[\"voters\"]\n        $candidates = template[\"candidates\"]\n        $votingName = template[\"title\"]\n        $volume = Int(template[\"volume\"])\n        $quorum = Int(template[\"quorum\"])\n        $type_voting = Int(template[\"type_voting\"])\n        $participants = Int(template[\"type_participants\"])\n        $decision = Int(template[\"type_decision\"])\n        $vacancies = Int(template[\"vacancies\"])\n\n        $desc = Sprintf(\"%v template #%v\", $votingName, $TemplateId)\n        if $type_voting < 1 || $type_voting > 2 {\n            warning \"Invalid type of voting\"\n        }\n        $contractAccept = emptyOrValue(template[\"contract_accept\"])\n        $acceptParams = emptyOrValue(template[\"accept_params\"])\n        $contractReject = emptyOrValue(template[\"contract_reject\"])\n        $rejectParams = emptyOrValue(template[\"reject_params\"])\n\n        if $decision == 1 || $decision == 2 {\n            // role-candidates\n            checkInput($candidates, \"Candidate role\")\n            var candidate map\n            candidate = DBFind(\"roles\").Where(\"id=? and deleted=0\", $candidates).Row()\n            if !candidate {\n                warning Sprintf(\"Candidates role (id: %v) not found\", $candidates)\n            }\n            $candidateId = Int(candidate[\"id\"])\n        }\n\n        if $decision == 3 {\n            // document approval\n            checkInput($TextDocument, \"TextDocument\")\n        }\n\n        if $decision == 4 {\n            // formal decision\n            // in the system vote need only a field and a value\n            checkInput($ColumnName, \"ColumnName\")\n            checkInput($NewValue, \"NewValue\")\n            if $type_voting == 2{\n                $desc = Sprintf(\"%v [template #%v] %v\", $votingName, $TemplateId, $ColumnName)\n            }\n\n            if $type_voting == 1{\n                checkInput($TableWritten, \"TableWritten\")\n                checkInput($RowId, \"RowId\")\n                $desc = Sprintf(\"%v [template #%v] %v.%v.%v\", $votingName, $TemplateId, $TableWritten, $ColumnName, $RowId)\n            }\n            if $RowId == \"\" || $RowId == \"NULL\"{\n                $RowId = 0\n            }\n\n        }\n        // check duplicated\n        // var isCreated map\n        // isCreated = DBFind(\"votings\").Where(\"voting->name=? and voting->description=? and deleted=0\", $votingName, $desc).Row()\n        // if isCreated{\n        // info \"Voting already created\"\n        // }\n\n\n        if $participants == 3 {\n            // if the type of the participants \"in role\" - check the role\n            var role map\n            role = DBFind(\"roles\").Where(\"id=? and deleted=0\", $voters).Row()\n            if !role {\n                warning Sprintf(\"Voters role (id: %v) not found\", $voters)\n            }\n            $roleId = Int(role[\"id\"])\n        }\n    }\n\n    action{\n        var votingId int\n        // must be installed in voting_CreateNew\n        votingId = voting_CreateNew(\"voting_name,voting_type,description,type_participants,type_decision,now_date,start_time,start_date,end_date,end_time,volume,quorum\", $votingName, $type_voting, $desc, $participants, $decision, $Start, $StartTime, $Start, $End, $EndTime, $volume, $quorum)\n        if votingId == 0 {\n            warning \"votingId is zero\"\n        }\n        // the default argument for Contract\n        var defaultParams string\n        defaultParams = Sprintf(`{\"VotingTemplateId\":\"%v\",\"KeyId\":\"%v\",\"VotingId\":\"%v\"}`, $TemplateId, $KeyId, votingId)\n\n        if Size($acceptParams) == 0{\n            $acceptParams = defaultParams\n        }\n        if Size($rejectParams) == 0{\n            $rejectParams = defaultParams\n        }\n\n        if $decision == 1 || $decision == 2{\n            // 1. Role candidates with the registration of participants on request\n            // 2. Role candidates with manual registration of the participants\n            voting_SubjectCandidates(\"votingID,memberID\", votingId, $KeyId)\n            voting_SubjectSettings(\"votingID,roleID,vacancies,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", votingId, $candidateId, $vacancies, $contractAccept, $acceptParams, $contractReject,$rejectParams)\n        }\n        if $decision == 3 {\n            // Document approval\n            voting_SubjectDocument(\"votingID,text_document,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", votingId,$TextDocument, $contractAccept, $acceptParams, $contractReject, $rejectParams)\n        }\n\n        if $decision == 4 {\n            // Formal decision\n            voting_SubjectFormal(\"votingID,description,table_to_written,row_id,column_name,written_value,contract_accept,contract_accept_params,contract_reject,contract_reject_params\",votingId, $desc, $TableWritten, $RowId, $ColumnName, $NewValue, $contractAccept, $acceptParams, $contractReject, $rejectParams)\n\n        }\n\n        if $decision == 5 {\n            // Execution of the contract\n            voting_SubjectContract(\"votingID,contract_accept,contract_accept_params,contract_reject,contract_reject_params\",votingId,$contractAccept, $acceptParams, $contractReject, $rejectParams)\n        }\n        if $participants == 3 {\n            // participants: \"by role\"\n            voting_Invite(\"votingID,var_id\", votingId, $roleId)\n        }\n        if $participants == 1 {\n            // if the participants are \"all\", the invite has already occurred in \"voting_CreateNew\"\n        }\n    }\n}",
            "Name": "voting_TemplateRun",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_StartVotingValidator{\n    data{\n        KeyId int\n    }\n    \n    conditions{\n        ContractConditions(\"MainCondition\")\n        $candidate = DBFind(\"sysparams_candidate\").Where(\"candidate_key_id=? and deleted=0\", $KeyId).Row()\n        if !$candidate{\n            warning \"Candidate not found\"\n        }\n    }\n    action{\n        sysparams_DelegateRefresh()\n    }\n}",
            "Name": "sysparams_StartVotingValidator",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_UpdateFullNodesKeysList{\n    data{\n        Param string\n    }\n    conditions{\n        $FULL_NODES_KEYS = \"full_nodes_keys\"\n        $FULL_NODES = \"full_nodes\"\n        $paramId = DBFind(\"parameters\").Where(\"name=?\", $FULL_NODES_KEYS).One(\"id\")\n    }\n    \n    action{\n        if $Param != $FULL_NODES {\n            return\n        }\n        var nodesJson string\n        nodesJson = SysParamString($FULL_NODES)\n        var nodes, keys array\n        nodes = JSONDecode(nodesJson)\n        \n        var i int\n        while i<Len(nodes){\n            var node map\n            node = nodes[i]\n            keys[i] = node[\"key_id\"]\n            i=i+1\n        }\n        var keysList, cond string\n        keysList = Join(keys, \",\")\n        cond = `ContractConditions(\"MainCondition\")`\n        if $paramId {\n            DBUpdate(\"parameters\", Int($paramId), \"value,conditions\", keysList, cond)\n        }else{\n            DBInsert(\"parameters\", \"name,value,conditions\", $FULL_NODES_KEYS, keysList, cond)\n        }\n    }\n}",
            "Name": "sysparams_UpdateFullNodesKeysList",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_ValidatorResign{\n    data{}\n\n    conditions{\n        $assigned = DBFind(\"roles_participants\").Columns(\"id,member->member_id,role->id,role->name,deleted\").Where(\"member->member_id=? and role->id='3' and role->name='Validator' and deleted=0\", $key_id).One(\"id\")\n        if !$assigned {\n            warning \"You are not a validator\"\n        }\n    }\n\n    action{\n        Roles_Unassign(\"row_id\", Int($assigned))\n        sysparams_RemoveNode()\n    }\n}",
            "Name": "sysparams_ValidatorResign",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_Accept{\n    data{\n        Id string\n    }\n    \n    func refundAmount(victimId, attackerId, amount string){\n        TokensTransfer(\"SenderId,RecipientId,Amount\", attackerId, victimId, amount)\n    }\n    func unblockAccounts(victimId, attackerId string){\n        if victimId==0 {\n            error \"unblockAccounts. invalid victim key\"\n        }\n        if attackerId==0{\n            error \"unblockAccounts. invalid attacker key\"\n        }\n        DBUpdate(\"keys\", Int(victimId), \"blocked\", 0)\n        DBUpdate(\"keys\", Int(attackerId), \"blocked\", 0)\n    }\n    \n    conditions{\n        $tokenrefund = DBFind(\"tokenrefund\").Where(\"id=?\", $Id).Row()\n        if !$tokenrefund{\n            error \"tokenrefund not found\"\n        }\n    }\n    \n    action{\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\n        refundAmount($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"],$tokenrefund[\"amount\"])\n        // status 3: closed; result 2: the tokens returned\n        DBUpdate(\"tokenrefund\", Int($tokenrefund[\"id\"]), \"status,result\", 3,2)\n    }\n}",
            "Name": "tokenrefund_Accept",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_CheckCSSF{\n    conditions{\n        var isValid bool\n        if $role_id == 12 {\n            // Financial institution\n            isValid = true\n        }\n        if $role_id == 1 {\n            // Apla Consensus asbl\n            isValid = true\n        }\n        if !isValid {\n            error \"Condition is not valid\"\n        }\n    }\n    action{}\n}",
            "Name": "tokenrefund_CheckCSSF",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_Reject{\n    data{\n        Id string\n    }\n    \n    func unblockAccounts(victimId, attackerId string){\n        if victimId==0 {\n            error \"unblockAccounts. invalid victim key\"\n        }\n        if attackerId==0{\n            error \"unblockAccounts. invalid attacker key\"\n        }\n        DBUpdate(\"keys\", Int(victimId), \"blocked\", 0)\n        DBUpdate(\"keys\", Int(attackerId), \"blocked\", 0)\n    }\n    \n    conditions{\n        $tokenrefund = DBFind(\"tokenrefund\").Where(\"id=?\", $Id).Row()\n        if !$tokenrefund{\n            error \"tokenrefund not found\"\n        }\n    }\n    \n    action{\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\n        // status 3: closed; 1: return cancelled\n        DBUpdate(\"tokenrefund\", Int($tokenrefund[\"id\"]), \"status,result\", 3,1)\n    }\n}",
            "Name": "tokenrefund_Reject",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_Start{\n    data{\n        VictimAccount string\n        SuspectAccount string\n        Amount int\n        Note string\n        DateStart string \"date\"\n        DateEnd string \"date\"\n        DateNow string \"date\"\n        TimeNow string \"date\"\n    }\n    func blockAccounts(victimId, attackerId int){\n        if victimId==0 {\n            error \"unblockAccounts. invalid victim key\"\n        }\n        if attackerId==0{\n            error \"unblockAccounts. invalid attacker key\"\n        }\n        DBUpdate(\"keys\", victimId, \"blocked\", 1)\n        DBUpdate(\"keys\", attackerId, \"blocked\", 1)\n    }\n    func getKeyId(test string) int{\n        if Len(Split(test, \"-\")) > 1 {\n            // probably it is address\n            return AddressToId(test)\n        }else{\n            if \"invalid\" != IdToAddress(test){\n                // probably it is key_id\n                return Int(test)\n            }\n        }\n    }\n\n    conditions{\n        if $Amount <= 0{\n            error \"Amount not valid\"\n        }\n        var victim attacker int\n        victim = getKeyId($VictimAccount)\n        attacker = getKeyId($SuspectAccount)\n        if victim == 0{\n            error \"Victim address not valid\"\n        }\n        if attacker == 0{\n            error \"Suspect address not valid\"\n        }\n        if Size($Note) == 0{\n            error \"Please add description\"\n        }\n        $victimId = victim\n        $attackerId = attacker\n\n        var app_id int\n        app_id = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\n        var template_id int\n        template_id = Int(AppParam(app_id,\"voting_tokenrefund_template_id\"))\n        if template_id <= 0 {\n            warning \"Template id not found\"\n        }\n\n        $template = DBFind(\"voting_templates\").Where(\"id=?\", template_id).Row()\n        $votersRoleId = Int($template[\"voters\"])\n        $votingName = $template[\"title\"]\n        $typeParticipants = 3 // add participants by role\n        $typeDecision = 5 // the launch of the contract\n        $typeVoting = 2 // the voting system\n        $volume = Int($template[\"volume\"])\n        $quorum = Int($template[\"quorum\"])\n        $contractAccept = $template[\"contract_accept\"]\n        $contractReject = $template[\"contract_reject\"]\n        var initContract string\n        initContract = $template[\"init_contract\"]\n        if Size(initContract) > 4 { // greater then \"NULL\"\n            var m map\n            CallContract(initContract, m)\n        }\n        $desc = Sprintf(\"%v (victim: %v, attacker: %v, amount: %v)\", $votingName, $victimId, $attackerId, $Amount)\n\n        if !DBFind(\"roles_participants\").Where(\"role->id=? and deleted=0\", $votersRoleId).One(\"id\") {\n            warning Sprintf(\"Role (id: %v) does not contain members\", $votersRoleId)\n        }\n\n        if DBFind(\"votings\").Where(\"voting->name=? and voting->description=? and deleted=0\", $votingName, $desc).Row(){\n            // info \"Voting already created\" // debug: uncomment on the prod\n        }\n    }\n\n    action{\n        blockAccounts($victimId,$attackerId)\n\n        var votingId status result tokenrefundId closure sender int\n        var icon header body page params jsonParams string\n\n        votingId = voting_CreateNew(\"voting_name,voting_type,description,type_participants,type_decision,volume,quorum,now_date,start_time,end_time,start_date,end_date\", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $volume, $quorum, $DateNow, $TimeNow, $TimeNow, $DateStart, $DateEnd)\n\n        status = 1 // 0.Accounts blocked 1.Discussion 2.Vote 3.Closed\n        result = 0 // 0. discussion and voting 1. cancelled return 2. the tokens returned\n        tokenrefundId = DBInsert(\"tokenrefund\", \"victim_key_id,attacker_key_id,amount,note,validator_key_id,blocked_at,voting_id,status,result\", $victimId, $attackerId, $Amount, $Note, $key_id, $DateNow, votingId,status,result)\n\n        jsonParams = Sprintf(`{\"Id\":\"%v\"}`, tokenrefundId)\n\n        voting_SubjectContract(\"votingID,contract_reject,contract_accept,contract_reject_params,contract_accept_params\", votingId, $contractReject, $contractAccept, jsonParams, jsonParams)\n\n        voting_Invite(\"votingID,var_id\", votingId, $votersRoleId)\n\n        closure = 2\n        sender = 1 // from member\n        icon = \"icon-bubbles\"\n        header = \"$tokenrefund_note_header$\"\n        body = $desc\n        page = \"voting_view\"\n        params = Sprintf(`{\"vID\":\"%v\"}`, votingId)\n        Notifications_Roles_Send_str(\"rid,closure_type,sender,icon_name,text_header,text_body,page_name,params_val\", $votersRoleId, closure, sender, icon, header, body, page, params)\n    }\n}",
            "Name": "tokenrefund_Start",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_InstallTemplates{\n    data{}\n    conditions{}\n\n    action{\n        var columns string\n        columns = \"volume,init_contract,contract_reject,contract_accept,title,vacancies,candidates,reject_params,type_decision,type_voting,type_participants,quorum,voters,subject,accept_params,type\"\n\n        // voting for validator\n        DBInsert(\"voting_templates\", columns, 50, \"sysparams_StartVotingValidator\", \"\", \"sysparams_AcceptValidator\", \"Voting for Validator\", 1, 2, \"\", 2, 2, 3, 50, 5, \"Validator\", \"\",\"law\")\n\n        // voting for system param\n        DBInsert(\"voting_templates\", columns, 75, \"sysparams_InvestorRefresh\", \"\", \"\", \"Voting for System param\", 0, 4, \"\", 4, 2, 3, 50, 4, \"System param\", \"\",\"law\")\n\n        // voting for valued ecosystem\n        DBInsert(\"voting_templates\", columns, 75, \"sysparams_InvestorRefresh\", \"\", \"\", \"Voting for Valued Ecosystem\", 0, 0, \"\", 4, 1, 3, 50, 4, \"Valued ecosystem\", \"\",\"law\")\n\n        // voting for tokenrefund\n        DBInsert(\"voting_templates\", columns, 70, \"sysparams_InvestorRefresh\", \"tokenrefund_Reject\", \"tokenrefund_Accept\", \"Token Refund\", 0, 0, \"\", 0, 0, 3, 51, 4, \"Token refund\", \"\",\"law\")\n    }\n}",
            "Name": "voting_InstallTemplates",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_StartNodeAdd{\n    data{\n        TcpAddress string\n        ApiAddress string\n        KeyId int\n        PubKey string\n        TemplateId int\n        Start string \"date\"\n        End string \"date\"\n        EndTime string \"date\"\n        StartTime string \"date\"\n    }\n    func warn(name, detail string){\n        warning Sprintf(\"%v invalid (%v)\", name, detail)\n    }\n    func checkApiAddress(addr string){\n        var name string\n        name = \"API Address\"\n        if Size(addr) == 0 {\n            warn(name, \"size\")\n        }\n        if !(HasPrefix(addr, \"http://\") || HasPrefix(addr, \"https://\")) {\n            warn(name, \"protocol\")\n        }\n        if Contains(addr, \" \") {\n            warn(name, \"space\")\n        }\n        addr = Replace(addr, \"http://\", \"\")\n        addr = Replace(addr, \"https://\", \"\")\n        var parts array\n        if Contains(addr, \":\") {\n            parts = Split(addr, \":\")\n            if Len(parts) > 2 {\n                warn(name, \":\")\n            }\n            var port string\n            port = parts[1]\n            if port <= 0 {\n                warn(name, \"port\")\n            }\n            addr = parts[0]\n        }\n    }\n    func checkTcpAddress(addr string){\n        var name string\n        name = \"TCP Address\"\n        if Size(addr) == 0 {\n            warn(name, \"size\")\n        }\n        if Contains(addr, \" \") {\n            warn(name, \"space\")\n        }\n        var parts array\n        if Contains(addr, \":\") {\n            parts = Split(addr, \":\")\n            if Len(parts) > 2 {\n                warn(name, \":\")\n            }\n            var port string\n            port = parts[1]\n            if port <= 0 {\n                warn(name, \"port\")\n            }\n            addr = parts[0]\n        }\n        parts = Split(addr, \".\")\n        if Len(parts) != 4 {\n            warn(name, \"too many parts\")\n        }\n        var i int\n        while i < 4 {\n            var n int\n            n = Int(parts[i])\n            if n < 0 || n > 255 {\n                warn(name, \"part\")\n            }\n            i=i+1\n        }\n    }\n    func checkPub(pub string){\n        if PubToID(pub) == 0 {\n            warning \"Public key invalid\"\n        }\n    }\n    func checkKeyId(keyid int){\n        var existed map\n        existed = DBFind(\"keys\").Where(\"id=?\", keyid).Row()\n        if !existed {\n            warning \"Key id not found\"\n        }\n    }\n    func getNodesJSON() string{\n        // kostyl\n        // return json-like string from full_nodes trimmed \"[\" and \"]\"\n        var nodes string\n        nodes = SysParamString(\"full_nodes\")\n        if Size(nodes) < 80 {\n            nodes = \"[]\"\n        }\n        return nodes\n    }\n    conditions{\n        var app_id int\n        app_id = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\n        var id int\n        id = Int(AppParam(app_id,\"voting_sysparams_template_id\"))\n        if $TemplateId != id || $TemplateId <= 0 {\n            warning \"Template id not found\"\n        }\n        checkKeyId($KeyId)\n        checkPub($PubKey)\n        checkApiAddress($ApiAddress)\n        checkTcpAddress($TcpAddress)\n    }\n\n    action{\n        var nodes array\n        var node map\n        nodes = JSONDecode(getNodesJSON())\n        node[\"tcp_address\"] = $TcpAddress\n        node[\"api_address\"] = $ApiAddress\n        node[\"key_id\"] = Str($KeyId)\n        node[\"public_key\"] = $PubKey\n        nodes[Len(nodes)] = node\n        voting_TemplateRun(\"TemplateId,Start,End,EndTime,StartTime,KeyId,TableWritten,RowId,ColumnName,NewValue,TextDocument\", $TemplateId, $Start, $End, $EndTime, $StartTime, 0, \"\", \"\", \"full_nodes\", JSONEncode(nodes), \"\")\n    }\n}",
            "Name": "sysparams_StartNodeAdd",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_TemplateStore{\n    data{\n        Title string\n        TypeParticipants int\n        TypeVoting int\n        TypeDecision int\n        Volume int\n        Quorum int\n        Subject string\n        Voters string \"optional\" // role of participant\n        Candidates string \"optional\" // role of candidate\n        InitContract string \"optional\" // Execute before the vote\n        Vacancies int \"optional\"\n        ContractAccept string \"optional\"\n        ParamsAccept string \"optional\"\n        ContractReject string \"optional\"\n        ParamsReject string \"optional\"\n    }\n    \n    func conditions{\n        if $TypeParticipants == 3 {\n            if Size($Voters) == 0 || $Voters == \"NULL\" || $Voters == 0 {\n                warning \"Voters role not found\"\n            }\n        }\n        if Size($Title) <3 {\n            warning \"Please enter title\"\n        }\n        if $Volume <0 || $Volume > 100 {\n            warning \"Wrong volume range\"\n        }\n        if $Quorum <0 || $Quorum > 100 {\n            warning \"Wrong quorum range\"\n        }\n        \n        if $TypeDecision == 1 || $TypeDecision == 2 {\n            if $Vacancies < 1 {\n                warning \"Wrong number vacancies\"\n            }\n            if $Candidates == \"NULL\" || $Candidates == 0 || Size($Candidates) == 0 {\n                warning \"Wrong candidate role\"\n            }\n        }\n        \n        if Size($InitContract) > 0{\n            if GetContractByName($InitContract) == 0 {\n                warning \"Init Contract not found\"\n            }\n        }\n        if Size($ContractAccept) > 0{\n            if GetContractByName($ContractAccept) == 0 {\n                warning \"Contract for accepted decision not found\"\n            }\n        }\n        if Size($ContractReject) > 0{\n            if GetContractByName($ContractReject) == 0{\n                warning \"Contract for rejected decision not found\"\n            }\n        }\n    }\n    \n    func action{\n        $result = DBInsert(\"voting_templates\", \"title,subject,voters,candidates,init_contract,volume,quorum,type_voting,type_participants,type_decision,vacancies,contract_accept,accept_params,contract_reject,reject_params\", $Title, $Subject, $Voters, $Candidates, $InitContract, $Volume, $Quorum, $TypeVoting, $TypeParticipants, $TypeDecision, $Vacancies, $ContractAccept, $ParamsAccept, $ContractReject, $ParamsReject)\n        \n    }\n}",
            "Name": "voting_TemplateStore",
            "Type": "contracts"
        }
    ]
}