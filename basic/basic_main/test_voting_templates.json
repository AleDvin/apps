{
    "blocks": [],
    "contracts": [
        {
            "Name": "test_voting_Accept",
            "Value": "contract test_voting_Accept{\n    data{\n        VotingTemplateId string \"optional\"\n        KeyId string \"optional\"\n        VotingId string \"optional\"\n    }\n    \n    conditions{}\n    \n    action{\n        var voting map\n        voting = DBFind(\"votings\").Where(\"id=?\", Int($VotingId)).Row()\n        \n        var value1, value2, value3 string\n        value1 = \"voting\"\n        value2 = voting[\"voting->description\"]\n        value3 = Sprintf(\"Accept template_id:%v voting_id:%v KeyId:%v\", $VotingTemplateId, $VotingId, $KeyId)\n        DBInsert(\"debug\", \"value1,value2,value3\", value1,value2,value3)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "test_voting_Reject",
            "Value": "contract test_voting_Reject{\n    data{\n        VotingTemplateId string \"optional\"\n        KeyId string \"optional\"\n        VotingId string \"optional\"\n    }\n    \n    conditions{}\n    \n    action{\n        var voting map\n        voting = DBFind(\"votings\").Where(\"id=?\", Int($VotingId)).Row()\n        \n        var value1, value2, value3 string\n        value1 = \"voting\"\n        value2 = voting[\"voting->description\"]\n        value3 = Sprintf(\"Reject template_id:%v voting_id:%v KeyId:%v\", $VotingTemplateId, $VotingId, $KeyId)\n        DBInsert(\"debug\", \"value1,value2,value3\", value1,value2,value3)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "test_voting_Init",
            "Value": "contract test_voting_Init{\n    data{}\n    \n    conditions{\n        ContractConditions(\"MainCondition\")\n    }\n    \n    action{\n        DBInsert(\"debug\", \"value1,value2,value3\", \"voting\", \"INIT\", \"init OK\")\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "test_voting_Create",
            "Value": "contract test_voting_Create{\n    data{\n        Start string \"datetime\"\n        End string \"datetime\"\n        StartTime string \"datetime\"\n        EndTime string \"datetime\"\n    }\n    \n    conditions{}\n    \n    action{\n        var p, d, v int // types of participant, decision, voting\n        d = 1\n        while d <= 5 {\n            p = 1\n            while p <= 3 {\n                v = 1\n                while v <= 2 {\n                    var volume, quorum, vacancies int\n                    var title, subject, voters, candidates, initContract, contractAccept, paramsAccept, contractReject, paramsReject string\n                    title = Sprintf(\"New Voting [d%v:p%v:v%v]\", d, p, v)\n                    volume = 50\n                    quorum = 50\n                    subject = \"voting template subject\"\n                    voters = \"1\"\n                    candidates = \"1\"\n                    initContract = \"test_voting_Init\"\n                    vacancies = 1\n                    contractAccept = \"test_voting_Accept\"\n                    paramsAccept = \"\"\n                    contractReject = \"test_voting_Reject\"\n                    paramsReject = \"\"\n                    \n                    var templateId, kid int\n                    voting_TemplateStore(\"Title,TypeParticipants,TypeVoting,TypeDecision,Volume,Quorum,Subject,Voters,Candidates,InitContract,Vacancies,ContractAccept,ParamsAccept,ContractReject,ParamsReject\", title,p,v,d,volume,quorum,subject,voters,candidates,initContract,vacancies,contractAccept,paramsAccept,contractReject,paramsReject)\n                    templateId = $result\n                    \n                    var tableWritten, rowId, columnName, newValue, textDocument string\n                    tableWritten = \"debug\"\n                    rowId = \"1\"\n                    columnName = \"value1\"\n                    newValue = Sprintf(\"It is new value for template #%v\", templateId)\n                    textDocument = Sprintf(\"Test text Document for voting template #%v\", templateId)\n                    \n                    voting_TemplateRun(\"TemplateId,Start,End,EndTime,StartTime,KeyId,TableWritten,RowId,ColumnName,NewValue,TextDocument\", templateId, $Start, $End, $EndTime, $StartTime, kid, tableWritten, rowId, columnName, newValue, textDocument)\n                    \n                    v = v+1\n                }\n                p = p+1\n            }\n            d = d+1\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "data": [],
    "languages": [],
    "menus": [
        {
            "Name": "default_menu",
            "Value": "MenuItem(Title:testing $voting_templates$, Page:test_voting_templates, Icon:fa fa-thumbs-up)",
            "Conditions": "ContractAccess(\"@1EditMenu\")"
        }
    ],
    "pages": [
        {
            "Name": "test_voting_templates",
            "Value": "Form(content-wrapper){\n    Input(Name:Start, Type: hidden, Value: Now(\"YYYY-MM-DD\"))\n    Input(Name:End, Type: hidden, Value: Now(\"YYYY-MM-DD\", +1 days))\n    Input(Name:StartTime, Type: hidden, Value: Now(\"HH:MI\", +5 minute))\n    Input(Name:EndTime, Type: hidden, Value: Now(\"HH:MI\", +15 minute))\n    Button(Page:voting_list, Contract:test_voting_Create, Class:btn btn-default){\n        create tests of votings\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "default_menu"
        }
    ],
    "parameters": [],
    "tables": [
        {
            "Name": "debug",
            "Columns": "[\n    {\n        \"name\": \"value1\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"value2\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"value3\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}