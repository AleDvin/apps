{
    "blocks": [],
    "contracts": [
        {
            "Name": "sysparams_AcceptValidator",
            "Value": "contract sysparams_AcceptValidator{\n    data{\n        VotingTemplateId string\n        KeyId string\n        VotingId string\n    }\n    func conditions{\n        var templateId int\n        templateId = Int(EcosysParam(\"voting_validators_template_id\"))\n        \n        var params map\n        params = DBFind(\"voting_templates\").Where(\"id=?\", templateId).Row()\n        if params{\n            warning \"Voting params not found\"\n        }\n\n        $Id = Int($KeyId)\n        var candidateId, oldRoleId, roleId int\n        oldRoleId = 2 // Candidate for validators\n        roleId = 3 // Validator\n        \n        candidateId = DBFind(\"sysparams_candidate\").Where(\"id=?\",$Id).One(\"candidate_key_id\")\n        if candidateId == nil{\n            warning \"Candidate key id not found\"\n        }\n        $assignedRow = DBFind(\"roles_assign\").Where(\"delete=0 and id=? and member_id=?\", oldRoleId, candidateId).Row()\n        \n        $role = DBFind(\"roles_list\").Where(\"role_id=? and delete=0\", roleId).Row()\n        if !$role {\n            warning \"Validator role not found\"\n        }\n    }\n    \n    func action{\n        var this_contract string\n        this_contract = \"sysparams_AcceptValidator\"\n        \n        if $assignedRow {\n            Roles_Unassign(\"row_id,origin_contract\", Int($assignedRow[\"id\"]), this_contract)\n        }\n        Roles_Assign(\"role_id,member_id,origin_contract\", Int($role[\"id\"]), $Id, this_contract)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_CandidateValidatorRequest",
            "Value": "contract sysparams_CandidateValidatorRequest{\n    data{\n        HostIp string\n        // CommissionPub string\n        CommissionAddress string\n        Description string \"optional\"\n        Comment string \"optional\"\n    }\n    \n    func IsNotValidIp(ip string)bool{\n        var parts array\n        var i, lenParts, part int\n        parts = Split(ip, \".\")\n        \n        lenParts = Len(parts)\n        if lenParts != 4{\n            return true\n        }\n        while i< lenParts {\n            part = Int(parts[i])\n            if part < 0{\n                return true\n            }\n            if part > 255{\n                return true\n            }\n            i = i+1\n        }\n        \n        return false\n    }\n    \n    conditions{\n        // $CommissionPub = Replace($CommissionPub, \" \", \"\")\n        // info Sprintf(\"%v %v\", $CommissionAddress, PubToID($CommissionPub))\n        // if $CommissionAddress != PubToID($CommissionPub) {\n        // info \"Address or Public key are invalid\"\n        // }\n        \n        $CommissionAddress = AddressToId($CommissionAddress)\n        if !DBFind(\"keys\").Where(\"id=?\", $CommissionAddress).Row(){\n            warning \"Address not valid\"\n        }\n        \n        if IsNotValidIp($HostIp){\n            warning \"Please enter a valid ip address\"\n        }\n        var roleName string\n        var roleId int\n        var role map\n        roleName = \"Candidate for validators\"\n        roleId = 2\n        role = DBFind(\"roles_list\").Where(\"role_name=? and id=? and delete=0\", roleName, roleId).Row()\n        if !role{\n            warning Sprintf(\"Role %q not found\", roleName)\n        }\n        $origin_contract = \"sysparams_CandidateValidatorRequest\"\n        Roles_Assign(\"role_id,member_id,origin_contract\", roleId, $key_id, $origin_contract)\n    }\n    \n    action{\n        \n        DBInsert(\"sysparams_candidate\", \"host_ip,commission_pub,commission_address,description,comment,candidate_key_id,timestamp date_created,deleted\", $HostIp, \"\", $CommissionAddress, $Description, $Comment, $key_id, $block_time, 0)\n        \n    }\n    \n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_CandidateValidator_Delete",
            "Value": "contract sysparams_CandidateValidator_Delete{\n    data{\n        Id int\n    }\n    conditions{\n        var candidateId, roleId int\n        roleId = 2 // Candidate for validators\n        candidateId = DBFind(\"sysparams_candidate\").Where(\"id=?\",$Id).One(\"candidate_key_id\")\n        \n        $role = DBFind(\"roles_assign\").Where(\"delete=0 and id=? and member_id=?\", roleId, candidateId).Row()\n        if !$role {\n            warning \"Candidate role not found\"\n        }\n    }\n    action{\n        DBUpdate(\"sysparams_candidate\", $Id, \"deleted\", 1)\n        $origin_contract = \"sysparams_CandidateValidator_Delete\"\n        Roles_Unassign(\"row_id,origin_contract\", Int($role[\"id\"]), $origin_contract)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_DelegateRefresh",
            "Value": "contract sysparams_DelegateRefresh{\n    func NotInArray(val string, arr array) bool{\n        var i int\n        // info arr\n        while i< Len(arr){\n            if val == arr[i]{\n                return false\n            }\n            i=i+1\n        }\n        return true\n    }\n    \n    conditions{\n        MainCondition()\n        \n        var ROLE_NAME string\n        var ROLE_ID int\n        ROLE_NAME = \"Delegate\"\n        ROLE_ID = 5\n        \n        // get role Id and Type\n        $role = DBFind(\"roles\").Where(\"role_name=? and id=? and delete=0\", ROLE_NAME, ROLE_ID).Row()\n        if !$role{\n            warning Sprintf(\"Role %q not found\", ROLE_NAME)\n        }\n        if EcosysParam(\"last_ecosystem_number\") == 0 {\n            warning \"last ecosystem number unknown\"\n        }\n    }\n    \n    action{\n        var DELEGATE_ACCOUNT string\n        DELEGATE_ACCOUNT = \"delegate_account\"\n        // get delegates ids\n        var delegateIds, currentDelegates array\n        var dIndex, i int\n        \n        var lastEcosystemNumber int\n        lastEcosystemNumber = Int(EcosysParam(\"last_ecosystem_number\"))\n        \n        i = 1\n        while i <= lastEcosystemNumber {\n            var delegateParam map\n            delegateParam = DBFind(\"parameters\").Where(\"name=?\", DELEGATE_ACCOUNT).Ecosystem(i).Row()\n            if !delegateParam{\n                delegateParam = DBFind(\"parameters\").Where(\"name='founder_account'\").Ecosystem(i).Row()\n            }\n            var delegateValue string\n            delegateValue = delegateParam[\"value\"]\n            if NotInArray(delegateValue, delegateIds){\n                delegateIds[dIndex] = delegateValue\n                dIndex = dIndex + 1\n            }\n            i = i + 1\n        }\n        \n        // remove old role assigns\n        currentDelegates = DBFind(\"roles_participants\").Where(\"role->id=? and deleted=0\", $role[\"id\"])\n        i = 0\n        while i < Len(currentDelegates){\n            var delegate map\n            delegate = currentDelegates[i]\n            if NotInArray(delegate[\"member_id\"], delegateIds){\n                var id int\n                id = Int(delegate[\"id\"])\n                Roles_Unassign(\"row_id\", id)\n            }\n            i = i + 1\n        }\n        \n        // assign new roles\n        i = 0\n        while i < Len(delegateIds) {\n            var delegateId int\n            delegateId = Int(delegateIds[i])\n            var member map\n            member = DBFind(\"members\").Where(\"id=?\",delegateId).Row()\n            if member{\n                // check role dup\n                var assigned map\n                assigned = DBFind(\"roles_participants\").Where(\"member->member_id=? and role->id=? and deleted=0\", delegateId, $role[\"id\"]).Row()\n                if !assigned{\n                    Roles_Assign(\"role_id,member_id\", Int($role[\"id\"]), Int(member[\"id\"]))\n                }\n            }\n            i=i+1\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_InvestorRefresh",
            "Value": "contract sysparams_InvestorRefresh {\n    func NotInArray(val string, arr array) bool{\n        var i int\n        // info arr\n        while i< Len(arr){\n            if val == arr[i]{\n                return false\n            }\n            i=i+1\n        }\n        return true\n    }\n    conditions{\n        MainCondition()\n        \n        var roleId int\n        roleId = 4 // Investor with voting rights\n        \n        $role = DBFind(\"roles\").Where(\"id=? and delete=0\", roleId).Row()\n        if !$role{\n            warning \"Investor role not found\"\n        }\n        $limitInvestors = Int(EcosysParam(\"investors_number\"))\n        if $limitInvestors == 0 {\n            warning \"Investors number not set\"\n        }\n    }\n    \n    action{\n        // get investors ids\n        var keysInvestors, assignedInvestors, investorsIds, assignedIds array\n        var dIndex, i int\n        keysInvestors = DBFind(\"keys\").Order(\"amount desc, id\").Limit($limitInvestors)\n        assignedInvestors = DBFind(\"roles_participants\").Where(\"role->id=? and deleted=0\", $role[\"id\"])\n        \n        // get ids\n        i=0\n        while i < Len(keysInvestors) {\n            var inv map\n            inv = keysInvestors[i]\n            investorsIds[i] = inv[\"id\"]\n            i = i + 1\n        }\n        i=0\n        while i < Len(assignedInvestors) {\n            var inv map\n            inv = assignedInvestors[i]\n            assignedIds[i] = inv[\"member_id\"]\n            i = i + 1\n        }\n        \n        // remove old investors\n        i = 0\n        while i < Len(assignedIds) {\n            if NotInArray(assignedIds[i], investorsIds){\n                var assigned map\n                assigned = DBFind(\"roles_participants\").Where(\"member->member_id=? and role->id=?\", assignedIds[i], $role[\"id\"]).Row()\n                if assigned {\n                    Roles_Unassign(\"row_id\", Int(assigned[\"id\"]))\n                }\n            }\n            i = i+1\n        }\n        // add new investors\n        i = 0\n        while i < Len(investorsIds) {\n            if NotInArray(investorsIds[i], assignedIds){\n                Roles_Assign(\"role_id,member_id\", Int($role[\"id\"]), investorsIds[i])\n            }\n            i = i+1\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_RemoveNode",
            "Value": "contract sysparams_RemoveNode{\n    data{\n        NodeId int\n    }\n    func nodeRemove(nodeId int){\n        var nodes_string string\n        var nodes array\n        nodes_string = SysParamString(\"full_nodes\")\n        nodes = JSONToMap(nodes_string)\n        info nodes\n\n    }\n    conditions{\n        var roleId int\n        roleId = 3 // Validator\n        \n        $validatorRow = DBFind(\"roles_assign\").Where(\"delete=0 and id=? and member_id=?\", roleId, $key_id).Row()\n        if $validatorRow {\n            warning \"You are not a validator\"\n        }\n    }\n    \n    action{\n        var this_contract string\n        this_contract = \"sysparams_RemoveNode\"\n        \n        nodeRemove($NodeId)\n        // Roles_Unassign(\"row_id,origin_contract\", Int($validatorRow[\"id\"]), this_contract)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_StartVotingValidator",
            "Value": "contract sysparams_StartVotingValidator{\n    data{\n        KeyId int\n    }\n    \n    conditions{\n        ContractConditions(\"MainCondition\")\n        $candidate = DBFind(\"sysparams_candidate\").Where(\"candidate_key_id=? and deleted=0\", $KeyId).Row()\n        if !$candidate{\n            warning \"Candidate not found\"\n        }\n    }\n    action{\n        sysparams_DelegateRefresh()\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "data": [
        {
            "Table": "voting_templates",
            "Columns": [
                "volume",
                "init_contract",
                "contract_reject",
                "contract_accept",
                "title",
                "vacancies",
                "candidates",
                "reject_params",
                "type_decision",
                "type_voting",
                "type_participants",
                "quorum",
                "voters",
                "subject",
                "accept_params"
            ],
            "Data": [
                [
                    "50",
                    "sysparams_StartVotingValidator",
                    "",
                    "sysparams_AcceptValidator",
                    "Voting for Validator",
                    "1",
                    "2",
                    "",
                    "2",
                    "2",
                    "3",
                    "50",
                    "5",
                    "Validator",
                    ""
                ],
                [
                    "75",
                    "sysparams_InvestorRefresh",
                    "",
                    "",
                    "Voting for System param",
                    "0",
                    "4",
                    "",
                    "4",
                    "2",
                    "3",
                    "50",
                    "4",
                    "System param",
                    ""
                ],
                [
                    "75",
                    "sysparams_InvestorRefresh",
                    "catalog_ecosystems_AcceptVES",
                    "",
                    "Voting for Value Ecosystem",
                    "0",
                    "4",
                    "",
                    "5",
                    "2",
                    "3",
                    "50",
                    "4",
                    "System param",
                    ""
                ]
            ]
        }
    ],
    "languages": [
        {
            "Name": "new_value",
            "Conditions": "",
            "Trans": "{\"en\": \"New value\", \"ru\": \"Новое значение\"}"
        },
        {
            "Name": "voting_template_not_found",
            "Conditions": "",
            "Trans": "{\"en\": \"The template ID to vote is not found in the system parameters of the ecosystem\", \"ru\": \"Идентификатор шаблона голосования не найден в системных параметрах экосистемы\"}"
        }
    ],
    "menus": [
        {
            "Name": "default_menu",
            "Value": "MenuGroup(Title:$admin$, Icon:\"fa icon-settings\"){\n    MenuItem(Title: $sysparams_list$,Page:sysparams_list, Icon:\"fa icon-settings\")\n    MenuItem(Title:$sysparams_candidates_list$, Page:sysparams_candidates_list, Icon:\"icon-list\")\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "pages": [
        {
            "Name": "sysparams_candidate_validators_form",
            "Value": "Div(content-wrapper){\n    \n    SetTitle($sysparams_candidate_validators_form$)\n    Div(Class: breadcrumb){\n        LinkPage($sysparams_candidates_list$, sysparams_candidates_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $sysparams_candidate_validators_form$)\n    }\n    \n    Div(row){\n        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(form-group) {\n                        Label(LangRes(host_ip)*)\n                        Input(Name: HostIp, Type: text, Placeholder: xxx.xxx.xxx.xxx).Validate(minLength:7, maxLength:15)\n                        InputErr(Name: HostIp, minLength: Value is too short, maxLength: Value is too long)\n                    }\n                    If(){\n                        Div(form-group) {\n                            Label(LangRes(commission_pub)*)\n                            Input(Name: CommissionPub, Type: text).Validate(minLength:128)\n                            InputErr(Name: CommissionPub, minLength: Invalid pub-key)\n                        }\n                    }\n                    Div(form-group) {\n                        Label(LangRes(commission_address)*)\n                        Input(Name: CommissionAddress, Type: text,Placeholder:xxxx-xxxx-xxxx-xxxx-xxxx).Validate(minLength:24, maxLength:24)\n                        InputErr(Name: CommissionAddress, minLength: Invalid address, maxLength: Invalid address)\n                    }\n                    Div(form-group) {\n                        Label(LangRes(description_equipment))\n                        Input(Name: Description, Type: textarea)\n                    }\n                    Div(form-group) {\n                        Label(LangRes(comment))\n                        Input(Name: Comment, Type: textarea)\n                    }\n                }\n\t\t\t\tDiv(panel-footer clearfix){\n\t\t\t\t\tDiv(pull-right){\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_candidates_list)\n                    \tButton(Contract: sysparams_CandidateValidatorRequest, Class: btn btn-primary, Page: sysparams_candidates_list, Body: $send$)\n\t\t\t\t\t}\n\t\t\t\t}\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "sysparams_candidates_list",
            "Value": "SetVar(template_id, EcosysParam(voting_validators_template_id))\nSetTitle($sysparams_candidates_list$)\n\nDBFind(Name:sysparams_candidate, Source: src_candidates).Where(\"deleted=0\").Custom(buttons){\n    If(#template_id#>0){\n        Form(btn-group){\n            Input(Name:KeyId, Type: hidden, Value: #candidate_key_id#)\n            Input(Name:TemplateId, Type: hidden, Value: #template_id#)\n            Input(Name:Start, Type: hidden, Value: Now(\"YYYY-MM-DD\", +1 days))\n            Input(Name:StartTime, Type: hidden, Value: Now(\"HH:MI\"))\n            Input(Name:End, Type: hidden, Value: Now(\"YYYY-MM-DD\", +14 days))\n            Input(Name:EndTime, Type: hidden, Value: Now(\"HH:MI\"))\n            Button(Body: $voting_start$, Contract: voting_TemplateRun, Page: voting_list, Class: btn btn-success)\n        }\n    }\n    \n}.Custom(_date){\n    DateTime(DateTime: #date_created#, Format: YYYY-MM-DD HH:MI)\n}\n\nDiv(content-wrapper){\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: $sysparams_candidates_list$)\n    }    \n    Div(row){\n        Div(col-md-12){\n            Div(panel panel-primary){\n                Div(table-responsive){\n                    Table(Source: src_candidates, Columns: \"$id$=id,$host_ip$=host_ip,$commission_address$=commission_address,$description_equipment$=description,$comment$=comment,$date_created$=_date,=buttons\")\n                }\n                Div(panel-footer text-right){\n                    Button(Body: LangRes(add), Class: btn btn-primary, Page: sysparams_candidate_validators_form)\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "sysparams_list",
            "Value": "Div(content-wrapper){\n    SetTitle($system_params$)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: $system_params$)\n    }\n    Data(Source: src_parameters, Columns: name){\n        gap_between_blocks\n        default_ecosystem_page\n        full_nodes\n        ecosystem_price\n        blockchain_url\n        max_block_size\n    }\n    Div(row){\n        Div(col-sm-12 col-lg-10 col-lg-offset-1){\n            Div(panel panel-primary){\n                Form(panel-body){\n                    ForList(Source: src_parameters, Index: index){\n                        Div(form-group){\n                            Div(row){\n                                Div(col-sm-4){\n                                    #index#. #name#\n                                }\n                                Div(col-sm-6){\n                                    SysParam(#name#)\n                                }.Style(overflow:hidden;)\n                                Div(col-sm-2){\n                                    Button(Body: $edit$, Class: btn btn-block btn-primary, Page: sysparams_voting, PageParams: \"params_index=#index#,params_name=#name#\")\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nIf(){\n    default_ecosystem_menu\n    default_ecosystem_contract\n    rb_blocks_1\n    new_version_url\n    number_of_nodes\n    contract_price\n    column_price\n    table_price\n    menu_price\n    page_price\n    max_tx_size\n    max_tx_count\n    max_columns\n    max_indexes\n    max_block_user_tx\n    max_fuel_tx\n    max_fuel_block\n    commission_size\n    commission_wallet\n    fuel_rate\n    extend_cost_address_to_id\n    extend_cost_id_to_address\n    extend_cost_new_state\n    extend_cost_sha256\n    extend_cost_pub_to_id\n    extend_cost_ecosys_param\n    extend_cost_sys_param_string\n    extend_cost_sys_param_int\n    extend_cost_sys_fuel\n    extend_cost_validate_condition\n    extend_cost_eval_condition\n    extend_cost_has_prefix\n    extend_cost_contains\n    extend_cost_replace\n    extend_cost_join\n    extend_cost_update_lang\n    extend_cost_size\n    extend_cost_substr\n    extend_cost_contracts_list\n    extend_cost_is_object\n    extend_cost_compile_contract\n    extend_cost_flush_contract\n    extend_cost_eval\n    extend_cost_len\n    extend_cost_activate\n    extend_cost_deactivate\n    extend_cost_create_ecosystem\n    extend_cost_table_conditions\n    extend_cost_create_table\n    extend_cost_perm_table\n    extend_cost_column_condition\n    extend_cost_create_column\n    extend_cost_perm_column\n    extend_cost_json_to_map\n    max_block_generation_time\n    block_reward\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "sysparams_nodes_list",
            "Value": "Div(content-wrapper){\n    \n    SetTitle($sysparams_nodes_list$)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: $sysparams_nodes_list$)\n    }\n    Data(Source: nodes, Columns:\"id,name,value\"){\n        1,name_test,value_test\n    }.Custom(_buttons){\n        Button(Class: btn btn-danger, Body: $delete$, Contract: sysparams_RemoveNode, Params: \"NodeId=#id#\")\n    }\n    Div(panel panel-primary){\n        Form(table-responsive){\n            Table(nodes, \"$id$=id,$name$=name,$value$=_value,=_buttons\")\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "default_menu"
        },
        {
            "Name": "sysparams_voting",
            "Value": "SetVar(template_id, EcosysParam(voting_sysparams_template_id))\nSetTitle($voting$)\n\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage($system_params$, sysparams_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $voting$)\n    }\n    \n    If(And(#template_id#>0,#params_index#>0)){\n        Div(row){\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n                Form(panel panel-default){\n                    Div(text-center h3){\n                        #params_name#\n                    }\n                    Div(panel-body){\n                        Input(Name: Start, Type: hidden, Value: Now(\"YYYY-MM-DD\"))\n                        Input(Name: End, Type: hidden, Value: Now(\"YYYY-MM-DD\", 21 days))\n                        Input(Name: StartTime, Type: hidden, Value: Now(\"HH:MI\", +5 minute))\n                        Input(Name: EndTime, Type: hidden, Value: Now(\"HH:MI\", +15 minute))\n                        Input(Name: TemplateId, Type: hidden, Value: #template_id#)\n                        \n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(For: NewValue){LangRes(new_value)}\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: NewValue, Value: SysParam(#params_name#), Type: textarea)\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_list)\n                        Button(Body: LangRes(voting), Class: btn btn-primary, Contract: voting_TemplateRun, Params: \"ColumnName=#params_name#\", Page: voting_list)\n                    }\n                }\n            }\n        }\n    }.Else{\n        If(#params_index#>0){}.Else{\n            Div(col-md-12 alert alert-danger text-center){\n                Div(){LangRes(attention)}\n            }\n        }\n        If(#template_id#>0){}.Else{\n            Div(col-md-12 alert alert-danger text-center){\n                Div(){LangRes(voting_template_not_found)}\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        }
    ],
    "parameters": [
        {
            "Name": "investors_number",
            "Value": "0",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "last_ecosystem_number",
            "Value": "0",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_sysparams_template_id",
            "Value": "0",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_validators_template_id",
            "Value": "0",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "tables": [
        {
            "Name": "sysparams_candidate",
            "Columns": "[\n    {\n        \"name\": \"commission_address\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"comment\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"deleted\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"host_ip\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"description\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"date_created\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"commission_pub\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"candidate_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}