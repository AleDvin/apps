{
    "blocks": [],
    "contracts": [
        {
            "Name": "Debug",
            "Value": "contract Debug{\n    data{\n        Value string\n    }\n    action{\n        if EcosysParam(\"debug\")==1{\n            DBInsert(\"debug\", \"value\", $Value)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "TokensTransfer",
            "Value": "contract TokensTransfer {\n    data {\n        SenderId string \"optional\"\n        RecipientId string\n        Amount string\n    }\n    \n    conditions {\n        var addressLen int\n        addressLen = 24\n        \n        $amount = Money($Amount)\n        if $SenderId == \"\"{\n            $SenderId = Sprintf(\"%v\", $key_id)\n        }\n        if $amount <= 0 {\n            error \"TokensTransfer. Amount less than or equal to zero\"\n        }\n        \n        if !HasPrefix($SenderId, \"-\"){\n            if Contains($SenderId, \"-\"){\n                $SenderId = Sprintf(\"%v\", AddressToId($SenderId))\n                info $SenderId\n            }\n        }\n        if !HasPrefix($RecipientId, \"-\"){\n            if Contains($RecipientId, \"-\"){\n                $RecipientId = Sprintf(\"%v\", AddressToId($RecipientId))\n            }\n        }\n        if Size($SenderId) > addressLen{\n            $SenderId = Sprintf(\"%v\", PubToID($SenderId))\n        }\n        if Size($RecipientId) > addressLen{\n            $RecipientId = Sprintf(\"%v\", PubToID($RecipientId))\n        }\n        \n        \n        var sender map\n        sender = DBFind(\"keys\").Where(\"id=?\", $SenderId).Row()\n        if !sender{\n            error \"TokensTransfer. Sender is invalid\"\n        }\n        // if sender[\"amount\"] < $amount{\n        //     error Sprintf(\"The number of tokens of the sender (%v) is not enough\", sender[\"amount\"])\n        // }\n        // var recipient map\n        // recipient = DBFind(\"keys\").Where(\"id=?\", $RecipientId).Row()\n        // if !recipient{\n        //     error \"TokensTransfer. Recipient is invalid\"\n        // }\n\n    }\n    \n    action {\n        DBUpdate(\"keys\", Int($SenderId),\"-amount\", $amount)\n        DBUpdate(\"keys\", Int($RecipientId),\"+amount\", $amount)\n        DBInsert(\"history\", \"sender_id,recipient_id,amount,block_id,txhash\",\n        $SenderId, $RecipientId, $amount, $block, $txhash)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "tokenrefund_Accept",
            "Value": "contract tokenrefund_Accept{\n    data{\n        Id string\n    }\n    \n    func refundAmount(victimId, attackerId, amount string){\n        TokensTransfer(\"SenderId,RecipientId,Amount\", attackerId, victimId, amount)\n        Debug(\"Value\", Sprintf(\"ВОЗВРАТ ТОКЕНОВ (%v: %v => %v)\", amount, attackerId, victimId))\n    }\n    func unblockAccounts(victimId, attackerId string){\n        //todo: РАЗБЛОКИРОВКА АККАУНТОВ\n        Debug(\"Value\", Sprintf(\"РАЗБЛОКИРОВКА АККАУНТОВ (%v, %v)\", victimId, attackerId))\n    }\n    \n    conditions{\n        Debug(\"Value\",\"tokenrefund_Accept\")\n        $tokenrefund = DBFind(\"tokenrefund\").Where(\"id=?\", $Id).Row()\n        if !$tokenrefund{\n            Debug(\"Value\", \"tokenrefund не найден\")\n            return\n        }\n    }\n    \n    action{\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\n        refundAmount($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"],$tokenrefund[\"amount\"])\n        // статус 3: закрыто; результат 2: токены возвращены\n        DBUpdate(\"tokenrefund\", Int($tokenrefund[\"id\"]), \"status,result\", 3,2)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "tokenrefund_Reject",
            "Value": "contract tokenrefund_Reject{\n    data{\n        Id string\n    }\n    \n    func unblockAccounts(victimId, attackerId string){\n        //todo: РАЗБЛОКИРОВКА АККАУНТОВ\n        Debug(\"Value\", Sprintf(\"РАЗБЛОКИРОВКА АККАУНТОВ (%v, %v)\", victimId, attackerId))\n    }\n    \n    conditions{\n        Debug(\"Value\", \"tokenrefund_Reject\")\n        $tokenrefund = DBFind(\"tokenrefund\").Where(\"id=?\", $Id).Row()\n        if !$tokenrefund{\n            Debug(\"Value\", \"tokenrefund не найден\")\n            return\n        }\n    }\n    \n    action{\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\n        // статус 3: закрыто; результат 1: возврат отменен\n        DBUpdate(\"tokenrefund\", Int($tokenrefund[\"id\"]), \"status,result\", 3,1)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "tokenrefund_Start",
            "Value": "contract tokenrefund_Start{\n    data{\n        VictimAccount string\n        SuspectAccount string\n        Amount int\n        Note string\n        DateStart string \"date\"\n        DateEnd string \"date\"\n        DateNow string \"date\"\n        TimeNow string \"date\"\n    }\n    func blockAccounts(victimId, attackerId int){\n        //todo: БЛОКИРОВКА АККАУНТОВ\n        Debug(\"Value\", Sprintf(\"БЛОКИРОВКА АККАУНТОВ (%v, %v)\", victimId, attackerId))\n    }\n    \n    conditions{\n        Debug(\"Value\", \"tokenrefund_Start\")\n        \n        $victimId = AddressToId($VictimAccount)\n        $attackerId = AddressToId($SuspectAccount)\n        if $Amount <= 0{\n            info \"Amount not valid\"\n        }\n        if $victimId == 0{\n            info \"Victim address not valid\"\n        }\n        if $attackerId == 0{\n            info \"Suspect address not valid\"\n        }\n        if Size($Note) == 0{\n            info \"Please add description\"\n        }\n        var allowed map\n        allowed = DBFind(\"roles_assign\").Where(\"role_name='Validator' and role_type=3 and delete=0 and member_id=?\", $key_id)\n        if !allowed{\n            // закомментировано для отладки\n            // warning \"You not Validator. You can not to run this\"\n        }\n        \n        var template_id int\n        template_id = DBFind(\"laws\").Where(\"name='tokenrefund'\").One(\"voting_template_id\")\n        if template_id == nil{\n            template_id = DBFind(\"voting_templates\").Where(\"type='law' and type_id=1\").One(\"id\")\n            if template_id == nil{\n                info \"Template not found\"\n            }\n            Debug(\"Value\", \"template id найдено в voting_templates\")\n        }\n        \n        $template = DBFind(\"voting_templates\").Where(\"id=?\", template_id).Row()\n        $votersRoleName = $template[\"voters\"]\n        $votingName = $template[\"title\"]\n        $typeParticipants = 3 // участников добавим по роли\n        $typeDecision = 5 // запуск контракта\n        $typeVoting = 2 // системное голосование\n        $volume = Int($template[\"volume\"])\n        $quorum = Int($template[\"quorum\"])\n        $contractAccept = $template[\"contract_accept\"]\n        $contractReject = $template[\"contract_reject\"]\n        \n        $desc = Sprintf(\"%v (victim: %v, attacker: %v, amount: %v)\", $votingName, $VictimAccount, $SuspectAccount, $Amount)\n        \n        var isExist map\n        isExist = DBFind(\"voting_instances\").Where(\"name=? and description=? and delete=0\", $votingName, $desc).Row()\n        if isExist{\n            // info \"Voting already created\" // раскомментировать на проде\n        }\n        \n        Debug(\"Value\", \"tokenrefund_Start. condition ok\")\n    }\n    \n    action{\n        blockAccounts($victimId,$attackerId)\n        \n        $voting_id = 0 // должно установиться в voting_CreateNew\n        voting_CreateNew(\"voting_name,type_voting,description,type_participants,type_decision,volume,quorum,now_date,start_time,end_time,start_date,end_date\", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $volume, $quorum, $DateNow, $TimeNow, $TimeNow, $DateStart, $DateEnd)\n        if $voting_id == 0 {\n            $voting_id = DBFind(\"voting_instances\").Where(\"voting_name=? and start_date=?\", $votingName, $DateStart).One(\"id\")\n            $voting_id = Int($voting_id)\n        }\n        // todo статусы и оповещения участников голосования (инвесторы)\n        var status int\n        // 0.Аккаунты заблокированы 1.Обсуждение 2.Голосование 3.Закрыто\n        status = 1\n        var result int\n        // 0. обсуждение и голосование 1. отменен возврат 2. токены возвращены\n        result = 0\n        \n        var tokenrefundId int\n        tokenrefundId = DBInsert(\"tokenrefund\", \"victim_key_id,attacker_key_id,amount,note,validator_key_id,blocked_at,voting_id,status,result\", $victimId, $attackerId, $Amount, $Note, $key_id, $DateNow, $voting_id,status,result)\n        \n        $defaultParams = Sprintf(\"Id->%v\", tokenrefundId)\n        \n        voting_SubjectContract(\"votingID,contract_reject,contract_accept,contract_reject_params,contract_accept_params\", $voting_id, $contractReject, $contractAccept, $defaultParams, $defaultParams)\n        \n        var roleId int\n        roleId = DBFind(\"roles_list\").Where(\"role_name=? and delete=0\", $votersRoleName).One(\"id\")\n        voting_Invite(\"votingID,var_id\", $voting_id, roleId)\n        \n        var closure int\n        closure = 2\n        var icon, header, body, page, params string\n        icon = \"icon-bubbles\"\n        header = \"$tokenrefund_note_header$\"\n        body = $desc\n        page = \"voting_view\"\n        params = Sprintf(\"vID=%v\", $voting_id)\n        Notifications_Roles_Send(\"role_id,closure_type,icon_name,text_header,text_body,page_name,params_val\", roleId, closure, icon, header, body, page, params)\n        \n        Debug(\"Value\", \"tokenrefund_Start. action ok\")\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "data": [
        {
            "Table": "voting_templates",
            "Columns": [
                "voters",
                "title",
                "volume",
                "quorum",
                "contract_accept",
                "contract_reject",
                "type",
                "type_id"
            ],
            "Data": [
                [
                    "Investor with voting rights",
                    "Token Refund",
                    "70",
                    "51",
                    "tokenrefund_Accept",
                    "tokenrefund_Reject",
                    "law",
                    "1"
                ]
            ]
        }
    ],
    "languages": [
        {
            "Name": "blocked_at",
            "Conditions": "",
            "Trans": "{\"en\": \"Date of lock\", \"ru\": \"Дата блокировки\"}"
        },
        {
            "Name": "description",
            "Conditions": "",
            "Trans": "{\"en\": \"Description\", \"ru\": \"Описание\"}"
        },
        {
            "Name": "request_refund",
            "Conditions": "",
            "Trans": "{\"en\": \"To request a refund\", \"ru\": \"Запросить возврат средств\"}"
        },
        {
            "Name": "result",
            "Conditions": "",
            "Trans": "{\"en\": \"Result\", \"ru\": \"Результат\"}"
        },
        {
            "Name": "sender",
            "Conditions": "",
            "Trans": "{\"en\": \"Sender\", \"ru\": \"Отправитель\"}"
        },
        {
            "Name": "start_refund",
            "Conditions": "",
            "Trans": "{\"en\": \"To start the refund\", \"ru\": \"Начать возврат средств\"}"
        },
        {
            "Name": "tokenrefund_attacker",
            "Conditions": "",
            "Trans": "{\"en\": \"Attacker\", \"ru\": \"Злоумышленник\"}"
        },
        {
            "Name": "tokenrefund_list",
            "Conditions": "",
            "Trans": "{\"en\": \"Tokens refund list\", \"ru\": \"Список возврата токенов\"}"
        },
        {
            "Name": "tokenrefund_note_header",
            "Conditions": "",
            "Trans": "{\"en\": \"Token refund\", \"ru\": \"Возврат средств\"}"
        },
        {
            "Name": "tokenrefund_result0",
            "Conditions": "",
            "Trans": "{\"en\": \"Discussion and voting\", \"ru\": \"Oбсуждение и голосование\"}"
        },
        {
            "Name": "tokenrefund_result1",
            "Conditions": "",
            "Trans": "{\"en\": \"Return cancelled\", \"ru\": \"Возврат отменен\"}"
        },
        {
            "Name": "tokenrefund_result2",
            "Conditions": "",
            "Trans": "{\"en\": \"The tokens returned\", \"ru\": \"Токены возвращены\"}"
        },
        {
            "Name": "tokenrefund_start",
            "Conditions": "",
            "Trans": "{\"en\": \"Refund\", \"ru\": \"Возврат средств\"}"
        },
        {
            "Name": "tokenrefund_status0",
            "Conditions": "",
            "Trans": "{\"en\": \"Blocked accounts\", \"ru\": \"Аккаунты заблокированы\"}"
        },
        {
            "Name": "tokenrefund_status1",
            "Conditions": "",
            "Trans": "{\"en\": \"Discussion\", \"ru\": \"Обсуждение\"}"
        },
        {
            "Name": "tokenrefund_status2",
            "Conditions": "",
            "Trans": "{\"en\": \"Voting\", \"ru\": \"Голосование\"}"
        },
        {
            "Name": "tokenrefund_status3",
            "Conditions": "",
            "Trans": "{\"en\": \"Closed\", \"ru\": \"Закрыто\"}"
        },
        {
            "Name": "tokenrefund_victim",
            "Conditions": "",
            "Trans": "{\"en\": \"Victim\", \"ru\": \"Жертва\"}"
        },
        {
            "Name": "voting",
            "Conditions": "",
            "Trans": "{\"en\": \"Voting\", \"ru\": \"Голосование\"}"
        }
    ],
    "menus": [
        {
            "Name": "default_menu",
            "Value": "MenuItem(Title:$tokenrefund_list$, Page:tokenrefund_list, Icon:\"icon-list\")\nMenuItem(Title:$tokens_transfer$, Page:tokens_transfer, Icon:\"icon-credit-card\")",
            "Conditions": "ContractAccess(\"@1EditMenu\")"
        }
    ],
    "pages": [
        {
            "Name": "tokenrefund_list",
            "Value": "Div(content-wrapper){\n    SetTitle($tokenrefund_list$)\n    \n    DBFind(Name: tokenrefund, Source: src).Order(id desc).Custom(_status){\n        If(#status#>0){\n            EcosysParam(Name: tokenrefund_status, Index: #status#)\n        }.Else{\n            $tokenrefund_status0$\n        }\n    }.Custom(_result){\n        If(#result#>0){\n            EcosysParam(Name: tokenrefund_result, Index: #result#)\n        }.Else{\n            $tokenrefund_result0$\n        }\n    }.Custom(_blocked){\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #blocked_at#)\n    }.Custom(_closed){\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #closed_at#)\n    }.Custom(_accounts){\n        Div(){$tokenrefund_victim$: #victim_key_id#}\n        Div(){$tokenrefund_attacker$: #attacker_key_id#}\n    }.Custom(_voting){\n        LinkPage(Page: voting_view, PageParams: \"vID=#voting_id#\"){##voting_id#}\n    }\n    \n    Div(panel panel-primary){\n        Div(table-responsive){\n            Table(Source: src, Columns: \"$accounts$=_accounts,$amount$=amount,$description$=note,$validator_id$=validator_id,$blocked_at$=_blocked,$voting$=_voting,$result$=_result,$status$=_status,$closed$=_closed\")\n        }   \n        \n        Form(panel-footer text-right){\n            Button(Body: $request_refund$, Class: btn btn-primary, Page: tokenrefund_start)\n        }\n    }\n}\n\n",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "default_menu"
        },
        {
            "Name": "tokenrefund_start",
            "Value": "Data(Source: inputs, Columns:\"name,type,res,placeholder\"){\n    Amount,number,amount,\"\"\n    VictimAccount,text,tokenrefund_victim,xxxx-xxxx-xxxx-xxxx-xxxx\n    SuspectAccount,text,tokenrefund_attacker,xxxx-xxxx-xxxx-xxxx-xxxx\n    Note,textarea,description,\"\"\n}\nDiv(content-wrapper){\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading, Body: $tokenrefund_start$)\n                Div(panel-body){\n                    ForList(Source: inputs){\n                        Div(row form-group){\n                            Div(col-sm-4){LangRes(#res#)}\n                            Div(col-sm-8){\n                                Input(Name: #name#, Type: #type#, Placeholder: #placeholder#)\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Input(Name: DateStart, Type: hidden, Value: Now(\"YYYY-MM-DD\", +1 day))\n                    Input(Name: DateEnd, Type: hidden, Value: Now(\"YYYY-MM-DD\", +2 day))\n                    Input(Name: DateNow, Type: hidden, Value: Now(\"YYYY-MM-DD HH:MI\"))\n                    Input(Name: TimeNow, Type: hidden, Value: Now(\"HH:MI\"))\n                    Button(Body: $start_refund$, Contract: tokenrefund_Start, Page: tokenrefund_list, Class: btn btn-primary)\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "default_menu"
        },
        {
            "Name": "tokens_transfer",
            "Value": "SetTitle($tokens_transfer$)\nData(inputs, \"name,res\"){\n    SenderId,sender\n    RecipientId,recipient\n    Amount,amount\n}\nDiv(content-wrapper){\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading, Body: LangRes(tokens_transfer))\n                Div(panel-body){\n                    ForList(inputs){\n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-3 text-right){Label(LangRes(#res#))}\n                                Div(col-md-9 text-left){\n                                    Input(Name: #name#, Value: \"\")\n                                }\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: tokens_transfer, Contract: TokensTransfer).Alert(Text: $want_send_tokens$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }\n            }\n        }\n    }\n    \n    If(EcosysParam(tokenrefund_debug)==1){\n        Div(){seed:hybrid strategy find sketch clog kiwi sniff voice cradle damp tackle change enlist cream tourist}\n        Div(){1018-3306-1287-2959-8522}\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "default_menu"
        }
    ],
    "parameters": [
        {
            "Name": "tokenrefund_result",
            "Value": "tokenrefund_result1,tokenrefund_result2,tokenrefund_result3",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "tokenrefund_status",
            "Value": "tokenrefund_status1,tokenrefund_status2,tokenrefund_status3",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "tokenrefund_voting_template_id",
            "Value": "0",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "tables": [
        {
            "Name": "debug",
            "Columns": "[\n    {\n        \"name\": \"value\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "laws",
            "Columns": "[\n    {\n        \"name\": \"name\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"page\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"voting_template_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "tokenrefund",
            "Columns": "[\n    {\n        \"name\": \"victim_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"attacker_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"amount\",\n        \"type\": \"money\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"note\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"validator_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"blocked_at\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"voting_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"result\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"status\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"closed_at\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}