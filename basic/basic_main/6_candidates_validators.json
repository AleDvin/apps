{
    "blocks": [],
    "contracts": [
        {
            "Name": "sysparams_AcceptRole",
            "Value": "contract sysparams_AcceptRole{\n    data{\n        VotingTemplateId string\n        KeyId string\n    }\n    func conditions{\n        $Id = Int($KeyId)\n        \n        $votingParams = DBFind(\"voting_templates\").Where(\"id=?\", $VotingTemplateId).Row()\n        if !$votingParams{\n            warning \"Voting params not found\"\n        }\n        \n        $oldRoleName = $votingParams[\"precondition\"]\n        $roleName = $votingParams[\"subject\"]\n        \n        $oldRoleId = DBFind(\"roles_list\").Where(\"role_name=? and delete=0\", $oldRoleName).One(\"id\")\n    }\n    \n    func action{\n        // reassign old role\n        $raId = DBFind(\"roles_assign\").Where(\"delete=0 and role_id=? and member_id=?\", $oldRoleId, $Id).One(\"id\")\n        if $raId !=nil {\n            sysparams_RoleUnassign(\"RId\", Int($raId))\n        }\n        // assign new role\n        sysparams_RoleAssign(\"RoleName,KeyId\", $roleName, $Id)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_AcceptValidator",
            "Value": "contract sysparams_AcceptValidator{\n    data{\n        VotingTemplateId string\n        KeyId string\n        VotingId string\n    }\n    func conditions{\n        $Id = Int($KeyId)\n        \n        $votingParams = DBFind(\"voting_templates\").Where(\"id=?\", $VotingTemplateId).Row()\n        if !$votingParams{\n            warning \"Voting params not found\"\n        }\n        \n        $oldRoleName = $votingParams[\"candidates\"]\n        $roleName = $votingParams[\"subject\"]\n        \n        $oldRoleId = DBFind(\"roles_list\").Where(\"role_name=? and delete=0\", $oldRoleName).One(\"id\")\n        $roleId = DBFind(\"roles_list\").Where(\"role_name=? and delete=0\", $roleName).One(\"id\")\n    }\n    \n    func action{\n        $origin_contract = \"sysparams_AcceptValidator\"\n        // reassign old role\n        $raId = DBFind(\"roles_assign\").Where(\"delete=0 and role_id=? and member_id=?\", $oldRoleId, $Id).One(\"id\")\n        if $raId !=nil {\n            Roles_Unassign(\"row_id\", Int($raId))\n        }\n        // assign new role\n        Roles_Assign(\"role_id,member_id\", Int($roleId), $Id)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_CandidateValidatorRequest",
            "Value": "contract sysparams_CandidateValidatorRequest{\n    data{\n        HostIp string\n        // CommissionPub string\n        CommissionAddress string\n        Description string \"optional\"\n        Comment string \"optional\"\n    }\n    \n    func IsNotValidIp(ip string)bool{\n        var parts array\n        var i, lenParts, part int\n        parts = Split(ip, \".\")\n        \n        lenParts = Len(parts)\n        if lenParts != 4{\n            return true\n        }\n        while i< lenParts {\n            part = Int(parts[i])\n            if part < 0{\n                return true\n            }\n            if part > 255{\n                return true\n            }\n            i = i+1\n        }\n        \n        return false\n    }\n    \n    conditions{\n        // $CommissionPub = Replace($CommissionPub, \" \", \"\")\n        // info Sprintf(\"%v %v\", $CommissionAddress, PubToID($CommissionPub))\n        // if $CommissionAddress != PubToID($CommissionPub) {\n        // info \"Address or Public key are invalid\"\n        // }\n        \n        $CommissionAddress = AddressToId($CommissionAddress)\n        if !DBFind(\"keys\").Where(\"id=?\", $CommissionAddress).Row(){\n            warning \"Address not valid\"\n        }\n        \n        if IsNotValidIp($HostIp){\n            warning \"Please enter a valid ip address\"\n        }\n        var roleName string\n        var roleId int\n        var role map\n        roleName = \"Candidate for validators\"\n        roleId = 2\n        role = DBFind(\"roles_list\").Where(\"role_name=? and id=? and delete=0\", roleName, roleId).Row()\n        if !role{\n            warning Sprintf(\"Role %q not found\", roleName)\n        }\n        $origin_contract = \"sysparams_CandidateValidatorRequest\"\n        Roles_Assign(\"role_id,member_id\", roleId, $key_id)\n    }\n    \n    action{\n        \n        DBInsert(\"sysparams_candidate\", \"host_ip,commission_pub,commission_address,description,comment,candidate_key_id,timestamp date_created,deleted\", $HostIp, \"\", $CommissionAddress, $Description, $Comment, $key_id, $block_time, 0)\n        \n    }\n    \n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_CandidateValidator_Delete",
            "Value": "contract sysparams_CandidateValidator_Delete{\n    data{\n        Id int\n    }\n    conditions{\n        var roleName string\n        var candidateId, roleId int\n        roleId = 2\n        roleName = \"Candidate for validators\"\n        candidateId = DBFind(\"sysparams_candidate\").Where(\"id=?\",$Id).One(\"candidate_key_id\")\n        \n        $raId = DBFind(\"roles_assign\").Where(\"id=? and role_name=? and delete=0 and member_id=?\", roleId, roleName, candidateId).One(\"id\")\n        if $raId == nil {\n            warning \"Candidate not found\"\n        }\n    }\n    action{\n        DBUpdate(\"sysparams_candidate\", $Id, \"deleted\", 1)\n        $origin_contract = \"sysparams_CandidateValidator_Delete\"\n        Roles_Unassign(\"row_id\", Int($raId))\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_DelegateRefresh",
            "Value": "contract sysparams_DelegateRefresh{\n    func NotInArray(val string, arr array) bool{\n        var i int\n        // info arr\n        while i< Len(arr){\n            if val == arr[i]{\n                return false\n            }\n            i=i+1\n        }\n        return true\n    }\n    \n    conditions{\n        var roleName string\n        var roleId int\n        roleName = \"Delegate\"\n        roleId = 5\n        $delegateParam = \"delegate_account\"\n        \n        // get role Id and Type\n        $role = DBFind(\"roles_list\").Where(\"role_name=? and id=? and delete=0\", roleName, roleId).Row()\n        if !$role{\n            return \"Role not found\"\n        }\n    }\n    \n    action{\n        $origin_contract = \"sysparams_DelegateRefresh\"\n        // get delegates ids\n        var delegateIds array\n        var dIndex, i, lastEcosystemNumber int\n        i = 1\n        lastEcosystemNumber = 15\n        while i <= lastEcosystemNumber {\n            $delegate = DBFind(\"parameters\").Where(\"name=?\",$delegateParam).Ecosystem(i).Row()\n            if !$delegate{\n                $delegate = DBFind(\"parameters\").Where(\"name='founder_account'\").Ecosystem(i).Row()\n            }\n            $delegateValue = $delegate[\"value\"]\n            if NotInArray($delegateValue, delegateIds){\n                delegateIds[dIndex] = $delegateValue\n                dIndex = dIndex + 1\n            }\n            i = i + 1\n        }\n        \n        // remove old role assigns\n        $currentDelegates = DBFind(\"roles_assign\").Where(\"role_id=? and delete=0\", $role[\"id\"])\n        i = 0\n        while i < Len($currentDelegates){\n            $currentDelegate = $currentDelegates[i]\n            if NotInArray($currentDelegate[\"member_id\"], delegateIds){\n                var id int\n                id = Int($currentDelegate[\"id\"])\n                Roles_Unassign(\"row_id\", id)\n            }\n            i = i + 1\n        }\n        \n        // assign new roles\n        i = 0\n        while i < Len(delegateIds) {\n            var delegateId int\n            delegateId = Int(delegateIds[i])\n            var member map\n            member = DBFind(\"members\").Where(\"id=?\",delegateId).Row()\n            if member{\n                // check role dup\n                var assigned map\n                assigned = DBFind(\"roles_assign\").Where(\"member_id=? and role_id=? and delete=0\", delegateId, $role[\"id\"]).Row()\n                if !assigned{\n                    Roles_Assign(\"role_id,member_id\", Int($role[\"id\"]), Int(member[\"id\"]))\n                }\n            }\n            i=i+1\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "sysparams_StartVotingValidator",
            "Value": "contract sysparams_StartVotingValidator{\n    data{\n        KeyId int\n    }\n    \n    conditions{\n        ContractConditions(\"MainCondition\")\n        $candidate = DBFind(\"sysparams_candidate\").Where(\"candidate_key_id=? and deleted=0\", $KeyId).Row()\n        if !$candidate{\n            warning \"Candidate not found\"\n        }\n    }\n    action{\n        sysparams_DelegateRefresh()\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "data": [
        {
            "Table": "voting_templates",
            "Columns": [
                "type",
                "quorum",
                "type_voting",
                "volume",
                "type_decision",
                "type_participants",
                "subject",
                "init_contract",
                "title",
                "voters",
                "type_id",
                "vacancies",
                "contract_accept",
                "accept_params",
                "contract_reject",
                "reject_params"
            ],
            "Data": [
                [
                    "NULL",
                    "50",
                    "2",
                    "50",
                    "2",
                    "3",
                    "Validator",
                    "sysparams_StartVotingValidator",
                    "Voting for Validator",
                    "Delegate",
                    "0",
                    "1",
                    "sysparams_AcceptRole",
                    "",
                    "",
                    ""
                ]
            ]
        }
    ],
    "languages": [],
    "menus": [
        {
            "Name": "default_menu",
            "Value": "MenuGroup(Title:$admin$, Icon:\"fa icon-settings\"){\n    MenuItem(Title:$sysparams_candidates_list$, Page:sysparams_candidates_list, Icon:\"icon-list\")\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "pages": [
        {
            "Name": "sysparams_candidate_validators_form",
            "Value": "Div(content-wrapper){\n    \n    SetTitle($sysparams_candidate_validators_form$)\n    Div(Class: breadcrumb){\n        LinkPage($sysparams_candidates_list$, sysparams_candidates_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $sysparams_candidate_validators_form$)\n    }\n    \n    Div(row){\n        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(form-group) {\n                        Label(LangRes(host_ip)*)\n                        Input(Name: HostIp, Type: text, Placeholder: xxx.xxx.xxx.xxx).Validate(minLength:7, maxLength:15)\n                        InputErr(Name: HostIp, minLength: Value is too short, maxLength: Value is too long)\n                    }\n                    If(){\n                        Div(form-group) {\n                            Label(LangRes(commission_pub)*)\n                            Input(Name: CommissionPub, Type: text).Validate(minLength:128)\n                            InputErr(Name: CommissionPub, minLength: Invalid pub-key)\n                        }\n                    }\n                    Div(form-group) {\n                        Label(LangRes(commission_address)*)\n                        Input(Name: CommissionAddress, Type: text,Placeholder:xxxx-xxxx-xxxx-xxxx-xxxx).Validate(minLength:24, maxLength:24)\n                        InputErr(Name: CommissionAddress, minLength: Invalid address, maxLength: Invalid address)\n                    }\n                    Div(form-group) {\n                        Label(LangRes(description_equipment))\n                        Input(Name: Description, Type: textarea)\n                    }\n                    Div(form-group) {\n                        Label(LangRes(comment))\n                        Input(Name: Comment, Type: textarea)\n                    }\n                }\n\t\t\t\tDiv(panel-footer clearfix){\n\t\t\t\t\tDiv(pull-right){\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_candidates_list)\n                    \tButton(Contract: sysparams_CandidateValidatorRequest, Class: btn btn-primary, Page: sysparams_candidates_list, Body: $send$)\n\t\t\t\t\t}\n\t\t\t\t}\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "sysparams_candidates_list",
            "Value": "Div(content-wrapper){\n    SetTitle($sysparams_candidates_list$)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: $sysparams_candidates_list$)\n    }\n    \n    DBFind(Name:sysparams_candidate, Source: src_candidates).Where(\"deleted=0\").Custom(buttons){\n        DBFind(Name: voting_instances, Source: src_vi).Where(\"name='Voting for Validator'\").Where(\"contract_accept_params='VotingTemplateId->1;KeyId->#candidate_key_id#'\").Where(\"delete=0\").Vars(vi)\n        \n        \n        If(#vi_id#>0){}.Else{\n            Form(btn-group){\n                Input(Name:KeyId, Type: hidden, Value: #candidate_key_id#)\n                Input(Name:TemplateId, Type: hidden, Value: 3)\n                Input(Name:Start, Type: hidden, Value: Now(\"YYYY-MM-DD\", +1 days))\n                Input(Name:StartTime, Type: hidden, Value: Now(\"HH:MI\"))\n                Input(Name:End, Type: hidden, Value: Now(\"YYYY-MM-DD\", +14 days))\n                Input(Name:EndTime, Type: hidden, Value: Now(\"HH:MI\"))\n                Button(Body: $voting_start$, Contract: voting_TemplateRun, Page: voting_list, Class: btn btn-success)\n            }\n        }\n    }.Custom(_date){\n        DateTime(DateTime: #date_created#, Format: YYYY-MM-DD HH:MI)\n    }\n    \n    Div(row){\n        Div(col-md-12){\n            Div(panel panel-primary){\n                Div(table-responsive){\n                    Table(Source: src_candidates, Columns: \"$id$=id,$host_ip$=host_ip,$commission_address$=commission_address,$description_equipment$=description,$comment$=comment,$date_created$=_date,=buttons\")\n                }\n                Div(panel-footer text-right){\n                    Button(Body: LangRes(add), Class: btn btn-primary, Page: sysparams_candidate_validators_form)\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        }
    ],
    "parameters": [],
    "tables": [
        {
            "Name": "sysparams_candidate",
            "Columns": "[{\"name\":\"commission_address\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"comment\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"host_ip\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"description\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"date_created\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"commission_pub\",\"type\":\"bytea\",\"conditions\":\"true\"},{\"name\":\"candidate_key_id\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}