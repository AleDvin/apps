{
    "blocks": [],
    "contracts": [
        {
            "Name": "voting_TemplateRun",
            "Value": "contract voting_TemplateRun{\n    data{\n        KeyId int \"optional\"\n        TemplateId int\n        Start string \"date\"\n        StartTime string \"date,optional\"\n        End string \"date\"\n        EndTime string \"date,optional\"\n    }\n    \n    func conditions{\n        $template = DBFind(\"voting_templates\").WhereId($TemplateId).Row()\n        if !$template{\n            warning \"Voting template not found\"\n        }\n        if $KeyId != 0{\n            $keyFind = DBFind(\"keys\").Where(\"id=?\", $KeyId).Row()\n            if !$keyFind{\n                warning \"Keyid not found\"\n            }\n        }\n        if $StartTime == \"\"{\n            $StartTime = \"00:00\"\n        }\n        if $EndTime == \"\"{\n            $EndTime = \"23:59\"\n        }\n        \n        $initContract = $template[\"init_contract\"]\n        if $initContract != \"\" && $initContract != \"NULL\"{   \n            var initParam map\n            initParam[\"KeyId\"] = $KeyId\n            CallContract($condition, initParam)\n        }\n        \n        $candidateRoleName = $template[\"precondition\"]\n        $votersRoleName = $template[\"voters\"]\n        $votingName = $template[\"title\"]\n        $volume = Int($template[\"volume\"])\n        $quorum = Int($template[\"quorum\"])\n        $typeVoting = Int($template[\"type_voting\"])\n        $typeParticipants = Int($template[\"type_participants\"])\n        $typeDecision = Int($template[\"type_decision\"])\n        $vacancies = Int($template[\"vacancies\"])\n        \n        $desc = Sprintf(\"%v [template #%v]\", $votingName, $TemplateId)\n        \n        $contractAccept = $template[\"contract_accept\"]\n        if $contractAccept == \"NULL\"{\n            $contractAccept = \"\"\n        }\n        $acceptParams = $template[\"accept_params\"]\n        if $acceptParams == \"NULL\"{\n            $acceptParams = \"\"\n        }\n        \n        $contractReject = $template[\"contract_reject\"]\n        if $contractReject == \"NULL\"{\n            $contractReject = \"\"\n        }\n        $rejectParams = $template[\"reject_params\"]\n        if $rejectParams == \"NULL\"{\n            $rejectParams = \"\"\n        }\n        \n        \n        $isCreated = DBFind(\"voting_instances\").Where(\"name=? and description=? and delete=0\", $votingName, $desc).Row()\n        if $isCreated{\n            // info \"Voting already created\" // must uncomment on prod\n        }\n        if $preCondition != \"\" && $preCondition != \"NULL\"{\n            var m map\n            CallContract($preCondition, m)\n        }\n        $roleId = DBFind(\"roles_list\").Where(\"role_name=? and delete=0\", $votersRoleName).One(\"id\")\n        if $roleId == nil {\n            warning \"Voters not found\"\n        }\n    }\n    \n    func action{\n        \n        $voting_id = 0 // will be set in voting_CreateNew\n        voting_CreateNew(\"voting_name,type_voting,description,type_participants,type_decision,now_date,start_time,start_date,end_date,end_time,volume,quorum\", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $Start, $StartTime, $Start, $End, $EndTime, $volume, $quorum)\n        if $voting_id == 0 {\n            $voting_id = DBFind(\"voting_instances\").Where(\"voting_name=? and start_date=?\", $votingName, $Start).One(\"id\")\n            $voting_id = Int($voting_id)\n        }\n        voting_SubjectCandidates(\"votingID,memberID\", $voting_id, $KeyId)\n        \n        $defaultParams = Sprintf(\"VotingTemplateId->%v;KeyId->%v;VotingId->%v\", $TemplateId, $KeyId, $voting_id)\n        if Size($acceptParams) == 0{\n            $acceptParams = $defaultParams\n        }\n        if Size($rejectParams) == 0{\n            $rejectParams = $defaultParams\n        }\n        voting_SubjectSettings(\"votingID,roleID,vacancies,contract_accept,accept_params,contract_reject,reject_params\", $voting_id, $roleId, $vacancies, $contractAccept, $acceptParams, $contractReject,$rejectParams)\n        \n        voting_Invite(\"votingID,var_id\", $voting_id, $roleId)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_TemplateStore",
            "Value": "contract voting_TemplateStore{\n    data{\n        Title string\n        TypeParticipants int\n        TypeVoting int\n        TypeDecision int\n        Volume int\n        Quorum int\n        Subject string\n        Voters string\n        InitContract string \"optional\" // Выполнить перед голосованием\n        Vacancies int \"optional\"\n        ContractAccept string \"optional\"\n        ParamsAccept string \"optional\"\n        ContractReject string \"optional\"\n        ParamsReject string \"optional\"\n    }\n    \n    func conditions{\n        if Size($InitContract) > 0{\n            if !IsObject($InitContract, $ecosystem_id){\n                warning \"Init condition not found\"\n            }\n        }\n        \n        if Size($Title) <3{\n            warning \"Please enter title\"\n        }\n        if $Volume <0 || $Volume > 100{\n            warning \"Wrong volume range\"\n        }\n        if $Quorum <0 || $Quorum > 100{\n            warning \"Wrong quorum range\"\n        }\n        \n        if $TypeDecision != 5 && $Vacancies < 1 {\n            warning \"wrong number vacancies\"\n        }\n        \n        if Size($ContractAccept) > 0{\n            if GetContractByName($ContractAccept) == 0 {\n                warning \"Contract for accepted decision not found\"\n            }\n        }\n        if Size($ContractReject) > 0{\n            if GetContractByName($ContractReject) == 0{\n                warning \"Contract for rejected decision not found\"\n            }\n        }\n    }\n    \n    func action{\n        DBInsert(\"voting_templates\", \"title,subject,voters,init_contract,volume,quorum,type_voting,type_participants,type_decision,vacancies,contract_accept,accept_params,contract_reject,reject_params\", $Title,$Subject,$Voters,$InitContract,$Volume,$Quorum,$TypeVoting,$TypeParticipants,$TypeDecision,$Vacancies,$ContractAccept,$ParamsAccept,$ContractReject,$ParamsReject)\n        \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "data": [],
    "languages": [],
    "menus": [
        {
            "Name": "default_menu",
            "Value": "MenuGroup(Title:$voting$, Icon:\"fa fa-edit\"){\n    MenuItem(Title:$voting_templates$, Page:voting_templates, Icon:\"fa icon-pin\")\n}",
            "Conditions": "ContractAccess(\"@1EditMenu\")"
        }
    ],
    "pages": [
        {
            "Name": "voting_template_create",
            "Value": "Div(content-wrapper){\n    \n    SetTitle($template_create$)\n    Div(Class: breadcrumb){\n        LinkPage($voting_templates$, voting_templates)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $template_create$)\n    }\n    \n    If(#TemplateId#>0){\n        DBFind(Name:voting_templates, Source: templates).Where(id=#TemplateId#).Vars(template)\n    }.Else{\n        SetVar(template_id, 0)\n    }\n    \n    Div(row){\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading){LangRes(new_template)}\n                Div(panel-body){\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: Title){LangRes(name)}\n                                Span(Class: text-danger, Body:*)\n                            }\n                            Div(col-md-8 text-left){\n                                If(#template_id#>0){\n                                    SetVar(title, #template_title#)\n                                }.Else{\n                                    SetVar(title, New voting)\n                                }\n                                Input(Name: Title, Class: form-control, Type: text, Value: #title#)\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: TypeParticipants){LangRes(participants)}\n                                Span(Class: text-danger, Body:*)\n                            }\n                            Div(col-md-8 text-left){\n                                If(#template_id#>0){\n                                    SetVar(typepart, #template_type_participants#)\n                                }.Else{\n                                    SetVar(typepart, 0)\n                                }\n                                EcosysParam(Name: type_voting_participants, Source: type_voting_participants)\n                                Select(Name: TypeParticipants, Source: type_voting_participants, NameColumn: name, ValueColumn: id, Value: #typepart#)\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: TypeVoting){LangRes(voting_type)}\n                                Span(Class: text-danger, Body:*)\n                            }\n                            Div(col-md-8 text-left){\n                                If(#template_id#>0){\n                                    SetVar(typevoting, #template_type_voting#)\n                                }.Else{\n                                    SetVar(typevoting, 0)\n                                }\n                                EcosysParam(Name: type_voting, Source: type_voting)\n                                Select(Name: TypeVoting, Source: type_voting, NameColumn: name, ValueColumn: id, Value: #typevoting#)\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: TypeDecision){LangRes(decision)}\n                                Span(Class: text-danger, Body:*)\n                            }\n                            Div(col-md-8 text-left){\n                                If(#template_id#>0){\n                                    SetVar(typedec, #template_type_decision#)\n                                }.Else{\n                                    SetVar(typedec, 0)\n                                }\n                                EcosysParam(Name: type_voting_decisions, Source: type_voting_decisions)\n                                Select(Name: TypeDecision, Source: type_voting_decisions, NameColumn: name, ValueColumn: id, Value: typedec)\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: Volume){LangRes(voting_volume)}\n                                Span(Class: text-danger, Body:*)\n                            }\n                            Div(col-md-8 text-left){\n                                If(#template_id#>0){\n                                    SetVar(volume, #template_volume#)\n                                }.Else{\n                                    SetVar(volume, 50)\n                                }\n                                Input(Name: Volume, Class: form-control, Type: number, Value: #volume#).Validate(minLength: 1)\n                                InputErr(Name: Volume, minLength: Please enter voting volume)\n                                \n                                P(Class: m0 text-muted, Body: $voting_volume_desc$)\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: quorum){LangRes(voting_quorum)}\n                                Span(Class: text-danger, Body:*)\n                            }\n                            Div(col-md-8 text-left){\n                                If(#template_id#>0){\n                                    SetVar(quorum, #template_quorum#)\n                                }.Else{\n                                    SetVar(quorum, 50)\n                                }\n                                Input(Name: Quorum, Class: form-control, Type: number, Value: #quorum#).Validate(minLength: 1)\n                                InputErr(Name: Quorum, minLength: Please enter voting quorum)\n                                P(Class: m0 text-muted, Body: $voting_quorum_desc$)\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: Subject){LangRes(voting_subject)}\n                                Span(Class: text-danger, Body:*)\n                            }\n                            Div(col-md-8 text-left){\n                                If(#template_id#>0){\n                                    SetVar(subj, #template_subject#)\n                                }.Else{\n                                    SetVar(subj, \"\")\n                                }\n                                Input(Name: Subject, Class: form-control, Type: text, Value: #subj#)\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: Voters){LangRes(voters)}\n                                Span(Class: text-danger, Body:*)\n                            }\n                            Div(col-md-8 text-left){\n                                If(#template_id#>0){\n                                    SetVar(voters, #template_voters#)\n                                }.Else{\n                                    SetVar(voters, \"\")\n                                }\n                                Input(Name: Voters, Class: form-control, Type: text, Value: #voters#)\n                            }\n                        }\n                    }\n                    \n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: Vacancies){LangRes(vacancies)}\n                            }\n                            Div(col-md-8 text-left){\n                                If(#template_id#>0){\n                                    SetVar(vacancies, #template_vacancies#)\n                                }.Else{\n                                    SetVar(vacancies, 1)\n                                }\n                                Input(Name: Vacancies, Class: form-control, Type: number, #vacancies#)\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: InitContract){LangRes(voting_init_contract)}\n                            }\n                            Div(col-md-8 text-left){\n                                If(#template_id#>0){\n                                    SetVar(initcon, #template_init_contract#)\n                                }.Else{\n                                    SetVar(initcon, \"\")\n                                }\n                                Input(Name: InitContract, Class: form-control, Type: text, Value: #initcon#)\n                                P(Class: m0 text-muted, Body: $voting_init_contract_desc$)\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: ContractAccept){LangRes(voting_contract_accept)}\n                            }\n                            Div(col-md-8){\n                                Div(row){\n                                    If(#template_id#>0){\n                                        SetVar(conacc, #template_contract_accept#)\n                                        SetVar(accpar, #template_accept_params#)\n                                    }.Else{\n                                        SetVar(conacc, \"\")\n                                        SetVar(accpar, \"\")\n                                    }\n                                    Div(col-md-6){\n                                        Input(Name: ContractAccept, Class: form-control, Type: text,Placeholder: contract, Value: #conacc#)\n                                    }\n                                    Div(col-md-6){\n                                        Input(Name: ParamsAccept, Class: form-control, Type: text,Placeholder: arguments, Value: #accpar#)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-right){\n                                Label(For: ContractReject){LangRes(voting_contract_reject)}\n                            }\n                            Div(col-md-8){\n                                Div(row){\n                                    If(#template_id#>0){\n                                        SetVar(conrej, #template_contract_reject#)\n                                        SetVar(rejpar, #template_reject_params#)\n                                    }.Else{\n                                        SetVar(conrej, \"\")\n                                        SetVar(rejpar, \"\")\n                                    }\n                                    Div(col-md-6){\n                                        Input(Name: ContractReject, Class: form-control, Type: text, Placeholder: contract, Value: #conrej#)\n                                    }\n                                    Div(col-md-6){\n                                        Input(Name: ParamsReject, Class: form-control, Type: text, Placeholder: arguments, Value: #rejpar#)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                \n                Div(panel-footer clearfix){\n                    Div(pull-right){\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: voting_templates)\n                        Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_templates, Contract: voting_TemplateStore)\n                    }\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_template_start",
            "Value": "SetTitle($voting_start$)\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage($voting_templates$, voting_templates)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $voting_start$)\n    }\n    \n    If(#TemplateId#>0){\n        DBFind(Name:voting_templates, Source: templates).Where(id=#TemplateId#).Vars(template)\n        Data(inputs, \"res,value\"){\n            LangRes(name),#template_title#\n            LangRes(participants),\"EcosysParam(Name: type_voting_participants, Index: #template_type_participants#)\"\n            LangRes(voting_type),\"EcosysParam(Name: type_voting, Index: #template_type_voting#)\"\n            LangRes(decision),\"EcosysParam(Name: type_voting_decisions, Index: #template_type_decision#)\"\n            LangRes(voting_volume),#template_volume#\n            LangRes(voting_quorum),#template_quorum#\n            LangRes(voting_subject),#template_subject#\n            LangRes(voters),#template_voters#\n            LangRes(vacancies),#template_vacancies#\n            LangRes(init_contract),#template_init_contract#\n            LangRes(voting_contract_accept),\"#template_contract_accept#(#template_accept_params#)\"\n            LangRes(voting_contract_reject),\"#template_contract_reject#(#template_reject_params#)\"\n            LangRes(date_start),\"Input(Name:Start, Type: date)\"\n            LangRes(date_end),\"Input(Name:End, Type: date)\"\n        }\n        Div(row){\n            Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n                Form(panel panel-primary){\n                    Div(panel-heading){LangRes(voting_start)}\n                    Div(panel-body){\n                        ForList(inputs){\n                            Div(form-group){\n                                Div(row){\n                                    Div(col-md-4 text-right){\n                                        Strong(#res#)\n                                    }\n                                    Div(col-md-8 text-left){\n                                        If(#value#!=\"()\"){\n                                            #value#\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Input(Name:StartTime, Type: hidden, Value: Now(\"HH:MI\", 15 minutes))\n                    Div(panel-footer){\n                        Div(text-left){\n                            Button(Body: LangRes(copy), Class: btn btn-default, Page: voting_template_create, PageParams: \"TemplateId=#TemplateId#\")\n                        }\n                        Div(text-right){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_templates)\n                            Button(Body: LangRes(voting_start), Class: btn btn-primary, Page: voting_list, Contract: voting_TemplateRun, Params: \"TemplateId=#TemplateId#\")\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(col-md-12 alert alert-danger text-center){\n            LangRes(attention)\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_templates",
            "Value": "Div(content-wrapper){\n    SetTitle($voting_templates$)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: $voting_templates$)\n    }\n    \n    DBFind(Name:voting_templates, Source: templates).Order(id desc).Custom(_participants){\n        EcosysParam(Name:type_voting_participants, #type_participants#)\n    }.Custom(_decision){\n        EcosysParam(Name:type_voting_decisions, #type_decision#)\n    }.Custom(_type){\n        EcosysParam(Name:type_voting, #type_voting#)\n    }.Custom(_buttons){\n        Button(Class: btn btn-success, Page: voting_template_start, PageParams: \"TemplateId=#id#\", Body: $use$)\n    }.Custom(_contracts){\n        If(And(#init_contract#!=\"\",#init_contract#!=\"NULL\")){\n            Div(){$init_contract$}\n            Div(){#init_contract#}\n        }\n        If(And(#contract_accept#!=\"\",#contract_accept#!=\"NULL\")){\n            Div(){$contract_accept$}\n            Div(){#contract_accept#(GetVar(accept_params))}\n        }\n        If(And(#contract_reject#!=\"\",#contract_reject#!=\"NULL\")){\n            Div(){$contract_reject$}\n            Div(){#contract_reject#(GetVar(reject_params))}\n        }\n    }\n    \n    Div(panel panel-primary){\n        Form(){\n            Div(table-responsive){\n                Table(Source: templates, Columns:\"$title$=title,$voting_subject$=subject,$voters$=voters,$volume$=volume,$quorum$=quorum,$voting_type$=_type,$participants$=_participants,$decision$=_decision,$vacancies$=vacancies,$contracts$=_contracts,=_buttons\")\n            }\n            Div(panel-footer clearfix){\n                Div(pull-right){\n                    Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_template_create)\n                }\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        }
    ],
    "parameters": [],
    "tables": [
        {
            "Name": "voting_templates",
            "Columns": "[\n    {\n        \"name\": \"voters\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_participants\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"init_contract\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"title\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_decision\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"quorum\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"subject\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_voting\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"volume\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"vacancies\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"contract_accept\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"accept_params\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"contract_reject\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"reject_params\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}