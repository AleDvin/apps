{
    "name": "Basic application",
    "data": [
        {
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title: $catalog_ecosystems$, Page: catalog_ecosystems, Icon:\"fa fa-book\")\r\nMenuItem(Title:$voting_templates$, Page:voting_templates, Icon:\"fa icon-pin\")\r\nMenuGroup(Title:$admin$, Icon:\"icon-arrow-right\"){\r\n    MenuItem(Title: $sysparams_list$,Page:sysparams_list, Icon:\"fa icon-settings\")\r\n    MenuItem(Title:$sysparams_candidates$, Page:sysparams_candidates, Icon:\"icon-list\")\r\n    MenuItem(Title:$sysparams_ecos$, Page:sysparams_ecos, Icon:\"icon-list\")\r\n    MenuItem(Title:$tokenrefund_list$, Page:tokenrefund_list, Icon:\"icon-list\")\r\n    MenuItem(Title:$tokens_transfer$, Page:tokens_transfer, Icon:\"icon-credit-card\")\r\n}",
            "Name": "default_menu",
            "Type": "menu"
        },
        {
            "Name": "catalog_ecosystems",
            "Columns": "[{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"image_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"flag_free\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"url_address\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"ecosystem_info\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"ecosystem_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"ecosystem_type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"ecosystem_number\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "laws",
            "Columns": "[\r\n    {\r\n        \"name\": \"name\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"page\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"voting_template_id\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    }\r\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "sysparams_candidate",
            "Columns": "[\r\n    {\r\n        \"name\": \"commission_address\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"comment\",\r\n        \"type\": \"text\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"deleted\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"host_ip\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"description\",\r\n        \"type\": \"text\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"date_created\",\r\n        \"type\": \"datetime\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"commission_pub\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"candidate_key_id\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    }\r\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "tokenrefund",
            "Columns": "[\r\n    {\r\n        \"name\": \"victim_key_id\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"attacker_key_id\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"amount\",\r\n        \"type\": \"money\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"note\",\r\n        \"type\": \"text\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"validator_key_id\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"blocked_at\",\r\n        \"type\": \"datetime\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"voting_id\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"result\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"status\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"closed_at\",\r\n        \"type\": \"datetime\",\r\n        \"conditions\": \"true\"\r\n    }\r\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "voting_templates",
            "Columns": "[\r\n    {\r\n        \"name\": \"voters\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"candidates\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"type_participants\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"init_contract\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"type\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"title\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"type_decision\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"quorum\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"subject\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"type_voting\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"volume\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"type_id\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"vacancies\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"contract_accept\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"accept_params\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"contract_reject\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"reject_params\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    }\r\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "APL_not_required,APL_required",
            "Name": "catalog_ecosystems_freetype",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "public_org,business,finance",
            "Name": "catalog_ecosystems_type",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "investors_number",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "tokenrefund_result1,tokenrefund_result2,tokenrefund_result3",
            "Name": "tokenrefund_result",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "tokenrefund_status1,tokenrefund_status2,tokenrefund_status3",
            "Name": "tokenrefund_status",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "voting_sysparams_template_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "voting_tokenrefund_template_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "voting_validators_template_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "voting_ves_template_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\r\n    SetTitle($catalog_ecosystems$)\r\n    AddToolButton(Title: $add$, Page: catalog_ecosystems_add, Icon: icon-plus)\r\n\r\n    If(#param_flag_free#==0){\r\n        SetVar(Name: v_where, Value: \"deleted=0\")\r\n    }.ElseIf(#param_flag_free#==1){\r\n        SetVar(Name: v_where, Value: \"deleted=0 and flag_free=1\")\r\n    }.ElseIf(#param_flag_free#==2){\r\n        SetVar(Name: v_where, Value: \"deleted=0 and flag_free=2\")\r\n    }.Else{\r\n        SetVar(Name: v_where, Value: \"deleted=0\")\r\n        SetVar(Name: param_flag_free, Value: 0)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-12 text-left){\r\n            Div(btn-group){\r\n                If(#param_flag_free#==0){\r\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $all$, Page: catalog_ecosystems, PageParams: \"param_flag_free=0\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $all$, Page: catalog_ecosystems, PageParams: \"param_flag_free=0\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n                If(#param_flag_free#==1){\r\n                    Span(Button(Body: Em(Class: fa fa-user-o) $not_need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=1\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-user-o) $not_need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=1\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n                If(#param_flag_free#==2){\r\n                    Span(Button(Body: Em(Class: fa fa-money) $need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=2\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-money) $need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=2\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            DBFind(Name: catalog_ecosystems, Source: src_catalog).Columns(\"id,ecosystem_number,ecosystem_name,ecosystem_type,image_id,flag_free\").Where(#v_where#).Custom(custom_logo){\r\n                DBFind(Name: binaries, Source: src_binaries).Columns(\"data\").Where(\"id=#image_id#\").Vars(img)\r\n                Image(Src: \"#img_data#\").Style(width:100px;)\r\n            }.Custom(custom_name){\r\n                LinkPage(Page: catalog_ecosystems_view, PageParams: \"v_id=#id#\"){\r\n                    Span(Class: h5 text-bold, Body: #ecosystem_name#)\r\n                }\r\n            }.Custom(custom_type){\r\n                Span(AppParam(App:#app_id#, Name: catalog_ecosystems_type, Index: #ecosystem_type#))\r\n            }.Custom(custom_free){\r\n                Span(AppParam(App:#app_id#, Name: catalog_ecosystems_freetype, Index: #flag_free#))\r\n            }.Custom(custom_ecosystem){\r\n                Span(Class: h5, Body: #ecosystem_number#)\r\n            }.Order(\"ecosystem_number\")\r\n\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Table(Source: src_catalog, Columns:\"$ecosystem_number$=custom_ecosystem,$logo$=custom_logo,$name$=custom_name,$type$=custom_type,$freetype$=custom_free\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "catalog_ecosystems",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name: ecosystems, Source: src_num)\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\r\n    AppParam(App:#app_id#, Name: catalog_ecosystems_type, Source: src_type)\r\n    AppParam(App:#app_id#, Name: catalog_ecosystems_freetype, Source: src_freetype)\r\n    Data(section1, \"name,type,res,req,src\"){\r\n        Ecosystem_number,select_validate,ecosystem,*,src_num\r\n        Logo,image,catalog_ecosystems_logo,*,\r\n        Ecosystem_name,input,catalog_ecosystems_name,*,\r\n        Ecosystem_type,select,catalog_ecosystems_type,*,src_type\r\n    }\r\n    Data(section2, \"name,type,res,req,src\"){\r\n        Flag_free,radio,catalog_ecosystems_freetype,*,src_freetype\r\n    }\r\n    Data(section3, \"name,type,res,req,src\"){\r\n        Description,textarea,catalog_ecosystems_description,*,\r\n        Conditions,textarea,catalog_ecosystems_conditions,*,\r\n    }\r\n    Data(section4, \"name,type,res,req,src\"){\r\n        Vde_page,input,vde_page,,\r\n        Vde_form_address,input,vde_form_desc,,\r\n    }\r\n    Data(section5, \"name,type,res,req,src\"){\r\n        Web_page,input,web_page,,\r\n        Web_form_address,input,web_form_desc,,\r\n    }\r\n    Data(section6, \"name,type,res,req,src\"){\r\n        Email,input,catalog_ecosystems_contact_email,,\r\n        Phone,input,catalog_ecosystems_contact_phone,,\r\n    }\r\n    Data(sections, \"section_name\"){\r\n        section1\r\n        section2\r\n        section3\r\n        section4\r\n        section5\r\n        section6\r\n    }\r\n\r\n    SetTitle($catalog_ecosystems_form$)\r\n    Div(breadcrumb){\r\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $catalog_ecosystems_form$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\r\n            Form(panel panel-primary){\r\n                Div(panel-body){\r\n                    ForList(sections){\r\n                        Div(list-group-item){\r\n                            ForList(#section_name#){\r\n                                Div(row){\r\n                                    Div(col-md-5 mt-sm text-right){\r\n                                        Label(){\r\n                                            Span(Body: LangRes(#res#))\r\n                                            If(#req#==*){\r\n                                                Span(Class: text-danger, Body:*)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-7 mb-sm text-left){\r\n                                        If(#type#==select_validate){\r\n                                            Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id).Validate(required)\r\n                                            InputErr(Name: #name#, required: need)\r\n                                        }\r\n                                        If(#type#==select){\r\n                                            Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id)\r\n                                        }\r\n                                        If(#type#==image){\r\n                                            ImageInput(Name: #name#, Width: 300, Ratio: 2/1)\r\n                                        }\r\n                                        If(#type#==input){\r\n                                            Input(Name: #name#)\r\n                                        }\r\n                                        If(#type#==textarea){\r\n                                            Input(Name: #name#, Type:textarea)\r\n                                        }\r\n                                        If(#type#==radio){\r\n                                            RadioGroup(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: catalog_ecosystems)\r\n                    Button(Contract: catalog_ecosystems_Add, Class: btn btn-primary, Page: catalog_ecosystems, Body: $send$)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "catalog_ecosystems_add",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name: catalog_ecosystems, Source: src_catalog).Columns(\"ecosystem_name,ecosystem_number\").Where(\"id=#v_id#\").Vars(prefix)\r\n    \r\n    SetTitle($request_membership$)\r\n    Div(breadcrumb){\r\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        LinkPage(#prefix_ecosystem_name#, catalog_ecosystems_view,, \"v_id=#v_id#\")\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $request_membership$)\r\n    }\r\n    \r\n    Div(row){\r\n        Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading){LangRes(request_membership)}\r\n                Form(panel-body){\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(For: pub_key){\r\n                                    Span(Body: LangRes(pub_key))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 text-left){\r\n                                Input(Class: form-control, Type: text, Name: pub_key)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(For: comment){\r\n                                    Span(Body: LangRes(comment))\r\n                                }\r\n                            }\r\n                            Div(col-md-9 text-left){\r\n                                Input(Name: comment, Class: form-control, Type: textarea, Value: no)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: catalog_ecosystems_view, PageParams: \"v_id=#v_id#\")\r\n                        Button(Body: LangRes(send), Class: btn btn-primary, Contract: catalog_ecosystems_Request, Params: \"ecosystem_num=#prefix_ecosystem_number#\", Page: catalog_ecosystems_view, PageParams: \"v_id=#v_id#\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "catalog_ecosystems_request",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\r\n    DBFind(Name: catalog_ecosystems, Source: src_catalog).Columns(\"id,ecosystem_name,ecosystem_type,ecosystem_number,image_id,flag_free,ecosystem_info->email,ecosystem_info->phone,ecosystem_info->description,ecosystem_info->conditions,url_address->vde_form_address,url_address->web_page,url_address->vde_page,url_address->web_form_address\").Where(\"id=#v_id#\").Vars(prefix)\r\n    \r\n    SetTitle($catalog_ecosystems_number$: #prefix_ecosystem_name#)\r\n    Div(breadcrumb){\r\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: #prefix_ecosystem_name#)\r\n    }\r\n    \r\n    Div(row){\r\n        Div(col-md-10 col-md-offset-1){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: text-bold h3, Body: #prefix_ecosystem_name# (##prefix_ecosystem_number#))\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(#prefix_image_id# > 0){\r\n                                    DBFind(Name: binaries, Source: src_binaries).Columns(\"data\").Where(\"id=#prefix_image_id#\").Vars(img)\r\n                                    Image(Src: \"#img_data#\").Style(width: 300px;)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(type)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: AppParam(App:#app_id#, Name: catalog_ecosystems_type, Index: #prefix_ecosystem_type#))\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(catalog_ecosystems_description)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_description#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(catalog_ecosystems_freetype)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: AppParam(App:#app_id#, Name: catalog_ecosystems_freetype, Index: #prefix_flag_free#))\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(catalog_ecosystems_conditions)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_conditions#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(vde_form_desc))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_form_address#)\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(vde_page))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_page#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(web_form_desc))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_form_address#)\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(web_page))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_page#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(catalog_ecosystems_contact_email))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_email#)\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(catalog_ecosystems_contact_phone))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_phone#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                DBFind(Name: keys, Source: src_keys).Where(\"id = #key_id#\").Vars(key)\r\n                If(#key_amount# > 0){\r\n                    DBFind(Name: membership_requests, Source: src_membership).Ecosystem(\"#prefix_ecosystem_number#\").Where(\"member_id = #key_id#\").Vars(request)\r\n                    If(#request_id#>0){\r\n                        Div(row form-group){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(#request_status# == 0){\r\n                                    Em(Class: fa fa-question-circle fa-5x text-warning)\r\n                                    Div(text-center h4 text-bold text-warning, Body: LangRes(request_wating))\r\n                                }\r\n                                If(#request_status# == 1){\r\n                                    Em(Class: fa fa-check-circle fa-5x text-success)\r\n                                    Div(text-center h4 text-bold text-success, Body: LangRes(request_accepted))\r\n                                }\r\n                                If(#request_status# == -1){\r\n                                    Em(Class: fa fa-minus-circle fa-5x text-danger)\r\n                                    Div(text-center h4 text-bold text-danger, Body: LangRes(request_rejected))\r\n                                }\r\n                            }\r\n                        }\r\n                        \r\n                    }.Else{\r\n                        Div(row form-group){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                Em(Class: fa fa-exclamation-circle fa-5x text-primary)\r\n                                Div(text-center h4 text-bold text-primary, Body: LangRes(request_not_sent))\r\n                            }\r\n                        }\r\n                        Div(panel-footer text-right){\r\n                            Button(Body: LangRes(send), Class: btn btn-primary, Page: catalog_ecosystems_request, PageParams: \"v_id=#v_id#\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "catalog_ecosystems_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n\r\n    SetTitle($sysparams_candidate_validators_form$)\r\n    Div(Class: breadcrumb){\r\n        LinkPage($sysparams_candidates$, sysparams_candidates)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $sysparams_candidate_validators_form$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){\r\n            Form(panel panel-primary){\r\n                Div(panel-body){\r\n                    Div(form-group) {\r\n                        Label(LangRes(host_ip)*)\r\n                        Input(Name: HostIp, Type: text, Placeholder: xxx.xxx.xxx.xxx).Validate(minLength:7, maxLength:15)\r\n                        InputErr(Name: HostIp, minLength: Value is too short, maxLength: Value is too long)\r\n                    }\r\n                    If(){\r\n                        Div(form-group) {\r\n                            Label(LangRes(commission_pub)*)\r\n                            Input(Name: CommissionPub, Type: text).Validate(minLength:128)\r\n                            InputErr(Name: CommissionPub, minLength: Invalid pub-key)\r\n                        }\r\n                    }\r\n                    Div(form-group) {\r\n                        Label(LangRes(commission_address)*)\r\n                        Input(Name: CommissionAddress, Type: text,Placeholder:xxxx-xxxx-xxxx-xxxx-xxxx).Validate(minLength:24, maxLength:24)\r\n                        InputErr(Name: CommissionAddress, minLength: Invalid address, maxLength: Invalid address)\r\n                    }\r\n                    Div(form-group) {\r\n                        Label(LangRes(description_equipment))\r\n                        Input(Name: Description, Type: textarea)\r\n                    }\r\n                    Div(form-group) {\r\n                        Label(LangRes(comment))\r\n                        Input(Name: Comment, Type: textarea)\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Div(pull-left){\r\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_candidates)\r\n                    }\r\n                    Button(Contract: sysparams_CandidateValidatorRequest, Class: btn btn-primary, Page: sysparams_candidates, Body: $send$)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "sysparams_candidate_validators_form",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\n    SetVar(template_id, AppParam(App:#application_id#, Name: voting_validators_template_id))\r\n    SetTitle($sysparams_candidates$)\r\n\r\n    DBFind(Name:sysparams_candidate, Source: src_candidates).Where(\"deleted=0\").Custom(_actions){\r\n        If(#template_id#>0){\r\n            Div(btn-group){\r\n                Input(Name:KeyId, Type: hidden, Value: #candidate_key_id#)\r\n                Input(Name:TemplateId, Type: hidden, Value: #template_id#)\r\n                Button(Contract: voting_TemplateRun, Page: voting_list, Class: btn btn-default fa fa-play)\r\n            }\r\n        }.Else{\r\n            Span($voting_template_not_found$,text-muted)\r\n        }\r\n\r\n    }.Custom(_date){\r\n        DateTime(DateTime: #date_created#, Format: YYYY-MM-DD HH:MI)\r\n    }\r\n\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $sysparams_candidates$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-12){\r\n            Div(panel panel-primary){\r\n                Form(table-responsive){\r\n                    Input(Name: Duration, Type: hidden, Value: 14)\r\n                    Table(Source: src_candidates, Columns: \"$id$=id,$host_ip$=host_ip,$commission_address$=commission_address,$description_equipment$=description,$comment$=comment,$date_created$=_date,$voting$=_actions\")\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: $add$, Class: btn btn-primary, Page: sysparams_candidate_validators_form)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "sysparams_candidates",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications,src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\nSetVar(template_id, AppParam(App:#application_id#, Name: voting_ves_template_id))\r\nDBFind(buffer_data).Where(\"member_id=#key_id# and key='metrics'\").Vars(m)\r\nJsonToSource(src_metrics,#m_value#)\r\n\r\nSetTitle($sysparams_ecos$)\r\nDBFind(ecosystems,ecos).Order(id).Custom(_actions){\r\n    Div(text-right){\r\n        If(#template_id#>0){\r\n            If(#is_valued#==0){\r\n                Input(Name: RowId, Type: hidden, Value: #id#)\r\n                Input(Name: NewValue, Type: hidden, Value: 1)\r\n                Button(Body: $start_voting_ves$, Class: btn btn-block btn-primary, Page: sysparams_ecos, Contract: voting_TemplateRun)\r\n            }\r\n        }.Else{\r\n            Span(voting id template not found in parameters, text-muted)\r\n        }\r\n    }\r\n}.Custom(_valued){\r\n    If(#is_valued#==1){\r\n        is valued\r\n    }\r\n}.Custom(_metrics){\r\n    If(#m_id#>0){\r\n        SetVar(eco_id,#id#)\r\n        ForList(src_metrics){\r\n            If(#key#==#eco_id#){\r\n                LinkPage(Body: `#value#`, Page:sysparams_metrics, PageParams:\"Id=#key#\")\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nData(form, \"Name,Type,Src\"){\r\n    Interval,number,\r\n    Aggregate,select,aggregates\r\n}\r\nData(aggregates, \"id,name\"){\r\n    max,Maximum\r\n    min,Minimum\r\n    avg,Average\r\n}\r\n\r\nDiv(content-wrapper){\r\n    Div(container){\r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                ForList(form){\r\n                    Div(row form-group){\r\n                        Div(col-sm-3 text-right){\r\n                            Label(For:#Name#){\r\n                                LangRes(#Name#)\r\n                            }\r\n                        }\r\n                        Div(col-sm-9){\r\n                            If(#Type#==datetime){\r\n                                Input(Name:#Name#, Type:date)\r\n                            }.ElseIf(#Type#==select){\r\n                                Select(Name: #Name#, Source: #Src#, NameColumn: name, ValueColumn: id)\r\n                            }.Else{\r\n                                Input(Name:#Name#, Type:#Type#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(panel-footer text-right){\r\n                Button(Body: LangRes(udpate_metrics), Page:sysparams_ecos, Class:btn btn-primary, Contract:sysparams_UpdateMetrics)\r\n            }\r\n        }\r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                Form(table-responsive){\r\n                    Input(Name: TableWritten, Type: hidden, Value: ecosystems)\r\n                    Input(Name: ColumnName, Type: hidden, Value: is_valued)\r\n                    Input(Name: Duration, Type: hidden, Value: 3)\r\n                    Input(Name: TemplateId, Type: hidden, Value: #template_id#)\r\n                    Table(ecos, \"$name$=name,=_valued,metrics=_metrics,=_actions\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
            "Name": "sysparams_ecos",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetTitle($system_params$)\r\nJsonToSource(nodes){\r\n    SysParam(full_nodes)\r\n}\r\nForList(nodes){\r\n    Div(#key_id#)\r\n}\r\nDBFind(system_parameters, src_sysparams).Order(id).Limit(250).Custom(_actions){\r\n    DBFind(contracts).Where(\"name='#name#'\").Columns(id).Vars(sp)\r\n    If(#sp_id#>0){\r\n        If(#name#==\"full_nodes\"){\r\n            Button(Class: btn btn-primary fa fa-edit, Page: sysparams_voting, PageParams: \"param_index=#id#,param_name=#name#\")\r\n        }.Else{\r\n            Button(Class: btn btn-primary fa fa-edit, Page: sysparams_voting, PageParams: \"param_index=#id#,param_name=#name#\")\r\n        }\r\n    }.Else{\r\n        condition contract not found\r\n    }\r\n}.Custom(_val){\r\n    Div(){\r\n        #value#\r\n    }.Style(max-width: 500px;overflow: hidden;)\r\n}\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        Span($system_params$,text-muted)\r\n    }\r\n    DBFind(Name: roles_participants, Source: roles).Columns(\"id,member->member_id,role->id,role->name,deleted\").Where(\"member->member_id='#key_id#' and role->id='3' and role->name='Validator' and deleted=0\").Vars(validator)\r\n    If(#validator_id#>0){\r\n        Div(row){\r\n            Div(col-md-6 col-md-offset-3){\r\n                Div(panel panel-primary text-center){\r\n                    Div(panel-heading){$validator_removing$}\r\n                    Div(panel-body text-center){$validator_removing_desc$}\r\n                    Div(panel-footer text-right){\r\n                        Button(Body: $resign$, Class: btn btn-danger, Page: sysparams_list, Contract: sysparams_ValidatorResign).Alert(Text: $want_resign$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Div(table-responsive){\r\n        Table(src_sysparams,\"ID=id,$name$=name,$value$=_val,=_actions\")\r\n    }\r\n}",
            "Name": "sysparams_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage(Body: LangRes(sysparams_ecos), Page:sysparams_ecos)\r\n        Span(\"/\",mh-sm)\r\n        Span(LangRes(sysparams_metrics), text-muted)\r\n    }\r\n    SetVar(title,\"LangRes(sysparams_metrics)\")\r\n    SetTitle(#title#)\r\n    Div(container){\r\n        If(GetVar(Id)){\r\n            SetVar(title,\"LangRes(sysparams_metrics): LangRes(ecosystem) ##Id#\")\r\n            SetTitle(#title#)\r\n            Data(tables, \"Name,Metric\"){\r\n                pages,ecosystem_pages\r\n                members,ecosystem_members\r\n                tx,ecosystem_tx\r\n            }\r\n            ForList(tables){\r\n                DBFind(metrics,src_metric).Where(\"key='#Id#' and metric='#Metric#'\").Order(\"time\").Count(count)\r\n                If(#count#>0){\r\n                    Div(h3){LangRes(#Name#)}\r\n                    Table(src_metric,\"$timestam$=time,$value$=value\")\r\n                }\r\n            }\r\n        }.Else{\r\n            Div(alert alert-warning){\r\n                Ecosystem id not found\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "sysparams_metrics",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\nSetVar(template_id, AppParam(App:#application_id#, Name: voting_sysparams_template_id))\r\nSetTitle($voting$)\r\n\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage($system_params$, sysparams_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $voting$)\r\n    }\r\n\r\n    If(And(#template_id#>0,#param_index#>0,#param_name#!=\"\")){\r\n        DBFind(system_parameters).Where(\"name='#param_name#'\").Vars(param)\r\n        DBFind(voting_templates).Columns(\"title\").Where(\"id=#template_id#\").Vars(template)\r\n        SetTitle(#template_title#)\r\n        Div(row){\r\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n                If(#param_name#!=\"full_nodes\"){\r\n                    Form(panel panel-primary){\r\n                        Div(panel-heading h3){#param_name#}\r\n                        Data(params, \"Name,Type,Val\"){\r\n                            OldValue,plain,#param_value#\r\n                            NewValue,textarea,\r\n                        }\r\n                        Div(panel-body){\r\n                            Input(Name:Duration, Type:hidden, Value:21)\r\n                            Input(Name:TemplateId, Type:hidden, Value:#template_id#)\r\n                            Input(Name:ColumnName, Type:hidden, Value:#param_name#)\r\n\r\n                            ForList(params){\r\n                                If(#Type#==hidden){\r\n                                    Input(Name: #Name#, Type:#Type#, Value:#Val#)\r\n                                }.Else{\r\n                                    Div(row form-group){\r\n                                        Div(col-md-3 text-right mt-sm){\r\n                                            Label(For: #Name#){LangRes(#Name#)}\r\n                                        }\r\n                                        Div(col-md-9 text-left){\r\n                                            If(#Type#==plain){\r\n                                                Div(list-group-item){\r\n                                                    #Val#\r\n                                                }\r\n                                            }.Else{\r\n                                                Input(Name: #Name#, Type:#Type#, Value:#Val#)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(panel-footer text-right){\r\n                            Div(pull-left){\r\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_list)\r\n                            }\r\n                            Button(Body: LangRes(voting), Class: btn btn-primary, Contract: voting_TemplateRun, Page: voting_list)\r\n                        }\r\n                    }\r\n                }.Else{\r\n                    Data(new_node_form, \"Name,Type,Placeholder,Value\"){\r\n                        TcpAddress,text,tcp address,\"\"\r\n                        ApiAddress,text,api address,\"\"\r\n                        KeyId,number,key id,#key_id#\r\n                        PubKey,text,public key,\"\"\r\n                    }\r\n                    Form(panel panel-primary){\r\n                        Div(panel-heading text-center h3){\r\n                            Span(#param_name#, text-uppercase): Span($add$ $new_value$, text-lowercase)\r\n                        }\r\n                        Div(panel-body){\r\n                            Input(Name:Duration, Type:hidden, Value:21)\r\n                            Input(Name:TemplateId, Type:hidden, Value:#template_id#)\r\n\r\n                            ForList(new_node_form){\r\n                                Div(row form-group){\r\n                                    Div(col-md-3 text-right){\r\n                                        Label(For: #Name#){LangRes(#Name#)}\r\n                                    }\r\n                                    Div(col-md-9 text-left){\r\n                                        Input(Name: #Name#, Placeholder: #Placeholder#, Type: #Type#, Value: #Value#)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(panel-footer text-right){\r\n                            Div(pull-left){\r\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_list)\r\n                            }\r\n                            Button(Body: LangRes(voting), Class: btn btn-primary, Contract: sysparams_StartNodeAdd, Page: voting_list)\r\n                        }\r\n                    }\r\n                    AppParam(App:#application_id#, Name:full_nodes_keys, Source:nodes_keys)\r\n                    SetVar(node_owner,)\r\n                    ForList(nodes_keys){\r\n                        If(#name#==\"key_id\"){\r\n                            SetVar(node_owner, 1)\r\n                        }\r\n                    }\r\n\r\n                    If(#node_owner#==1){\r\n                        Form(panel panel-primary){\r\n                            Div(panel-heading text-center h3){$delete_node$}\r\n                            Div(panel-body text-center){$delete_node_desc$}\r\n                            Div(panel-footer text-right){\r\n                                Button(Body: LangRes(delete), Class: btn btn-danger, Page: sysparams_list, Contract: sysparams_RemoveNode)\r\n                            }\r\n                        }\r\n                    }\r\n                    If(\"\" != SysParam(full_nodes)){\r\n                        Div(panel panel-primary){\r\n                            Div(panel-heading text-center h3){LangRes(full_nodes)}\r\n                            Div(panel-body text-center){\r\n                                Div(col-sm-12 text-center){\r\n                                    SysParam(full_nodes)\r\n                                }.Style(overflow-x:hidden)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        If(#param_index#>0){}.Else{\r\n            Div(col-md-12 alert alert-danger text-center){\r\n                Div(){LangRes(attention)}\r\n            }\r\n        }\r\n        If(#template_id#>0){}.Else{\r\n            Div(col-md-12 alert alert-danger text-center){\r\n                Div(){LangRes(voting_template_not_found)}\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "sysparams_voting",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#notific_id#>0){\r\n    DBFind(notifications).WhereId(#notific_id#).Columns(\"page_params->tokenrefund_id\").Vars(note)\r\n    DBFind(tokenrefund).WhereId(#note_page_params_tokenrefund_id#).Vars(tr)\r\n\r\n    Data(inputs,\"Name,Type,Res,Value\"){\r\n        Amount,number,amount,#tr_amount#\r\n        VictimAccount,text,tokenrefund_victim,#tr_victim_key_id#\r\n        SuspectAccount,text,tokenrefund_attacker,#tr_attacker_key_id#\r\n        Note,textarea,description,#tr_note#\r\n    }\r\n    Div(content-wrapper){\r\n        Div(row){\r\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n                Div(panel panel-primary){\r\n                    Div(panel-heading, Body: $tokenrefund_start$)\r\n                    Div(panel-body){\r\n                        ForList(inputs){\r\n                            Div(row form-group){\r\n                                Div(col-sm-4){LangRes(#Res#)}\r\n                                Div(col-sm-8){\r\n                                    If(#Type#==textarea){\r\n                                        #Value#\r\n                                    }.Else{\r\n                                        Input(Name: #Name#, Type: #Type#, Value: #Value#, Class: disabled, Disabled: true)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Button(Body: $approve$, Contract: tokenrefund_Accept, Params: \"Id=#tr_id#\", Page: tokenrefund_list, Class: btn btn-primary)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "tokenrefund_accept",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\n    SetTitle($tokenrefund_list$)\r\n\r\n    DBFind(Name: tokenrefund, Source: src).Order(id desc).Custom(_status){\r\n        If(#status#>0){\r\n            SetVar(sta,AppParam(App:#application_id#, Name: tokenrefund_status, Index: #status#))\r\n            LangRes(#sta#)\r\n        }.Else{\r\n            $tokenrefund_status0$\r\n        }\r\n    }.Custom(_result){\r\n        If(#result#>0){\r\n            SetVar(res,AppParam(App:#application_id#, Name: tokenrefund_result, Index: #result#))\r\n            LangRes(#res#)\r\n        }.Else{\r\n            $tokenrefund_result0$\r\n        }\r\n    }.Custom(_blocked){\r\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #blocked_at#)\r\n    }.Custom(_closed){\r\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #closed_at#)\r\n    }.Custom(_accounts){\r\n        Div(){$tokenrefund_victim$: #victim_key_id#}\r\n        Div(){$tokenrefund_attacker$: #attacker_key_id#}\r\n    }.Custom(_voting){\r\n        LinkPage(Page: voting_view, PageParams: \"vID=#voting_id#\"){##voting_id#}\r\n    }\r\n\r\n    Div(panel panel-primary){\r\n        Div(table-responsive){\r\n            Table(Source: src, Columns: \"$accounts$=_accounts,$amount$=amount,$description$=note,$validator_id$=validator_id,$blocked_at$=_blocked,$voting$=_voting,$result$=_result,$status$=_status,$closed$=_closed\")\r\n        }\r\n\r\n        Form(panel-footer text-right){\r\n            Button(Body: $request_refund$, Class: btn btn-primary, Page: tokenrefund_start)\r\n        }\r\n    }\r\n}\r\n\r\n",
            "Name": "tokenrefund_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Data(Source: inputs, Columns:\"name,type,res,placeholder\"){\r\n    Amount,number,amount,\"\"\r\n    VictimAccount,text,tokenrefund_victim,\"Key ID or Wallet\"\r\n    SuspectAccount,text,tokenrefund_attacker,\"Key ID or Wallet\"\r\n    Note,textarea,description,\"\"\r\n}\r\nDiv(content-wrapper){\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading, Body: $tokenrefund_start$)\r\n                Div(panel-body){\r\n                    ForList(Source: inputs){\r\n                        Div(row form-group){\r\n                            Div(col-sm-4){LangRes(#res#)}\r\n                            Div(col-sm-8){\r\n                                Input(Name: #name#, Type: #type#, Placeholder: #placeholder#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: $start_refund$, Contract: tokenrefund_Start, Page: tokenrefund_list, Class: btn btn-primary)\r\n                    Div(pull-left){\r\n                         Button(Body: LangRes(back), Class: btn btn-default, Page: tokenrefund_list)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "tokenrefund_start",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetTitle($tokens_transfer$)\r\nData(inputs, \"name,res\"){\r\n    RecipientId,recipient\r\n    Amount,amount\r\n}\r\nDiv(content-wrapper){\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading, Body: LangRes(tokens_transfer))\r\n                Div(panel-body){\r\n                    ForList(inputs){\r\n                        Div(form-group){\r\n                            Div(row){\r\n                                Div(col-md-3 text-right){Label(LangRes(#res#))}\r\n                                Div(col-md-9 text-left){\r\n                                    Input(Name: #name#, Value: \"\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Input(Name:SenderId, Value: #key_id#, Type:hidden)\r\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: tokens_transfer, Contract: tokenrefund_Transfer).Alert(Text: $want_send_tokens$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    DBFind(keys, src).Order(id).Custom(_address){\r\n        If(#id#==#key_id#){\r\n            Div(text-success){\r\n                Address(#id#)\r\n            }\r\n        }.Else{\r\n            Address(#id#)\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Table(src, \"=_address,Amount=amount\")\r\n        }\r\n    }\r\n    \r\n}",
            "Name": "tokens_transfer",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\nSetTitle($template_create$)\r\n\r\nIf(#TemplateId#>0){\r\n    DBFind(voting_templates, template).Where(id=#TemplateId#).Vars(template)\r\n    SetVar(title, #template_title#)\r\n    SetVar(typevoting, #template_type_voting#)\r\n    SetVar(volume, #template_volume#)\r\n    SetVar(subj, #template_subject#)\r\n    SetVar(quorum, #template_quorum#)\r\n    SetVar(voters, #template_voters#)\r\n    SetVar(candidates, #template_voters#)\r\n    SetVar(vacancies, #template_vacancies#)\r\n    SetVar(contract_init, #template_init_contract#)\r\n    SetVar(contract_accept, #template_contract_accept#)\r\n    SetVar(accept_params, #template_accept_params#)\r\n    SetVar(contract_reject, #template_contract_reject#)\r\n    SetVar(reject_params, #template_reject_params#)\r\n\r\n}.Else{\r\n    SetVar(template_id, 0)\r\n    SetVar(title, New voting)\r\n    SetVar(typevoting, 0)\r\n    SetVar(volume, 50)\r\n    SetVar(quorum, 51)\r\n    SetVar(subj, \"\")\r\n    SetVar(voters, \"\")\r\n    SetVar(candidates, \"\")\r\n    SetVar(vacancies, 1)\r\n    SetVar(contract_init, \"\")\r\n    SetVar(contract_accept, \"\")\r\n    SetVar(accept_params, \"\")\r\n    SetVar(contract_reject, \"\")\r\n    SetVar(reject_params, \"\")\r\n\r\n}\r\nIf(#TypeDecision#>0){\r\n    SetVar(typedec,#TypeDecision#)\r\n}.Else{\r\n    SetVar(typedec,0)\r\n}\r\nIf(#TypeParticipants#>0){\r\n    SetVar(typepart,#TypeParticipants#)\r\n}.Else{\r\n    SetVar(typepart,0)\r\n}\r\nAppParam(App:#application_id#, Name: type_voting_participants, Source: src_typepart)\r\nAppParam(App:#application_id#, Name: type_voting, Source: src_typevoting)\r\nAppParam(App:#application_id#, Name: type_voting_decisions, Source: src_typedec)\r\nDBFind(Name: roles, Source: src_roles).Where(\"deleted=0\").Order(id).Custom(name){\r\n    #role_name#\r\n}\r\n\r\nIf(#typedec#>0){\r\n    Data(data_inputs, \"data\"){\r\n        commons_req\r\n        decisions\r\n        participants\r\n        commons\r\n    }\r\n    Data(commons_req, \"name,type,res,star,value,control,src,desc\"){\r\n        Title,text,name,*,#title#,input,\"\",\"\"\r\n        TypeParticipants,text,participants,*,#typepart#,disabled,\"AppParam(App:#application_id#, Name: type_voting_participants, Index: #typepart#)\",\"\"\r\n        TypeDecision,text,decision,*,#typedec#,disabled,\"AppParam(App:#application_id#, Name: type_voting_decisions, Index: #typedec#)\",\"\"\r\n        TypeVoting,text,voting_type,*,#typevoting#,select,src_typevoting,\"\"\r\n        Volume,number,voting_volume,*,#volume#,validate,\"\",$voting_volume_desc$\r\n        Quorum,number,voting_quorum,*,#quorum#,validate,\"\",$voting_quorum_desc$\r\n        Subject,text,voting_subject,*,#subj#,input,\"\",\"\"\r\n    }\r\n    Data(commons, \"name,type,res,star,value,control,src,desc\"){\r\n        InitContract,text,voting_init_contract,\"\",#contract_init#,input,\"\",$voting_init_contract_desc$\r\n        ContractAccept,text,voting_contract_accept,\"\",#contract_accept#,contract,ParamsAccept,#accept_params#\r\n        ContractReject,text,voting_contract_reject,\"\",#contract_reject#,contract,ParamsReject,#reject_params#\r\n    }\r\n    If(Or(#typedec#==1,#typedec#==2)){\r\n        Data(decisions, \"name,type,res,star,value,control,src,desc\"){\r\n            Vacancies,number,vacancies,\"*\",#vacancies#,input,\"\",\"\"\r\n            Candidates,text,candidates_role,\"*\",#voters#,select,src_roles,\"\"\r\n        }\r\n    }.Else{\r\n        Data(decisions, \"name,type,res,star,value,control,src,desc\"){}\r\n    }\r\n    If(#typepart#==3){\r\n        Data(participants,\"name,type,res,star,value,control,src,desc\"){\r\n            Voters,text,voters_role,\"*\",#voters#,select,src_roles,\"\"\r\n        }\r\n    }.Else{\r\n        Data(participants,\"name,type,res,star,value,control,src,desc\"){}\r\n    }\r\n}.Else{\r\n    Data(data_inputs, \"data\"){\r\n        commons\r\n    }\r\n    Data(commons, \"name,type,res,star,value,control,src,desc\"){\r\n        TypeDecision,text,decision,*,#template_type_decision#,radio,src_typedec,\"\"\r\n        TypeParticipants,text,participants,*,#template_type_participants#,select,src_typepart,\"\"\r\n    }\r\n}\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage($voting_templates$, voting_templates)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $template_create$)\r\n    }\r\n    Div(row){\r\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading){LangRes(voting_params)}\r\n                Div(panel-body){\r\n                    ForList(data_inputs){\r\n                        ForList(#data#){\r\n                            Div(row form-group){\r\n                                Div(col-md-4 mt-sm text-right){\r\n                                    Label(For: #name#){\r\n                                        LangRes(#res#)\r\n                                        If(#star#==\"*\"){\r\n                                            Span(Class: text-danger, Body:*)\r\n                                        }\r\n                                    }\r\n                                }\r\n                                Div(col-md-8 text-left){\r\n                                    If(#control#==\"select\"){\r\n                                        Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id, Value: #value#)\r\n                                    }.ElseIf(#control#==\"disabled\"){\r\n                                        #src#\r\n                                        Input(Name: #name#, Type: hidden, Value: #value#)\r\n                                    }.ElseIf(#control#==\"input\"){\r\n                                        Input(Name: #name#, Value: #value#, Type: #type#)\r\n                                    }.ElseIf(#control#==\"validate\"){\r\n                                        Input(Name: #name#, Type: #type#, Value: #value#).Validate(minLength: 1)\r\n                                        InputErr(Name: #name#, minLength: Please enter #name#)\r\n                                    }.ElseIf(#control#==\"contract\"){\r\n                                        Div(row){\r\n                                            Div(col-md-6){\r\n                                                Input(Name: #name#, Type: #type#, Placeholder: $contract$, Value: #value#)\r\n                                            }\r\n                                            Div(col-md-6){\r\n                                                Input(Name: #src#, Type: #type#, Placeholder: $arguments$, Value: #desc#)\r\n                                            }\r\n                                        }\r\n                                    }.ElseIf(#control#==\"radio\"){\r\n                                        RadioGroup(Name: #name#, Value: #value#, Source: #src#, ValueColumn: id, NameColumn: name)\r\n                                    }\r\n                                    If(And(#desc#!=\"\",#desc#!=\"NULL\")){\r\n                                        P(Class: m0 text-muted, Body: #desc#)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                Div(panel-footer text-right){\r\n                    Div(pull-left){\r\n                        If(#typedec#>0){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_template_create, PageParams: \"TemplateId=#TemplateId#\")\r\n                        }.Else{\r\n                            If(#TemplateId#>0){\r\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_template_start, PageParams: \"TemplateId=#TemplateId#\")\r\n                            }.Else{\r\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_templates)\r\n                            }\r\n                        }\r\n                    }\r\n                    If(#typedec#>0){\r\n                        Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_templates, Contract: voting_TemplateStore)\r\n                    }.Else{\r\n                        Button(Body: LangRes(next), Class: btn btn-primary, Page: voting_template_create, PageParams: \"TemplateId=#TemplateId#,TypeDecision=Val(TypeDecision),TypeParticipants=Val(TypeParticipants)\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "voting_template_create",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\n    SetTitle($voting_start$)\r\n    If(#TemplateId#>0){\r\n        DBFind(Name:voting_templates, Source: templates).Where(id=#TemplateId#).Vars(template)\r\n        If(#template_voters#>0){\r\n            DBFind(Name:roles, Source: vid_roles).Columns(\"role_name\").Where(\"id=#template_voters#\").Vars(vid)\r\n            SetVar(v_role, \"#vid_role_name#\")\r\n        }.Else{\r\n            SetVar(v_role, \"\")\r\n        }\r\n\r\n        If(#template_candidates#>0){\r\n            DBFind(Name:roles, Source: cid_roles).Columns(\"role_name\").Where(\"id=#template_candidates#\").Vars(cid)\r\n            SetVar(c_role, \"#cid_role_name#\")\r\n        }.Else{\r\n            SetVar(c_role, \"\")\r\n        }\r\n        Data(inputs, \"res,value\"){\r\n            name,\"#template_title#\"\r\n            participants,\"AppParam(App:#application_id#, Name: type_voting_participants, Index: #template_type_participants#)\"\r\n            voting_type,\"AppParam(App:#application_id#, Name: type_voting, Index: #template_type_voting#)\"\r\n            decision,\"AppParam(App:#application_id#, Name: type_voting_decisions, Index: #template_type_decision#)\"\r\n            voting_volume,\"#template_volume#\"\r\n            voting_quorum,\"#template_quorum#\"\r\n            voting_subject,\"#template_subject#\"\r\n            voters,\"#v_role#\"\r\n            candidates,\"#c_role#\"\r\n            vacancies,\"#template_vacancies#\"\r\n            init_contract,\"#template_init_contract#\"\r\n            voting_contract_accept,\"#template_contract_accept#(#template_accept_params#)\"\r\n            voting_contract_reject,\"#template_contract_reject#(#template_reject_params#)\"\r\n            duration,\"Input(Name:Duration, Type:number, Value:3)\"\r\n        }\r\n\r\n        If(#template_type_decision#==3){\r\n            Data(decision_inputs, \"name,type,res,star,value,control\"){\r\n                TextDocument,textarea,text_document,*,\"\",textarea\r\n            }\r\n        }.ElseIf(#template_type_decision#==4){\r\n            If(#template_type_voting#==2){\r\n                Data(decision_inputs,\"name,type,res,star,value,control\"){\r\n                    ColumnName,text,system_param,*,\"\",input\r\n                    NewValue,text,value,*,\"\",input\r\n                }\r\n            }.Else{\r\n                Data(decision_inputs,\"name,type,res,star,value,control\"){\r\n                    TableWritten,text,table_to_written,*,\"\",input\r\n                    RowId,number,row_id,*,\"\",input\r\n                    ColumnName,text,column_name,*,\"\",input\r\n                    NewValue,text,value,*,\"\",input\r\n                }\r\n            }\r\n        }.Else{\r\n            Data(decision_inputs, \"name,type,res,star,value,control\"){}\r\n        }\r\n    }\r\n    Div(breadcrumb){\r\n        LinkPage($voting_templates$, voting_templates)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $voting_start$)\r\n    }\r\n\r\n    If(#TemplateId#>0){\r\n        Div(row){\r\n            Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\r\n                Form(panel panel-primary){\r\n                    Div(panel-heading){LangRes(voting_params)}\r\n                    Div(panel-body){\r\n                        ForList(inputs){\r\n                            Div(row form-group){\r\n                                Div(col-md-4 text-right){\r\n                                    Strong(LangRes(#res#))\r\n                                }\r\n                                Div(col-md-8 text-left){\r\n                                    If(\"#value#\"!=\"()\"){\r\n                                        #value#\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        ForList(decision_inputs){\r\n                            Div(row form-group){\r\n                                If(#control#!=\"textarea\"){\r\n                                    Div(col-md-4 mt-sm text-right){\r\n                                        Label(For: #name#){\r\n                                            LangRes(#res#)\r\n                                            If(#star#==\"*\"){\r\n                                                Span(Class: text-danger, Body:*)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-8 text-left){\r\n                                        If(#control#==\"input\"){\r\n                                            Input(Name: #name#, Value: #value#, Type: #type#)\r\n                                        }\r\n                                    }\r\n                                }\r\n                                If(#control#==\"textarea\"){\r\n                                    Div(col-md-12){\r\n                                        Label(For: #name#){LangRes(#res#)}\r\n                                        Input(Name: #name#, Type: textarea, Value: #value#)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer){\r\n                        Div(pull-left){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_templates)\r\n                        }\r\n                        Div(text-right){\r\n                            Button(Class: fa fa-copy btn btn-default, Page: voting_template_create, PageParams: \"TemplateId=#TemplateId#\")\r\n                            Button(Body: LangRes(voting_start), Class: btn btn-primary, Page: voting_list, Contract: voting_TemplateRun, Params: \"TemplateId=#TemplateId#\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(col-md-12 alert alert-danger text-center){\r\n            LangRes(attention)\r\n        }\r\n    }\r\n}",
            "Name": "voting_template_start",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\nSetTitle($voting_templates$)\r\nDBFind(voting_templates, src_templates).Custom(_participants){\r\n    AppParam(App:#application_id#, Name:type_voting_participants, #type_participants#)\r\n}.Custom(_decision){\r\n    AppParam(App:#application_id#, Name:type_voting_decisions, #type_decision#)\r\n}.Custom(_type){\r\n    AppParam(App:#application_id#, Name:type_voting, #type_voting#)\r\n}.Custom(_buttons){\r\n    Button(Class: btn btn-default fa fa-play, Page: voting_template_start, PageParams: \"TemplateId=#id#\")\r\n}.Custom(_contracts){\r\n    If(And(#init_contract#!=\"\",#init_contract#!=\"NULL\")){\r\n        Div(){#init_contract#}\r\n    }\r\n    If(And(#contract_accept#!=\"\",#contract_accept#!=\"NULL\")){\r\n        Div(){#contract_accept#}\r\n    }\r\n    If(And(#contract_reject#!=\"\",#contract_reject#!=\"NULL\")){\r\n        Div(){#contract_reject#}\r\n    }\r\n}.Custom(_vq){\r\n    #volume#/#quorum#\r\n}.Order(id desc).Count(template_count)\r\n\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $voting_templates$)\r\n    }\r\n    Form(panel panel-primary){\r\n        If(#template_count#>0){\r\n            Div(panel-body){\r\n                Div(table-responsive){\r\n                    Table(Source: src_templates, Columns:\"$id$=id,$title$=title,$voting_subject$=subject,$volume$/$quorum$=_vq,$voting_type$=_type,$participants$=_participants,$decision$=_decision,$vacancies$=vacancies,$contracts$=_contracts,=_buttons\")\r\n                }\r\n            }\r\n            Div(panel-footer text-right){\r\n                Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_template_create)\r\n            }\r\n        }.Else{\r\n            Div(panel-body text-center h3){\r\n                Voting templates not found\r\n            }\r\n            Div(panel-footer text-right){\r\n                Button(Body: Install default templates, Class: btn btn-primary, Page: voting_templates, Contract: voting_InstallTemplates)\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "voting_templates",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract catalog_ecosystems_Add {\r\n    data {\r\n        Ecosystem_name string\r\n        Ecosystem_number int\r\n        Logo string \"image\"\r\n        Ecosystem_type int\r\n        Description string\r\n        Conditions string\r\n        Flag_free int\r\n        Vde_form_address string \"optional\"\r\n        Vde_page string \"optional\"\r\n        Web_form_address string \"optional\"\r\n        Web_page string \"optional\"\r\n        Email string \"optional\"\r\n        Phone string \"optional\"\r\n    }\r\n    conditions {\r\n        var FOUNDER_ACCOUNT, DELEGATE_ACCOUNT string\r\n        FOUNDER_ACCOUNT = \"founder_account\"\r\n        DELEGATE_ACCOUNT = \"delegate_account\"\r\n        \r\n        if Size($Email) > 0 {\r\n            var emailParts int\r\n            emailParts = Split($Email, \"@\")\r\n            if Len(emailParts) != 2 {\r\n                warning \"Invalid email\"\r\n            }\r\n        }\r\n        \r\n        if Size($Logo) == 0 {\r\n            warning \"Required logo\"\r\n        }\r\n        var ecoExists map\r\n        ecoExists = DBFind(\"catalog_ecosystems\").Where(\"ecosystem_number=? and deleted=0\", $Ecosystem_number).Row()\r\n        if ecoExists {\r\n            info \"The ecosystem with same number already added\"\r\n        }\r\n\r\n        var isFounder, isDelegate bool\r\n        var founder, delegate map\r\n        founder = DBFind(\"parameters\").Where(\"name=?\", FOUNDER_ACCOUNT).Ecosystem($Ecosystem_number).Row()\r\n        isFounder = founder[\"value\"] == $key_id\r\n        \r\n        delegate = DBFind(\"parameters\").Where(\"name=?\", DELEGATE_ACCOUNT).Ecosystem($Ecosystem_number).Row()\r\n        if delegate {\r\n            isDelegate = delegate[\"value\"] == $key_id\r\n        }\r\n        if !(isFounder || isDelegate) {\r\n            warning \"Sorry, you can not add this ecosystem\"\r\n        }\r\n    }\r\n    \r\n    action {\r\n        var ecosystem_info map\r\n        ecosystem_info[\"description\"] = $Description\r\n        ecosystem_info[\"conditions\"] = $Conditions\r\n        ecosystem_info[\"email\"] = $Email\r\n        ecosystem_info[\"phone\"] = $Phone\r\n        \r\n        var url_address map\r\n        url_address[\"web_page\"] = $Web_page\r\n        url_address[\"web_form_address\"] = $Web_form_address\r\n        url_address[\"vde_page\"] = $Vde_page\r\n        url_address[\"vde_form_address\"] = $Vde_form_address\r\n        \r\n        var image_id int\r\n        image_id = DBInsert(\"binaries\", \"data\", $Logo)\r\n        \r\n        DBInsert(\"catalog_ecosystems\", \"ecosystem_name,ecosystem_number,ecosystem_type,image_id,ecosystem_info,url_address,flag_free\",\r\n        $Ecosystem_name, $Ecosystem_number, $Ecosystem_type, image_id, ecosystem_info, url_address, $Flag_free)\r\n    }\r\n}",
            "Name": "catalog_ecosystems_Add",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract catalog_ecosystems_Request {\r\n    data {\r\n        ecosystem_num int\r\n        pub_key string\r\n        comment string \"optional\"\r\n    }\r\n    \r\n    conditions {\r\n        if $ecosystem_num <= 1 {\r\n            warning \"Invalid number of Ecosystem\"\r\n        }\r\n        var requested string\r\n        requested = DBFind(\"membership_requests\").Where(\"member_id=?\", $key_id).Ecosystem($ecosystem_num).One(\"id\")\r\n        if requested {\r\n            warning \"Request was sent earlier\"\r\n        }\r\n        var id int\r\n        id = PubToID($pub_key)\r\n        if id != $key_id {\r\n            warning \"Invalid Public key\"\r\n        }\r\n    }\r\n    \r\n    action {\r\n        DBInsert($table_name, \"member_id,pub_key,comment\", $key_id, $pub_key, $comment)\r\n    }\r\n}",
            "Name": "catalog_ecosystems_Request",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_AcceptValidator{\r\n    data{\r\n        VotingTemplateId string\r\n        KeyId string\r\n        VotingId string\r\n    }\r\n    func conditions{\r\n        var app_id int\r\n        app_id = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\r\n        var templateId int\r\n        templateId = Int(AppParam(app_id,\"voting_validators_template_id\"))\r\n        \r\n        var params map\r\n        params = DBFind(\"voting_templates\").Where(\"id=?\", templateId).Row()\r\n        if params{\r\n            warning \"Voting params not found\"\r\n        }\r\n\r\n        $Id = Int($KeyId)\r\n        var candidateId, oldRoleId, roleId int\r\n        oldRoleId = 2 // Candidate for validators\r\n        roleId = 3 // Validator\r\n        \r\n        candidateId = DBFind(\"sysparams_candidate\").Where(\"id=?\",$Id).One(\"candidate_key_id\")\r\n        if !candidateId {\r\n            warning \"Candidate key id not found\"\r\n        }\r\n        $rowId = Int(DBFind(\"roles_participants\").Where(\"deleted=0 and role->id=? and member->member_id=?\", oldRoleId, candidateId).One(\"id\"))\r\n        \r\n        $roleId = Int(DBFind(\"roles\").Where(\"role->id=? and deleted=0\", roleId).One(\"id\"))\r\n        if $roleId == 0 {\r\n            warning \"Validator role not found\"\r\n        }\r\n    }\r\n    \r\n    func action{\r\n        if $rowId > 0 {\r\n            Roles_Unassign(\"row_id\", $rowId)\r\n        }\r\n        Roles_Assign(\"rid,member_id\", $roleId, $Id)\r\n    }\r\n}",
            "Name": "sysparams_AcceptValidator",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_CandidateValidatorRequest{\r\n    data{\r\n        HostIp string\r\n        // CommissionPub string\r\n        CommissionAddress string\r\n        Description string \"optional\"\r\n        Comment string \"optional\"\r\n    }\r\n    \r\n    func IsNotValidIp(ip string)bool{\r\n        var parts array\r\n        var i, lenParts, part int\r\n        parts = Split(ip, \".\")\r\n        \r\n        lenParts = Len(parts)\r\n        if lenParts != 4{\r\n            return true\r\n        }\r\n        while i< lenParts {\r\n            part = Int(parts[i])\r\n            if part < 0{\r\n                return true\r\n            }\r\n            if part > 255{\r\n                return true\r\n            }\r\n            i = i+1\r\n        }\r\n        \r\n        return false\r\n    }\r\n    \r\n    conditions{\r\n        // $CommissionPub = Replace($CommissionPub, \" \", \"\")\r\n        // info Sprintf(\"%v %v\", $CommissionAddress, PubToID($CommissionPub))\r\n        // if $CommissionAddress != PubToID($CommissionPub) {\r\n        // info \"Address or Public key are invalid\"\r\n        // }\r\n        \r\n        $CommissionAddress = AddressToId($CommissionAddress)\r\n        if !DBFind(\"keys\").Where(\"id=?\", $CommissionAddress).Row(){\r\n            warning \"Address not valid\"\r\n        }\r\n        \r\n        if IsNotValidIp($HostIp){\r\n            warning \"Please enter a valid ip address\"\r\n        }\r\n        var roleName string\r\n        var roleId int\r\n        var role map\r\n        roleName = \"Candidate for validators\"\r\n        roleId = 2\r\n        role = DBFind(\"roles\").Where(\"role_name=? and id=? and deleted=0\", roleName, roleId).Row()\r\n        if !role{\r\n            warning Sprintf(\"Role %q not found\", roleName)\r\n        }\r\n        Roles_Assign(\"rid,member_id\", roleId, $key_id)\r\n    }\r\n    \r\n    action{\r\n        \r\n        DBInsert(\"sysparams_candidate\", \"host_ip,commission_pub,commission_address,description,comment,candidate_key_id,timestamp date_created,deleted\", $HostIp, \"\", $CommissionAddress, $Description, $Comment, $key_id, $block_time, 0)\r\n        \r\n    }\r\n    \r\n}",
            "Name": "sysparams_CandidateValidatorRequest",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_CandidateValidator_Delete{\r\n    data{\r\n        Id int\r\n    }\r\n    conditions{\r\n        var candidateId, roleId int\r\n        roleId = 2 // Candidate for validators\r\n        candidateId = DBFind(\"sysparams_candidate\").Where(\"id=?\",$Id).One(\"candidate_key_id\")\r\n        \r\n        $role = DBFind(\"roles_participants\").Where(\"deleted=0 and role->id=? and member->member_id=?\", roleId, candidateId).Row()\r\n        if !$role {\r\n            warning \"Candidate role not found\"\r\n        }\r\n    }\r\n    action{\r\n        DBUpdate(\"sysparams_candidate\", $Id, \"deleted\", 1)\r\n        Roles_Unassign(\"row_id\", Int($role[\"id\"]))\r\n    }\r\n}",
            "Name": "sysparams_CandidateValidator_Delete",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_DelegateRefresh{\r\n    func NotInArray(val string, arr array) bool{\r\n        var i int\r\n        // info arr\r\n        while i< Len(arr){\r\n            if val == arr[i]{\r\n                return false\r\n            }\r\n            i=i+1\r\n        }\r\n        return true\r\n    }\r\n\r\n    conditions{\r\n        MainCondition()\r\n\r\n        var ROLE_NAME string ROLE_ID int\r\n        ROLE_NAME = \"Delegate\"\r\n        ROLE_ID = 7\r\n\r\n        // get role Id and Type\r\n        $role = DBFind(\"roles\").Where(\"role_name=? and id=? and deleted=0\", ROLE_NAME, ROLE_ID).Row()\r\n        if !$role{\r\n            warning Sprintf(\"Role %q not found\", ROLE_NAME)\r\n        }\r\n    }\r\n\r\n    action{\r\n        // get delegates ids\r\n        var delegateIds currentDelegates ecosystems array\r\n        ecosystems = DBFind(\"ecosystems\").Columns(\"id\").Ecosystem(1)\r\n        var i ecoId int\r\n        while i < Len(ecosystems) {\r\n            var eco delegateParam map\r\n            eco = ecosystems[i]\r\n            ecoId = Int(eco[\"id\"])\r\n            delegateParam = DBFind(\"parameters\").Where(\"name='delegate_account'\").Ecosystem(ecoId).Row()\r\n            if !delegateParam{\r\n                delegateParam = DBFind(\"parameters\").Where(\"name='founder_account'\").Ecosystem(ecoId).Row()\r\n            }\r\n\r\n            if NotInArray(delegateParam[\"value\"], delegateIds){\r\n                delegateIds = Append(delegateIds, delegateParam[\"value\"])\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        // remove old role assigns\r\n        currentDelegates = DBFind(\"roles_participants\").Columns(\"id,member->member_id\").Where(\"role->id=? and deleted=0\", $role[\"id\"])\r\n        i = 0\r\n        while i < Len(currentDelegates){\r\n            var delegate map\r\n            delegate = currentDelegates[i]\r\n            if NotInArray(delegate[\"member.member_id\"], delegateIds){\r\n                var id int\r\n                id = Int(delegate[\"id\"])\r\n                Println(id)\r\n                Roles_Unassign(\"row_id\", id)\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        // assign new roles\r\n        i = 0\r\n        while i < Len(delegateIds) {\r\n            var delegateId int\r\n            delegateId = Int(delegateIds[i])\r\n            var member map\r\n            member = DBFind(\"members\").Where(\"id=?\",delegateId).Row()\r\n            if member{\r\n                // check role dup\r\n                var assigned map\r\n                assigned = DBFind(\"roles_participants\").Where(\"member->member_id=? and role->id=? and deleted=0\", delegateId, $role[\"id\"]).Row()\r\n                if !assigned{\r\n                    Roles_Assign(\"rid,member_id\", Int($role[\"id\"]), Int(member[\"id\"]))\r\n                }\r\n            }\r\n            i=i+1\r\n        }\r\n    }\r\n}",
            "Name": "sysparams_DelegateRefresh",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_InitVoting{\r\n    data{\r\n        Name string\r\n        Value string\r\n    }\r\n\r\n    conditions{\r\n        if GetContractByName($Name){\r\n            var params map\r\n            params[\"Value\"] = $Value\r\n            CallContract($Name, params)\r\n        } else {\r\n            warning \"System parameter not found\"\r\n        }\r\n        // sysparams_InvestorRefresh()\r\n    }\r\n}",
            "Name": "sysparams_InitVoting",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_InvestorRefresh {\r\n    func NotInArray(val string, arr array) bool{\r\n        var i int\r\n        while i< Len(arr){\r\n            if val == Str(arr[i]){\r\n                return false\r\n            }\r\n            i=i+1\r\n        }\r\n        return true\r\n    }\r\n    conditions{\r\n        if $role_id != 3 {\r\n            // warning \"You not Validator. You can not to run this\"\r\n        }\r\n\r\n        // roles:id == 4 Investor with voting rights\r\n        $roleId = Int(DBFind(\"roles\").Where(\"id=4 and deleted=0\").One(\"id\"))\r\n        if !$roleId{\r\n            warning \"Investor role not found or deleted\"\r\n        }\r\n        var appId int\r\n        appId = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\r\n        $limitInvestors = Int(AppParam(appId,\"investors_number\"))\r\n        if $limitInvestors == 0 {\r\n            warning \"Investors number not set in application params\"\r\n        }\r\n    }\r\n\r\n    action{\r\n        // get investors ids\r\n        var keysInvestors assignedInvestors investorsIds assignedIds array\r\n        keysInvestors = DBFind(\"keys\").Columns(\"id\").Order(\"amount desc, id\").Limit($limitInvestors)\r\n        assignedInvestors = DBFind(\"roles_participants\").Columns(\"member->member_id\").Where(\"role->id=? and deleted=0\", $roleId)\r\n\r\n        // get ids\r\n        var i int\r\n        while i < Len(keysInvestors) {\r\n            var inv map\r\n            inv = keysInvestors[i]\r\n            investorsIds[i] = inv[\"id\"]\r\n            i = i + 1\r\n        }\r\n        i=0\r\n        while i < Len(assignedInvestors) {\r\n            var inv map\r\n            inv = assignedInvestors[i]\r\n            assignedIds[i] = inv[\"member.member_id\"]\r\n            i = i + 1\r\n        }\r\n\r\n        // remove old investors\r\n        i=0\r\n        while i < Len(assignedIds) {\r\n            if NotInArray(assignedIds[i], investorsIds){\r\n                var assigned map\r\n                assigned = DBFind(\"roles_participants\").Where(\"member->member_id=? and role->id=?\", assignedIds[i], $roleId).Row()\r\n                if assigned {\r\n                    Roles_Unassign(\"row_id\", Int(assigned[\"id\"]))\r\n                }\r\n            }\r\n            i = i+1\r\n        }\r\n        // add new investors\r\n        i=0\r\n        while i < Len(investorsIds) {\r\n            if NotInArray(investorsIds[i], assignedIds){\r\n                if DBFind(\"members\").Where(\"id=?\",investorsIds[i]).Row(){\r\n                    Roles_Assign(\"rid,member_id\", $roleId, Int(investorsIds[i]))\r\n                }\r\n            }\r\n            i = i+1\r\n        }\r\n    }\r\n}",
            "Name": "sysparams_InvestorRefresh",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_RemoveNode{\r\n    data{}\r\n    func nodesRemove(keyId int) array{\r\n        var nodesJSON string\r\n        var nodes, res array\r\n        nodesJSON = SysParamString(\"full_nodes\")\r\n        if !HasPrefix(nodesJSON, \"[\") {\r\n            // empty string nodes\r\n            return res\r\n        }\r\n        nodes = JSONDecode(nodesJSON)\r\n        var i, i_res int\r\n        while i < Len(nodes){\r\n            var node map\r\n            node = nodes[i]\r\n            if node[\"key_id\"] != keyId {\r\n                res[i_res] = node\r\n                i_res = i_res+1\r\n            }\r\n            i=i+1\r\n        }\r\n        return res\r\n    }\r\n    conditions{\r\n        if $original_contract != \"sysparams_ValidatorResign\"{\r\n            warning \"Unknown contract\"\r\n        }\r\n    }\r\n    \r\n    action{\r\n        var nodes array\r\n        nodes = nodesRemove($key_id)\r\n        var fullNodes string\r\n        fullNodes = JSONEncode(nodes)\r\n        DBUpdateSysParam(\"full_nodes\", fullNodes, \"\")\r\n    }\r\n}",
            "Name": "sysparams_RemoveNode",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_TemplateRun{\r\n    data{\r\n        TemplateId int\r\n        Duration int\r\n\r\n        KeyId int \"optional\"\r\n        TableWritten string \"optional\"\r\n        RowId string \"optional\"\r\n        ColumnName string \"optional\"\r\n        NewValue string \"optional\"\r\n        TextDocument string \"optional\"\r\n    }\r\n    func checkInput(value, name string){\r\n        if Size(value) == 0 || value == \"NULL\" {\r\n            warning Sprintf(\"%q not found\", name)\r\n        }\r\n    }\r\n    func emptyOrValue(value string) string{\r\n        if value == \"NULL\" {\r\n            value = \"\"\r\n        }\r\n        return value\r\n    }\r\n\r\n    conditions{\r\n        var template map\r\n        template = DBFind(\"voting_templates\").Where(\"id=?\",$TemplateId).Row()\r\n        if !template{\r\n            warning \"Voting template not found\"\r\n        }\r\n        if $KeyId != 0{\r\n            $keyFind = DBFind(\"keys\").Where(\"id=?\", $KeyId).Row()\r\n            if !$keyFind{\r\n                warning \"Key id not found\"\r\n            }\r\n        }\r\n        if $Duration <= 0{\r\n            $Duration = 3\r\n        }\r\n\r\n        var initContract string\r\n        initContract = template[\"init_contract\"]\r\n        $voters = template[\"voters\"]\r\n        $candidates = template[\"candidates\"]\r\n        $votingName = template[\"title\"]\r\n        $volume = Int(template[\"volume\"])\r\n        $quorum = Int(template[\"quorum\"])\r\n        $type_voting = Int(template[\"type_voting\"])\r\n        $participants = Int(template[\"type_participants\"])\r\n        $decision = Int(template[\"type_decision\"])\r\n        $vacancies = Int(template[\"vacancies\"])\r\n\r\n        if initContract != \"\" && initContract != \"NULL\"{\r\n            var initParam map\r\n            if $decision == 4 && $type_voting == 2 {\r\n                // voting for new value of sysparam\r\n                initParam[\"Name\"] = $ColumnName\r\n                initParam[\"Value\"] = $NewValue\r\n            }else{\r\n                initParam[\"KeyId\"] = $KeyId\r\n            }\r\n            CallContract(initContract, initParam)\r\n        }\r\n\r\n        $desc = Sprintf(\"template #%v\", $TemplateId)\r\n        if $type_voting < 1 || $type_voting > 2 {\r\n            warning \"Invalid type of voting\"\r\n        }\r\n        $contractAccept = emptyOrValue(template[\"contract_accept\"])\r\n        $acceptParams = emptyOrValue(template[\"accept_params\"])\r\n        $contractReject = emptyOrValue(template[\"contract_reject\"])\r\n        $rejectParams = emptyOrValue(template[\"reject_params\"])\r\n\r\n        if $decision == 1 || $decision == 2 {\r\n            // role-candidates\r\n            checkInput($candidates, \"Candidate role\")\r\n            var candidate map\r\n            candidate = DBFind(\"roles\").Where(\"id=? and deleted=0\", $candidates).Row()\r\n            if !candidate {\r\n                warning Sprintf(\"Candidates role (id: %v) not found\", $candidates)\r\n            }\r\n            $candidateId = Int(candidate[\"id\"])\r\n        }\r\n\r\n        if $decision == 3 {\r\n            // document approval\r\n            checkInput($TextDocument, \"TextDocument\")\r\n        }\r\n\r\n        if $decision == 4 {\r\n            // formal decision\r\n            // in the system vote need only a field and a value\r\n            checkInput($ColumnName, \"ColumnName\")\r\n            checkInput($NewValue, \"NewValue\")\r\n            if $type_voting == 2{\r\n                $desc = Sprintf(\"[template #%v] sysparam: %v, value: %v\", $TemplateId, $ColumnName, $NewValue)\r\n            }\r\n\r\n            if $type_voting == 1{\r\n                checkInput($TableWritten, \"TableWritten\")\r\n                checkInput($RowId, \"RowId\")\r\n                $desc = Sprintf(\"[template #%v] table: %v, column: %v, ID: %v, value: %v\", $TemplateId, $TableWritten, $ColumnName, $RowId, $NewValue)\r\n            }\r\n            if $RowId == \"\" || $RowId == \"NULL\"{\r\n                $RowId = 0\r\n            }\r\n\r\n        }\r\n        // check duplicated\r\n        // var isCreated map\r\n        // isCreated = DBFind(\"votings\").Where(\"voting->name=? and voting->description=? and deleted=0\", $votingName, $desc).Row()\r\n        // if isCreated{\r\n        // info \"Voting already created\"\r\n        // }\r\n\r\n\r\n        if $participants == 3 {\r\n            // if the type of the participants \"in role\" - check the role\r\n            var role map\r\n            role = DBFind(\"roles\").Where(\"id=? and deleted=0\", $voters).Row()\r\n            if !role {\r\n                warning Sprintf(\"Voters role (id: %v) not found\", $voters)\r\n            }\r\n            $roleId = Int(role[\"id\"])\r\n        }\r\n    }\r\n\r\n    action{\r\n        var votingId int\r\n        // must be installed in voting_CreateNew\r\n        votingId = voting_CreateNew(\"voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval\", $votingName, $type_voting, $desc, $participants, $decision, $volume, $quorum, $Duration)\r\n\r\n        if votingId == 0 {\r\n            warning \"votingId is zero\"\r\n        }\r\n        // the default argument for Contract\r\n        var defaultParams string\r\n        defaultParams = Sprintf(`{\"VotingTemplateId\":\"%v\",\"KeyId\":\"%v\",\"VotingId\":\"%v\"}`, $TemplateId, $KeyId, votingId)\r\n\r\n        if Size($acceptParams) == 0{\r\n            $acceptParams = defaultParams\r\n        }\r\n        if Size($rejectParams) == 0{\r\n            $rejectParams = defaultParams\r\n        }\r\n\r\n        if $decision == 1 || $decision == 2{\r\n            // 1. Role candidates with the registration of participants on request\r\n            // 2. Role candidates with manual registration of the participants\r\n            voting_SubjectCandidates(\"votingID,memberID\", votingId, $KeyId)\r\n            voting_SubjectSettings(\"votingID,roleID,vacancies,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", votingId, $candidateId, $vacancies, $contractAccept, $acceptParams, $contractReject,$rejectParams)\r\n        }\r\n        if $decision == 3 {\r\n            // Document approval\r\n            voting_SubjectDocument(\"votingID,text_document,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", votingId,$TextDocument, $contractAccept, $acceptParams, $contractReject, $rejectParams)\r\n        }\r\n\r\n        if $decision == 4 {\r\n            // Formal decision\r\n            voting_SubjectFormal(\"votingID,description,table_to_written,row_id,column_name,written_value,contract_accept,contract_accept_params,contract_reject,contract_reject_params\",votingId, $desc, $TableWritten, $RowId, $ColumnName, $NewValue, $contractAccept, $acceptParams, $contractReject, $rejectParams)\r\n\r\n        }\r\n\r\n        if $decision == 5 {\r\n            // Execution of the contract\r\n            voting_SubjectContract(\"votingID,contract_accept,contract_accept_params,contract_reject,contract_reject_params\",votingId,$contractAccept, $acceptParams, $contractReject, $rejectParams)\r\n        }\r\n        if $participants == 3 {\r\n            // participants: \"by role\"\r\n            voting_Invite(\"votingID,var_id\", votingId, $roleId)\r\n        }\r\n        if $participants == 1 {\r\n            // if the participants are \"all\", the invite has already occurred in \"voting_CreateNew\"\r\n        }\r\n    }\r\n}",
            "Name": "voting_TemplateRun",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_StartVotingValidator{\r\n    data{\r\n        KeyId int\r\n    }\r\n    \r\n    conditions{\r\n        ContractConditions(\"MainCondition\")\r\n        $candidate = DBFind(\"sysparams_candidate\").Where(\"candidate_key_id=? and deleted=0\", $KeyId).Row()\r\n        if !$candidate{\r\n            warning \"Candidate not found\"\r\n        }\r\n    }\r\n    action{\r\n        sysparams_DelegateRefresh()\r\n    }\r\n}",
            "Name": "sysparams_StartVotingValidator",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_UpdateFullNodesKeysList{\r\n    data{}\r\n    conditions{\r\n        var appId int\r\n        appId = Int(DBFind(\"applications\").Where(\"name='Basic application' and deleted=0\").One(\"id\"))\r\n        $FULL_NODES_KEYS = \"full_nodes_keys\"\r\n        $FULL_NODES = \"full_nodes\"\r\n        $paramId = Int(DBFind(\"app_params\").Where(\"app_id=? and name=?\", appId, $FULL_NODES_KEYS).One(\"id\"))\r\n    }\r\n\r\n    action{\r\n        var nodesJson string\r\n        nodesJson = SysParamString($FULL_NODES)\r\n        var nodes keys array\r\n        if HasPrefix(nodesJson, \"[\"){\r\n            nodes = JSONDecode(nodesJson)\r\n        }\r\n\r\n        var i int\r\n        while i<Len(nodes){\r\n            var node map\r\n            node = nodes[i]\r\n            keys[i] = node[\"key_id\"]\r\n            i=i+1\r\n        }\r\n        var keysList cond string\r\n        keysList = Join(keys, \",\")\r\n        cond = `ContractConditions(\"MainCondition\")`\r\n        if $paramId > 0 {\r\n            DBUpdate(\"app_params\", $paramId, \"value,conditions\", keysList, cond)\r\n        }else{\r\n            DBInsert(\"app_params\", \"name,value,conditions\", $FULL_NODES_KEYS, keysList, cond)\r\n        }\r\n    }\r\n}",
            "Name": "sysparams_UpdateFullNodesKeysList",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_UpdateMetrics{\r\n    data{\r\n        Interval string\r\n        Aggregate string\r\n    }\r\n    func mapping(items array)map{\r\n        var mapout map, i int\r\n        while i<Len(items){\r\n            var k v string, item map\r\n            item = items[i]\r\n            k = item[\"key\"]\r\n            v = item[\"value\"]\r\n            mapout[k] = v\r\n            i=i+1\r\n        }\r\n        return mapout\r\n    }\r\n    conditions{\r\n        if $Interval <= 0 {\r\n            $Interval = 1\r\n        }\r\n        var current_year int\r\n        current_year = 2018\r\n        if $Interval > (current_year - 1970)*365 {\r\n            warning \"Interval too big\"\r\n        }\r\n        $interval = Sprintf(\"%v days\", $Interval)\r\n    }\r\n\r\n    action{\r\n        var pages members txs array, metrics map\r\n        pages = DBSelectMetrics(\"ecosystem_pages\", $interval, $Aggregate)\r\n        members = DBSelectMetrics(\"ecosystem_members\", $interval, $Aggregate)\r\n        txs = DBSelectMetrics(\"ecosystem_tx\", $interval, $Aggregate)\r\n        var mPages mMembers mTxs map\r\n        mPages = mapping(pages)\r\n        mMembers = mapping(members)\r\n        mTxs = mapping(txs)\r\n        var i int\r\n        while i<Len(pages){\r\n            var t map, k string\r\n            t = pages[i]\r\n            k = t[\"key\"]\r\n            metrics[k] = Sprintf(\"pages: %v, members: %v, tx: %v; [%v, %v]\", mPages[k], mMembers[k], mTxs[k], $interval, $Aggregate)\r\n            i=i+1\r\n        }\r\n\r\n        if Len(pages)>0{\r\n            buffer_Manager(\"Action,Key,Val\", \"set\", \"metrics\", JSONEncode(metrics))\r\n        }\r\n    }\r\n}",
            "Name": "sysparams_UpdateMetrics",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_ValidatorResign{\r\n    data{}\r\n\r\n    conditions{\r\n        $assigned = DBFind(\"roles_participants\").Columns(\"id,member->member_id,role->id,role->name,deleted\").Where(\"member->member_id=? and role->id='3' and role->name='Validator' and deleted=0\", $key_id).One(\"id\")\r\n        if !$assigned {\r\n            warning \"You are not a validator\"\r\n        }\r\n    }\r\n\r\n    action{\r\n        Roles_Unassign(\"row_id\", Int($assigned))\r\n        sysparams_RemoveNode()\r\n    }\r\n}",
            "Name": "sysparams_ValidatorResign",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_Transfer {\r\n    data {\r\n        SenderId string \"optional\"\r\n        RecipientId string\r\n        Amount string\r\n    }\r\n    \r\n    conditions {\r\n        if !($SenderId == $key_id || (Size($SenderId) > 0 && ($original_contract == \"voting_AcceptDecision\" || $original_contract == \"tokenrefund_Accept\"))) {\r\n            error \"sender id error\"\r\n        }\r\n        var addressLen int\r\n        addressLen = 24\r\n        \r\n        $amount = Money($Amount)\r\n        if $SenderId == \"\"{\r\n            $SenderId = Sprintf(\"%v\", $key_id)\r\n        }\r\n        if $amount <= 0 {\r\n            error \"tokenrefund_Transfer. Amount less than or equal to zero\"\r\n        }\r\n        \r\n        if !HasPrefix($SenderId, \"-\") && Contains($SenderId, \"-\"){\r\n            // is address. convert to key id\r\n            $SenderId = Sprintf(\"%v\", AddressToId($SenderId))\r\n        }\r\n        if !HasPrefix($RecipientId, \"-\") && Contains($RecipientId, \"-\"){\r\n            // is address. convert to key id\r\n            $RecipientId = Sprintf(\"%v\", AddressToId($RecipientId))\r\n        }\r\n        \r\n        if Size($SenderId) > addressLen{\r\n            $SenderId = Sprintf(\"%v\", PubToID($SenderId))\r\n        }\r\n        if Size($RecipientId) > addressLen{\r\n            $RecipientId = Sprintf(\"%v\", PubToID($RecipientId))\r\n        }\r\n        \r\n        \r\n        var sender map\r\n        sender = DBFind(\"keys\").Where(\"id=?\", $SenderId).Row()\r\n        if !sender{\r\n            error \"tokenrefund_Transfer. Sender is invalid\"\r\n        }\r\n        if sender[\"blocked\"] == 1 {\r\n            error \"Sender blocked\"\r\n        }\r\n        if sender[\"amount\"] < $amount{\r\n            error Sprintf(\"The number of tokens of the sender (%v) is not enough\", sender[\"amount\"])\r\n        }\r\n    }\r\n    \r\n    action {\r\n        DBUpdate(\"keys\", Int($SenderId),\"-amount\", $amount)\r\n        DBUpdate(\"keys\", Int($RecipientId),\"+amount\", $amount)\r\n    }\r\n}",
            "Name": "tokenrefund_Transfer",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_AcceptAdminNotification{\r\n    data{\r\n        Id string\r\n    }\r\n\r\n    conditions{\r\n        $tokenrefund = DBFind(\"tokenrefund\").Where(\"id=?\", $Id).Row()\r\n        if !$tokenrefund{\r\n            error \"tokenrefund not found\"\r\n        }\r\n    }\r\n    action{\r\n        // admin Notification for transfering tokens\r\n        // Notification role id 1 == admin\r\n        var roleId closureType sender int\r\n        roleId = 1 // admin\r\n        closureType = 2 // multiple\r\n        sender = 1\r\n        var icon header body page string\r\n        icon = \"icon-envelope\"\r\n        header = \"tokenrefund: Accept decision\"\r\n        body = \"A vote for a return token is successfully completed\"\r\n        page = \"tokenrefund_accept\"\r\n        var params map\r\n        params[\"tokenrefund_id\"] = $Id\r\n\r\n        notifications_Send(\"rid,closure_type,sender,icon_name,text_header,text_body,page_name,params_map,member_id\", roleId, closureType, sender, icon, header, body, page, JSONEncode(params),0)\r\n    }\r\n}",
            "Name": "tokenrefund_AcceptAdminNotification",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_CheckCSSF{\r\n    conditions{\r\n        var isValid bool\r\n        if $role_id == 12 {\r\n            // Financial institution\r\n            isValid = true\r\n        }\r\n        if $role_id == 1 {\r\n            // Apla Consensus asbl\r\n            isValid = true\r\n        }\r\n        if !isValid {\r\n            error \"Condition is not valid\"\r\n        }\r\n    }\r\n    action{}\r\n}",
            "Name": "tokenrefund_CheckCSSF",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_Reject{\r\n    data{\r\n        Id string\r\n    }\r\n    \r\n    func unblockAccounts(victimId, attackerId string){\r\n        if victimId==0 {\r\n            error \"unblockAccounts. invalid victim key\"\r\n        }\r\n        if attackerId==0{\r\n            error \"unblockAccounts. invalid attacker key\"\r\n        }\r\n        DBUpdate(\"keys\", Int(victimId), \"blocked\", 0)\r\n        DBUpdate(\"keys\", Int(attackerId), \"blocked\", 0)\r\n    }\r\n    \r\n    conditions{\r\n        $tokenrefund = DBFind(\"tokenrefund\").Where(\"id=?\", $Id).Row()\r\n        if !$tokenrefund{\r\n            error \"tokenrefund not found\"\r\n        }\r\n    }\r\n    \r\n    action{\r\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\r\n        // status 3: closed; 1: return cancelled\r\n        DBUpdate(\"tokenrefund\", Int($tokenrefund[\"id\"]), \"status,result\", 3,1)\r\n    }\r\n}",
            "Name": "tokenrefund_Reject",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_Start{\r\n    data{\r\n        VictimAccount string\r\n        SuspectAccount string\r\n        Amount int\r\n        Note string\r\n    }\r\n    func blockAccounts(victimId, attackerId int){\r\n        if victimId==0 {\r\n            error \"unblockAccounts. invalid victim key\"\r\n        }\r\n        if attackerId==0{\r\n            error \"unblockAccounts. invalid attacker key\"\r\n        }\r\n        DBUpdate(\"keys\", victimId, \"blocked\", 1)\r\n        DBUpdate(\"keys\", attackerId, \"blocked\", 1)\r\n    }\r\n    func getKeyId(test string) int{\r\n        if Len(Split(test, \"-\")) > 1 {\r\n            // probably it is address\r\n            return AddressToId(test)\r\n        }\r\n        if \"invalid\" != IdToAddress(Int(test)){\r\n            // probably it is key_id\r\n            return Int(test)\r\n        }\r\n        return 0\r\n    }\r\n\r\n    conditions{\r\n        if $Amount <= 0{\r\n            error \"Amount not valid\"\r\n        }\r\n        if Size($Note) == 0{\r\n            error \"Please add description\"\r\n        }\r\n        var victim attacker int\r\n        victim = getKeyId($VictimAccount)\r\n        attacker = getKeyId($SuspectAccount)\r\n        if victim == 0{\r\n            error \"Victim address not valid\"\r\n        }\r\n        if attacker == 0{\r\n            error \"Suspect address not valid\"\r\n        }\r\n        $victimId = victim\r\n        $attackerId = attacker\r\n\r\n        var app_id int\r\n        app_id = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\r\n        var template_id int\r\n        template_id = Int(AppParam(app_id,\"voting_tokenrefund_template_id\"))\r\n        if template_id <= 0 {\r\n            warning \"Template id not found\"\r\n        }\r\n\r\n        $template = DBFind(\"voting_templates\").Where(\"id=?\", template_id).Row()\r\n        $votersRoleId = Int($template[\"voters\"])\r\n        $votingName = $template[\"title\"]\r\n        $typeParticipants = 3 // add participants by role\r\n        $typeDecision = 5 // the launch of the contract\r\n        $typeVoting = 2 // the voting system\r\n        $volume = Int($template[\"volume\"])\r\n        $quorum = Int($template[\"quorum\"])\r\n        $contractAccept = $template[\"contract_accept\"]\r\n        $contractReject = $template[\"contract_reject\"]\r\n        var initContract string\r\n        initContract = $template[\"init_contract\"]\r\n        if Size(initContract) > 4 { // greater then \"NULL\"\r\n            var m map\r\n            CallContract(initContract, m)\r\n        }\r\n        $desc = Sprintf(\"%v (victim: %v, attacker: %v, amount: %v)\", $votingName, $victimId, $attackerId, $Amount)\r\n\r\n        if !DBFind(\"roles_participants\").Where(\"role->id=? and deleted=0\", $votersRoleId).One(\"id\") {\r\n            warning Sprintf(\"Role (id: %v) does not contain members\", $votersRoleId)\r\n        }\r\n\r\n        if DBFind(\"votings\").Where(\"voting->name=? and voting->description=? and deleted=0\", $votingName, $desc).Row(){\r\n            // info \"Voting already created\" // debug: uncomment on the prod\r\n        }\r\n    }\r\n\r\n    action{\r\n        blockAccounts($victimId,$attackerId)\r\n\r\n        var votingId status result closure sender int\r\n        var icon header body page interval_days string\r\n        interval_days = \"3\"\r\n        votingId = voting_CreateNew(\"voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval\", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $volume, $quorum, interval_days)\r\n\r\n        status = 1 // 0.Accounts blocked 1.Discussion 2.Vote 3.Closed\r\n        result = 0 // 0. discussion and voting 1. cancelled return 2. the tokens returned\r\n        var params map\r\n        params[\"Id\"] = DBInsert(\"tokenrefund\", \"victim_key_id,attacker_key_id,amount,note,validator_key_id,blocked_at,voting_id,status,result\", $victimId, $attackerId, $Amount, $Note, $key_id, \"Now()\", votingId,status,result)\r\n        var paramsJSON string\r\n         paramsJSON  = JSONEncode(params)\r\n        \r\n\r\n        voting_SubjectContract(\"votingID,contract_reject,contract_accept,contract_reject_params,contract_accept_params\", votingId, $contractReject, $contractAccept, paramsJSON, paramsJSON)\r\n\r\n        voting_Invite(\"votingID,var_id\", votingId, $votersRoleId)\r\n\r\n        closure = 2\r\n        sender = 1 // from member\r\n        icon = \"icon-bubbles\"\r\n        header = \"Voting for tokens refund\"\r\n        body = $desc\r\n        page = \"voting_view\"\r\n        var params map\r\n        params[\"voting_id\"] = votingId\r\n        notifications_Send(\"rid,closure_type,sender,icon_name,text_header,text_body,page_name,params_map,member_id\", $votersRoleId, closure, sender, icon, header, body, page, JSONEncode(params), 0)\r\n    }\r\n}",
            "Name": "tokenrefund_Start",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_Accept{\r\n    data{\r\n        Id string\r\n    }\r\n    func closeNotes(){\r\n        var notes array\r\n        notes = DBFind(\"notifications\").Where(\"page_name='voting_view' and page_params->voting_id=?\", $votingID)\r\n        var i int\r\n        while i < Len(notes){\r\n            var note map\r\n            note = notes[i]\r\n            var noteId int\r\n            noteId = Int(note[\"id\"])\r\n            notifications_Close(\"notific_id\", noteId)\r\n            i=i+1\r\n        }\r\n    }\r\n    func refundAmount(victimId, attackerId, amount string){\r\n        tokenrefund_Transfer(\"SenderId,RecipientId,Amount\", attackerId, victimId, amount)\r\n    }\r\n    func unblockAccounts(victimId, attackerId string){\r\n        if victimId==0 {\r\n            error \"unblockAccounts. invalid victim key\"\r\n        }\r\n        if attackerId==0{\r\n            error \"unblockAccounts. invalid attacker key\"\r\n        }\r\n        DBUpdate(\"keys\", Int(victimId), \"blocked\", 0)\r\n        DBUpdate(\"keys\", Int(attackerId), \"blocked\", 0)\r\n    }\r\n\r\n    conditions{\r\n        $tokenrefund = DBFind(\"tokenrefund\").Where(\"id=?\", $Id).Row()\r\n        if !$tokenrefund{\r\n            error \"tokenrefund not found\"\r\n        }\r\n        $votingID = $tokenrefund[\"voting_id\"]\r\n    }\r\n\r\n    action{\r\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\r\n        closeNotes()\r\n        if $tokenrefund[\"result\"] == 2 || $tokenrefund[\"status\"] == 3{\r\n            return\r\n        }\r\n        refundAmount($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"],$tokenrefund[\"amount\"])\r\n        // status 3: closed; result 2: the tokens returned\r\n        DBUpdate(\"tokenrefund\", Int($tokenrefund[\"id\"]), \"status,result\", 3,2)\r\n    }\r\n}",
            "Name": "tokenrefund_Accept",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_InstallTemplates{\r\n    data{}\r\n    conditions{}\r\n\r\n    action{\r\n        var columns string\r\n        columns = \"volume,init_contract,contract_reject,contract_accept,title,vacancies,candidates,reject_params,type_decision,type_voting,type_participants,quorum,voters,subject,accept_params,type\"\r\n\r\n        // validator\r\n        DBInsert(\"voting_templates\", columns, 70, \"sysparams_StartVotingValidator\", \"\", \"sysparams_AcceptValidator\", \"Voting for Validator\", 1, 2, \"\", 2, 2, 3, 51, 5, \"Validator\", \"\",\"law\")\r\n\r\n        // system param\r\n        DBInsert(\"voting_templates\", columns, 70, \"\", \"\", \"\", \"Voting for System param value\", 0, 4, \"\", 4, 2, 3, 51, 3, \"System param\", \"\",\"law\")\r\n\r\n        // valued ecosystem\r\n        DBInsert(\"voting_templates\", columns, 70, \"\", \"\", \"\", \"Voting for Valued Ecosystem\", 0, 0, \"\", 4, 1, 3, 51, 3, \"Valued ecosystem\", \"\",\"law\")\r\n\r\n        // tokenrefund\r\n        DBInsert(\"voting_templates\", columns, 70, \"\", \"tokenrefund_Reject\", \"tokenrefund_Accept\", \"Token Refund\", 0, 0, \"\", 0, 0, 3, 51, 3, \"Token refund\", \"\",\"law\")\r\n    }\r\n}",
            "Name": "voting_InstallTemplates",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_StartNodeAdd{\r\n    data{\r\n        TcpAddress string\r\n        ApiAddress string\r\n        KeyId int\r\n        PubKey string\r\n        TemplateId int\r\n        Duration int\r\n    }\r\n    func warn(name, detail string){\r\n        warning Sprintf(\"%v invalid (%v)\", name, detail)\r\n    }\r\n    func checkApiAddress(addr string){\r\n        var name string\r\n        name = \"API Address\"\r\n        if Size(addr) == 0 {\r\n            warn(name, \"size\")\r\n        }\r\n        if !(HasPrefix(addr, \"http://\") || HasPrefix(addr, \"https://\")) {\r\n            warn(name, \"protocol\")\r\n        }\r\n        if Contains(addr, \" \") {\r\n            warn(name, \"space\")\r\n        }\r\n        addr = Replace(addr, \"http://\", \"\")\r\n        addr = Replace(addr, \"https://\", \"\")\r\n        var parts array\r\n        if Contains(addr, \":\") {\r\n            parts = Split(addr, \":\")\r\n            if Len(parts) > 2 {\r\n                warn(name, \":\")\r\n            }\r\n            var port string\r\n            port = parts[1]\r\n            if port <= 0 {\r\n                warn(name, \"port\")\r\n            }\r\n            addr = parts[0]\r\n        }\r\n    }\r\n    func checkTcpAddress(addr string){\r\n        var name string\r\n        name = \"TCP Address\"\r\n        if Size(addr) == 0 {\r\n            warn(name, \"size\")\r\n        }\r\n        if Contains(addr, \" \") {\r\n            warn(name, \"space\")\r\n        }\r\n        var parts array\r\n        if Contains(addr, \":\") {\r\n            parts = Split(addr, \":\")\r\n            if Len(parts) > 2 {\r\n                warn(name, \":\")\r\n            }\r\n            var port string\r\n            port = parts[1]\r\n            if port <= 0 {\r\n                warn(name, \"port\")\r\n            }\r\n            addr = parts[0]\r\n        }\r\n        parts = Split(addr, \".\")\r\n        if Len(parts) != 4 {\r\n            warn(name, \"too many parts\")\r\n        }\r\n        var i int\r\n        while i < 4 {\r\n            var n int\r\n            n = Int(parts[i])\r\n            if n < 0 || n > 255 {\r\n                warn(name, \"part\")\r\n            }\r\n            i=i+1\r\n        }\r\n    }\r\n    func checkPub(pub string){\r\n        if PubToID(pub) == 0 {\r\n            warning \"Public key invalid\"\r\n        }\r\n    }\r\n    func checkKeyId(keyid int){\r\n        var existed map\r\n        existed = DBFind(\"keys\").Where(\"id=?\", keyid).Row()\r\n        if !existed {\r\n            warning \"Key id not found\"\r\n        }\r\n    }\r\n    func getNodesJSON() string{\r\n        var nodes string\r\n        nodes = SysParamString(\"full_nodes\")\r\n        if Size(nodes) < 50 {\r\n            nodes = \"[]\"\r\n        }\r\n        return nodes\r\n    }\r\n    conditions{\r\n        var app_id int\r\n        app_id = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\r\n        var id int\r\n        id = Int(AppParam(app_id,\"voting_sysparams_template_id\"))\r\n        if $TemplateId != id || $TemplateId <= 0 {\r\n            warning \"Template id not found\"\r\n        }\r\n        checkKeyId($KeyId)\r\n        checkPub($PubKey)\r\n        checkApiAddress($ApiAddress)\r\n        checkTcpAddress($TcpAddress)\r\n    }\r\n\r\n    action{\r\n        var nodes array node map\r\n        node[\"tcp_address\"] = $TcpAddress\r\n        node[\"api_address\"] = $ApiAddress\r\n        node[\"key_id\"] = Str($KeyId)\r\n        node[\"public_key\"] = $PubKey\r\n        nodes = JSONDecode(getNodesJSON())\r\n        nodes = Append(nodes, node)\r\n        voting_TemplateRun(\"TemplateId,Duration,KeyId,TableWritten,RowId,ColumnName,NewValue,TextDocument\", $TemplateId, $Duration, 0, \"\", \"\", \"full_nodes\", JSONEncode(nodes), \"\")\r\n    }\r\n}",
            "Name": "sysparams_StartNodeAdd",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_TemplateStore{\r\n    data{\r\n        Title string\r\n        TypeParticipants int\r\n        TypeVoting int\r\n        TypeDecision int\r\n        Volume int\r\n        Quorum int\r\n        Subject string\r\n        Voters string \"optional\" // role of participant\r\n        Candidates string \"optional\" // role of candidate\r\n        InitContract string \"optional\" // Execute before the vote\r\n        Vacancies int \"optional\"\r\n        ContractAccept string \"optional\"\r\n        ParamsAccept string \"optional\"\r\n        ContractReject string \"optional\"\r\n        ParamsReject string \"optional\"\r\n    }\r\n    \r\n    func conditions{\r\n        if $TypeParticipants == 3 {\r\n            if Size($Voters) == 0 || $Voters == \"NULL\" || $Voters == 0 {\r\n                warning \"Voters role not found\"\r\n            }\r\n        }\r\n        if Size($Title) <3 {\r\n            warning \"Please enter title\"\r\n        }\r\n        if $Volume <0 || $Volume > 100 {\r\n            warning \"Wrong volume range\"\r\n        }\r\n        if $Quorum <0 || $Quorum > 100 {\r\n            warning \"Wrong quorum range\"\r\n        }\r\n        \r\n        if $TypeDecision == 1 || $TypeDecision == 2 {\r\n            if $Vacancies < 1 {\r\n                warning \"Wrong number vacancies\"\r\n            }\r\n            if $Candidates == \"NULL\" || $Candidates == 0 || Size($Candidates) == 0 {\r\n                warning \"Wrong candidate role\"\r\n            }\r\n        }\r\n        \r\n        if Size($InitContract) > 0{\r\n            if GetContractByName($InitContract) == 0 {\r\n                warning \"Init Contract not found\"\r\n            }\r\n        }\r\n        if Size($ContractAccept) > 0{\r\n            if GetContractByName($ContractAccept) == 0 {\r\n                warning \"Contract for accepted decision not found\"\r\n            }\r\n        }\r\n        if Size($ContractReject) > 0{\r\n            if GetContractByName($ContractReject) == 0{\r\n                warning \"Contract for rejected decision not found\"\r\n            }\r\n        }\r\n    }\r\n    \r\n    func action{\r\n        $result = DBInsert(\"voting_templates\", \"title,subject,voters,candidates,init_contract,volume,quorum,type_voting,type_participants,type_decision,vacancies,contract_accept,accept_params,contract_reject,reject_params\", $Title, $Subject, $Voters, $Candidates, $InitContract, $Volume, $Quorum, $TypeVoting, $TypeParticipants, $TypeDecision, $Vacancies, $ContractAccept, $ParamsAccept, $ContractReject, $ParamsReject)\r\n        \r\n    }\r\n}",
            "Name": "voting_TemplateStore",
            "Type": "contracts"
        }
    ]
}