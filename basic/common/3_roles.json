{
    "blocks": [],
    "contracts": [
        {
            "Name": "RoleConditions",
            "Value": "contract RoleConditions {\n    data{\n        role string\n    }\n    conditions {\n        $assigned_id = DBFind(\"roles_assign\").Where(\"role_name=? and member_id=? and delete=0\", $role, $key_id).One(\"id\")\n\t\tif ($assigned_id == nil){\n            warning Sprintf(\"This action allowed only for role: %v\", $role)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Roles_Assign",
            "Value": "contract Roles_Assign {\n    data {\n        role_id int\n        member_id int\n    }\n    \n    conditions {\n        \n        $role_map = DBFind(\"roles_list\").Where(\"id = $\", $role_id).Row()\n        $member_map = DBFind(\"members\").Where(\"id = $\", $member_id).Row()\n        $appointer_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\n        \n        if !$role_map {\n            warning \"Role not found\"\n        }\n        if !$member_map {\n            warning \"Member not found\"\n        }\n        if !$appointer_map {\n            warning \"Appointer not found\"\n        }\n        \n        if(Int($role_map[\"delete\"]) == 1) {\n            warning \"This role has been deleted. The appointment of members is impossible\"\n        }\n        if((Int($role_map[\"role_type\"]) != 1) &&(Int($role_map[\"role_type\"]) != 4)) {\n            warning \"This role is not assignable. The appointment of members is impossible\"\n        }\n        if(Int($role_map[\"creator_id\"]) != $key_id) {\n            warning \"Sorry, you are not the creator of this role. The appointment of members is impossible\"\n        }\n        \n        $assign_id = DBFind(\"roles_assign\").Where(\"role_id=$ and member_id=$ and delete=0\", $role_id, $member_id).One(\"id\")\n        if($assign_id != nil) {\n            warning \"This member has already been added\"\n        }\n    }\n    \n    action {\n        DBInsert(\"roles_assign\", \"role_id,role_type,role_name,member_id,member_name,member_avatar,appointed_by_id,appointed_by_name,timestamp date_start,delete\",\n        $role_id, $role_map[\"role_type\"], $role_map[\"role_name\"], $member_id, $member_map[\"member_name\"], $member_map[\"avatar\"], $key_id, $appointer_map[\"member_name\"], $block_time, 0)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Roles_Create",
            "Value": "contract Roles_Create {\n    data {\n        role_name string\n        role_type int\n        company_id int \"optional\"\n    }\n    \n    conditions {\n        // system role\n        if ($role_type == 3) {\n            warning \"System role can not be created\"\n        }\n        \n        // company role\n        if ($role_type == 4) {\n            \n            // check param\n            if ($company_id == 0) {\n                warning \"On this page you can not create a role for the company. Go to the company's view page to create a role\"\n            }\n            \n            // check creator of the company\n            if ($company_id != $key_id) {\n                warning \"Sorry, you are not the creator of this company\"\n            }\n        }\n        \n        // check member\n        $member_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\n        if ($member_map[\"id\"] == nil) {\n            warning \"You are not a member of the ecosystem\"\n        }\n    }\n    \n    action {\n        if ($role_type == 4) {\n            $result = DBInsert(\"roles_list\", \"role_name,role_type,creator_id,creator_name,creator_avatar,company_id,timestamp date_create,delete\",\n            $role_name, $role_type, $key_id, $member_map[\"member_name\"], $member_map[\"avatar\"], $company_id, $block_time, 0)\n        } else {\n            $result = DBInsert(\"roles_list\", \"role_name,role_type,creator_id,creator_name,creator_avatar,company_id,timestamp date_create,delete\",\n            $role_name, $role_type, $key_id, $member_map[\"member_name\"], $member_map[\"avatar\"], 0, $block_time, 0)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Roles_Unassign",
            "Value": "contract Roles_Unassign {\n    data {\n        row_id int\n    }\n\n    conditions {\n        // check record\n        $assign_map = DBFind(\"roles_assign\").Where(\"id=$\", $row_id).Row()\n        if ($assign_map[\"id\"] == nil) {\n            warning \"Role not found for the specified member\"\n        }\n\n        // get role\n        $role_map = DBFind(\"roles_list\").Where(\"id=$\", Int($assign_map[\"role_id\"])).Row()\n        if ($role_map[\"id\"] == nil) {\n            warning \"Role not found in the roles registry\"\n        }\n\n        // check creator of the role\n        if (Int($role_map[\"creator_id\"]) != $key_id) {\n            warning \"Sorry, you are not the creator of this role\"\n        }\n    }\n\n    action {\n        // delete the member\n        DBUpdate(\"roles_assign\", $row_id, \"delete,timestamp date_end\", 1, $block_time)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Roles_Del",
            "Value": "contract Roles_Del {\n    data {\n        role_id int\n    }\n\n    conditions {\n        // check role\n        $role_map = DBFind(\"roles_list\").Where(\"id=$\", $role_id).Row()\n        if ($role_map[\"id\"] == nil) {\n            warning \"Role not found\"\n        }\n\n        // system role can not be deleted\n        if (Int($role_map[\"role_type\"]) == 3) {\n            warning \"System role can not be removed\"\n        }\n\n        // check creator of the role\n        if (Int($role_map[\"creator_id\"]) != $key_id) {\n            warning \"Sorry, you are not the creator of this role\"\n        }\n    }\n\n    action {\n        // get the list of participants\n        $ret_assign = DBFind(\"roles_assign\").Columns(\"id\").Where(\"role_id = $ and delete = $\", $role_id, 0).Order(\"id\")\n\n        // delete all participants\n        $len_assign = Len($ret_assign)\n        $i_assign = 0\n        while ($i_assign < $len_assign) {\n            $vals_assign = $ret_assign[$i_assign]\n            Roles_Unassign(\"row_id\", Int($vals_assign[\"id\"]))\n            $i_assign = $i_assign + 1\n        }\n\n        // delete the role\n        DBUpdate(\"roles_list\", $role_id, \"delete,timestamp date_delete\", 1, $block_time)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "data": [],
    "languages": [],
    "menus": [
        {
            "Name": "default_menu",
            "Value": "MenuItem(Title:$roles$, Page:roles_list, Icon:\"fa fa-list-ul\")",
            "Conditions": "ContractAccess(\"@1EditMenu\")"
        }
    ],
    "pages": [
        {
            "Name": "roles_assign",
            "Value": "Div(Class: content-wrapper){\n    \n    If(#v_role_id# > 0){\n        \n        SetTitle($assign$)\n        Div(Class: breadcrumb){\n            LinkPage($roles$, roles_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#v_role_name#, roles_view,, \"v_role_id=#v_role_id#,v_role_name=#v_role_name#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $assign$)\n        }\n        \n        Div(Class: row df f-valign){\n            Div(Class: col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n                \n                Div(Class: panel panel-primary){\n                    Div(Class: panel-heading, Body: LangRes(assign))\n                    Form(){\n                        \n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: role_id){\n                                        Span(Body: LangRes(role))\n                                    }\n                                }\n                                Div(Class: col-md-9 mt-sm text-left){\n                                    DBFind(Name: roles_list, Source: source_roles).Where(\"id=#v_role_id#\").Vars(prefix)\n                                    Input(Class: form-control hidden, Type: text, Name: role_id, Value: #prefix_id#)\n                                    Span(Class: h5, Body: LangRes(#prefix_role_name#))\n                                }\n                            }\n                        }\n                        \n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: role_id){\n                                        Span(Body: LangRes(type))\n                                    }\n                                }\n                                Div(Class: col-md-9 mt-sm text-left){\n                                    Span(Class: h5, Body: EcosysParam(Name: roles_types, Index: #prefix_role_type#)\n                                    If(#prefix_role_type# != 1){\n                                        P(Class: m0 text-danger h6, Body: LangRes(appointment_impossible))\n                                    }\n                                }\n                            }\n                        }\n                        \n                        If(#prefix_role_type# == 1){\n                            Div(Class: list-group-item){\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-3 mt-sm text-right){\n                                        Label(For: role_name){\n                                            Span(Body: LangRes(member))\n                                        }\n                                    }\n                                    Div(Class: col-md-9 mc-sm text-left){\n                                        DBFind(Name: members, Source: source_members).Custom(custom_username){\n                                            #member_name# (Address(#id#) )\n                                        }\n                                        Select(Name: member_id, Source: source_members, NameColumn: custom_username, ValueColumn: id)\n                                    }\n                                }\n                            }\n                        }\n                        \n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: roles_view, PageParams: \"v_role_id=#v_role_id#,v_role_name=#v_role_name#\")\n                                If(#prefix_role_type# == 1){\n                                    Button(Body: LangRes(assign), Class: btn btn-primary, Page: roles_view, PageParams: \"v_role_id=#v_role_id#,v_role_name=#v_role_name#\", Contract: Roles_Assign, Params: \"member_id=Val(member_id)\").Alert(Text: $want_assign_member_to_role$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                                }\n                            }\n                        }\n                        \n                    }\n                    \n                }\n            }\n        }\n        \n    }.Else{\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "roles_create",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($new_role$)\n\tDiv(Class: breadcrumb){\n\t\tLinkPage($roles$, roles_list)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: $new_role$)\n\t}\n\n    If(#param_role_type#>0){\n    }.Else{\n        SetVar(Name: param_role_type, Value: 1)\n    }\n\t\n    Div(Class: row df f-valign){\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n\n            Div(Class: panel panel-primary){\n                Div(Class: panel-heading, Body: LangRes(new_role))\n                Form(){   \n\n\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\n\t\t\t\t\t\t\t\tLabel(For: role_name){\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(name))\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: col-md-9 mc-sm text-left){\n\t\t\t\t\t\t\t\tInput(Class: form-control, Type: text, Name: role_name)\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\n\t\t\t\t\t\t\t\tLabel(){\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(type))\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: col-md-9 mc-sm text-left){\n\t\t\t\t\t\t\t\tEcosysParam(Name: roles_types, Source: src_roles)\n\t\t\t\t\t\t\t\tSelect(Name: role_type, Source: src_roles, NameColumn: name, ValueColumn: id, Value: #param_role_type#)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tDiv(Class: panel-footer clearfix){\n\t\t\t\t\t\tDiv(Class: pull-right){\n                            Button(Body: LangRes(create), Class: btn btn-primary, Page: roles_list, Contract: Roles_Create).Alert(Text: $want_create_new_role$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n                }\n            }\n        }\n\t\t\n        Div(Class: col-md-3)\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "roles_list",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($roles$)\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: $roles$)\n\t}\n\n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"role_name='#v_Search#'\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"id>0\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n\n    DBFind(Name: roles_list, Source: src_roles_list).Custom(custom_id){\n        If(#delete# == 0){\n            Span(Body: #id#)  \n        }.Else{\n            Span(Class: text-muted, Body: #id#)\n        }\n    }.Custom(custom_creator){\n        If(#role_type#==3){\n            Div(){\n                Span(Class: h5, Body: LangRes(system_role))\n            }\n        }.Else{\n            If(#delete# == 0){\n                LinkPage(Page: profile_view, PageParams: \"v_member_id=#creator_id#\"){\n                    If(#creator_avatar# != \"\"){\n                        Image(Src: \"#creator_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n                    }\n                    Span(Class: h5 text-bold, Body: #creator_name#)\n                }\n            }.Else{\n                Div(){\n                    If(#creator_avatar# != \"\"){\n                        Image(Src: \"#creator_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n                    }\n                    Span(Class: h5 text-muted, Body: #creator_name#)\n                }\n            }\n        }\n    }.Custom(custom_name){\n        If(#delete# == 0){\n            LinkPage(Page: roles_view, PageParams: \"v_role_id=#id#,v_role_name=#role_name#\"){\n                Span(Class: h5 text-bold, Body: LangRes(#role_name#))\n            }\n        }.Else{\n            Span(Class: h5 text-muted, Body: LangRes(#role_name#))\n        }\n\t}.Custom(custom_date){\n        If(#delete# == 0){\n            Div(Class: h6 m0, Body: DateTime(DateTime: #date_create#, Format: \"DD.MM.YYYY HH:MI\"))\n            Div(Class: h6 m0, Body: DateTime(DateTime: #date_delete#, Format: \"DD.MM.YYYY HH:MI\"))\n        }.Else{\n            Div(Class: h6 m0 text-muted, Body: DateTime(DateTime: #date_create#, Format: \"DD.MM.YYYY HH:MI\"))\n            Div(Class: h6 m0 text-muted, Body: DateTime(DateTime: #date_delete#, Format: \"DD.MM.YYYY HH:MI\"))\n        }\n\t}.Custom(custom_type){\n        If(#delete# == 0){\n            Span(Body: EcosysParam(Name: roles_types, Index: #role_type#))\n        }.Else{\n            Span(Class: text-muted, Body: EcosysParam(Name: roles_types, Index: #role_type#))\n        }\n    }.Custom(custom_status){\n        If(#delete# == 0){\n            Span(Body: LangRes(active))\n        }.Else{\n            Span(Class: text-muted, Body: LangRes(deleted))\n        }\n    }.Custom(actions){\n        If(And(#delete#==0,#role_type#!=3)){\n            Div(Class: text-center, Body: Button(Body: Em(Class: fa fa-trash), Class: btn btn-danger, Contract: Roles_Del, Params: \"role_id=#id#\", Page: roles_list))\n        }\n   }.Where(#v_Where#).Order(\"delete ASC, id ASC\")\n\n    Div(Class: panel panel-primary){\n        Form(){\n            Div(Class: list-group-item){\n                Div(Class: row df f-valign){\n                    Div(Class: col-md-1 mt-sm text-right){\n                        Label(For: Search){\n                            Span(Body: LangRes(name))\n                        }\n                    }\n                    Div(Class: col-md-11 mc-sm){\n                        Div(Class: input-group){\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\n                            Div(Class: input-group-btn){\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: roles_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                            }\n                        }\n                    }\n                }  \n            }\n\n            Div(Class: list-group-item){ \n                Table(Source: src_roles_list, Columns: \"$id$=custom_id,$name$=custom_name,$type$=custom_type,$created$ / $deleted$=custom_date,$status$=custom_status,$creator$=custom_creator,$actions$=actions\")\n                If(GetVar(isSearch) == 1){\n                    Div(Class: text-center){  \n                        Button(Body: $view_all$, Class: btn btn-primary, Page: roles_list, PageParams: \"isSearch=0\")\n                    }\n                }\n            }\n\n            Div(Class: panel-footer clearfix){\n                Div(Class: pull-right){\n                    Button(Body: LangRes(create), Class: btn btn-primary, Page: roles_create)\n                }\n            }\n            \n        }           \n    }\n\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "roles_view",
            "Value": "Div(Class: content-wrapper){\n    \n    If(#v_role_id# > 0){\n        \n        SetTitle($role$: #v_role_name#)\n        Div(Class: breadcrumb){\n            LinkPage($roles$, roles_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: #v_role_name#)\n        }\n        \n        DBFind(Name: roles_assign, Source: src_roles_assign).Custom(custom_id){\n            If(#delete# == 0){\n                Span(Body: #id#)\n            }.Else{\n                Span(Class: text-muted, Body: #id#)\n            }\n        }.Custom(custom_appointed){\n            If(#delete# == 0){\n                Span(Body: #appointed_by_name#)\n            }.Else{\n                Span(Class: text-muted, Body: #appointed_by_name#)\n            }\n        }.Custom(custom_role_name){\n            If(#delete# == 0){\n                Span(Body: LangRes(#role_name#) )\n            }.Else{\n                Span(Class: text-muted, Body: LangRes(#role_name#))\n            }\n        }.Custom(custom_member){\n            If(#delete# == 0){\n                LinkPage(Page: profile_view, PageParams: \"v_member_id=#member_id#\"){\n                    If(#member_avatar# != \"\"){\n                        Image(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                    }\n                    Span(Class: h5 text-bold, Body: #member_name#)\n                }\n            }.Else{\n                Div(){\n                    If(#member_avatar# != \"\"){\n                        Image(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                    }\n                    Span(Class: h5 text-muted, Body: #member_name#)\n                }\n            }\n        }.Custom(custom_address){\n            If(#delete# == 0){\n                Span(Body: Address(#member_id#))\n            }.Else{\n                Span(Class: text-muted, Body: Address(#member_id#))\n            }\n        }.Custom(custom_type){\n            If(#delete# == 0){\n                Span(Body: EcosysParam(Name: roles_types, Index: #role_type#))\n            }.Else{\n                Span(Class: text-muted, Body: EcosysParam(Name: roles_types, Index: #role_type#))\n            }\n        }.Custom(custom_date){\n            If(#delete# == 0){\n                Div(Class: h6 m0, Body: DateTime(DateTime: #date_start#, Format: \"DD.MM.YYYY HH:MI\"))\n                Div(Class: h6 m0, Body: DateTime(DateTime: #date_end#, Format: \"DD.MM.YYYY HH:MI\"))\n            }.Else{\n                Div(Class: h6 m0 text-muted, Body: DateTime(DateTime: #date_start#, Format: \"DD.MM.YYYY HH:MI\"))\n                Div(Class: h6 m0 text-muted, Body: DateTime(DateTime: #date_end#, Format: \"DD.MM.YYYY HH:MI\"))\n            }\n        }.Custom(custom_status){\n            If(#delete# == 0){\n                Span(Body: LangRes(active))\n            }.Else{\n                Span(Class: text-muted, Body: LangRes(deleted))\n            }\n        }.Custom(actions){\n            If(#delete# == 0){\n                Div(Class: text-center, Button(Body: Em(Class: fa fa-trash), Class: btn btn-danger, Contract: Roles_Unassign, Params: \"row_id=#id#\", Page: roles_view, PageParams: \"v_role_id=#v_role_id#,v_role_name=#v_role_name#\"))\n            }\n        }.Where(\"role_id='#v_role_id#'\").Order(\"delete ASC, id ASC\")\n        \n        Div(Class: panel panel-primary){\n            Form(){\n                Div(Class: list-group-item){\n                    Table(Source: src_roles_assign, Columns: \"$id$=custom_id,$member$=custom_member,$member_id$=custom_address,$role$=custom_role_name,$type$=custom_type,$appointed$ / $deleted$=custom_date,$appointed$=custom_appointed,$status$=custom_status,$actions$=actions\")\n                }\n                Div(Class: panel-footer clearfix){\n                    Div(Class: pull-right){\n                        Button(Body: LangRes(assign), Class: btn btn-primary, Page: roles_assign, PageParams: \"v_role_id=#v_role_id#,v_role_name=#v_role_name#\")\n                    }\n                }\n            }\n        }\n        \n    }.Else{\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n    \n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        }
    ],
    "parameters": [
        {
            "Name": "roles_types",
            "Value": "assigned_role,elective_role,system_role,company_role",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "tables": []
}