{
    "blocks": [],
    "contracts": [
        {
            "Name": "Notifications_Roles_Finishing",
            "Value": "contract Notifications_Roles_Finishing{\n    data {\n\t    notific_id int\n    }\n\n    conditions {\n\t\t$notifications_map = DBFind(\"notifications\").Where(\"id=$\", $notific_id).Row()\n\t\tif ($notifications_map[\"id\"] == nil){\n\t\t\twarning \"Notification not found\"\n\t\t}\n\t\t\n        if ( Int($notifications_map[\"started_processing_id\"]) == 0 ){\n            warning \"Sorry, processing of this notification has not yet begun\"  \n        }\n        if ( Int($notifications_map[\"started_processing_id\"]) != $key_id ){\n            warning \"Sorry, processing of this notice began another member\"   \n        }\n        if ( (Int($notifications_map[\"finished_processing_id\"]) != 0) || (Int($notifications_map[\"closed\"]) > 0) ){\n            warning \"Sorry, this notification has already been closed before\"  \n        }\n\t\t\n\t\t$assign_id = DBFind(\"roles_assign\").Where(\"role_id=$ and member_id=$ and delete=$\", Int($notifications_map[\"role_id\"]), $key_id, 0).One(\"id\")\n        if ($assign_id == 0){\n            warning \"Sorry, you are not part of the role for which this notification is intended\"  \n        }\n    }\n\n    action {\n        DBUpdate(\"notifications\", $notific_id, \"timestamp finished_processing_time,finished_processing_id,closed\", $block_time, $key_id, 1) \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Notifications_Roles_Processing",
            "Value": "contract Notifications_Roles_Processing {\n    data {\n\t    notific_id int\n    }\n\n    conditions {\n\t\t$notifications_map = DBFind(\"notifications\").Where(\"id=$\", $notific_id).Row()\n\t\tif ($notifications_map[\"id\"] == nil){\n\t\t\twarning \"Notification not found\"\n\t\t}\n\t\t\n        if ( Int($notifications_map[\"started_processing_id\"]) != 0){\n            warning \"Sorry, processing of this notification has already begun\"  \n        }\n\t\t\n\t\t$assign_id = DBFind(\"roles_assign\").Where(\"role_id=$ and member_id=$ and delete=$\", Int($notifications_map[\"role_id\"]), $key_id, 0).One(\"id\")\n        if ($assign_id == 0){\n            warning \"Sorry, you are not part of the role for which this notification is intended\"  \n        }\n    }\n\n    action {\n        DBUpdate(\"notifications\", $notific_id, \"timestamp started_processing_time,started_processing_id\", $block_time, $key_id) \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Notifications_Single_Send",
            "Value": "contract Notifications_Single_Send {\n    data {\n        member_id int\n        icon_name string\n        text_header string\n        text_body string\n        page_name string\n        params_val string\n    }\n\n    conditions {\n\t\t$member_map = DBFind(\"members\").Where(\"id = $\", $member_id).Row()\n\t\t\n\t\tif ($member_map[\"id\"] == nil){\n\t\t\twarning \"Member not found\"\n\t\t}\n    }\n\n    action {\n\t\t$notification_id = DBInsert(\"notifications\", \"icon,header_text,body_text,page_name,notification_type,recipient_id,recipient_name,recipient_avatar,timestamp date_create,page_params\", \n\t\t\t$icon_name, $text_header, $text_body, $page_name, 1, $member_id, $member_map[\"member_name\"], $member_map[\"avatar\"], $block_time, $params_val)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Notifications_Single_Close",
            "Value": "contract Notifications_Single_Close {\n    data {\n\t    notific_id int\n    }\n\n    conditions {\n    }\n\n    action {\n        DBUpdate(\"notifications\", $notific_id, \"closed,timestamp finished_processing_time,finished_processing_id\", 1, $block_time, $key_id) \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Notifications_Roles_Send",
            "Value": "contract Notifications_Roles_Send {\n    data {\n        role_id int\n        closure_type int\n\n        icon_name string\n        text_header string\n        text_body string\n        page_name string\n        params_val string \n    }\n\n    conditions {\n\t\t$assign_id = DBFind(\"roles_assign\").Where(\"role_id=$ and delete=$\", $role_id, 0).One(\"id\")\n        if ($assign_id == nil){\n\t\t\twarning \"Role does not contain members\"\n\t\t}\n    }\n\n    action {\n        //closure_type - Single\n        if ($closure_type == 1){\n\t\t\t$role_name = DBFind(\"roles_list\").Where(\"id=$\", $role_id).One(\"role_name\")\n\t\t\n            $notification_id = DBInsert(\"notifications\", \"icon,header_text,body_text,page_name,notification_type,role_id,role_name,timestamp date_create,page_params\", \n                $icon_name, $text_header, $text_body, $page_name, 2, $role_id, $role_name, $block_time, $params_val)\n        } \n\t\t//closure_type - Multiple \n\t\telse {\n            $ret_role = DBFind(\"roles_assign\").Columns(\"member_id\").Where(\"role_id = $ and delete = $\", $role_id, 0).Order(\"id\")\n\n            $len_role = Len($ret_role)\n            $i_role = 0\n            while($i_role < $len_role){\n                var vals_role map\n                vals_role = $ret_role[$i_role] \n\n                Notifications_Single_Send(\"member_id,icon_name,text_header,text_body,page_name,params_val\", \n                                vals_role[\"member_id\"], $icon_name, $text_header, $text_body, $page_name, $params_val)\n\n                $i_role = $i_role + 1\n            }\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "RoleConditions",
            "Value": "contract RoleConditions {\n    data{\n        role string\n    }\n    conditions {\n        $assigned_id = DBFind(\"roles_assign\").Where(\"role_name=? and member_id=? and delete=0\", $role, $key_id).One(\"id\")\n\t\tif ($assigned_id == nil){\n            warning Sprintf(\"This action allowed only for role: %v\", $role)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Roles_Assign",
            "Value": "contract Roles_Assign {\n    data {\n        role_id int\n        member_id int\n    }\n    \n    conditions {\n        \n        $role_map = DBFind(\"roles_list\").Where(\"id = $\", $role_id).Row()\n        $member_map = DBFind(\"members\").Where(\"id = $\", $member_id).Row()\n        $appointer_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\n        \n        if !$role_map {\n            warning \"Role not found\"\n        }\n        if !$member_map {\n            warning \"Member not found\"\n        }\n        if !$appointer_map {\n            warning \"Appointer not found\"\n        }\n        \n        if(Int($role_map[\"delete\"]) == 1) {\n            warning \"This role has been deleted. The appointment of members is impossible\"\n        }\n        if((Int($role_map[\"role_type\"]) != 1) &&(Int($role_map[\"role_type\"]) != 4)) {\n            warning \"This role is not assignable. The appointment of members is impossible\"\n        }\n        if(Int($role_map[\"creator_id\"]) != $key_id) {\n            warning \"Sorry, you are not the creator of this role. The appointment of members is impossible\"\n        }\n        \n        $assign_id = DBFind(\"roles_assign\").Where(\"role_id=$ and member_id=$ and delete=0\", $role_id, $member_id).One(\"id\")\n        if($assign_id != nil) {\n            warning \"This member has already been added\"\n        }\n    }\n    \n    action {\n        DBInsert(\"roles_assign\", \"role_id,role_type,role_name,member_id,member_name,member_avatar,appointed_by_id,appointed_by_name,timestamp date_start,delete\",\n        $role_id, $role_map[\"role_type\"], $role_map[\"role_name\"], $member_id, $member_map[\"member_name\"], $member_map[\"avatar\"], $key_id, $appointer_map[\"member_name\"], $block_time, 0)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Roles_Create",
            "Value": "contract Roles_Create {\n    data {\n        role_name string\n        role_type int\n        company_id int \"optional\"\n    }\n    \n    conditions {\n        // system role\n        if ($role_type == 3) {\n            warning \"System role can not be created\"\n        }\n        \n        // company role\n        if ($role_type == 4) {\n            \n            // check param\n            if ($company_id == 0) {\n                warning \"On this page you can not create a role for the company. Go to the company's view page to create a role\"\n            }\n            \n            // check creator of the company\n            if ($company_id != $key_id) {\n                warning \"Sorry, you are not the creator of this company\"\n            }\n        }\n        \n        // check member\n        $member_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\n        if ($member_map[\"id\"] == nil) {\n            warning \"You are not a member of the ecosystem\"\n        }\n    }\n    \n    action {\n        if ($role_type == 4) {\n            $result = DBInsert(\"roles_list\", \"role_name,role_type,creator_id,creator_name,creator_avatar,company_id,timestamp date_create,delete\",\n            $role_name, $role_type, $key_id, $member_map[\"member_name\"], $member_map[\"avatar\"], $company_id, $block_time, 0)\n        } else {\n            $result = DBInsert(\"roles_list\", \"role_name,role_type,creator_id,creator_name,creator_avatar,company_id,timestamp date_create,delete\",\n            $role_name, $role_type, $key_id, $member_map[\"member_name\"], $member_map[\"avatar\"], 0, $block_time, 0)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Roles_Unassign",
            "Value": "contract Roles_Unassign {\n    data {\n        row_id int\n    }\n\n    conditions {\n        // check record\n        $assign_map = DBFind(\"roles_assign\").Where(\"id=$\", $row_id).Row()\n        if ($assign_map[\"id\"] == nil) {\n            warning \"Role not found for the specified member\"\n        }\n\n        // get role\n        $role_map = DBFind(\"roles_list\").Where(\"id=$\", Int($assign_map[\"role_id\"])).Row()\n        if ($role_map[\"id\"] == nil) {\n            warning \"Role not found in the roles registry\"\n        }\n\n        // check creator of the role\n        if (Int($role_map[\"creator_id\"]) != $key_id) {\n            warning \"Sorry, you are not the creator of this role\"\n        }\n    }\n\n    action {\n        // delete the member\n        DBUpdate(\"roles_assign\", $row_id, \"delete,timestamp date_end\", 1, $block_time)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Roles_Del",
            "Value": "contract Roles_Del {\n    data {\n        role_id int\n    }\n\n    conditions {\n        // check role\n        $role_map = DBFind(\"roles_list\").Where(\"id=$\", $role_id).Row()\n        if ($role_map[\"id\"] == nil) {\n            warning \"Role not found\"\n        }\n\n        // system role can not be deleted\n        if (Int($role_map[\"role_type\"]) == 3) {\n            warning \"System role can not be removed\"\n        }\n\n        // check creator of the role\n        if (Int($role_map[\"creator_id\"]) != $key_id) {\n            warning \"Sorry, you are not the creator of this role\"\n        }\n    }\n\n    action {\n        // get the list of participants\n        $ret_assign = DBFind(\"roles_assign\").Columns(\"id\").Where(\"role_id = $ and delete = $\", $role_id, 0).Order(\"id\")\n\n        // delete all participants\n        $len_assign = Len($ret_assign)\n        $i_assign = 0\n        while ($i_assign < $len_assign) {\n            $vals_assign = $ret_assign[$i_assign]\n            Roles_Unassign(\"row_id\", Int($vals_assign[\"id\"]))\n            $i_assign = $i_assign + 1\n        }\n\n        // delete the role\n        DBUpdate(\"roles_list\", $role_id, \"delete,timestamp date_delete\", 1, $block_time)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_CheckDecision",
            "Value": "contract voting_CheckDecision {\n    func stringToMap(s string) map{\n        var arr, par array\n        var i int\n        var res map\n        arr = Split(s, \";\")\n        while i < Len(arr){\n            par = Split(arr[i], \"->\")\n            if Len(par) == 2{\n                res[par[0]] = par[1]\n            }\n            i=i+1\n        }\n        return res\n    }\n    data {\n        votingID int\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"voting_instances\").Where(\"id=?\", $votingID).Where(\"enddate < now() or percent_voters >= quorum\").Row()\n        if !$voting_map{\n            warning \"Voting has not expired. Try again later, please\"\n        }\n        // if Int($voting_map[\"creator_id\"]) != $key_id {\n        // warning \"Only creator the voting can check decision\"\n        // }\n        \n        $type_voting = Int($voting_map[\"type_voting\"])\t//system or custom\n        $number_voters = Int($voting_map[\"number_voters\"]) // number of participants who have already voted\n        $optional_role_vacancies = Int($voting_map[\"optional_role_vacancies\"]) // number of vacancies for the role\n        $voting_name = $voting_map[\"name\"]\n        $quorum = Int($voting_map[\"quorum\"])\n        $optional_role_id = Int($voting_map[\"optional_role_id\"])\n        $contract_accept = $voting_map[\"optional_contract_accept\"]\n        $contract_reject = $voting_map[\"optional_contract_reject\"]\n        $param_accept = stringToMap($voting_map[\"contract_accept_params\"])\n        $param_reject = stringToMap($voting_map[\"contract_reject_params\"])\n        $flag_success = Int($voting_map[\"flag_success\"])\n        $typedecision = Int($voting_map[\"typedecision\"])\n        \n        $subjectId = DBFind(\"voting_subject\").Where(\"voting_id=$\", $votingID).One(\"id\")\n        if $subjectId == nil {\n            warning \"Subject of voting is not found\"\n        }\n    }\n    \n    action {\n        // if notifications have been sent, then close it\n        var params string\n        params = \"notific_param=\" + Str($votingID)\n        $ret_notifics = DBFind(\"notifications\").Where(\"page_name=$ and page_params=$ and closed=0\", \"voting_view\", params)\n        var i int\n        while(i < Len($ret_notifics)){\n            $vals_notifics = $ret_notifics[i]\n            Notifications_Single_Close(\"notific_id\", Int($vals_notifics[\"id\"]))\n            i = i + 1\n        }\n        \n        //if the flag of success = true(enough participants to make a decision)\n        if($flag_success == 1){\n            if(($typedecision == 1) ||($typedecision == 2) ){\n                $number_inserts = 0 // number of candidates who have already been added(for comparison with the number of vacancies)\n                $flag_decision = -1 // none of the candidates has been added yet\n                \n                $ret_subject = DBFind(\"voting_subject\").Where(\"voting_id=$\", $votingID).Order(\"number_accept DESC\")\n                i = 0\n                while i < Len($ret_subject){\n                    $vals_subject = $ret_subject[i]\n                    \n                    // if there are still vacancies\n                    if $number_inserts < $optional_role_vacancies {\n                        // calculate the percentage to compare it with the quorum\n                        $v_percent = Int($vals_subject[\"number_accept\"]) * 100 / $number_voters\n                        // if percentage >= quorum values, then this candidate must be added to the role\n                        if $v_percent >= $quorum {\n                            // get role name\n                            $role_name = DBFind(\"roles_list\").Where(\"id=$\", $optional_role_id).One(\"role_name\")\n                            if $role_name != nil {\n                                // add a candidate to the role\n                                DBInsert(\"roles_assign\", \"role_id,role_name,member_id,member_name,member_avatar,timestamp date_start,appointed_by_id,appointed_by_name\",$optional_role_id, string($role_name), Int($vals_subject[\"member_id\"]), string($vals_subject[\"member_name\"]), string($vals_subject[\"member_avatar\"]), $block_time, $votingID, $voting_name)\n                                \n                                // increment of the counter of candidates\n                                $number_inserts = $number_inserts + 1\n                                // if at least one of the candidates was added to the role, then the voting decision is considered successful\n                                $flag_decision = 1\n                            }\n                        }\n                    }\n                    i = i + 1\n                }\n                \n                DBUpdate(\"voting_instances\", $votingID, \"flag_decision\", $flag_decision)\n                \n                // starting optional contract\n                if($flag_decision == 1){\n                    if($contract_accept != \"\"){\n                        CallContract($contract_accept, $param_accept)\n                    }\n                }\n                else{\n                    if($contract_reject != \"\"){\n                        CallContract($contract_reject, $param_reject)\n                    }\n                }\n            }\n            \n            if($typedecision == 3){\n                $number_accept = DBFind(\"voting_subject\").Where(\"voting_id=$\", $votingID).One(\"number_accept\")\n                if($number_accept != nil){\n                    // calculate the percentage to compare it with the quorum\n                    $v_percent = Int($number_accept) * 100 / $number_voters\n                    \n                    // if percentage >= quorum values, then this document will be approved\n                    if($v_percent >= $quorum){\n                        $flag_decision = 1\n                    }\n                    // otherwise the document will be rejected\n                    else{\n                        $flag_decision = -1\n                    }\n                    \n                    DBUpdate(\"voting_instances\", $votingID, \"flag_decision\", $flag_decision)\n                    \n                    // starting optional contract\n                    if($flag_decision == 1){\n                        if($contract_accept != \"\"){\n                            CallContract($contract_accept, $param_accept)\n                        }\n                    }\n                    else{\n                        if($contract_reject != \"\"){\n                            CallContract($contract_reject, $param_reject)\n                        }\n                    }\n                }\n            }\n            \n            if($typedecision == 4){\n                $subject_map = DBFind(\"voting_subject\").Where(\"voting_id=$\", $votingID).Row()\n                if($subject_map[\"id\"] != nil){\n                    $number_accept = Int($subject_map[\"number_accept\"])\n                    \n                    // calculate the percentage to compare it with the quorum\n                    $v_percent = $number_accept * 100 / $number_voters\n                    \n                    // if percentage >= quorum values, then this document will be approved\n                    if($v_percent >= $quorum){\n                        $flag_decision = 1\n                        \n                        $decisionTable = $subject_map[\"formal_decision_table\"]\n                        $decisionId = Int($subject_map[\"formal_decision_tableid\"])\n                        $decisionColumn =$subject_map[\"formal_decision_column\"]\n                        $decisionValue = $subject_map[\"formal_decision_colvalue\"]\n                        \n                        // type of voting - custom\n                        if($type_voting == 1){\n                            // ALWAYS CHECK THE PERMISSION\n                            DBUpdate($decisionTable, $decisionId, $decisionColumn, $decisionValue)\n                        }\n                        \n                        // type of voting - system\n                        if($type_voting == 2){\n                            DBUpdateSysParam($decisionColumn, $decisionValue, \"\")\n                        }\n                    }\n                    // otherwise the document will be rejected\n                    else{\n                        $flag_decision = -1\n                    }\n                    \n                    DBUpdate(\"voting_instances\", $votingID, \"flag_decision\", $flag_decision)\n                    \n                    // starting optional contract\n                    if($flag_decision == 1){\n                        if($contract_accept != \"\"){\n                            CallContract($contract_accept, $param_accept)\n                        }\n                    }\n                    else{\n                        if($contract_reject != \"\"){\n                            CallContract($contract_reject, $param_reject)\n                        }\n                    }\n                }\n            }\n            \n            if($typedecision == 5){\n                $subject_map = DBFind(\"voting_subject\").Where(\"voting_id=$\", $votingID).Row()\n                if($subject_map[\"id\"] != nil){\n                    $number_accept = Int($subject_map[\"number_accept\"])\n                    \n                    // calculate the percentage to compare it with the quorum\n                    $v_percent = $number_accept * 100 / $number_voters\n                    \n                    $con_accept = $subject_map[\"contract_accept\"]\n                    $con_accept = $subject_map[\"contract_accept\"]\n                    $param_accept = stringToMap($subject_map[\"contract_accept_params\"])\n                    $param_reject = stringToMap($subject_map[\"contract_reject_params\"])\n                    \n                    // if percentage >= quorum values, then this document will be approved\n                    if($v_percent >= $quorum){\n                        $flag_decision = 1\n                        \n                        CallContract($con_accept, $param_accept)\n                    }\n                    // otherwise the document will be rejected\n                    else{\n                        $flag_decision = -1\n                        \n                        CallContract($con_reject, $param_reject)\n                    }\n                }\n                \n                DBUpdate(\"voting_instances\", $votingID, \"flag_decision\", $flag_decision)\n            }\n        }\n        // decision can not be made(not enough participants to make a decision)\n        else {\n            DBUpdate(\"voting_instances\", $votingID, \"flag_decision\", -2)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_UpdateDataForGraphs",
            "Value": "contract voting_UpdateDataForGraphs {\n    data {\n        votingID int\n    }\n    \n    conditions {\n        $voting_map = DBFind(\"voting_instances\").Where(\"id=$\", $votingID).Row()\n        if ($voting_map[\"id\"] == nil){\n            warning \"Voting is not found\"\n        }\n        \n        $number_participants = Int($voting_map[\"number_participants\"]) // number of participants\n        $number_voters = Int($voting_map[\"number_voters\"]) // number of voters\n        $percent_voters = Int($voting_map[\"percent_voters\"]) \n        $volume = Int($voting_map[\"volume\"]) // percentage of votes for this vote\n        $quorum = Int($voting_map[\"quorum\"]) \n    }\n    \n    action {\n        // increment count of voters\n        $number_voters = $number_voters + 1\n        \n        // calculate the percentage of the ratio of the number of voters to the number of participants (for the graph)\n        $percent_voters = ($number_voters * 100) / $number_participants\n        if ($percent_voters > 100) {$percent_voters = 100}\n        \n        // update progress\n        $percent_success = ($percent_voters * 100) / $volume\n        if ($percent_success > 100) {$percent_success = 100}\n        \n        // update the flag of success\n        $flag_success = 0\n        if ($percent_success == 100) {$flag_success = 1}\n        \n        DBUpdate(\"voting_instances\", $votingID, \"number_voters,percent_voters,percent_success,flag_success\",\n        $number_voters, $percent_voters, $percent_success, $flag_success)\n\t\t\n\t\tif $percent_voters >= $quorum{\n\t\t\tvoting_CheckDecision(\"votingID\", $votingID)\n\t\t}\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_AcceptCandidates",
            "Value": "contract voting_AcceptCandidates {\n    data {\n        votingID int\n        candidateID int\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=$\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting is not found\"\n\t\t}\n\t\t$subject_map = DBFind(\"voting_subject\").Where(\"voting_id=$ and member_id=$\", $votingID, $candidateID).Row()\n\t\tif ($subject_map[\"id\"] == nil){\n\t\t\twarning \"Subject of voting is not found\"\n\t\t}\n\t\t\n\t\t// check the participant of the voting\n\t\t$participant_id = DBFind(\"voting_participants\").Where(\"voting_id=$ and member_id=$\", $votingID, $key_id).One(\"id\")\n\t\tif ($participant_id == nil){\n\t\t\twarning \"You are not a participant in this voting\"\n\t\t}\n    }\n\n    action {\n\t\t// if notifications have been sent, then close it\n\t\tif ( Int($voting_map[\"flag_notifics\"]) == 1 ){\n\t\t\tvar params string\n\t\t\tparams = \"notific_param=\" + Str($votingID)\t\t\n\t\t\t$notific_id = DBFind(\"notifications\").Where(\"recipient_id=$ and page_name=$ and page_params=$ and closed=$\", $key_id, \"voting_view\", params, 0).One(\"id\")\n\t\t\tif ($notific_id != nil){\n\t\t\t\tNotifications_Single_Close(\"notific_id\", Int($notific_id))\n\t\t\t}\n\t\t}\n\n\t\t// check the decision\n\t\tif ( Int($voting_map[\"flag_decision\"]) == 1 ){\n\t\t\twarning \"Decision was taken. Voting is now not possible\"\n\t\t} \n\t\t\n\t\t// check start-end of voting time\n\t\t$voting_start = DBFind(\"voting_instances\").Where(\"id=$ and startdate < now()\", $votingID).One(\"id\")\n\t\t$voting_end   = DBFind(\"voting_instances\").Where(\"id=$ and enddate   > now()\", $votingID).One(\"id\")\n\t\tif ($voting_start == nil){\n\t\t\twarning \"Voting has not yet begun. Try again later, please\"\n\t\t}\n\t\tif ($voting_end == nil){\n\t\t\twarning \"Voting has expired. Voting is now not possible\"\n\t\t}\n\t\t\n\t\t//-----------------------------------------------------------------------------------------------\n\n\t\t// write the result of the voting\n\t\tDBUpdate(\"voting_participants\", Int($participant_id), \"timestamp decision_date, decision\", $block_time, $candidateID)\n\n\t\t// increment count of accept\n\t\t$subject_id     = Int($subject_map[\"id\"])\n\t\t$number_accept  = Int($subject_map[\"number_accept\"])\n\t\t$number_accept   = $number_accept + 1\n\t\tDBUpdate(\"voting_subject\", $subject_id, \"number_accept\", $number_accept)\n\n\t\tvoting_UpdateDataForGraphs(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_Invite",
            "Value": "contract voting_Invite {\n    data {\n        votingID int\n        var_id int      //0, member_id, role_id\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=$ and enddate > now()\", $votingID).Row()\t\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting has expired. Can not add new participants\"\n\t\t}\n\t\n\t\t$type_participants = Int($voting_map[\"typeparticipants\"])\n\t\t$number_participants = Int($voting_map[\"number_participants\"])\n\t\n\t\tif (($number_participants > 1) && (Int($voting_map[\"type_voting\"]) == 2)){\n\t\t\twarning \"This vote is a system. Add new participants are not possible\"\n\t\t}\n\n\t\tif ($type_participants == 2){       //list of candidates\n\t\t\t$participant_id = DBFind(\"voting_participants\").Where(\"voting_id=$ and member_id=$\", $votingID, $var_id).One(\"id\")\n\t\t\tif ($participant_id != nil){\t\t\n\t\t\t\twarning \"Member has already been added before\"\n\t\t\t}\n\t\t}\n\n\t\tif ($type_participants == 3){       //list of candidates\n\t\t\t$participant_id = DBFind(\"voting_participants\").Where(\"voting_id=$\", $votingID).One(\"id\")\n\t\t\tif ($participant_id != nil){\t\t\n\t\t\t\twarning \"Voting participants have already been added before\"\n\t\t\t}\n\t\t}\n    }\n\n    action {\n\t\tif ($type_participants == 1){\n\t\t\t$ret_member = DBFind(\"members\").Where(\"id != $\", 0).Order(\"id\")\n\t\t\t$i = 0\n\t\t\twhile($i < Len($ret_member)){\n\t\t\t\t$vals_member = $ret_member[$i]\n\t\t\t\t\n\t\t\t\tDBInsert(\"voting_participants\", \"voting_id, member_id, member_name, member_avatar, decision\", $votingID, $vals_member[\"id\"], $vals_member[\"member_name\"], $vals_member[\"avatar\"], 0)  \n\t\t\t\t$number_participants = $number_participants + 1\n\t\t\t\t$i = $i + 1\n\t\t\t} \n\t\t}\n\n\t\tif ($type_participants == 2){\n\t\t\t$member_map = DBFind(\"members\").Where(\"id = $\", $var_id).Row()\n\t\t\tif ($member_map[\"id\"] != nil){\n\t\t\t\tDBInsert(\"voting_participants\", \"voting_id, member_id, member_name, member_avatar, decision\", $votingID, $var_id, $member_map[\"member_name\"], $member_map[\"avatar\"], 0)  \n\t\t\t\t$number_participants = $number_participants + 1\n\t\t\t}\n\t\t}\n\n\t\tif ($type_participants == 3){\n\t\t\t$ret_member = DBFind(\"roles_assign\").Where(\"role_id=$ and delete=0\", $var_id).Order(\"id\")\n\t\t\t$i = 0\n\t\t\twhile($i < Len($ret_member)){\n\t\t\t\t$vals_member = $ret_member[$i]\n\t\t\t\t\n\t\t\t\tDBInsert(\"voting_participants\", \"voting_id, member_id, member_name, member_avatar, decision\", $votingID, $vals_member[\"member_id\"], $vals_member[\"member_name\"], $vals_member[\"member_avatar\"], 0)  \n\t\t\t\t$number_participants = $number_participants + 1\n\t\t\t\t$i = $i + 1\n\t\t\t} \n\t\t}\n\n\t\tDBUpdate(\"voting_instances\", $votingID, \"number_participants\", $number_participants)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_Delete",
            "Value": "contract voting_Delete {\n    data {\n        votingID int\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=? and startdate > now()\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting already started. Delete voting impossible\"\n\t\t}\t\n\t\t\n\t\tif (Int($voting_map[\"creator_id\"]) != $key_id){\n\t\t\twarning \"You are not the creator of the voting\"\n\t\t}\n    }\n\n    action {\n\t\tDBUpdate(\"voting_instances\", $votingID, \"delete\", 1)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_CreateNew",
            "Value": "contract voting_CreateNew {\n    data {\n        voting_name string\n        type_voting int\n        description string\n        type_participants int\n        type_decision int\n        now_date string \"date\"\n        start_time string \"date\"\n        start_date string \"date\"\n        end_date string \"date\"\n        end_time string \"date\"\n        volume int\n        quorum int\n    }\n    \n    func conditions {\n        $start_date = $start_date + \" \"+ $start_time\n        $end_date = $end_date + \" \"+ $end_time\n        var m string\n        \n        if ($now_date >= $start_date){\n            m = Sprintf(\"Voting start date [%v] is less than the current date [%v]\", $start_date, $now_date)\n            warning m\n        }\n        \n        if ($start_date >= $end_date){\n            m = Sprintf(\"Voting end date [%v] is less than the start date [%v]\",$end_date, $start_date)\n            warning m\n        }\n        \n        if (($volume < 50) || ($volume > 100) ){\n            m = Sprintf(\"Volume [%v] should be in the range from 50 to 100\", $volume)\n            warning m\n        }\n        \n        if (($quorum < 5) || ($quorum > 100) ){\n            m = Sprintf(\"Quorum [%v] should be in the range from 5 to 100\", $quorum)\n            warning m\n        }\n        \n        $member_map = DBFind(\"members\").Where(\"id=$\", $key_id).Row()\n        if !$member_map {\n            warning \"You are not a member of the ecosystem\"\n        }\n    }\n    \n    func action {\n        $voting_id = DBInsert(\"voting_instances\", \"name,type_voting,description,typeparticipants,typedecision,startdate,enddate,volume,quorum,creator_id,creator_name,creator_avatar,flag_success,percent_success,number_participants,number_voters,flag_decision,flag_notifics,delete\",\n        $voting_name, $type_voting, $description, $type_participants, $type_decision, $start_date, $end_date, $volume, $quorum, $key_id, $member_map[\"member_name\"], $member_map[\"avatar\"], 0, 0, 0, 0, 0, 0, 0)\n        \n        // if all members are voting participants\n        if ($type_participants==1){\n            voting_Invite(\"votingID,var_id\", $voting_id, 0)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_AcceptDecision",
            "Value": "contract voting_AcceptDecision {\n    data {\n        votingID int\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=$\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting is not found\"\n\t\t}\n\t\t$subject_map = DBFind(\"voting_subject\").Where(\"voting_id=$\", $votingID).Row()\n\t\tif ($subject_map[\"id\"] == nil){\n\t\t\twarning \"Subject of voting is not found\"\n\t\t}\n\t\t\n\t\t// check the participant of the voting\n\t\t$participant_id = DBFind(\"voting_participants\").Where(\"voting_id=$ and member_id=$\", $votingID, $key_id).One(\"id\")\n\t\tif ($participant_id == nil){\n\t\t\twarning \"You are not a participant in this voting\"\n\t\t}\n    }\n\n    action {\n\t\t// if notifications have been sent, then close it\n\t\tif ( Int($voting_map[\"flag_notifics\"]) == 1 ){\n\t\t\tvar params string\n\t\t\tparams = \"notific_param=\" + Str($votingID)\t\n\t\t\t$notific_id = DBFind(\"notifications\").Where(\"recipient_id=$ and page_name=$ and page_params=$ and closed=$\", $key_id, \"voting_view\", params, 0).One(\"id\")\n\t\t\tif ($notific_id != nil){\n\t\t\t\tNotifications_Single_Close(\"notific_id\", Int($notific_id))\n\t\t\t}\n\t\t}\n\n\t\t// check the decision\n\t\tif ( Int($voting_map[\"flag_decision\"]) == 1 ){\n\t\t\twarning \"Decision was taken. Voting is now not possible\"\n\t\t} \n\t\t\n\t\t// check start-end of voting time\n\t\t$voting_start = DBFind(\"voting_instances\").Where(\"id=$ and startdate < now()\", $votingID).One(\"id\")\n\t\t$voting_end   = DBFind(\"voting_instances\").Where(\"id=$ and enddate   > now()\", $votingID).One(\"id\")\n\t\tif ($voting_start == nil){\n\t\t\twarning \"Voting has not yet begun. Try again later, please\"\n\t\t}\n\t\tif ($voting_end == nil){\n\t\t\twarning \"Voting has expired. Voting is now not possible\"\n\t\t}\n\t\t\n\t\t//-----------------------------------------------------------------------------------------------\n\n\t\t// write the result of the voting\n\t\tDBUpdate(\"voting_participants\", Int($participant_id), \"timestamp decision_date, decision\", $block_time, 1)\n\n\t\t// increment count of accept\n\t\t$subject_id     = Int($subject_map[\"id\"])\n\t\t$number_accept  = Int($subject_map[\"number_accept\"])\n\t\t$number_accept   = $number_accept + 1\n\t\tDBUpdate(\"voting_subject\", $subject_id, \"number_accept\", $number_accept)\n\n\t\tvoting_UpdateDataForGraphs(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SendNotifics",
            "Value": "contract voting_SendNotifics {\n    data {\n        votingID int\n    }\n\n    conditions {\n\t\t$voting_id = DBFind(\"voting_instances\").Where(\"id=$ and enddate > now()\", $votingID).One(\"id\")\n        if ($voting_id == nil){\n\t\t\twarning \"Voting has expired. Notifications can not be sent\"\n\t\t}\n\t\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=$ and startdate < now()\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting has not yet begun. Try again later, please\"\n\t\t}\t\n\t\t\n\t\tif( Int($voting_map[\"creator_id\"]) != $key_id ){\n\t\t\twarning \"You are not the creator of the voting\"\n\t\t}\n\t\tif( Int($voting_map[\"flag_notifics\"]) == 1 ){\n\t\t\twarning \"Notifications have already been sent\"\n\t\t}\n\t\t\n\t\t$voting_name = string($voting_map[\"name\"])\n    }\n\n    action {\n\t\t$ret_participants = DBFind(\"voting_participants\").Where(\"voting_id=$ and decision=$\", $votingID, 0)\n\t\t$i = 0\n\t\twhile($i < Len($ret_participants)){\n\t\t\t$vals_participants = $ret_participants[$i]\n\t\t\t$recipient = Int($vals_participants[\"member_id\"])\n\t\t\t\n\t\t\tvar params string\n\t\t\tparams = \"notific_param=\" + Str($votingID)\n\t\t\t\n\t\t\tNotifications_Single_Send(\"member_id,icon_name,text_header,text_body,page_name,params_val\", \n\t\t\t\t\t\t\t\t$recipient, \"fa-check\", \"Voting\", $voting_name, \"voting_view\", params)\n\t\t\t$i = $i + 1\n\t\t}\n\t\t\n\t\tDBUpdate(\"voting_instances\", $votingID, \"flag_notifics\", 1)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SubjectCheckFulldata",
            "Value": "contract voting_SubjectCheckFulldata {\n    data {\n        votingID int\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=?\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting is not found\"\n\t\t}\t\n\t\t\n\t\t$subject_map = DBFind(\"voting_subject\").Where(\"voting_id=?\", $votingID).Row()\n\t\tif ($subject_map[\"id\"] == nil){\n\t\t\twarning \"Subject of voting is not found\"\n\t\t}\n\t\t\n\t\t$typedecision = Int($voting_map[\"typedecision\"])\n    }\n\n    action {\n\t\tif ( ($typedecision == 1) || ($typedecision == 2) ){\n\t\t\tif ( (Int($voting_map[\"optional_number_cands\"]) > 0) && (Int($voting_map[\"optional_role_vacancies\"]) > 0) && (Int($voting_map[\"optional_role_id\"])  > 0) ){\n\t\t\t\tDBUpdate(\"voting_instances\", $votingID, \"flag_fulldata\", 1)\n\t\t\t} \n\t\t}\n\n\t\tif ($typedecision == 3){\n\t\t\tif ( (string($subject_map[\"text_document\"]) != \"\") && (string($subject_map[\"text_doc_hash\"]) != \"\") ){\n\t\t\t\tDBUpdate(\"voting_instances\", $votingID, \"flag_fulldata\", 1)\n\t\t\t} \n\t\t}\n\n\t\tif ($typedecision == 4){\n\t\t\tif ( (string($subject_map[\"formal_decision_description\"]) != \"\") && (string($subject_map[\"formal_decision_table\"])  != \"\") && \n\t\t\t\t (string($subject_map[\"formal_decision_tableid\"])     != \"\") && (string($subject_map[\"formal_decision_column\"]) != \"\") && \n\t\t\t\t (string($subject_map[\"formal_decision_colvalue\"])    != \"\") ){\n\t\t\t\tDBUpdate(\"voting_instances\", $votingID, \"flag_fulldata\", 1)\n\t\t\t} \n\t\t}\n\n\t\tif ($typedecision == 5){\n\t\t\tif ( (string($subject_map[\"contract_accept\"]) != \"\") && (string($subject_map[\"contract_reject\"]) != \"\") ){\n\t\t\t\tDBUpdate(\"voting_instances\", $votingID, \"flag_fulldata\", 1)\n\t\t\t} \n\t\t}\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SubjectCandidates",
            "Value": "contract voting_SubjectCandidates {\n    data {\n        votingID int\n        memberID int\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=$ and startdate > now()\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting already started. New candidate can not be added\"\n\t\t}\t\t\n\n\t\tif ( (Int($voting_map[\"flag_fulldata\"]) == 1) && (Int($voting_map[\"type_voting\"]) == 2) ){\n\t\t\twarning \"This vote is a system. Change settings not allowed\"\n\t\t}\n\t\t\n        if($memberID == 0){\n            $memberID = $key_id\n        }\n\t\t\n\t\t$subject_id = DBFind(\"voting_subject\").Where(\"voting_id=$ and member_id=$\", $votingID, $memberID).One(\"id\")\n\t\tif ($subject_id != nil){\n\t\t\twarning \"This candidature for this role has already been added before\"\n\t\t}\n\t\n\t\t$member_map = DBFind(\"members\").Where(\"id = $\", $memberID).Row()\n\t\tif ($member_map[\"id\"] == nil){\n\t\t\twarning \"Member not found\"\n\t\t}\n\t\t\n\t\t$optional_number_cands = Int($voting_map[\"optional_number_cands\"])\n    }\n\n    action {\n\t\tDBInsert(\"voting_subject\", \"member_id,member_name,member_avatar,voting_id\", $memberID, $member_map[\"member_name\"], $member_map[\"avatar\"], $votingID)\n\t\n\t\t$optional_number_cands = $optional_number_cands + 1\n\t\tDBUpdate(\"voting_instances\", $votingID, \"optional_number_cands\", $optional_number_cands)\n\n\t\tvoting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SubjectContract",
            "Value": "contract voting_SubjectContract {\n  data {\n    votingID int\n    \n    contract_reject string\n    contract_accept string\n    contract_reject_params string \"optional\"\n    contract_accept_params string \"optional\"\n  }\n  \n  conditions {\n    $voting_map = DBFind(\"voting_instances\").Where(\"id=? and startdate > now()\", $votingID).Row()\n    if ($voting_map[\"id\"] == nil){\n      warning \"Voting already started. Can not edit document\"\n    }\n    if ((Int($voting_map[\"flag_fulldata\"]) == 1) && (Int($voting_map[\"type_voting\"]) == 2) ){\n      warning \"This vote is a system. Change settings not allowed\"\n    }\n  }\n  \n  action {\n    $subject_id = DBFind(\"voting_subject\").Where(\"voting_id = $\", $votingID).One(\"id\")\n    if ($subject_id != nil){\n      DBUpdate(`voting_subject`, Int($subject_id), `contract_accept,contract_reject,contract_accept_params,contract_reject_params`, $contract_accept, $contract_reject, $contract_accept_params, $contract_reject_params)\n    } else {\n      DBInsert(`voting_subject`, `voting_id,contract_accept,contract_reject,contract_accept_params,contract_reject_params`, $votingID, $contract_accept, $contract_reject, $contract_accept_params, $contract_reject_params)\n    }\n    \n    voting_SubjectCheckFulldata(\"votingID\", $votingID)\n  }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SubjectDocument",
            "Value": "contract voting_SubjectDocument {\n    data {\n        votingID int\n        \n        text_document string\n        \n        contract_reject string \"optional\"\n        contract_accept string \"optional\"\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=? and startdate > now()\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting already started. Can not edit document\"\n\t\t}\t\t\n\t\tif ( (Int($voting_map[\"flag_fulldata\"]) == 1) && (Int($voting_map[\"type_voting\"]) == 2) ){\n\t\t\twarning \"This vote is a system. Change settings not allowed\"\n\t\t}\t\n\n\t\t$hash = Sha256($text_document)\n    }\n\n    action {\n\t\t$subject_id = DBFind(\"voting_subject\").Where(\"voting_id = $\", $votingID).One(\"id\")\n\t\tif ($subject_id != nil){\n\t\t\tDBUpdate(\"voting_subject\", Int($subject_id), \"text_document, text_doc_hash\", $text_document, $hash)\n\t\t} else {\n\t\t\tDBInsert(\"voting_subject\", \"text_document, text_doc_hash, voting_id\", $text_document, $hash, $votingID)\n\t\t}\n\t\n\t\tDBUpdate(\"voting_instances\", $votingID, \"optional_contract_accept,optional_contract_reject\", $contract_accept, $contract_reject)\n\t\tvoting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SubjectFormal",
            "Value": "contract voting_SubjectFormal {\n    data {\n        votingID int\n        \n        description string\n        table_to_written string\n        row_id string\n        column_name string\n        written_value string\n        \n        contract_reject string \"optional\"\n        contract_accept string \"optional\"\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=? and startdate > now()\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting already started. Can not edit document\"\n\t\t}\t\t\n\t\tif ( (Int($voting_map[\"flag_fulldata\"]) == 1) && (Int($voting_map[\"type_voting\"]) == 2) ){\n\t\t\twarning \"This vote is a system. Change settings not allowed\"\n\t\t}\n    }\n\n    action {\n\t\t$subject_id = DBFind(\"voting_subject\").Where(\"voting_id = $\", $votingID).One(\"id\")\n\t\tif ($subject_id != nil){\n\t\t\tDBUpdate(\"voting_subject\", Int($subject_id), \"formal_decision_description,formal_decision_table,formal_decision_tableid,formal_decision_column,formal_decision_colvalue\", \n\t\t\t\t$description, $table_to_written, $row_id, $column_name, $written_value)\n\t\t} else {\n\t\t\tDBInsert(\"voting_subject\", \"voting_id,formal_decision_description,formal_decision_table,formal_decision_tableid,formal_decision_column,formal_decision_colvalue\", \n\t\t\t\t$votingID, $description, $table_to_written, $row_id, $column_name, $written_value)\n\t\t}\n\n\t\tDBUpdate(\"voting_instances\", $votingID, \"optional_contract_accept,optional_contract_reject\", $contract_accept, $contract_reject)\n\t\tvoting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_SubjectSettings",
            "Value": "contract voting_SubjectSettings {\n    data {\n        votingID int\n        \n        roleID int\n        vacancies int\n        \n        contract_reject string \"optional\"\n        contract_accept string \"optional\"\n        accept_params string \"optional\"\n        reject_params string \"optional\"\n    }\n    \n    conditions {\n        if($vacancies < 1){\n            warning \"Number of vacancies can not be less than 1\"\n        }\n        \n        $voting_map = DBFind(\"voting_instances\").Where(\"id=? and startdate > now()\", $votingID).Row()\n        if($voting_map[\"id\"] == nil){\n            warning \"Voting already started. Change settings not allowed\"\n        }\n        if((Int($voting_map[\"flag_fulldata\"]) == 1) &&(Int($voting_map[\"type_voting\"]) == 2) ){\n            warning \"This vote is a system. Change settings not allowed\"\n        }\n        \n        $role_map = DBFind(\"roles_list\").Where(\"id=? and delete=0\", $roleID).Row()\n        if($role_map[\"id\"] == nil){\n            warning \"Specified role not found\"\n        }\n        // not elective or not \"Candidate for validators\"\n        // roles_types: 1. assigned_role, 2. elective_role, 3. system_role, 4. company_role\n        if !($role_map[\"role_type\"] == 2 || $role_map[\"role_type\"] == 3) {\n            warning \"The chosen role is not elective or has been removed\"\n        }\n    }\n    \n    action {\n        DBUpdate(\"voting_instances\", $votingID, \"optional_role_id,optional_role_vacancies,optional_contract_accept,optional_contract_reject,contract_accept_params,contract_reject_params\",\n        $roleID, $vacancies, $contract_accept, $contract_reject, $accept_params, $reject_params)\n        \n        voting_SubjectCheckFulldata(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "voting_RejectDecision",
            "Value": "contract voting_RejectDecision {\n    data {\n        votingID int\n    }\n\n    conditions {\n\t\t$voting_map = DBFind(\"voting_instances\").Where(\"id=$\", $votingID).Row()\n\t\tif ($voting_map[\"id\"] == nil){\n\t\t\twarning \"Voting is not found\"\n\t\t}\n\t\t\n\t\t// check the participant of the voting\n\t\t$participant_id = DBFind(\"voting_participants\").Where(\"voting_id=$ and member_id=$\", $votingID, $key_id).One(\"id\")\n\t\tif ($participant_id == nil){\n\t\t\twarning \"You are not a participant in this voting\"\n\t\t}\n    }\n\n    action {\n\t\t// if notifications have been sent, then close it\n\t\tif ( Int($voting_map[\"flag_notifics\"]) == 1 ){\n\t\t\tvar params string\n\t\t\tparams = \"notific_param=\" + Str($votingID)\t\n\t\t\t$notific_id = DBFind(\"notifications\").Where(\"recipient_id=$ and page_name=$ and page_params=$ and closed=$\", $key_id, \"voting_view\", params, 0).One(\"id\")\n\t\t\tif ($notific_id != nil){\n\t\t\t\tNotifications_Single_Close(\"notific_id\", Int($notific_id))\n\t\t\t}\n\t\t}\n\n\t\t// check the decision\n\t\tif ( Int($voting_map[\"flag_decision\"]) == 1 ){\n\t\t\twarning \"Decision was taken. Voting is now not possible\"\n\t\t} \n\t\t\n\t\t// check start-end of voting time\n\t\t$voting_start = DBFind(\"voting_instances\").Where(\"id=$ and startdate < now()\", $votingID).One(\"id\")\n\t\t$voting_end   = DBFind(\"voting_instances\").Where(\"id=$ and enddate   > now()\", $votingID).One(\"id\")\n\t\tif ($voting_start == nil){\n\t\t\twarning \"Voting has not yet begun. Try again later, please\"\n\t\t}\n\t\tif ($voting_end == nil){\n\t\t\twarning \"Voting has expired. Voting is now not possible\"\n\t\t}\n\t\t\n\t\t//-----------------------------------------------------------------------------------------------\n\n\t\t// write the result of the voting\n\t\tDBUpdate(\"voting_participants\", Int($participant_id), \"timestamp decision_date, decision\", $block_time, -1)\n\n\t\tvoting_UpdateDataForGraphs(\"votingID\", $votingID)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "data": [],
    "languages": [
        {
            "Name": "APL_not_required",
            "Conditions": "",
            "Trans": "{\"en\":\"APL not required\",\"ru\":\"Не требуется наличие APL\"}"
        },
        {
            "Name": "APL_required",
            "Conditions": "",
            "Trans": "{\"en\":\"APL required\",\"ru\":\"Требуется наличие APL\"}"
        },
        {
            "Name": "accept",
            "Conditions": "",
            "Trans": "{\"en\": \"Accept\", \"ru\": \"Принять\"}"
        },
        {
            "Name": "accept_request_member",
            "Conditions": "",
            "Trans": "{\"en\": \"Accept the request of this member?\", \"ru\": \"Принять запрос этого члена?\"}"
        },
        {
            "Name": "accepted",
            "Conditions": "",
            "Trans": "{\"en\": \"Accepted\", \"ru\": \"Принят\"}"
        },
        {
            "Name": "account",
            "Conditions": "",
            "Trans": "{\"en\": \"Account\", \"ru\": \"Счет\"}"
        },
        {
            "Name": "accounts",
            "Conditions": "",
            "Trans": "{\"en\": \"Accounts\", \"ru\": \"Счета\"}"
        },
        {
            "Name": "actions",
            "Conditions": "",
            "Trans": "{\"en\": \"Actions\", \"ru\": \"Действия\"}"
        },
        {
            "Name": "active",
            "Conditions": "",
            "Trans": "{\"en\": \"Active\", \"ru\": \"Активно\"}"
        },
        {
            "Name": "add",
            "Conditions": "",
            "Trans": "{\"en\": \"Add\", \"ru\": \"Добавить\"}"
        },
        {
            "Name": "add_member",
            "Conditions": "",
            "Trans": "{\"en\": \"Add member\", \"ru\": \"Добавить члена\"}"
        },
        {
            "Name": "add_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Add role\", \"ru\": \"Добавить роль\"}"
        },
        {
            "Name": "address",
            "Conditions": "",
            "Trans": "{\"en\":\"Address\",\"ru\":\"Адрес\"}"
        },
        {
            "Name": "admin",
            "Conditions": "",
            "Trans": "{\"en\":\"Administrator\",\"ru\":\"Администратор\"}"
        },
        {
            "Name": "admin_tools",
            "Conditions": "",
            "Trans": "{\"en\": \"Admin tools\", \"ru\": \"Инструменты администратора\"}"
        },
        {
            "Name": "agency",
            "Conditions": "",
            "Trans": "{\"en\": \"Agency\", \"ru\": \"Агенский\"}"
        },
        {
            "Name": "all",
            "Conditions": "",
            "Trans": "{\"en\": \"All\", \"ru\": \"Все\"}"
        },
        {
            "Name": "amount",
            "Conditions": "",
            "Trans": "{\"en\": \"Amount\", \"ru\": \"Сумма\"}"
        },
        {
            "Name": "apply",
            "Conditions": "",
            "Trans": "{\"en\": \"Apply\", \"ru\": \"Подать\"}"
        },
        {
            "Name": "appointed",
            "Conditions": "",
            "Trans": "{\"en\": \"Appointed\", \"ru\": \"Назначен\"}"
        },
        {
            "Name": "appointment_impossible",
            "Conditions": "",
            "Trans": "{\"ru\":\"*Эта роль не является назначаемой. Назначение членов невозможно\",\"en\":\"*This role is not assignable. The appointment of members is impossible\"}"
        },
        {
            "Name": "assign",
            "Conditions": "",
            "Trans": "{\"en\": \"Assign\", \"ru\": \"Назначить\"}"
        },
        {
            "Name": "assigned",
            "Conditions": "",
            "Trans": "{\"en\": \"Assigned\", \"ru\": \"Назначен\"}"
        },
        {
            "Name": "assigned_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Assigned\", \"ru\": \"Назначаемая\"}"
        },
        {
            "Name": "at",
            "Conditions": "",
            "Trans": "{\"en\": \"at\", \"ru\": \"в\"}"
        },
        {
            "Name": "attention",
            "Conditions": "",
            "Trans": "{\"en\": \"ATTENTION! The page has not received parameters and is unavailable for viewing.\", \"ru\": \"ВНИМАНИЕ! Страница не получила параметров и не доступна для просмотра.\"}"
        },
        {
            "Name": "available",
            "Conditions": "",
            "Trans": "{\"en\":\"Available\",\"ru\":\"Доступно\"}"
        },
        {
            "Name": "avatar",
            "Conditions": "",
            "Trans": "{\"en\": \"Avatar\", \"ru\": \"Фото\"}"
        },
        {
            "Name": "back",
            "Conditions": "",
            "Trans": "{\"en\": \"Back\", \"ru\": \"Назад\"}"
        },
        {
            "Name": "balance",
            "Conditions": "",
            "Trans": "{\"en\": \"Balance\", \"ru\": \"Баланс\"}"
        },
        {
            "Name": "begin",
            "Conditions": "",
            "Trans": "{\"en\": \"Begin\", \"ru\": \"Начать\"}"
        },
        {
            "Name": "birthdate",
            "Conditions": "",
            "Trans": "{\"en\": \"Birthdate\", \"ru\": \"Дата рождения\"}"
        },
        {
            "Name": "body_text",
            "Conditions": "",
            "Trans": "{\"en\": \"Body text\", \"ru\": \"Основной текст\"}"
        },
        {
            "Name": "business",
            "Conditions": "",
            "Trans": "{\"en\":\"Business\",\"ru\":\"Бизнес\"}"
        },
        {
            "Name": "can_apply_voting",
            "Conditions": "",
            "Trans": "{\"en\": \"You can apply for voting\", \"ru\": \"Вы можете подать заявку на голосование\"}"
        },
        {
            "Name": "candidates",
            "Conditions": "",
            "Trans": "{\"en\": \"Candidates\", \"ru\": \"Кандидаты\"}"
        },
        {
            "Name": "catalog_ecosystems",
            "Conditions": "",
            "Trans": "{\"en\":\"Catalog of ecosystems\",\"ru\":\"Каталог экосистем\"}"
        },
        {
            "Name": "catalog_ecosystems_conditions",
            "Conditions": "",
            "Trans": "{\"en\":\"Ecosystem conditions and procedure for accession\",\"ru\":\"Условия и порядок присоединения к экосистеме\"}"
        },
        {
            "Name": "catalog_ecosystems_contact_email",
            "Conditions": "",
            "Trans": "{\"en\":\"Contact e-mail\",\"ru\":\"Почта для контактов\"}"
        },
        {
            "Name": "catalog_ecosystems_contact_phone",
            "Conditions": "",
            "Trans": "{\"en\":\"Contact phone\",\"ru\":\"Контактный телефон\"}"
        },
        {
            "Name": "catalog_ecosystems_contact_vde_page",
            "Conditions": "",
            "Trans": "{\"en\":\"Web site\",\"ru\":\"Веб сайт\"}"
        },
        {
            "Name": "catalog_ecosystems_description",
            "Conditions": "",
            "Trans": "{\"en\":\"Ecosystem hardware description\",\"ru\":\"Описание оборудования экосистемы\"}"
        },
        {
            "Name": "catalog_ecosystems_form",
            "Conditions": "",
            "Trans": "{\"en\":\"Add ecosystem to Catalog\",\"ru\":\"Добавить экосистему в каталог\"}"
        },
        {
            "Name": "catalog_ecosystems_freetype",
            "Conditions": "",
            "Trans": "{\"en\":\"Availability of own funds for entry\",\"ru\":\"Наличие собственных средств для вступления\"}"
        },
        {
            "Name": "catalog_ecosystems_logo",
            "Conditions": "",
            "Trans": "{\"en\":\"Logotype image\",\"ru\":\"Изображение логотипа\"}"
        },
        {
            "Name": "catalog_ecosystems_name",
            "Conditions": "",
            "Trans": "{\"en\":\"Ecosystem name in the Catalog\",\"ru\":\"Имя экосистемы в Каталоге\"}"
        },
        {
            "Name": "catalog_ecosystems_number",
            "Conditions": "",
            "Trans": "{\"en\":\"Ecosystem\",\"ru\":\"Экосистема\"}"
        },
        {
            "Name": "catalog_ecosystems_type",
            "Conditions": "",
            "Trans": "{\"en\":\"Ecosystem type\",\"ru\":\"Тип экосистемы\"}"
        },
        {
            "Name": "change",
            "Conditions": "",
            "Trans": "{\"en\": \"Change\", \"ru\": \"Изменить\"}"
        },
        {
            "Name": "check_expiration",
            "Conditions": "",
            "Trans": "{\"en\": \"Check expiration\", \"ru\": \"Проверить истечение\"}"
        },
        {
            "Name": "close",
            "Conditions": "",
            "Trans": "{\"en\": \"Close\", \"ru\": \"Закрыть\"}"
        },
        {
            "Name": "closure_type",
            "Conditions": "",
            "Trans": "{\"en\": \"Closure type\", \"ru\": \"Тип закрытия\"}"
        },
        {
            "Name": "column_name",
            "Conditions": "",
            "Trans": "{\"en\": \"Column name\", \"ru\": \"Название столбца\"}"
        },
        {
            "Name": "column_name_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Column name to which the value will be written (Example: onhold)\", \"ru\": \"Название столбца, в который будет записано значение (Пример: onhold)\"}"
        },
        {
            "Name": "comment",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Comment\",\n    \"ru\": \"Комментарий\"\n}"
        },
        {
            "Name": "commission_address",
            "Conditions": "",
            "Trans": "{\"en\":\"Account address\",\"ru\":\"Адрес аккаунта\"}"
        },
        {
            "Name": "commission_pub",
            "Conditions": "",
            "Trans": "{\"en\":\"Account public key\",\"ru\":\"Публичный ключ аккаунта\"}"
        },
        {
            "Name": "companies",
            "Conditions": "",
            "Trans": "{\"en\":\"Companies\",\"ru\":\"Компании\"}"
        },
        {
            "Name": "company",
            "Conditions": "",
            "Trans": "{\"en\": \"Company\", \"ru\": \"Компания\"}"
        },
        {
            "Name": "company_add",
            "Conditions": "",
            "Trans": "{\"en\":\"Add company\",\"ru\":\"Добавить компанию\"}"
        },
        {
            "Name": "company_role",
            "Conditions": "",
            "Trans": "{\"en\":\"Company role\",\"ru\":\"Роль компании\"}"
        },
        {
            "Name": "confirmation",
            "Conditions": "",
            "Trans": "{\"en\":\"Confirmation\",\"ru\":\"Подтверждение\"}"
        },
        {
            "Name": "contract_accept",
            "Conditions": "",
            "Trans": "{\"en\": \"Contract of accept\", \"ru\": \"Контракт при принятии\"}"
        },
        {
            "Name": "contract_accept_des",
            "Conditions": "",
            "Trans": "{\"en\": \"Name of the contract, which should be started if the decision is accepted\", \"ru\": \"Название контракта, который должен быть запущен, если решение будет одобрено\"}"
        },
        {
            "Name": "contract_accepted",
            "Conditions": "",
            "Trans": "{\"en\": \"Contractaccept\", \"ru\": \"Контракт принят\"}"
        },
        {
            "Name": "contract_reject",
            "Conditions": "",
            "Trans": "{\"en\": \"Contract of reject\", \"ru\": \"Контракт при отклонении\"}"
        },
        {
            "Name": "contract_reject_des",
            "Conditions": "",
            "Trans": "{\"en\": \"Name of the contract, which should be started if the decision is rejected\", \"ru\": \"Название контракта, который должен быть запущен, если решение будет отклонено\"}"
        },
        {
            "Name": "contract_rejected",
            "Conditions": "",
            "Trans": "{\"en\": \"Contract reject\", \"ru\": \"Контракт отклонен\"}"
        },
        {
            "Name": "copy",
            "Conditions": "",
            "Trans": "{\"en\": \"Copy\", \"ru\": \"Копировать\"}"
        },
        {
            "Name": "create",
            "Conditions": "",
            "Trans": "{\"en\": \"Create\", \"ru\": \"Создать\"}"
        },
        {
            "Name": "create_account",
            "Conditions": "",
            "Trans": "{\"en\": \"Create account\", \"ru\": \"Создать счет\"}"
        },
        {
            "Name": "created",
            "Conditions": "",
            "Trans": "{\"en\": \"Created\", \"ru\": \"Создан\"}"
        },
        {
            "Name": "creator",
            "Conditions": "",
            "Trans": "{\"en\": \"Creator\", \"ru\": \"Кто создал\"}"
        },
        {
            "Name": "dashboard",
            "Conditions": "",
            "Trans": "{\"en\": \"Dashboard\", \"ru\": \"Приборная панель\"}"
        },
        {
            "Name": "date_created",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Date created\",\n    \"ru\": \"Дата создания\"\n}"
        },
        {
            "Name": "date_end",
            "Conditions": "",
            "Trans": "{\"en\": \"Date end\", \"ru\": \"Дата окончания\"}"
        },
        {
            "Name": "date_start",
            "Conditions": "",
            "Trans": "{\"en\": \"Date start\", \"ru\": \"Дата начала\"}"
        },
        {
            "Name": "decision",
            "Conditions": "",
            "Trans": "{\"en\": \"Decision\", \"ru\": \"Решение\"}"
        },
        {
            "Name": "decision_accept",
            "Conditions": "",
            "Trans": "{\"en\": \"Decision accept\", \"ru\": \"Решение одобрено\"}"
        },
        {
            "Name": "decision_reject",
            "Conditions": "",
            "Trans": "{\"en\": \"Decision reject\", \"ru\": \"Решение отклонено\"}"
        },
        {
            "Name": "deleted",
            "Conditions": "",
            "Trans": "{\"en\": \"Deleted\", \"ru\": \"Удалено\"}"
        },
        {
            "Name": "description",
            "Conditions": "",
            "Trans": "{\"en\": \"Description\", \"ru\": \"Описание\"}"
        },
        {
            "Name": "description_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Text description of the subject of voting\", \"ru\": \"Текстовое описание предмета голосования\"}"
        },
        {
            "Name": "description_equipment",
            "Conditions": "",
            "Trans": "{\"en\":\"Description equipment\",\"ru\":\"Описание оборудования\"}"
        },
        {
            "Name": "did_not_vote",
            "Conditions": "",
            "Trans": "{\"en\": \"Did not vote\", \"ru\": \"Не голосовал\"}"
        },
        {
            "Name": "document_accept",
            "Conditions": "",
            "Trans": "{\"en\": \"Document accept\", \"ru\": \"Документ одобрен\"}"
        },
        {
            "Name": "document_reject",
            "Conditions": "",
            "Trans": "{\"en\": \"Document reject\", \"ru\": \"Документ отклонен\"}"
        },
        {
            "Name": "edit",
            "Conditions": "",
            "Trans": "{\"en\":\"Edit\",\"ru\":\"Редактировать\"}"
        },
        {
            "Name": "editing_profile",
            "Conditions": "",
            "Trans": "{\"en\": \"Editing profile\", \"ru\": \"Редактирование профиля\"}"
        },
        {
            "Name": "elective",
            "Conditions": "",
            "Trans": "{\"en\": \"Elective\", \"ru\": \"Выбран\"}"
        },
        {
            "Name": "elective_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Elective\", \"ru\": \"Выборная\"}"
        },
        {
            "Name": "email",
            "Conditions": "",
            "Trans": "{\"en\": \"Email\", \"ru\": \"Почта\"}"
        },
        {
            "Name": "emission",
            "Conditions": "",
            "Trans": "{\"en\": \"Emission\", \"ru\": \"Эмиссия\"}"
        },
        {
            "Name": "emission_account_not_found",
            "Conditions": "",
            "Trans": "{\"en\":\"System emission account is not found\",\"ru\":\"Системный эмиссионный счет не найден\"}"
        },
        {
            "Name": "empty",
            "Conditions": "",
            "Trans": "{\"en\": \"[no]\", \"ru\": \"[нет]\"}"
        },
        {
            "Name": "execute",
            "Conditions": "",
            "Trans": "{\"en\": \"Execute\", \"ru\": \"Выполнить\"}"
        },
        {
            "Name": "expiration",
            "Conditions": "",
            "Trans": "{\"en\": \"Expiration\", \"ru\": \"Окончание\"}"
        },
        {
            "Name": "expiration_only_visitor",
            "Conditions": "",
            "Trans": "{\"en\": \"Expiration only for visitor\", \"ru\": \"Окончание только для посетителя\"}"
        },
        {
            "Name": "expired",
            "Conditions": "",
            "Trans": "{\"en\": \"Expired\", \"ru\": \"Истекло\"}"
        },
        {
            "Name": "female",
            "Conditions": "",
            "Trans": "{\"en\": \"Female\", \"ru\": \"Женский\"}"
        },
        {
            "Name": "filled",
            "Conditions": "",
            "Trans": "{\"en\": \"Filled\", \"ru\": \"Заполнено\"}"
        },
        {
            "Name": "finance",
            "Conditions": "",
            "Trans": "{\"en\":\"Finance\",\"ru\":\"Финансы\"}"
        },
        {
            "Name": "finished",
            "Conditions": "",
            "Trans": "{\"en\": \"Finished\", \"ru\": \"Завершено\"}"
        },
        {
            "Name": "freetype",
            "Conditions": "",
            "Trans": "{\"en\":\"Pay type\",\"ru\":\"Тип оплаты\"}"
        },
        {
            "Name": "gender",
            "Conditions": "",
            "Trans": "{\"en\": \"Gender\", \"ru\": \"Пол\"}"
        },
        {
            "Name": "group_person",
            "Conditions": "",
            "Trans": "{\"en\":\"Group of person\",\"ru\":\"Группа персон\"}"
        },
        {
            "Name": "header",
            "Conditions": "",
            "Trans": "{\"en\": \"Header\", \"ru\": \"Заголовок\"}"
        },
        {
            "Name": "host_ip",
            "Conditions": "",
            "Trans": "{\"en\":\"IP\",\"ru\":\"IP\"}"
        },
        {
            "Name": "icon",
            "Conditions": "",
            "Trans": "{\"en\": \"Icon\", \"ru\": \"Иконка\"}"
        },
        {
            "Name": "id",
            "Conditions": "",
            "Trans": "{\"en\": \"ID\", \"ru\": \"ID\"}"
        },
        {
            "Name": "impossible",
            "Conditions": "",
            "Trans": "{\"en\": \"Impossible\", \"ru\": \"Не возможно\"}"
        },
        {
            "Name": "include_in_role",
            "Conditions": "",
            "Trans": "{\"en\":\"YES - Include a member in the role\",\"ru\":\"ДА - Включить члена в роль\"}"
        },
        {
            "Name": "init_condition",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Initiate process condition\",\n    \"ru\": \"Условие для начала процесса\"\n}"
        },
        {
            "Name": "institution",
            "Conditions": "",
            "Trans": "{\"en\":\"Institution\",\"ru\":\"Учреждение\"}"
        },
        {
            "Name": "limited",
            "Conditions": "",
            "Trans": "{\"en\": \"Limited\", \"ru\": \"Ограничены\"}"
        },
        {
            "Name": "lists_of_roles",
            "Conditions": "",
            "Trans": "{\"en\": \"Lists of roles and\", \"ru\": \"Список ролей и\"}"
        },
        {
            "Name": "logo",
            "Conditions": "",
            "Trans": "{\"en\":\"Logo\",\"ru\":\"Лого\"}"
        },
        {
            "Name": "male",
            "Conditions": "",
            "Trans": "{\"en\": \"Male\", \"ru\": \"Мужской\"}"
        },
        {
            "Name": "member",
            "Conditions": "",
            "Trans": "{\"en\": \"Member\", \"ru\": \"Член\"}"
        },
        {
            "Name": "member_id",
            "Conditions": "",
            "Trans": "{\"en\": \"Member ID\", \"ru\": \"ID члена\"}"
        },
        {
            "Name": "member_name",
            "Conditions": "",
            "Trans": "{\"en\":\"Full name\",\"ru\":\"Полное имя\"}"
        },
        {
            "Name": "members",
            "Conditions": "",
            "Trans": "{\"en\": \"Members\", \"ru\": \"Члены\"}"
        },
        {
            "Name": "membership",
            "Conditions": "",
            "Trans": "{\"en\": \"Membership\", \"ru\": \"Членство\"}"
        },
        {
            "Name": "membership_management",
            "Conditions": "",
            "Trans": "{\"en\": \"Membership management and\", \"ru\": \"Управление членами и\"}"
        },
        {
            "Name": "membership_request_accept",
            "Conditions": "",
            "Trans": "{\"ru\":\"Вы хотите принять этот запрос?\",\"en\":\"Do you want to accept this request?\"}"
        },
        {
            "Name": "membership_request_reject",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to reject this request?\",\"ru\":\"Вы хотите отклонить этот запрос?\"}"
        },
        {
            "Name": "membership_requests",
            "Conditions": "",
            "Trans": "{\"en\": \"Membership requests\", \"ru\": \"Запросы на членство\"}"
        },
        {
            "Name": "membership_roles_notifications",
            "Conditions": "",
            "Trans": "{\"en\": \"Membership, roles, notifications\", \"ru\": \"Членство, роли, уведомления\"}"
        },
        {
            "Name": "multiple",
            "Conditions": "",
            "Trans": "{\"en\": \"Multiple\", \"ru\": \"Множественные\"}"
        },
        {
            "Name": "my_account",
            "Conditions": "",
            "Trans": "{\"en\": \"My account\", \"ru\": \"Мой счет\"}"
        },
        {
            "Name": "name",
            "Conditions": "",
            "Trans": "{\"en\": \"Name\", \"ru\": \"Название\"}"
        },
        {
            "Name": "name_first",
            "Conditions": "",
            "Trans": "{\"en\": \"First name\", \"ru\": \"Имя\"}"
        },
        {
            "Name": "name_last",
            "Conditions": "",
            "Trans": "{\"en\": \"Last name\", \"ru\": \"Фамилия\"}"
        },
        {
            "Name": "name_middle",
            "Conditions": "",
            "Trans": "{\"en\": \"Middle name\", \"ru\": \"Отчество\"}"
        },
        {
            "Name": "need_fuel",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Need APL\",\n    \"ru\": \"Нужно APL\"\n}"
        },
        {
            "Name": "new_ecosystem",
            "Conditions": "",
            "Trans": "{\"en\":\"New ecosystem\",\"ru\":\"Создать экосистему\"}"
        },
        {
            "Name": "new_role",
            "Conditions": "",
            "Trans": "{\"en\": \"New role\", \"ru\": \"Новая роль\"}"
        },
        {
            "Name": "new_template",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"New template\",\n    \"ru\": \"Новый шаблон\"\n}"
        },
        {
            "Name": "new_voting",
            "Conditions": "",
            "Trans": "{\"en\": \"New voting\", \"ru\": \"Новое голосование\"}"
        },
        {
            "Name": "no",
            "Conditions": "",
            "Trans": "{\"en\":\"No\",\"ru\":\"Нет\"}"
        },
        {
            "Name": "no_expiration",
            "Conditions": "",
            "Trans": "{\"en\": \"No expiration\", \"ru\": \"Без окончания\"}"
        },
        {
            "Name": "no_include_in_role",
            "Conditions": "",
            "Trans": "{\"en\":\"NO - Do not include a member in the role\",\"ru\":\"НЕТ - Не включать члена в роль\"}"
        },
        {
            "Name": "not_enough_votes",
            "Conditions": "",
            "Trans": "{\"en\": \"Not enough votes\", \"ru\": \"Недостаточно голосов\"}"
        },
        {
            "Name": "not_need_fuel",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Not need APL\",\n    \"ru\": \"Не нужно APL\"\n}"
        },
        {
            "Name": "notifications",
            "Conditions": "",
            "Trans": "{\"en\": \"Notifications\", \"ru\": \"Уведомления\"}"
        },
        {
            "Name": "notifics",
            "Conditions": "",
            "Trans": "{\"en\": \"Notifications\", \"ru\": \"Уведомления\"}"
        },
        {
            "Name": "num_members",
            "Conditions": "",
            "Trans": "{\"en\": \"Number of members\", \"ru\": \"Количество членов\"}"
        },
        {
            "Name": "onhold",
            "Conditions": "",
            "Trans": "{\"en\": \"onHold\", \"ru\": \"Закрыт\"}"
        },
        {
            "Name": "only_if_role_type",
            "Conditions": "",
            "Trans": "{\"en\":\"Only if role type -> Company role. For all other types is not used\",\"ru\":\"Только если тип роли - Роль компании. Для всех других типов не используется\"}"
        },
        {
            "Name": "optional",
            "Conditions": "",
            "Trans": "{\"en\": \"[Optional]\", \"ru\": \"[Необязательный]\"}"
        },
        {
            "Name": "organization",
            "Conditions": "",
            "Trans": "{\"en\":\"Organization\",\"ru\":\"Организация\"}"
        },
        {
            "Name": "page",
            "Conditions": "",
            "Trans": "{\"en\":\"Page\",\"ru\":\"Страница\"}"
        },
        {
            "Name": "page_name",
            "Conditions": "",
            "Trans": "{\"en\": \"Page name\", \"ru\": \"Название страницы\"}"
        },
        {
            "Name": "params",
            "Conditions": "",
            "Trans": "{\"en\":\"Parameters\",\"ru\":\"Параметры\"}"
        },
        {
            "Name": "participants",
            "Conditions": "",
            "Trans": "{\"en\": \"Participants\", \"ru\": \"Участники\"}"
        },
        {
            "Name": "participants_add",
            "Conditions": "",
            "Trans": "{\"en\": \"Add participants\", \"ru\": \"Добавить участников\"}"
        },
        {
            "Name": "pending_notifics",
            "Conditions": "",
            "Trans": "{\"en\": \"Pending notifications\", \"ru\": \"Ожидающие уведомления\"}"
        },
        {
            "Name": "person",
            "Conditions": "",
            "Trans": "{\"en\": \"Person\", \"ru\": \"Персональный\"}"
        },
        {
            "Name": "phone",
            "Conditions": "",
            "Trans": "{\"en\": \"Phone\", \"ru\": \"Телефон\"}"
        },
        {
            "Name": "possible",
            "Conditions": "",
            "Trans": "{\"en\": \"Possible\", \"ru\": \"Возможно\"}"
        },
        {
            "Name": "processing",
            "Conditions": "",
            "Trans": "{\"en\": \"Processing\", \"ru\": \"Обработка\"}"
        },
        {
            "Name": "profile",
            "Conditions": "",
            "Trans": "{\"en\": \"Profile\", \"ru\": \"Профиль\"}"
        },
        {
            "Name": "progress",
            "Conditions": "",
            "Trans": "{\"en\": \"Progress\", \"ru\": \"Прогресс\"}"
        },
        {
            "Name": "pub_key",
            "Conditions": "",
            "Trans": "{\"en\":\"Public key\",\"ru\":\"Публичный ключ\"}"
        },
        {
            "Name": "public_org",
            "Conditions": "",
            "Trans": "{\"en\":\"Public organization\",\"ru\":\"Публичная организация\"}"
        },
        {
            "Name": "quorum",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Quorum\",\n    \"ru\": \"Кворум\"\n}"
        },
        {
            "Name": "recipient",
            "Conditions": "",
            "Trans": "{\"en\": \"Recipient\", \"ru\": \"Получатель\"}"
        },
        {
            "Name": "recipient_account",
            "Conditions": "",
            "Trans": "{\"en\": \"Recipient account\", \"ru\": \"Счет получателя\"}"
        },
        {
            "Name": "reject",
            "Conditions": "",
            "Trans": "{\"en\": \"Reject\", \"ru\": \"Отклонить\"}"
        },
        {
            "Name": "rejected",
            "Conditions": "",
            "Trans": "{\"en\": \"Rejected\", \"ru\": \"Отклонено\"}"
        },
        {
            "Name": "request",
            "Conditions": "",
            "Trans": "{\"en\": \"Request\", \"ru\": \"Запрос\"}"
        },
        {
            "Name": "request_accepted",
            "Conditions": "",
            "Trans": "{\"en\":\"Request was approved\",\"ru\":\"Запрос был одобрен\"}"
        },
        {
            "Name": "request_info",
            "Conditions": "",
            "Trans": "{\"en\":\"Request info\",\"ru\":\"Информация о запросе\"}"
        },
        {
            "Name": "request_membership",
            "Conditions": "",
            "Trans": "{\"ru\":\"Запрос членства\",\"en\":\"Request for membership\"}"
        },
        {
            "Name": "request_not_sent",
            "Conditions": "",
            "Trans": "{\"ru\":\"Запрос не отправлялся\",\"en\":\"Request not sent\"}"
        },
        {
            "Name": "request_rejected",
            "Conditions": "",
            "Trans": "{\"en\":\"Request was rejected\",\"ru\":\"Запрос был отклонен\"}"
        },
        {
            "Name": "request_wating",
            "Conditions": "",
            "Trans": "{\"en\":\"Request has been sent. Wait for administrator's decision\",\"ru\":\"Запрос отправлен. Ожидайте решение\"}"
        },
        {
            "Name": "required_logo",
            "Conditions": "",
            "Trans": "{\"en\":\"Required logo\",\"ru\":\"Требуется логотип\"}"
        },
        {
            "Name": "right_sign",
            "Conditions": "",
            "Trans": "{\"en\":\"Signature right\",\"ru\":\"Право подписи\"}"
        },
        {
            "Name": "right_sign_no",
            "Conditions": "",
            "Trans": "{\"en\":\"No signature right\",\"ru\":\"Нет права подписи\"}"
        },
        {
            "Name": "right_sign_yes",
            "Conditions": "",
            "Trans": "{\"en\":\"Have signature rights\",\"ru\":\"Имеет право подписи\"}"
        },
        {
            "Name": "role",
            "Conditions": "",
            "Trans": "{\"en\": \"Role\", \"ru\": \"Роль\"}"
        },
        {
            "Name": "role_notifics",
            "Conditions": "",
            "Trans": "{\"en\": \"Role notifications\", \"ru\": \"Ролевые уведомления\"}"
        },
        {
            "Name": "roles",
            "Conditions": "",
            "Trans": "{\"en\": \"Roles\", \"ru\": \"Роли\"}"
        },
        {
            "Name": "rollback",
            "Conditions": "",
            "Trans": "{\"en\": \"Rollback\", \"ru\": \"Откат\"}"
        },
        {
            "Name": "row_id",
            "Conditions": "",
            "Trans": "{\"en\": \"Row ID\", \"ru\": \"ID строки\"}"
        },
        {
            "Name": "row_id_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Row ID to which the value will be written (Example: 14)\", \"ru\": \"ID строки, в которую будет записано значение (Пример: 14)\"}"
        },
        {
            "Name": "save",
            "Conditions": "",
            "Trans": "{\"en\": \"Save\", \"ru\": \"Сохранить\"}"
        },
        {
            "Name": "select_member",
            "Conditions": "",
            "Trans": "{\"en\": \"Select a member to add\", \"ru\": \"Укажите члена, чтобы добавить\"}"
        },
        {
            "Name": "select_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Select a role to add all members of this role\", \"ru\": \"Выберите роль, чтобы добавить всех участников этой роли\"}"
        },
        {
            "Name": "select_role_if_include",
            "Conditions": "",
            "Trans": "{\"ru\":\"Выберите роль, если вы хотите включить члена в роль\",\"en\":\"Select a role if you want to include a member in the role\"}"
        },
        {
            "Name": "send",
            "Conditions": "",
            "Trans": "{\"en\": \"Send\", \"ru\": \"Отправить\"}"
        },
        {
            "Name": "sender_account",
            "Conditions": "",
            "Trans": "{\"en\":\"Sender account\",\"ru\":\"Счет отправителя\"}"
        },
        {
            "Name": "single",
            "Conditions": "",
            "Trans": "{\"en\": \"Single\", \"ru\": \"Одиночные\"}"
        },
        {
            "Name": "single_and_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Single and Role\", \"ru\": \"Одиночные и ролевые\"}"
        },
        {
            "Name": "single_notifics",
            "Conditions": "",
            "Trans": "{\"en\": \"Single notifications\", \"ru\": \"Одиночные уведомления\"}"
        },
        {
            "Name": "start",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Start\",\n    \"ru\": \"Начать\"\n}"
        },
        {
            "Name": "started",
            "Conditions": "",
            "Trans": "{\"en\": \"Started\", \"ru\": \"Начато\"}"
        },
        {
            "Name": "status",
            "Conditions": "",
            "Trans": "{\"en\": \"Status\", \"ru\": \"Статус\"}"
        },
        {
            "Name": "subject_voting",
            "Conditions": "",
            "Trans": "{\"en\": \"Subject of voting\", \"ru\": \"Предмет голосования\"}"
        },
        {
            "Name": "subject_voting_edit",
            "Conditions": "",
            "Trans": "{\"en\": \"Edit subject of voting\", \"ru\": \"Редактировать предмет голосования\"}"
        },
        {
            "Name": "success",
            "Conditions": "",
            "Trans": "{\"en\": \"Success\", \"ru\": \"Успешно\"}"
        },
        {
            "Name": "sys_emission",
            "Conditions": "",
            "Trans": "{\"en\":\"sys-emission\",\"ru\":\"Эмиссия (системный)\"}"
        },
        {
            "Name": "sys_trash",
            "Conditions": "",
            "Trans": "{\"en\":\"sys-trash\",\"ru\":\"Корзина (системный)\"}"
        },
        {
            "Name": "sysparams_candidate_validators_form",
            "Conditions": "",
            "Trans": "{\"en\":\"Request form of candidate for validators\",\"ru\":\"Форма запроса кандидата в валидаторы\"}"
        },
        {
            "Name": "sysparams_candidates_list",
            "Conditions": "",
            "Trans": "{\"en\":\"Candidate for validators list\",\"ru\":\"Список кандидатов в валидаторы\"}"
        },
        {
            "Name": "sysparams_list",
            "Conditions": "",
            "Trans": "{\"en\":\"System parameters list\",\"ru\":\"Список системных параметров\"}"
        },
        {
            "Name": "system_params",
            "Conditions": "",
            "Trans": "{\"en\":\"System parameters\",\"ru\":\"Системные параметры\"}"
        },
        {
            "Name": "system_role",
            "Conditions": "",
            "Trans": "{\"en\":\"System\",\"ru\":\"Системная\"}"
        },
        {
            "Name": "system_tokens",
            "Conditions": "",
            "Trans": "{\"en\": \"System of tokens\", \"ru\": \"Система токенов\"}"
        },
        {
            "Name": "table_to_written",
            "Conditions": "",
            "Trans": "{\"en\": \"Table name\", \"ru\": \"Название таблицы\"}"
        },
        {
            "Name": "table_to_written_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Table to which the value will be written (Example: accounts)\", \"ru\": \"Таблица, в которую будет записано значение (Пример: accounts)\"}"
        },
        {
            "Name": "template_create",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Creating template\",\"ru\": \"Создание шаблона\"}"
        },
        {
            "Name": "test_page",
            "Conditions": "",
            "Trans": "{\"en\": \"Test page\", \"ru\": \"Тестовая страница\"}"
        },
        {
            "Name": "text_document",
            "Conditions": "",
            "Trans": "{\"en\": \"Text of the document\", \"ru\": \"Текст документа\"}"
        },
        {
            "Name": "their_members",
            "Conditions": "",
            "Trans": "{\"en\": \"their members\", \"ru\": \"их члены\"}"
        },
        {
            "Name": "title",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Title\",\n    \"ru\": \"Название\"\n}"
        },
        {
            "Name": "tokens",
            "Conditions": "",
            "Trans": "{\"en\": \"Tokens\", \"ru\": \"Токены\"}"
        },
        {
            "Name": "tokens_rollback",
            "Conditions": "",
            "Trans": "{\"en\": \"Tokens rollback\", \"ru\": \"Удаление токенов\"}"
        },
        {
            "Name": "tokens_transfer",
            "Conditions": "",
            "Trans": "{\"en\": \"Tokens transfer\", \"ru\": \"Перевод токенов\"}"
        },
        {
            "Name": "tranche",
            "Conditions": "",
            "Trans": "{\"en\":\"Tranche\",\"ru\":\"Транш\"}"
        },
        {
            "Name": "trash_account_not_found",
            "Conditions": "",
            "Trans": "{\"en\":\"System trash account is not found\",\"ru\":\"Системный счет корзины не найден\"}"
        },
        {
            "Name": "type",
            "Conditions": "",
            "Trans": "{\"en\": \"Type\", \"ru\": \"Тип\"}"
        },
        {
            "Name": "type_voting_custom",
            "Conditions": "",
            "Trans": "{\"en\":\"Custom\",\"ru\":\"Пользовательское\"}"
        },
        {
            "Name": "type_voting_system",
            "Conditions": "",
            "Trans": "{\"en\":\"System\",\"ru\":\"Системное\"}"
        },
        {
            "Name": "unlimited",
            "Conditions": "",
            "Trans": "{\"en\": \"Unlimited\", \"ru\": \"Не ограничены\"}"
        },
        {
            "Name": "use",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Use\",\n    \"ru\": \"Использовать\"\n}"
        },
        {
            "Name": "user_info",
            "Conditions": "",
            "Trans": "{\"en\": \"User information\", \"ru\": \"Информация о пользователе\"}"
        },
        {
            "Name": "username",
            "Conditions": "",
            "Trans": "{\"en\": \"Username\", \"ru\": \"Никнейм\"}"
        },
        {
            "Name": "vacancies",
            "Conditions": "",
            "Trans": "{\"en\": \"Vacancies\", \"ru\": \"Вакансии\"}"
        },
        {
            "Name": "value",
            "Conditions": "",
            "Trans": "{\"en\":\"Value\",\"ru\":\"Значение\"}"
        },
        {
            "Name": "value_number",
            "Conditions": "",
            "Trans": "{\"en\": \"Value number\", \"ru\": \"Значение (число)\"}"
        },
        {
            "Name": "value_string",
            "Conditions": "",
            "Trans": "{\"en\": \"Value string\", \"ru\": \"Значение (строка)\"}"
        },
        {
            "Name": "vde_form",
            "Conditions": "",
            "Trans": "{\"en\":\"VDE form address\",\"ru\":\"Адрес VDE-формы\"}"
        },
        {
            "Name": "vde_form_desc",
            "Conditions": "",
            "Trans": "{\"en\":\"Address of the VDE form in VDE system for applying for membership (who do not yet have APL)\",\"ru\":\"Адрес VDE-формы для подачи заявки на членство (у кого еще нет APL)\"}"
        },
        {
            "Name": "vde_page",
            "Conditions": "",
            "Trans": "{\"en\":\"VDE page address\",\"ru\":\"Адрес страницы VDE\"}"
        },
        {
            "Name": "view",
            "Conditions": "",
            "Trans": "{\"en\": \"View\", \"ru\": \"Просмотр\"}"
        },
        {
            "Name": "view_all",
            "Conditions": "",
            "Trans": "{\"en\": \"View all\", \"ru\": \"Посмотреть все\"}"
        },
        {
            "Name": "visitor",
            "Conditions": "",
            "Trans": "{\"en\": \"Visitor\", \"ru\": \"Посетитель\"}"
        },
        {
            "Name": "visitor_rights",
            "Conditions": "",
            "Trans": "{\"en\": \"Visitor (with SR)\", \"ru\": \"Посетитель (с правами)\"}"
        },
        {
            "Name": "volume",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Volume\",\n    \"ru\": \"Объем\"\n}"
        },
        {
            "Name": "vote",
            "Conditions": "",
            "Trans": "{\"en\": \"Vote\", \"ru\": \"Голосовать\"}"
        },
        {
            "Name": "vote_for_candidate",
            "Conditions": "",
            "Trans": "{\"en\": \"Vote for the candidate\", \"ru\": \"Проголосовал за кандидата\"}"
        },
        {
            "Name": "voted",
            "Conditions": "",
            "Trans": "{\"en\": \"Voted\", \"ru\": \"Проголосовавшие\"}"
        },
        {
            "Name": "voters",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Voters\",\n    \"ru\": \"Голосующие\"\n}"
        },
        {
            "Name": "voting",
            "Conditions": "",
            "Trans": "{\"en\": \"Voting\", \"ru\": \"Голосование\"}"
        },
        {
            "Name": "voting_contract_accept",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Run contract after accept decision\",\n    \"ru\": \"Выполнить контракт при положительном решении\"\n}"
        },
        {
            "Name": "voting_contract_reject",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Run contract after reject decision\",\n    \"ru\": \"Выполнить контракт при отрицательном решении\"\n}"
        },
        {
            "Name": "voting_decisions_candidate_manual",
            "Conditions": "",
            "Trans": "{\"en\": \"Role candidates with manual registration of participants\", \"ru\": \"Ролевые кандидаты с ручной регистрацией участников\"}"
        },
        {
            "Name": "voting_decisions_candidate_requests",
            "Conditions": "",
            "Trans": "{\"en\": \"Role candidates with registration of participants by request\", \"ru\": \"Ролевые кандидаты с регистрацией участников по запросу\"}"
        },
        {
            "Name": "voting_decisions_contract",
            "Conditions": "",
            "Trans": "{\"en\": \"Performance of the contract\", \"ru\": \"Выполнение контракта\"}"
        },
        {
            "Name": "voting_decisions_db",
            "Conditions": "",
            "Trans": "{\"en\": \"Formal decision\", \"ru\": \"Формальное решение\"}"
        },
        {
            "Name": "voting_decisions_document",
            "Conditions": "",
            "Trans": "{\"en\": \"Document approval\", \"ru\": \"Утверждение документа\"}"
        },
        {
            "Name": "voting_graph_progress",
            "Conditions": "",
            "Trans": "{\"en\": \"Graph of the percentages of votes needed to make a decision\", \"ru\": \"График процента голосов, необходимых для принятия решения\"}"
        },
        {
            "Name": "voting_graph_voted",
            "Conditions": "",
            "Trans": "{\"en\": \"Graph of the proportion of voters from the total number of participants\", \"ru\": \"График отношения проголосовавших от общего числа участников\"}"
        },
        {
            "Name": "voting_init_condition",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Initial Сondition for starts\",\n    \"ru\": \"Условие при запуске\"\n}"
        },
        {
            "Name": "voting_init_condition_desc",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Contract for check rights for starts voting\",\n    \"ru\": \"Контракт для проверки права начать голосование\"\n}"
        },
        {
            "Name": "voting_participants_everybody",
            "Conditions": "",
            "Trans": "{\"en\": \"Anybody\", \"ru\": \"Все\"}"
        },
        {
            "Name": "voting_participants_manual",
            "Conditions": "",
            "Trans": "{\"en\": \"Choose manually\", \"ru\": \"Ручной выбор\"}"
        },
        {
            "Name": "voting_participants_role",
            "Conditions": "",
            "Trans": "{\"en\": \"By role\", \"ru\": \"По роли\"}"
        },
        {
            "Name": "voting_precondition",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Initial condition for the subject of voting\",\n    \"ru\": \"Начальное условие для предмета голосования\"\n}"
        },
        {
            "Name": "voting_quorum",
            "Conditions": "",
            "Trans": "{\"en\": \"Quorum\", \"ru\": \"Кворум\"}"
        },
        {
            "Name": "voting_quorum_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Percentage value of votes for a decision (from 5 to 100)\", \"ru\": \"Процентная доля голосов для принятия решения (от 5 до 100)\"}"
        },
        {
            "Name": "voting_start",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Voting start\",\n    \"ru\": \"Начать голосование\"\n}"
        },
        {
            "Name": "voting_subject",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Voting subject\",\n    \"ru\": \"Предмет голосования\"\n}"
        },
        {
            "Name": "voting_templates",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Voting templates\",\n    \"ru\": \"Шаблоны голосования\"\n}"
        },
        {
            "Name": "voting_type",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Voting type\",\n    \"ru\": \"Тип голосования\"\n}"
        },
        {
            "Name": "voting_volume",
            "Conditions": "",
            "Trans": "{\"en\": \"Volume\", \"ru\": \"Объем\"}"
        },
        {
            "Name": "voting_volume_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Percentage value of votes to fulfill requirements of this voting (from 50 to 100)\", \"ru\": \"Процентная доля голосов для выполнения этого голосования (от 50 до 100)\"}"
        },
        {
            "Name": "waiting",
            "Conditions": "",
            "Trans": "{\"en\": \"Waiting\", \"ru\": \"Ожидание\"}"
        },
        {
            "Name": "want_accept_contract",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to accept this contract?\", \"ru\": \"Вы хотите принять этот контракт?\"}"
        },
        {
            "Name": "want_accept_decision",
            "Conditions": "",
            "Trans": "{\"en\": \"Are you sure you want to accept decision?\", \"ru\": \"Вы уверены, что хотите принять решение?\"}"
        },
        {
            "Name": "want_accept_document",
            "Conditions": "",
            "Trans": "{\"en\": \"Are you sure you want to accept document?\", \"ru\": \"Вы уверены, что хотите принять документ?\"}"
        },
        {
            "Name": "want_assign_member_to_role",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to assign this member of the ecosystem to this role?\",\"ru\":\"Вы хотите назначить этого члена экосистемы на эту роль?\"}"
        },
        {
            "Name": "want_change_status",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to change the status of this member?\", \"ru\": \"Вы хотите изменить статус этого члена?\"}"
        },
        {
            "Name": "want_check_decision",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to check decision?\", \"ru\": \"Вы хотите проверить решение?\"}"
        },
        {
            "Name": "want_check_tokens",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to check the expiration of the tokens?\", \"ru\": \"Вы хотите проверить истечение токенов?\"}"
        },
        {
            "Name": "want_close_account",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to close this account?\", \"ru\": \"Вы хотите закрыть этот счет?\"}"
        },
        {
            "Name": "want_close_notification",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to close this notification?\", \"ru\": \"Вы хотите закрыть это уведомление?\"}"
        },
        {
            "Name": "want_create_new_account",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to create a new account?\",\"ru\":\"Вы хотите создать новый счет?\"}"
        },
        {
            "Name": "want_create_new_company",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to add a new company? The current account will become a multi-account. This action is not reversible.\",\"ru\":\"Вы хотите добавить новую компанию? Текущий аккаунт станет мульти-аккаунтом. Это действие не обратимо.\"}"
        },
        {
            "Name": "want_create_new_role",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to create a new role?\",\"ru\":\"Вы хотите создать новую роль?\"}"
        },
        {
            "Name": "want_create_role_company",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to create a new role for the company?\",\"ru\":\"Вы хотите создать новую роль для компании?\"}"
        },
        {
            "Name": "want_delete_company",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to delete the company? All company roles will also be deleted\",\"ru\":\"Вы хотите удалить компанию? Также будут удалены все роли компании\"}"
        },
        {
            "Name": "want_delete_from_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Are you sure you want to delete this member from the role?\", \"ru\": \"Вы уверены, что хотите удалить этого члена из роли?\"}"
        },
        {
            "Name": "want_delete_member",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to delete this member?\", \"ru\": \"Вы хотите удалить этого члена?\"}"
        },
        {
            "Name": "want_delete_participant_company",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to remove a participant from the company?\",\"ru\":\"Вы хотите удалить участника из компании?\"}"
        },
        {
            "Name": "want_delete_role",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to delete this role?\", \"ru\": \"Вы хотите удалить эту роль?\"}"
        },
        {
            "Name": "want_delete_tokens",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to delete this tokens?\", \"ru\": \"Вы хотите удалить эти токены?\"}"
        },
        {
            "Name": "want_delete_voting",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to delete this voting?\", \"ru\": \"Вы хотите удалить это голосование?\"}"
        },
        {
            "Name": "want_finish_processing",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to finish processing this notification?\", \"ru\": \"Вы хотите завершить обработку этого уведомления?\"}"
        },
        {
            "Name": "want_make_emission",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to make an emission?\",\"ru\":\"Вы хотите выполнить эмиссию?\"}"
        },
        {
            "Name": "want_reject_contract",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to reject this contract?\", \"ru\": \"Вы хотите отклонить этот контракт?\"}"
        },
        {
            "Name": "want_reject_decision",
            "Conditions": "",
            "Trans": "{\"en\": \"Are you sure you want to reject decision?\", \"ru\": \"Вы уверены, что хотите отклонить решение?\"}"
        },
        {
            "Name": "want_reject_document",
            "Conditions": "",
            "Trans": "{\"en\": \"Are you sure you want to reject document?\", \"ru\": \"Вы уверены, что хотите отклонить документ?\"}"
        },
        {
            "Name": "want_reject_request",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to reject the request?\", \"ru\": \"Вы хотите отклонить запрос?\"}"
        },
        {
            "Name": "want_release_tokens",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to release new tokens?\",\"ru\":\"Вы хотите выпустить новые токены?\"}"
        },
        {
            "Name": "want_return_member",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to return this member?\", \"ru\": \"Вы хотите восстановить этого члена?\"}"
        },
        {
            "Name": "want_rollback_tokens",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to rollback the tokens?\",\"ru\":\"Вы хотите откатить токены?\"}"
        },
        {
            "Name": "want_save_changes",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to save the changes?\",\"ru\":\"Вы хотите сохранить изменения?\"}"
        },
        {
            "Name": "want_send_notific_voters",
            "Conditions": "",
            "Trans": "{\"en\": \" Do you want to send a notification to all the voters?\", \"ru\": \"Вы хотите отправить уведомление всем участникам голосования?\"}"
        },
        {
            "Name": "want_send_tokens",
            "Conditions": "",
            "Trans": "{\"en\":\"Do you want to send tokens?\",\"ru\":\"Вы хотите отправить токены?\"}"
        },
        {
            "Name": "want_start_processing",
            "Conditions": "",
            "Trans": "{\"en\": \"Do you want to start processing this notification?\", \"ru\": \"Вы хотите начать обработку этого уведомления?\"}"
        },
        {
            "Name": "want_vote_for_candidate",
            "Conditions": "",
            "Trans": "{\"en\": \"Are you sure you want to vote for this candidate?\", \"ru\": \"Вы уверены, что хотите проголосовать за этого кандидата?\"}"
        },
        {
            "Name": "web_form",
            "Conditions": "",
            "Trans": "{\"en\":\"Web form address\",\"ru\":\"Адрес web-формы\"}"
        },
        {
            "Name": "web_form_desc",
            "Conditions": "",
            "Trans": "{\"en\":\"Web address of the form for applying for membership (who do not yet have APL)\",\"ru\":\"Адрес web-формы для подачи заявки на членство (у кого еще нет APL)\"}"
        },
        {
            "Name": "web_page",
            "Conditions": "",
            "Trans": "{\n    \"en\": \"Page web-address\",\n    \"ru\": \"Вэб-адрес страницы\"\n}"
        },
        {
            "Name": "written_value",
            "Conditions": "",
            "Trans": "{\"en\": \"Written value\", \"ru\": \"Записываемое значение\"}"
        },
        {
            "Name": "written_value_desc",
            "Conditions": "",
            "Trans": "{\"en\": \"Value to be written to the table (Example: 1)\", \"ru\": \"Значение, которое должно быть записано в таблицу (Пример: 1)\"}"
        },
        {
            "Name": "yes",
            "Conditions": "",
            "Trans": "{\"en\":\"Yes\",\"ru\":\"Да\"}"
        },
        {
            "Name": "сlosed",
            "Conditions": "",
            "Trans": "{\"en\": \"Closed\", \"ru\": \"Закрыто\"}"
        }
    ],
    "menus": [
        {
            "Name": "default_menu",
            "Value": "\nMenuGroup(Title:$notifications$, Icon:\"fa fa-bell-o\"){\n    MenuItem(Title:$single_notifics$, Page:notifications_single, Icon:\"fa fa-bell-o\")\n    MenuItem(Title:$role_notifics$, Page:notifications_roles, Icon:\"fa fa-bullhorn\")\n    MenuItem(Title:$test_page$, Page:notifications_testpage, Icon:\"icon-settings\")\n}\nMenuItem(Title:$roles$, Page:roles_list, Icon:\"fa fa-list-ul\")\nMenuGroup(Title:$voting$, Icon:\"fa fa-edit\"){\n    MenuItem(Title:$voting$, Page:voting_list, Icon:\"fa fa-edit\")\n}",
            "Conditions": "ContractAccess(\"@1EditMenu\")"
        }
    ],
    "pages": [
        {
            "Name": "notifications_roles",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($role_notifics$)\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: $role_notifics$)\n\t}\n\n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"role_name='#v_Search#' and notification_type=2\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"notification_type=2\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n\n    DBFind(Name: notifications, Source: src_notifications).Custom(custom_id){\n        If(#closed# == 0){\n            Span(Body: #id#)  \n        }.Else{\n            Span(Class: text-muted, Body: #id#)\n        }\n    }.Custom(custom_role){\n        If(#closed# == 0){\n            Span(Body: ID: #role_id# - #role_name#)  \n        }.Else{\n            Span(Class: text-muted, Body: ID: #role_id# - #role_name#)\n        }\n    }.Custom(custom_icon){\n        If(#closed# == 0){\n            Em(Class: fa #icon# fa-2x text-info)\n        }.Else{\n            Em(Class: fa #icon# fa-2x text-muted)\n        }\n    }.Custom(custom_page){\n        If(#closed# == 0){\n            LinkPage(Page: #page_name#, PageParams: \"notific_id=#id#,notific_type=#notification_type#,notific_header=#header_text#,#page_params#\"){\n                Span(Class: h5 text-bold, Body: #page_name#)\n            }\n        }.Else{\n            Div(){\n                Span(Class: h5 text-muted, Body: #page_name#)\n            }\n        }\n    }.Custom(custom_params){\n        If(#closed# == 0){\n            Span(Class: h6 m0, Body: \"#page_params#\")  \n        }.Else{\n            Span(Class: text-muted h6 m0, Body: \"#page_params#\")\n        }\n    }.Custom(custom_date_started){\n        If(#started_processing_id# == 0){\n        }.Else{\n            If(#closed# == 0){\n                P(Class: m0, Body: DateTime(DateTime: #started_processing_time#, Format: \"DD.MM.YYYY HH:MI\"))\n                P(Class: m0 h6, Body: Address(#started_processing_id#))\n            }.Else{\n                P(Class: text-muted m0, Body: DateTime(DateTime: #started_processing_time#, Format: \"DD.MM.YYYY HH:MI\"))\n                P(Class: text-muted m0 h6, Body: Address(#started_processing_id#))\n            }\n        }\n    }.Custom(custom_date_finished){\n        If(#finished_processing_id# == 0){\n        }.Else{\n            P(Class: text-muted m0, Body: DateTime(DateTime: #finished_processing_time#, Format: \"DD.MM.YYYY HH:MI\"))\n            P(Class: text-muted m0 h6, Body: Address(#finished_processing_id#))\n        }\n    }.Custom(custom_status){\n        If(#closed# == 0){\n            If(#started_processing_id# == 0){\n                Span(Body: LangRes(active))\n            }.Else{\n                Span(Body: LangRes(processing))\n            }\n        }.Else{\n            Span(Class: text-muted, Body: LangRes(сlosed))\n        }\n    }.Custom(actions){\n        If(#closed# == 0){\n            If(#started_processing_id# == 0){\n                Button(Body: Em(Class: fa icon-paper-clip), Class: btn btn-danger, Contract: Notifications_Roles_Processing, Params: \"notific_id=#id#\", Page: notifications_roles)\n            }.Else{\n                Button(Body: Em(Class: fa fa-trash), Class: btn btn-danger, Contract: Notifications_Roles_Finishing, Params: \"notific_id=#id#\", Page: notifications_roles)\n            }\n        }\n    }.Where(#v_Where#).Order(\"closed ASC, id ASC\")\n\n    Div(Class: panel panel-primary){\n        Form(){\n            Div(Class: list-group-item){\n                Div(Class: row df f-valign){\n                    Div(Class: col-md-1 mt-sm text-right){\n                        Label(For: Search){\n                            Span(Body: LangRes(role))\n                        }\n                    }\n                    Div(Class: col-md-11 mc-sm){\n                        Div(Class: input-group){\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\n                            Div(Class: input-group-btn){\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: notifications_roles, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                            }\n                        }\n                    }\n                }  \n            }\n\n            Div(Class: list-group-item){ \n                Table(Source: src_notifications, Columns: \"$id$=custom_id,$role$=custom_role,$icon$=custom_icon,$page_name$=custom_page,$params$=custom_params,$started$=custom_date_started,$сlosed$=custom_date_finished,$status$=custom_status,$actions$=actions\")\n                If(GetVar(isSearch) == 1){\n                    Div(Class: text-center){  \n                        Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_roles, PageParams: \"isSearch=0\")\n                    }\n                }\n            }\n\n            Div(Class: panel-footer clearfix){\n                Div(Class: pull-right){\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_roles_send)\n                }\n            }\n            \n        }           \n    }\n\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "notifications_roles_send",
            "Value": "Div(Class: content-wrapper){\n\tSetTitle($role_notifics$)\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: $role_notifics$)\n\t}\n\n    Div(Class: row df f-valign){\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n\n            Div(Class: panel panel-primary){\n                Div(Class: panel-heading, Body: LangRes(role_notifics))\n                Form(){\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: role_id){\n                                    Span(Body: LangRes(role))\n                                }\n                            }\n                            Div(Class: col-md-9 mb-sm text-left){\n                                DBFind(Name: roles_list, Source: source_roles).Where(\"delete=0\")\n                                Select(Name: role_id, Source: source_roles, NameColumn: role_name, ValueColumn: id)\n                            } \n                        }\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: closure_type){\n                                    Span(Body: LangRes(closure_type))\n                                }\n                            }\n                            Div(Class: col-md-9 mc-sm text-left){\n                                EcosysParam(Name: notification_closure, Source: src_closure_type)\n                                Select(Name: closure_type, Source: src_closure_type, NameColumn: name, ValueColumn: id)\n                            } \n                        }\n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: emission_type){\n                                    Span(Body: LangRes(icon))\n                                }\n                            }\n                            Div(Class: col-md-9 mb-sm text-left){\n                                EcosysParam(Name: notification_icon, Source: src_icon)\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\n                            } \n                        }\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: text_header){\n                                    Span(Body: LangRes(header))\n                                }\n                            }\n                            Div(Class: col-md-9 mb-sm text-left){\n                                Input(Class: form-control, Value: \"Header text\", Type: text, Name: text_header)\n                            } \n                        }\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: text_body){\n                                    Span(Body: LangRes(body_text))\n                                }\n                            }\n                            Div(Class: col-md-9 mc-sm text-left){\n                                Input(Class: form-control, Value: \"Body text\", Type: text, Name: text_body)\n                            } \n                        }\n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: page_name){\n                                    Span(Body: LangRes(page_name))\n                                }\n                            }\n                            Div(Class: col-md-9 mb-sm text-left){\n                                Input(Class: form-control, Value: \"notifications_testpage\", Type: text, Name: page_name)\n                            } \n                        }\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: params_val){\n                                    Span(Body: LangRes(params))\n                                }\n                            }\n                            Div(Class: col-md-9 mc-sm text-left){\n                                Input(Class: form-control, Value: \"notific_val_int=11,notific_val_str=string\", Type: text, Name: params_val)\n                            } \n                        }\n                    }\n\n                    Div(Class: panel-footer clearfix){\n                        Div(Class: pull-right){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: notifications_roles)\n                            Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_roles, Contract: Notifications_Roles_Send)\n                        }\n                    }\n                }\n\n            }\n        }\n\n        Div(Class: col-md-3)\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "notifications_single",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($single_notifics$)\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: $single_notifics$)\n\t}\n\n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"recipient_name='#v_Search#' and notification_type=1\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"notification_type=1\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n\n    DBFind(Name: notifications, Source: src_notifications).Custom(custom_id){\n        If(#closed# == 0){\n            Span(Body: #id#)  \n        }.Else{\n            Span(Class: text-muted, Body: #id#)\n        }\n    }.Custom(custom_recipient){\n        If(#closed# == 0){\n            LinkPage(Page: profile_view, PageParams: \"v_member_id=#recipient_id#\"){\n                Image(Src: \"#recipient_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n                Span(Class: h5 text-bold, Body: #recipient_name#)\n            }\n        }.Else{\n            Div(){\n                Image(Src: \"#recipient_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n                Span(Class: h5 text-muted, Body: #recipient_name#)\n            }\n        }\n    }.Custom(custom_icon){\n        If(#closed# == 0){\n            Em(Class: fa #icon# fa-2x text-info)\n        }.Else{\n            Em(Class: fa #icon# fa-2x text-muted)\n        }\n    }.Custom(custom_page){\n        If(#closed# == 0){\n            LinkPage(Page: #page_name#, PageParams: \"notific_id=#id#,notific_type=#notification_type#,notific_header=#header_text#,#page_params#\"){\n                Span(Class: h5 text-bold, Body: #page_name#)\n            }\n        }.Else{\n            Div(){\n                Span(Class: h5 text-muted, Body: #page_name#)\n            }\n        }\n    }.Custom(custom_params){\n        If(#closed# == 0){\n            Span(Class: h6 m0, Body: \"#page_params#\")  \n        }.Else{\n            Span(Class: h6 m0 text-muted, Body: \"#page_params#\")\n        }\n    }.Custom(custom_date){\n        If(#closed# == 0){\n        }.Else{\n            P(Class: m0 text-muted, Body: DateTime(DateTime: #finished_processing_time#, Format: \"DD.MM.YYYY HH:MI\"))\n            P(Class: m0 h6 text-muted, Body: Address(#finished_processing_id#))\n        }\n    }.Custom(custom_status){\n        If(#closed# == 0){\n            Span(Body: LangRes(active))\n        }.Else{\n            Span(Class: text-muted, Body: LangRes(сlosed))\n        }\n    }.Custom(actions){\n        If(#closed# == 0){\n            Button(Body: Em(Class: fa fa-trash), Class: btn btn-danger, Contract: Notifications_Single_Close, Params: \"notific_id=#id#\", Page: notifications_single)\n        }\n    }.Where(#v_Where#).Order(\"closed ASC, id ASC\")\n\n    Div(Class: panel panel-primary){\n        Form(){\n            Div(Class: list-group-item){\n                Div(Class: row df f-valign){\n                    Div(Class: col-md-1 mt-sm text-right){\n                        Label(For: Search){\n                            Span(Body: LangRes(recipient))\n                        }\n                    }\n                    Div(Class: col-md-11 mc-sm){\n                        Div(Class: input-group){\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\n                            Div(Class: input-group-btn){\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: notifications_single, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                            }\n                        }\n                    }\n                }  \n            }\n\n            Div(Class: list-group-item){ \n                Table(Source: src_notifications, Columns: \"$id$=custom_id,$recipient$=custom_recipient,$icon$=custom_icon,$page_name$=custom_page,$params$=custom_params,$сlosed$=custom_date,$status$=custom_status,$actions$=actions\")\n                If(GetVar(isSearch) == 1){\n                    Div(Class: text-center){  \n                        Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_single, PageParams: \"isSearch=0\")\n                    }\n                }\n            }\n\n            Div(Class: panel-footer clearfix){\n                Div(Class: pull-right){\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_single_send)\n                }\n            }\n            \n        }           \n    }\n\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "notifications_single_send",
            "Value": "Div(Class: content-wrapper){\n\tSetTitle($single_notifics$)\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: $single_notifics$)\n\t}\n\n    Div(Class: row df f-valign){\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n\n            Div(Class: panel panel-primary){\n                Div(Class: panel-heading, Body: LangRes(single_notifics))\n                Form(){\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: role_name){\n                                    Span(Body: LangRes(member))\n                                }\n                            }\n                            Div(Class: col-md-9 mc-sm text-left){\n                                DBFind(Name: members, Source: source_members)\n                                Select(Name: member_id, Source: source_members, NameColumn: member_name, ValueColumn: id)\n                            } \n                        }\n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: emission_type){\n                                    Span(Body: LangRes(icon))\n                                }\n                            }\n                            Div(Class: col-md-9 mb-sm text-left){\n                                EcosysParam(Name: notification_icon, Source: src_icon)\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\n                            } \n                        }\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: text_header){\n                                    Span(Body: LangRes(header))\n                                }\n                            }\n                            Div(Class: col-md-9 mb-sm text-left){\n                                Input(Class: form-control, Value: \"Header text\", Type: text, Name: text_header)\n                            } \n                        }\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: text_body){\n                                    Span(Body: LangRes(body_text))\n                                }\n                            }\n                            Div(Class: col-md-9 mc-sm text-left){\n                                Input(Class: form-control, Value: \"Body text\", Type: text, Name: text_body)\n                            } \n                        }\n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: page_name){\n                                    Span(Body: LangRes(page_name))\n                                }\n                            }\n                            Div(Class: col-md-9 mb-sm text-left){\n                                Input(Class: form-control, Value: \"notifications_testpage\", Type: text, Name: page_name)\n                            } \n                        }\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-3 mt-sm text-right){\n                                Label(For: params_val){\n                                    Span(Body: LangRes(params))\n                                }\n                            }\n                            Div(Class: col-md-9 mc-sm text-left){\n                                Input(Class: form-control, Value: \"notific_val_int=11,notific_val_str=string\", Type: text, Name: params_val)\n                            } \n                        }\n                    }\n\n                    Div(Class: panel-footer clearfix){\n                        Div(Class: pull-right){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: notifications_single)\n                            Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_single, Contract: Notifications_Single_Send)\n                        }\n                    }\n                }\n\n            }\n        }\n\n        Div(Class: col-md-3)\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "notifications_testpage",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($test_page$)\n\tDiv(Class: breadcrumb){\n\t\tSpan(Class: text-muted, Body: LangRes(test_page))\n\t}\n\n    If(#notific_id# > 0){\n    }.Else{\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n        SetVar(Name: notific_id, Value: \"0\")\n        SetVar(Name: notific_type, Value: \"0\")\n        SetVar(Name: notific_header, Value: \"null\")\n        SetVar(Name: notific_val_int, Value: \"null\")\n        SetVar(Name: notific_val_str, Value: \"null\")\n    }\n\n    Div(Class: row df f-valign){\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n            Div(Class: panel panel-default){\n                Form(){ \n\n\t\t\t\t\tDiv(Class: list-group-item text-center){\n\t\t\t\t\t\tSpan(Class: h3 , Body: #notific_header#)\t\n\t\t\t\t\t}\n\n\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: LangRes(id))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: #notific_id#)\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: LangRes(type))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\n                                If(#notific_type# > 0){\n\t\t\t\t\t\t\t\t    Span(Class: h4, Body: EcosysParam(Name: notification_type, Index: #notific_type#))\n                                }.Else{\n                                    Span(Class: h4, Body: #notific_type#)\n                                }\n                            } \n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: LangRes(value_number))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: #notific_val_int#)\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: LangRes(value_string))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\tSpan(Class: h4, Body: #notific_val_str#)\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\t\t\n\n\t\t\t\t\tIf(#notific_type# == 1){\n\t\t\t\t\t\tDiv(Class: panel-footer clearfix){\n\t\t\t\t\t\t\tDiv(Class: pull-right){\n                                Button(Body: LangRes(close), Class: btn btn-danger, Contract: Notifications_Single_Close, Params: \"notific_id=#notific_id#\", Page: notifications_single)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tIf(#notific_type# == 2){\n\t\t\t\t\t\tDiv(Class: panel-footer clearfix){\n\t\t\t\t\t\t\tDiv(Class: pull-left){\n                                Button(Body: LangRes(begin), Class: btn btn-danger, Contract: Notifications_Roles_Processing, Params: \"notific_id=#notific_id#\", Page: notifications_roles)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: pull-right){\n                                Button(Body: LangRes(close), Class: btn btn-danger, Contract: Notifications_Roles_Finishing, Params: \"notific_id=#notific_id#\", Page: notifications_roles)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n                }\n            }\n        }\n        Div(Class: col-md-3)\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "roles_assign",
            "Value": "Div(Class: content-wrapper){\n    \n    If(#v_role_id# > 0){\n        \n        SetTitle($assign$)\n        Div(Class: breadcrumb){\n            LinkPage($roles$, roles_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#v_role_name#, roles_view,, \"v_role_id=#v_role_id#,v_role_name=#v_role_name#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $assign$)\n        }\n        \n        Div(Class: row df f-valign){\n            Div(Class: col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n                \n                Div(Class: panel panel-primary){\n                    Div(Class: panel-heading, Body: LangRes(assign))\n                    Form(){\n                        \n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: role_id){\n                                        Span(Body: LangRes(role))\n                                    }\n                                }\n                                Div(Class: col-md-9 mt-sm text-left){\n                                    DBFind(Name: roles_list, Source: source_roles).Where(\"id=#v_role_id#\").Vars(prefix)\n                                    Input(Class: form-control hidden, Type: text, Name: role_id, Value: #prefix_id#)\n                                    Span(Class: h5, Body: LangRes(#prefix_role_name#))\n                                }\n                            }\n                        }\n                        \n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: role_id){\n                                        Span(Body: LangRes(type))\n                                    }\n                                }\n                                Div(Class: col-md-9 mt-sm text-left){\n                                    Span(Class: h5, Body: EcosysParam(Name: roles_types, Index: #prefix_role_type#)\n                                    If(#prefix_role_type# != 1){\n                                        P(Class: m0 text-danger h6, Body: LangRes(appointment_impossible))\n                                    }\n                                }\n                            }\n                        }\n                        \n                        If(#prefix_role_type# == 1){\n                            Div(Class: list-group-item){\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-3 mt-sm text-right){\n                                        Label(For: role_name){\n                                            Span(Body: LangRes(member))\n                                        }\n                                    }\n                                    Div(Class: col-md-9 mc-sm text-left){\n                                        DBFind(Name: members, Source: source_members).Custom(custom_username){\n                                            #member_name# (Address(#id#) )\n                                        }\n                                        Select(Name: member_id, Source: source_members, NameColumn: custom_username, ValueColumn: id)\n                                    }\n                                }\n                            }\n                        }\n                        \n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: roles_view, PageParams: \"v_role_id=#v_role_id#,v_role_name=#v_role_name#\")\n                                If(#prefix_role_type# == 1){\n                                    Button(Body: LangRes(assign), Class: btn btn-primary, Page: roles_view, PageParams: \"v_role_id=#v_role_id#,v_role_name=#v_role_name#\", Contract: Roles_Assign, Params: \"member_id=Val(member_id)\").Alert(Text: $want_assign_member_to_role$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                                }\n                            }\n                        }\n                        \n                    }\n                    \n                }\n            }\n        }\n        \n    }.Else{\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "roles_create",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($new_role$)\n\tDiv(Class: breadcrumb){\n\t\tLinkPage($roles$, roles_list)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: $new_role$)\n\t}\n\n    If(#param_role_type#>0){\n    }.Else{\n        SetVar(Name: param_role_type, Value: 1)\n    }\n\t\n    Div(Class: row df f-valign){\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n\n            Div(Class: panel panel-primary){\n                Div(Class: panel-heading, Body: LangRes(new_role))\n                Form(){   \n\n\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\n\t\t\t\t\t\t\t\tLabel(For: role_name){\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(name))\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: col-md-9 mc-sm text-left){\n\t\t\t\t\t\t\t\tInput(Class: form-control, Type: text, Name: role_name)\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\n\t\t\t\t\t\t\t\tLabel(){\n\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(type))\n\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: col-md-9 mc-sm text-left){\n\t\t\t\t\t\t\t\tEcosysParam(Name: roles_types, Source: src_roles)\n\t\t\t\t\t\t\t\tSelect(Name: role_type, Source: src_roles, NameColumn: name, ValueColumn: id, Value: #param_role_type#)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tDiv(Class: panel-footer clearfix){\n\t\t\t\t\t\tDiv(Class: pull-right){\n                            Button(Body: LangRes(create), Class: btn btn-primary, Page: roles_list, Contract: Roles_Create).Alert(Text: $want_create_new_role$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n                }\n            }\n        }\n\t\t\n        Div(Class: col-md-3)\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "roles_list",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($roles$)\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: $roles$)\n\t}\n\n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"role_name='#v_Search#'\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"id>0\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n\n    DBFind(Name: roles_list, Source: src_roles_list).Custom(custom_id){\n        If(#delete# == 0){\n            Span(Body: #id#)  \n        }.Else{\n            Span(Class: text-muted, Body: #id#)\n        }\n    }.Custom(custom_creator){\n        If(#role_type#==3){\n            Div(){\n                Span(Class: h5, Body: LangRes(system_role))\n            }\n        }.Else{\n            If(#delete# == 0){\n                LinkPage(Page: profile_view, PageParams: \"v_member_id=#creator_id#\"){\n                    If(#creator_avatar# != \"\"){\n                        Image(Src: \"#creator_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n                    }\n                    Span(Class: h5 text-bold, Body: #creator_name#)\n                }\n            }.Else{\n                Div(){\n                    If(#creator_avatar# != \"\"){\n                        Image(Src: \"#creator_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n                    }\n                    Span(Class: h5 text-muted, Body: #creator_name#)\n                }\n            }\n        }\n    }.Custom(custom_name){\n        If(#delete# == 0){\n            LinkPage(Page: roles_view, PageParams: \"v_role_id=#id#,v_role_name=#role_name#\"){\n                Span(Class: h5 text-bold, Body: LangRes(#role_name#))\n            }\n        }.Else{\n            Span(Class: h5 text-muted, Body: LangRes(#role_name#))\n        }\n\t}.Custom(custom_date){\n        If(#delete# == 0){\n            Div(Class: h6 m0, Body: DateTime(DateTime: #date_create#, Format: \"DD.MM.YYYY HH:MI\"))\n            Div(Class: h6 m0, Body: DateTime(DateTime: #date_delete#, Format: \"DD.MM.YYYY HH:MI\"))\n        }.Else{\n            Div(Class: h6 m0 text-muted, Body: DateTime(DateTime: #date_create#, Format: \"DD.MM.YYYY HH:MI\"))\n            Div(Class: h6 m0 text-muted, Body: DateTime(DateTime: #date_delete#, Format: \"DD.MM.YYYY HH:MI\"))\n        }\n\t}.Custom(custom_type){\n        If(#delete# == 0){\n            Span(Body: EcosysParam(Name: roles_types, Index: #role_type#))\n        }.Else{\n            Span(Class: text-muted, Body: EcosysParam(Name: roles_types, Index: #role_type#))\n        }\n    }.Custom(custom_status){\n        If(#delete# == 0){\n            Span(Body: LangRes(active))\n        }.Else{\n            Span(Class: text-muted, Body: LangRes(deleted))\n        }\n    }.Custom(actions){\n        If(And(#delete#==0,#role_type#!=3)){\n            Div(Class: text-center, Body: Button(Body: Em(Class: fa fa-trash), Class: btn btn-danger, Contract: Roles_Del, Params: \"role_id=#id#\", Page: roles_list))\n        }\n   }.Where(#v_Where#).Order(\"delete ASC, id ASC\")\n\n    Div(Class: panel panel-primary){\n        Form(){\n            Div(Class: list-group-item){\n                Div(Class: row df f-valign){\n                    Div(Class: col-md-1 mt-sm text-right){\n                        Label(For: Search){\n                            Span(Body: LangRes(name))\n                        }\n                    }\n                    Div(Class: col-md-11 mc-sm){\n                        Div(Class: input-group){\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\n                            Div(Class: input-group-btn){\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: roles_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                            }\n                        }\n                    }\n                }  \n            }\n\n            Div(Class: list-group-item){ \n                Table(Source: src_roles_list, Columns: \"$id$=custom_id,$name$=custom_name,$type$=custom_type,$created$ / $deleted$=custom_date,$status$=custom_status,$creator$=custom_creator,$actions$=actions\")\n                If(GetVar(isSearch) == 1){\n                    Div(Class: text-center){  \n                        Button(Body: $view_all$, Class: btn btn-primary, Page: roles_list, PageParams: \"isSearch=0\")\n                    }\n                }\n            }\n\n            Div(Class: panel-footer clearfix){\n                Div(Class: pull-right){\n                    Button(Body: LangRes(create), Class: btn btn-primary, Page: roles_create)\n                }\n            }\n            \n        }           \n    }\n\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "roles_view",
            "Value": "Div(Class: content-wrapper){\n    \n    If(#v_role_id# > 0){\n        \n        SetTitle($role$: #v_role_name#)\n        Div(Class: breadcrumb){\n            LinkPage($roles$, roles_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: #v_role_name#)\n        }\n        \n        DBFind(Name: roles_assign, Source: src_roles_assign).Custom(custom_id){\n            If(#delete# == 0){\n                Span(Body: #id#)\n            }.Else{\n                Span(Class: text-muted, Body: #id#)\n            }\n        }.Custom(custom_appointed){\n            If(#delete# == 0){\n                Span(Body: #appointed_by_name#)\n            }.Else{\n                Span(Class: text-muted, Body: #appointed_by_name#)\n            }\n        }.Custom(custom_role_name){\n            If(#delete# == 0){\n                Span(Body: LangRes(#role_name#) )\n            }.Else{\n                Span(Class: text-muted, Body: LangRes(#role_name#))\n            }\n        }.Custom(custom_member){\n            If(#delete# == 0){\n                LinkPage(Page: profile_view, PageParams: \"v_member_id=#member_id#\"){\n                    If(#member_avatar# != \"\"){\n                        Image(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                    }\n                    Span(Class: h5 text-bold, Body: #member_name#)\n                }\n            }.Else{\n                Div(){\n                    If(#member_avatar# != \"\"){\n                        Image(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                    }\n                    Span(Class: h5 text-muted, Body: #member_name#)\n                }\n            }\n        }.Custom(custom_address){\n            If(#delete# == 0){\n                Span(Body: Address(#member_id#))\n            }.Else{\n                Span(Class: text-muted, Body: Address(#member_id#))\n            }\n        }.Custom(custom_type){\n            If(#delete# == 0){\n                Span(Body: EcosysParam(Name: roles_types, Index: #role_type#))\n            }.Else{\n                Span(Class: text-muted, Body: EcosysParam(Name: roles_types, Index: #role_type#))\n            }\n        }.Custom(custom_date){\n            If(#delete# == 0){\n                Div(Class: h6 m0, Body: DateTime(DateTime: #date_start#, Format: \"DD.MM.YYYY HH:MI\"))\n                Div(Class: h6 m0, Body: DateTime(DateTime: #date_end#, Format: \"DD.MM.YYYY HH:MI\"))\n            }.Else{\n                Div(Class: h6 m0 text-muted, Body: DateTime(DateTime: #date_start#, Format: \"DD.MM.YYYY HH:MI\"))\n                Div(Class: h6 m0 text-muted, Body: DateTime(DateTime: #date_end#, Format: \"DD.MM.YYYY HH:MI\"))\n            }\n        }.Custom(custom_status){\n            If(#delete# == 0){\n                Span(Body: LangRes(active))\n            }.Else{\n                Span(Class: text-muted, Body: LangRes(deleted))\n            }\n        }.Custom(actions){\n            If(#delete# == 0){\n                Div(Class: text-center, Button(Body: Em(Class: fa fa-trash), Class: btn btn-danger, Contract: Roles_Unassign, Params: \"row_id=#id#\", Page: roles_view, PageParams: \"v_role_id=#v_role_id#,v_role_name=#v_role_name#\"))\n            }\n        }.Where(\"role_id='#v_role_id#'\").Order(\"delete ASC, id ASC\")\n        \n        Div(Class: panel panel-primary){\n            Form(){\n                Div(Class: list-group-item){\n                    Table(Source: src_roles_assign, Columns: \"$id$=custom_id,$member$=custom_member,$member_id$=custom_address,$role$=custom_role_name,$type$=custom_type,$appointed$ / $deleted$=custom_date,$appointed$=custom_appointed,$status$=custom_status,$actions$=actions\")\n                }\n                Div(Class: panel-footer clearfix){\n                    Div(Class: pull-right){\n                        Button(Body: LangRes(assign), Class: btn btn-primary, Page: roles_assign, PageParams: \"v_role_id=#v_role_id#,v_role_name=#v_role_name#\")\n                    }\n                }\n            }\n        }\n        \n    }.Else{\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n    \n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_create",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($new_voting$)\n\tDiv(Class: breadcrumb){\n\t\tLinkPage($voting$, voting_list)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: $new_voting$)\n\t}\n\n    Div(Class: row df f-valign){\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n\t\t\n            Div(Class: panel panel-primary){\n                Div(Class: panel-heading, Body: LangRes(new_voting))\n                Form(){\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\n                                Label(For: voting_name){\n                                    Span(Body: LangRes(name))\n                                }\n                \t\t\t}\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                \t\t\t    Input(Name: voting_name, Class: form-control, Type: text, Value: New voting)\n                \t\t\t}\n                        }                   \n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-lg text-right){\n                                Label(For: description){\n                                    Span(Body: LangRes(description))\n                                }\n                            }\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                \t\t\t    Input(Name: description, Class: form-control, Type: textarea, Value: no)\n                \t\t\t}\n                        }                      \n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\n                                Label(For: type_participants){\n                                    Span(Body: LangRes(participants))\n                                }\n                \t\t\t}\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                                EcosysParam(Name: type_voting_participants, Source: type_voting_participants)\n                \t\t\t    Select(Name: type_participants, Source: type_voting_participants, NameColumn: name, ValueColumn: id)\n                \t\t\t}\n                        }  \n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\n                                Label(For: type_decision){\n                                    Span(Body: LangRes(decision))\n                                }\n                \t\t\t}\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                                EcosysParam(Name: type_voting_decisions, Source: type_voting_decisions)\n                \t\t\t    Select(Name: type_decision, Source: type_voting_decisions, NameColumn: name, ValueColumn: id)\n                \t\t\t}\n                        }                       \n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\n                                Label(For: start_date){\n                                    Span(Body: LangRes(date_start))\n                                }\n                            }\n                \t\t\tDiv(Class: col-md-5 mc-sm text-left){\n                                Input(Name: start_date, Class: form-control, Type: date, Value: Now(\"YYYY-MM-DD\", 3 days))\n                            }\n                \t\t\tDiv(Class: col-md-4 mc-sm text-left){\n                                Input(Name: start_time, Class: form-control, Type: time, Value: Now(\"HH:MI\"))\n                            }\n                        }                       \n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\n                                Label(For: end_date){\n                                    Span(Body: LangRes(date_end))\n                                }\n                            }\n                \t\t\tDiv(Class: col-md-5 mc-sm text-left){\n                                Input(Name: end_date, Class: form-control, Type: date, Value: Now(\"YYYY-MM-DD\", 21 days))\n                            }\n                \t\t\tDiv(Class: col-md-4 mc-sm text-left){\n                                Input(Name: end_time, Class: form-control, Type: time, Value: Now(\"HH:MI\"))\n                            }\n                        }                       \n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\n                                Label(For: volume){\n                                    Span(Body: LangRes(voting_volume))\n                                }\n                            }\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                                Input(Name: volume, Class: form-control, Type: number, Value: 75)\n                                P(Class: m0 text-muted, Body: $voting_volume_desc$)\n                            }\n                        }                       \n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\n                                Label(For: quorum){\n                                    Span(Body: LangRes(voting_quorum))\n                                }\n                            }\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                                Input(Name: quorum, Class: form-control, Type: number, Value: 50)\n                                P(Class: m0 text-muted, Body: $voting_quorum_desc$)\n                            }\n                        }                     \n                    }\n\n                    Div(Class: panel-footer clearfix){\n                        Div(Class: pull-left){\n                            Input(Name: now_date, Class: form-control hidden, Type: text, Value: Now(\"YYYY-MM-DD HH:MI\"))\n                            Input(Name: type_voting, Class: form-control hidden, Type: text, Value: 1)\n                        }\n                        Div(Class: pull-right){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_list)\n                            Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_list, Contract: voting_CreateNew)\n                        }\n                    }\n\n                }\n            }\n\t\t}\n\t\tDiv(Class: col-md-3)\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_decision_candidates",
            "Value": "Div(Class: content-wrapper){\n\t\n    If(#vID# > 0){\n\n        DBFind(Name: voting_instances, Source: src_voting_instances).Where(\"id=#vID#\").Vars(instance)\n\n        SetTitle($subject_voting$)\n        Div(Class: breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n\n        Div(Class: row df f-valign){\n            Div(Class: col-md-2)\n            Div(Class: col-md-8){\n\n                Div(Class: panel panel-primary){\n                    Form(){  \n\t\t\t\t\t\n\t\t\t\t\t\tInput(Name: memberID, Class: form-control hidden, Type: text, Value: 0)\n\t\t\t\t\t\tInput(Name: votingID, Class: form-control hidden, Type: text, Value: #vID#)\n\t\t\t\t\t\n\t\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\n\t\t\t\t\t\t\t\t\tLabel($candidates$)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\n                                    Div(form-text text-muted, $can_apply_voting$)\n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\tDiv(Class: col-md-3 mc-sm text-right){\n                                    Button(Body: LangRes(apply), Class: btn btn-primary, Page: voting_decision_candidates, PageParams: \"vID=Val(votingID)\", Contract: voting_SubjectCandidates)\n                                } \n\t\t\t\t\t\t\t}\n                            Div(Class: row df){\n                    \t\t\tDiv(Class: col-md-3 mt-sm)\n                    \t\t\tDiv(Class: col-md-8 mt-sm text-left){\n                                    DBFind(Name: voting_subject, Source: src_voting_subject).Where(\"voting_id=#vID#\").Custom(custom_address){\n                                        Span(Address(#member_id#))\n\t                                }.Custom(custom_member){\n\t\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: profile_view, PageParams: \"v_member_id=#member_id#\"){\n\t\t\t\t\t\t\t\t\t\t\tImage(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: #member_name#)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n                                    Table(src_voting_subject, \"$candidates$=custom_member,$member_id$=custom_address\")\n                                }\n                    \t\t\tDiv(Class: col-md-1 mt-sm)\n                            }\n                        }\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: roleID){\n                                        Span(Body: LangRes(role))\n                                    }\n                                }\n                                Div(Class: col-md-9 mb-sm text-left){\n                                    DBFind(Name: roles_list, Source: source_roles).Where(\"role_type=2 and delete=0\")\n                                    Select(Name: roleID, Source: source_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\n                                } \n                            }\n\n                            Div(row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: vacancies){\n                                        Span(Body: LangRes(vacancies))\n                                    }\n                                }\n                    \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                    \t\t\t    Input(Name: vacancies, Class: form-control, Type: Number, Value: #instance_optional_role_vacancies#)\n                                }\n                            }                    \n                        }\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_accept){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                    P(Class: m0 text-muted, Body: $optional$)\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_accept, Class: form-control, Type: text, Value: #instance_optional_contract_accept#)\n                                    P(Class: text-muted, Body: $contract_accept_des$)\n                                }\n                            }                     \n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_reject){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                    P(Class: m0 text-muted, Body: $optional$)\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject, Class: form-control, Type: text, Value: #instance_optional_contract_reject#)\n                                    P(Class: m0 text-muted, Body: $contract_reject_des$)\n                                }\n                            }                     \n                        }\n\n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                                Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectSettings)\n                            }\n                        }\n                    }\n                }\n            }\n            Div(Class: col-md-2)\n        }\n        \n    }.Else{\n\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_decision_contract",
            "Value": "Div(Class: content-wrapper){\n    \n    If(#vID# > 0){\n        \n        DBFind(Name: voting_instances, Source: src_voting_instances).Where(\"id=#vID#\").Vars(instance)\n        DBFind(Name: voting_subject, Source: src_voting_subject).Where(\"voting_id=#vID#\").Vars(subject)\n        \n        If(#subject_id#>0){\n        }.Else{\n            SetVar(Name: subject_contract_accept, Value: \"\")\n            SetVar(Name: subject_contract_reject, Value: \"\")\n        }\n        \n        SetTitle($subject_voting$)\n        Div(Class: breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n        \n        Div(Class: row df f-valign){\n            Div(Class: col-md-2)\n            Div(Class: col-md-8){\n                \n                Div(Class: panel panel-primary){\n                    Form(){\n                        \n                        Input(Name: votingID, Class: form-control hidden, Type: text, Value: #vID#)\n                        \n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_accept){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_accept, Class: form-control, Type: text, Value: #subject_contract_accept#)\n                                    P(Class: text-muted, Body: $contract_accept_des$)\n                                }\n                            }\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_reject){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject, Class: form-control, Type: text, Value: #subject_contract_reject#)\n                                    P(Class: m0 text-muted, Body: $contract_reject_des$)\n                                }\n                            }\n                        }\n                        \n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                                Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectContract)\n                            }\n                        }\n                    }\n                }\n            }\n            Div(Class: col-md-2)\n        }\n        \n    }.Else{\n        \n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_decision_document",
            "Value": "Div(Class: content-wrapper){\n\t\n    If(#vID# > 0){\n\n        DBFind(Name: voting_instances, Source: src_voting_instances).Where(\"id=#vID#\").Vars(instance)\n        DBFind(Name: voting_subject, Source: src_voting_subject).Where(\"voting_id=#vID#\").Vars(subject)\n\t\t\n\t\tIf(#subject_id#>0){\n\t\t}.Else{\n\t\t\tSetVar(Name: subject_text_document, Value: \"\")\n\t\t}\n\n        SetTitle($subject_voting$)\n        Div(Class: breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n\n        Div(Class: row df f-valign){\n            Div(Class: col-md-2)\n            Div(Class: col-md-8){\n\n                Div(Class: panel panel-primary){\n                    Form(){  \n\n                        Input(Name: votingID, Class: form-control hidden, Type: text, Value: #vID#)\n\n\t\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-12 mt-sm){\n                                    P(Class: m0 text-muted, Body: $text_document$)\n                                    Input(Name: text_document, Class: form-control, Type: textarea, Value: #subject_text_document#)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n                        }\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_accept){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                    P(Class: m0 text-muted, Body: $optional$)\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_accept, Class: form-control, Type: text, Value: #instance_optional_contract_accept#)\n                                    P(Class: text-muted, Body: $contract_accept_des$)\n                                }\n                            }                     \n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_reject){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                    P(Class: m0 text-muted, Body: $optional$)\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject, Class: form-control, Type: text, Value: #instance_optional_contract_reject#)\n                                    P(Class: m0 text-muted, Body: $contract_reject_des$)\n                                }\n                            }                     \n                        }\n\n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                                Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectDocument)\n                            }\n                        }\n                    }\n                }\n            }\n            Div(Class: col-md-2)\n        }\n        \n    }.Else{\n\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_decision_election",
            "Value": "Div(Class: content-wrapper){\n\t\n    If(#vID# > 0){\n\n        DBFind(Name: voting_instances, Source: src_voting_instances).Where(\"id=#vID#\").Vars(instance)\n\n        SetTitle($subject_voting$)\n        Div(Class: breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n\n        Div(Class: row df f-valign){\n            Div(Class: col-md-2)\n            Div(Class: col-md-8){\n\n                Div(Class: panel panel-primary){\n                    Form(){  \n\n\t\t\t\t\t\tInput(Name: votingID, Class: form-control hidden, Type: text, Value: #vID#)\n\t\t\t\t\t\n\t\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-sm text-right){\n\t\t\t\t\t\t\t\t\tLabel($candidates$)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                                    Div(Class: input-group){\n                                        DBFind(Name: members, Source: source_members).Custom(custom_username){\n                                            #member_name# ( Address(#id#) ) \n                                        }\n                                        Select(Name: memberID, Source: source_members, NameColumn: custom_username, ValueColumn: id)\n                                        Div(Class: input-group-btn){\n                                            Button(Body: LangRes(add), Class: btn btn-default, Page: voting_decision_election, PageParams: \"vID=Val(votingID)\", Contract: voting_SubjectCandidates)\n                                        }\n                                    }\n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t}\n                            Div(Class: row df){\n                    \t\t\tDiv(Class: col-md-3 mt-sm)\n                    \t\t\tDiv(Class: col-md-8 mt-sm text-left){\n                                    DBFind(Name: voting_subject, Source: src_voting_subject).Where(\"voting_id=#vID#\").Custom(custom_address){\n                                        Span(Address(#member_id#))\n\t                                }.Custom(custom_member){\n\t\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: profile_view, PageParams: \"v_member_id=#member_id#\"){\n\t\t\t\t\t\t\t\t\t\t\tImage(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n                                            Span(Class: h5 text-bold, Body: #member_name#)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n                                    Table(src_voting_subject, \"$candidates$=custom_member,$member_id$=custom_address\")\n                                }\n                    \t\t\tDiv(Class: col-md-1 mt-sm)\n                            }\n                        }\n\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: roleID){\n                                        Span(Body: LangRes(role))\n                                    }\n                                }\n                                Div(Class: col-md-9 mb-sm text-left){\n                                    DBFind(Name: roles_list, Source: source_roles).Where(\"role_type=2 and delete=0\")\n                                    Select(Name: roleID, Source: source_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\n                                } \n                            }\n\n                            Div(row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: vacancies){\n                                        Span(Body: LangRes(vacancies))\n                                    }\n                                }\n                    \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                    \t\t\t    Input(Name: vacancies, Class: form-control, Type: Number, Value: #instance_optional_role_vacancies#)\n                                }\n                            }                    \n                        }\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_accept){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                    P(Class: m0 text-muted, Body: $optional$)\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_accept, Class: form-control, Type: text, Value: #instance_optional_contract_accept#)\n                                    P(Class: text-muted, Body: $contract_accept_des$)\n                                }\n                            }                     \n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_reject){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                    P(Class: m0 text-muted, Body: $optional$)\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject, Class: form-control, Type: text, Value: #instance_optional_contract_reject#)\n                                    P(Class: m0 text-muted, Body: $contract_reject_des$)\n                                }\n                            }                     \n                        }\n\n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                                Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectSettings)\n                            }\n                        }\n                    }\n                }\n            }\n            Div(Class: col-md-2)\n        }\n        \n    }.Else{\n\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_decision_formal",
            "Value": "Div(Class: content-wrapper){\n\t\n    If(#vID# > 0){\n\n        DBFind(Name: voting_instances, Source: src_voting_instances).Where(\"id=#vID#\").Vars(instance)\n\t\tDBFind(Name: voting_subject, Source: src_voting_subject).Where(\"voting_id=#vID#\").Vars(subject)\n\n\t\tIf(#subject_id#>0){\n\t\t}.Else{\n\t\t\tSetVar(Name: subject_formal_decision_description, Value: \"\")\n\t\t\tSetVar(Name: subject_formal_decision_table, Value: \"\")\n\t\t\tSetVar(Name: subject_formal_decision_tableid, Value: \"\")\n\t\t\tSetVar(Name: subject_formal_decision_column, Value: \"\")\n\t\t\tSetVar(Name: subject_formal_decision_colvalue, Value: \"\")\n\t\t}\n\t\t\n        SetTitle($subject_voting$)\n        Div(Class: breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n\n        Div(Class: row df f-valign){\n            Div(Class: col-md-2)\n            Div(Class: col-md-8){\n\n                Div(Class: panel panel-primary){\n                    Form(){  \n\n                        Input(Name: votingID, Class: form-control hidden, Type: text, Value: #vID#)\n                    \n\t\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-3 mt-lg text-right){\n\t\t\t\t\t\t\t\t\tLabel(For: description){\n\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(description))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-9 mc-sm text-left){\n\t\t\t\t\t\t\t\t\tInput(Name: description, Class: form-control, Type: textarea, Value: #subject_formal_decision_description#)\n                                    P(Class: m0 text-muted, Body: $description_desc$)\n                                }\n\t\t\t\t\t\t\t}                      \n\t\t\t\t\t\t}\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: table_to_written){\n                                        Span(Body: LangRes(table_to_written))\n                                    }\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: table_to_written, Class: form-control, Type: text, Value: #subject_formal_decision_table#)\n                                    P(Class: text-muted, Body: $table_to_written_desc$)\n                                }\n                            }                     \n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: row_id){\n                                        Span(Body: LangRes(row_id))\n                                    }\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: row_id, Class: form-control, Type: text, Value: #subject_formal_decision_tableid#)\n                                    P(Class: text-muted, Body: $row_id_desc$)\n                                }\n                            }  \n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: column_name){\n                                        Span(Body: LangRes(column_name))\n                                    }\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: column_name, Class: form-control, Type: text, Value: #subject_formal_decision_column#)\n                                    P(Class: m0 text-muted, Body: $column_name_desc$)\n                                }\n                            }                   \n                        }\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: written_value){\n                                        Span(Body: LangRes(written_value))\n                                    }\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: written_value, Class: form-control, Type: text, Value: #subject_formal_decision_colvalue#)\n                                    P(Class: m0 text-muted, Body: $written_value_desc$)\n                                }\n                            }                                        \n                        }\n\n\n                        Div(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_accept){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                    P(Class: m0 text-muted, Body: $optional$)\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_accept, Class: form-control, Type: text, Value: #instance_optional_contract_accept#)\n                                    P(Class: text-muted, Body: $contract_accept_des$)\n                                }\n                            }                     \n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-3 mt-sm text-right){\n                                    Label(For: contract_reject){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                    P(Class: m0 text-muted, Body: $optional$)\n                                }\n                                Div(Class: col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject, Class: form-control, Type: text, Value: #instance_optional_contract_reject#)\n                                    P(Class: m0 text-muted, Body: $contract_reject_des$)\n                                }\n                            }                     \n                        }\n\n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                                Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectFormal)\n                            }\n                        }\n                    }\n                }\n            }\n            Div(Class: col-md-2)\n        }\n        \n    }.Else{\n\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_invite",
            "Value": "Div(Class: content-wrapper){\n\t\n    If(#vID# > 0){\n\n        DBFind(Name: voting_instances, Source: src_voting_instances).Where(\"id=#vID#\").Vars(instance)\n\t\t\n        SetTitle($participants$)\n        Div(Class: breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            LinkPage(#instance_name#, voting_view,, \"vID=#vID#\")\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: $participants$)\n        }\n\n        Div(Class: row df f-valign){\n            Div(Class: col-md-2)\n            Div(Class: col-md-8){\n\t\t\t\n                Div(Class: panel panel-primary){\n\t\t\t\t\tDiv(Class: panel-heading, Body: LangRes(participants))\n                    Form(){\n\t\t\t\t\t\n                        Input(Name: votingID, Class: form-control hidden, Type: text, Value: #vID#)\n\n\t\t\t\t\t\tDiv(Class: list-group-item){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-12){\n                                    DBFind(Name: voting_participants, Source: src_voting_participants).Where(\"voting_id=#vID#\").Custom(custom_id){\n                                        Span(Body:  #id#)\n                                    }.Custom(custom_member){\n                                        Button(Class: btn btn-link, Page: profile_view, PageParams: \"v_member_id=#member_id#\"){\n                                            Image(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n                                            Span(Class: h5 text-bold, Body: #member_name#)\n                                        }\n                                    }\n                                    Table(src_voting_participants, \"$id$=custom_id,$member_name$=custom_member\")\n                                }\n                            }\n\n                            If(#instance_typeparticipants# == 1){\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-12){\n                                    }\n                                }\n                            }\n\n                            If(#instance_typeparticipants# == 2){\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-12){\n                                        Span(Class: text-muted, Body: LangRes(select_member))\n                                        DBFind(Name: members, Source: source_members).Custom(custom_username){\n                                            #member_name# ( Address(#id#) )\n                                        }\n                                        Select(Name: var_id, Source: source_members, NameColumn: custom_username, ValueColumn: id)\n                                    }\n                                }\n                            }\n                        \n                            If(#instance_typeparticipants# == 3){\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-12){\n                                        Span(Class: text-muted, Body: LangRes(select_role))\n                                        DBFind(Name: roles_list, Source: source_roles).Where(\"delete=0\")\n                                        Select(Name: var_id, Source: source_roles, NameColumn: role_name, ValueColumn: id)\n                                    }\n                                }\n                            }\n\n                        }\n\n                        Div(Class: panel-footer clearfix){\n                            Div(Class: pull-right){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\n                                If(#instance_typeparticipants# == 2){\n                                    Button(Body: LangRes(add_member), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_Invite)\n                                }\n                                If(#instance_typeparticipants# == 3){\n                                    Button(Body: LangRes(add_role), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_Invite)\n                                }\n                            }\n                        }\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n            }\n            Div(Class: col-md-2)\n        }\n        \n    }.Else{\n\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_list",
            "Value": "Div(Class: content-wrapper){\n    \n    SetTitle($voting$)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: $voting$)\n    }\n    \n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"name='#v_Search#' and delete = 0\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"delete=0\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n    \n    DBFind(Name: voting_instances, Source: src_voting_instances).Custom(custom_id){\n        Span(Class: h5, Body: #id#)\n        SetVar(Name: vDateNow, Value: Now(\"YYYY-MM-DD HH:MI\"))\n        SetVar(Name: vStartDate, Value: DateTime(DateTime: #startdate#, Format: \"YYYY-MM-DD HH:MI\"))\n        SetVar(Name: vEndDate, Value: DateTime(#enddate#, \"YYYY-MM-DD HH:MI\"))\n        SetVar(Name: vCmpStartDate, Value: CmpTime(#vStartDate#,#vDateNow#))\n        SetVar(Name: vCmpEndDate, Value: CmpTime(#vEndDate#,#vDateNow#))\n    }.Custom(custom_name){\n        LinkPage(Page: voting_view, PageParams: \"vID=#id#\"){\n            Span(Class: h5 text-bold, Body: #name#)\n        }\n    }.Custom(custom_subject){\n        If(Or(#vCmpStartDate#<=0,#type_voting#==2)){\n            Span(Class: h6, Body: EcosysParam(Name: type_voting_decisions, Index: #typedecision#))\n        }.Else{\n            If(#typedecision# == 1){\n                LinkPage(Page: voting_decision_candidates, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: EcosysParam(Name: type_voting_decisions, Index: #typedecision#))\n                }\n            }\n            If(#typedecision# == 2){\n                LinkPage(Page: voting_decision_election, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: EcosysParam(Name: type_voting_decisions, Index: #typedecision#))\n                }\n            }\n            If(#typedecision# == 3){\n                LinkPage(Page: voting_decision_document, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: EcosysParam(Name: type_voting_decisions, Index: #typedecision#))\n                }\n            }\n            If(#typedecision# == 4){\n                LinkPage(Page: voting_decision_formal, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: EcosysParam(Name: type_voting_decisions, Index: #typedecision#))\n                }\n            }\n            If(#typedecision# == 5){\n                LinkPage(Page: voting_decision_contract, PageParams: \"vID=#id#\"){\n                    Span(Class: h6 text-bold, Body: EcosysParam(Name: type_voting_decisions, Index: #typedecision#))\n                }\n            }\n        }\n    }.Custom(custom_participants){\n        If(Or(#vCmpStartDate#<=0,#type_voting#==2)){\n            Span(Class: h6, Body: EcosysParam(Name: type_voting_participants, Index: #typeparticipants#))\n        }.Else{\n            LinkPage(Page: voting_invite, PageParams: \"vID=#id#\"){\n                Span(Class: h6 text-bold, Body: EcosysParam(Name: type_voting_participants, Index: #typeparticipants#))\n            }\n        }\n    }.Custom(custom_notifics){\n        If(#flag_notifics# == 1){\n            Div(Class: text-center text-bold, Body: LangRes(yes))\n        }.Else{\n            If(And(#flag_success#!=1,#vCmpEndDate#>0,#vCmpStartDate#<0,#creator_id#==#key_id#)){\n                Div(Class: text-center, Body: Button(Body: LangRes(send), Class: btn btn-primary, Contract: voting_SendNotifics, Params: \"votingID=#id#\", Page: voting_list))\n            }.Else{\n                Div(Class: text-center text-bold, Body: LangRes(no))\n            }\n        }\n    }.Custom(custom_creator){\n        LinkPage(Page: profile_view, PageParams: \"v_member_id=#creator_id#\"){\n            Image(Src: \"#creator_avatar#\", Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n            Span(Class: h5 text-bold, Body: #creator_name#)\n        }\n    }.Custom(custom_date){\n        If(#vCmpStartDate# < 0){\n            Div(Class: text-muted, Body: DateTime(DateTime: #startdate#, Format: \"DD.MM.YYYY HH:MI\"))\n        }.Else{\n            Div(Class: text-bold, Body: DateTime(DateTime: #startdate#, Format: \"DD.MM.YYYY HH:MI\"))\n        }\n        If(#vCmpEndDate# < 0){\n            Div(Class: text-muted, Body: DateTime(DateTime: #enddate#, Format: \"DD.MM.YYYY HH:MI\"))\n        }.Else{\n            Div(Class: text-bold, Body: DateTime(DateTime: #enddate#, Format: \"DD.MM.YYYY HH:MI\"))\n        }\n    }.Custom(custom_type){\n        Span(Class: h6, Body: EcosysParam(Name: type_voting, Index: #type_voting#))\n    }.Custom(custom_progress){\n        Div(Class: text-center h5 text-bold, Body: #percent_success# %)\n    }.Custom(custom_decision){\n        If(#flag_decision# == 0){\n            If(And(#vCmpEndDate#<0,#creator_id#==#key_id#)){\n                Div(Class: text-center, Body: Button(Body: LangRes(decision), Class: btn btn-primary, Contract: voting_CheckDecision, Params: \"votingID=#id#\", Page: voting_list))\n            }.Else{\n                Div(Class: text-muted text-center, Body: LangRes(no))\n            }\n        }\n        If(#flag_decision# == -2){\n            Div(Class: text-muted text-center, Body: LangRes(not_enough_votes))\n        }\n        If(#flag_decision# == 1){\n            Div(Class: text-success text-center, Body: LangRes(accepted))\n        }\n        If(#flag_decision# == -1){\n            Div(Class: text-danger text-center, Body: LangRes(rejected))\n        }\n    }.Custom(custom_status){\n        If(#flag_success# == 1){\n            Div(Class: text-success text-center, Body: LangRes(success))\n        }.Else{\n            If(#vCmpEndDate# < 0){\n                Div(Class: text-muted text-center, Body: LangRes(finished))\n            }.Else{\n                If(#vCmpStartDate# < 0){\n                    Div(Class: text-center){\n                        Button(Class: btn btn-link, Page: voting_view, PageParams: \"vID=#id#\"){\n                            Span(Class: h4, Body: Em(Class: fa icon-eye))\n                        }\n                    }\n                }.Else{\n                    Div(Class: text-warning text-center, Body: LangRes(waiting))\n                }\n            }\n        }\n    }.Custom(actions){\n        Div(Class: text-center, Body: Button(Body: Em(Class: fa fa-close), Class: btn btn-danger, Contract: voting_Delete, Params: \"votingID=#id#\", Page: voting_list))\n    }.Where(#v_Where#).Order(id desc)\n    \n    Div(Class: panel panel-primary){\n        Form(){\n            Div(Class: list-group-item){\n                Div(Class: row df f-valign){\n                    Div(Class: col-md-1 mt-sm text-right){\n                        Label(For: Search){\n                            Span(Body: LangRes(name))\n                        }\n                    }\n                    Div(Class: col-md-11 mc-sm){\n                        Div(Class: input-group){\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\n                            Div(Class: input-group-btn){\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: voting_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                            }\n                        }\n                    }\n                }\n            }\n            \n            Div(Class: list-group-item){\n                Table(src_voting_instances, \"$id$=custom_id,$name$=custom_name,$type$=custom_type,$subject_voting$=custom_subject,$participants$=custom_participants,$date_start$ / $date_end$=custom_date,$creator$=custom_creator,$notifications$=custom_notifics,$progress$=custom_progress,$decision$=custom_decision,$status$=custom_status,$actions$=actions\")\n                If(GetVar(isSearch) == 1){\n                    Div(Class: text-center){\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: voting_list, PageParams: \"isSearch=0\")\n                    }\n                }\n            }\n            \n            Div(Class: panel-footer clearfix){\n                Div(Class: pull-right){\n                    Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_create)\n                }\n            }\n            \n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        },
        {
            "Name": "voting_view",
            "Value": "Div(Class: content-wrapper){\n\tIf(#notific_type#==1){\n\t\tSetVar(Name: vID, Value: #notific_param#)\n\t}\n\n    If(#vID# > 0){\n\n        DBFind(Name: voting_instances, Source: src_one).Where(\"id=#vID#\").Vars(instance)\n        \n        SetTitle(#instance_name#)\n        Div(Class: breadcrumb){\n            LinkPage($voting$, voting_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: #instance_name#)\n        }\n\n\t\tSetVar(Name: vDateNow, Value: Now(\"YYYY-MM-DD HH:MI\")) \n\t\tSetVar(Name: vStartDate, Value: DateTime(DateTime: #instance_startdate#, Format: \"YYYY-MM-DD HH:MI\"))\n\t\tSetVar(Name: vEndDate, Value: DateTime(#instance_enddate#, \"YYYY-MM-DD HH:MI\")) \n\t\tSetVar(Name: vCmpStartDate, Value: CmpTime(#vStartDate#,#vDateNow#)) \n\t\tSetVar(Name: vCmpEndDate, Value: CmpTime(#vEndDate#,#vDateNow#))\n\n\t\tDBFind(Name: voting_participants, Source: src_two).Where(\"voting_id=#vID# and member_id=#key_id# and decision=0\").Vars(participant)\n        If(And(#instance_flag_fulldata#==1,#participant_id#>0,#instance_flag_decision#==0,#vCmpStartDate#<0,#vCmpEndDate#>0)){\n            SetVar(Name: vOpportunityVote, Value: 1)\n        }.Else{\n            SetVar(Name: vOpportunityVote, Value: 0)\n        }\n\n        Div(Class: row df f-valign){\n            Div(Class: col-md-2)\n            Div(Class: col-md-8){\n\n                Div(Class: panel panel-default){\n                    Form(){ \n\n\t\t\t\t\t\tInput(Class: form-control hidden, Type: text, Name: votingID, Value: #vID#)\t\t\t\t\t\n\t\t\t\t\t\n                        Div(Class: list-group-item text-center){\n                            P(Class: h3 text-bold m0, Body: #instance_name#)\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-12 mt-sm){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: EcosysParam(Name: type_voting_decisions, Index: #instance_typedecision#))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-6 mc-sm text-right){\n                                    P(Class: h5 text-muted m0, Body: LangRes(description))\n                                }\n                                Div(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: #instance_description#)\n                                }\n                            }\n                        }\n\t\t\t\t\t\t\n                        Div(Class: list-group-item text-center){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-6 mt-sm text-right){\n                                    P(Class: h4 text-normal m0, Body: LangRes(type))\n                                }\n                                Div(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: EcosysParam(Name: type_voting, Index: #instance_type_voting#))\n                                }\n                            }\n\t\t\t\t\t\t\tIf(Or(#instance_typedecision#==1,#instance_typedecision#==2,#instance_typedecision#==3,#instance_typedecision#==4)){\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\n\t\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: LangRes(contract_accept))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#instance_optional_contract_accept# == NULL){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h4 text-muted m0, Body: LangRes(optional))\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: #instance_optional_contract_accept#)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\n\t\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: LangRes(contract_reject))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#instance_optional_contract_reject# == NULL){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h4 text-muted m0, Body: LangRes(optional))\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: #instance_optional_contract_reject#)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-6 mc-sm text-right){\n                                    P(Class: h4 text-normal m0, Body: LangRes(filled))\n                                }\n                                Div(Class: col-md-6 mc-sm text-left){\n                                    If(#instance_flag_fulldata# == 1){\n                                        P(Class: h4 text-success m0, Body: LangRes(yes))\n                                    }.Else{\n                                        P(Class: h4 text-danger m0, Body: LangRes(no))\n                                    } \n                                }\n                            }\n                            If(Or(#instance_typedecision#==1,#instance_typedecision#==2)){\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-6 mt-sm text-right){\n                                        P(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(role))\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#instance_optional_role_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\tDBFind(Name: roles_list, Source: src_roles_list).Where(\"id=#instance_optional_role_id#\").Vars(roles)\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #roles_role_name# (LangRes(id): #instance_optional_role_id#))\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-6 mc-sm text-right){\n                                        P(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(vacancies))\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#instance_optional_role_vacancies# > 0){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #instance_optional_role_vacancies#)\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: #instance_optional_role_vacancies#)\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-6 mc-sm text-right){\n                                        P(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(candidates))\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#instance_optional_number_cands# > 0){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #instance_optional_number_cands#)\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: #instance_optional_number_cands#)\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n                                Div(Class: row df){\n                                    Div(Class: col-md-2 mt-sm)\n                                    Div(Class: col-md-8 mt-sm text-left){\n                                        DBFind(Name: voting_subject, Source: src_voting_subject).Where(\"voting_id=#vID#\").Custom(custom_address){\n                                            Span(Class: h6, Body: Address(#member_id#))\n                                        }.Custom(custom_member){\n                                            Button(Class: btn btn-link, Page: profile_view, PageParams: \"v_member_id=#member_id#\"){\n                                                Image(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n                                                Span(Class: h5 text-bold, Body: #member_name#)\n                                            }\n                                        }.Custom(custom_voting){\n\t\t\t\t\t\t\t\t\t\t\tIf(#vOpportunityVote#==1){\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(vote), Class: btn btn-success, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_AcceptCandidates, Params: \"candidateID=#member_id#\")\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}.Order(\"member_name\")\n                                        Table(src_voting_subject, \"=custom_member,=custom_address,=custom_voting\")\n                                    }\n                                    Div(Class: col-md-2 mt-sm)\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-12 mc-sm){\n                                        If(And(#vCmpStartDate#>0,#instance_type_voting#==1)){\n                                            If(#instance_typedecision#==1){\n                                                Button(Class: btn btn-link, Page: voting_decision_candidates, PageParams: \"vID=#vID#\"){\n                                                    Span(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\n                                                }\n                                            }\n                                            If(#instance_typedecision#==2){\n                                                Button(Class: btn btn-link, Page: voting_decision_election, PageParams: \"vID=#vID#\"){\n                                                    Span(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            } \n\t\t\t\t\t\t\tIf(#instance_typedecision#==3){\n\t\t\t\t\t\t\t\tDBFind(Name: voting_subject, Source: src_voting_subject).Where(\"voting_id=#vID#\").Vars(subject)\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-1 mt-lg)\n                                    Div(Class: col-md-10 mt-lg){\n\t\t\t\t\t\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_text_document#)\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h6 text-muted m0, Body: Hash: #subject_text_doc_hash#)\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h6 text-muted m0, Body: Hash: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-1 mt-lg)\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-12 mc-sm){\n\t\t\t\t\t\t\t\t\t\tIf(And(#vCmpStartDate#>0,#instance_type_voting#==1)){\n\t\t\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: voting_decision_document, PageParams: \"vID=#vID#\"){\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-1 mt-lg)\n                                    Div(Class: col-md-10 mt-lg){\n\t\t\t\t\t\t\t\t\t\tIf(#vOpportunityVote#==1){\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: pull-left){\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(reject), Class: btn btn-danger, Contract: voting_RejectDecision, PageParams: \"vID=#vID#\", Page: voting_view)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: pull-right){\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(accept), Class: btn btn-success, Contract: voting_AcceptDecision, PageParams: \"vID=#vID#\", Page: voting_view)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-1 mt-lg)\n                                }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tIf(#instance_typedecision#==4){\n\t\t\t\t\t\t\t\tDBFind(Name: voting_subject, Source: src_voting_subject).Where(\"voting_id=#vID#\").Vars(subject)\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n                                    Div(Class: col-md-6 mt-sm text-right){\n                                        P(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(description))\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_formal_decision_description#)\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-6 mc-sm text-right){\n                                        P(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(table_to_written))\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_formal_decision_table#)\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n\t\t\t\t\t\t\t\tIf(#instance_type_voting#==1){\n\t\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(row_id))\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_formal_decision_tableid#)\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-6 mc-sm text-right){\n                                        P(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\tIf(#instance_type_voting#==1){\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(column_name))\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(parameter_name))\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_formal_decision_column#)\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-6 mc-sm text-right){\n                                        P(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(written_value))\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_formal_decision_colvalue#)\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-12 mc-sm){\n\t\t\t\t\t\t\t\t\t\tIf(And(#vCmpStartDate#>0,#instance_type_voting#==1)){\n\t\t\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: voting_decision_formal, PageParams: \"vID=#vID#\"){\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-1 mt-lg)\n                                    Div(Class: col-md-10 mt-lg){\n\t\t\t\t\t\t\t\t\t\tIf(#vOpportunityVote#==1){\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: pull-left){\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(reject), Class: btn btn-danger, Contract: voting_RejectDecision, PageParams: \"vID=#vID#\", Page: voting_view)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: pull-right){\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(accept), Class: btn btn-success, Contract: voting_AcceptDecision, PageParams: \"vID=#vID#\", Page: voting_view)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-1 mt-lg)\n                                }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tIf(#instance_typedecision#==5){\n\t\t\t\t\t\t\t\tDBFind(Name: voting_subject, Source: src_voting_subject).Where(\"voting_id=#vID#\").Vars(subject)\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\n                                        P(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(contract_accept))\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_contract_accept#)\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\n                                        P(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(contract_reject))\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\t\tIf(#subject_id# > 0){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #subject_contract_reject#)\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(empty))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-12 mc-sm){\n\t\t\t\t\t\t\t\t\t\tIf(And(#vCmpStartDate#>0,#instance_type_voting#==1)){\n\t\t\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: voting_decision_contract, PageParams: \"vID=#vID#\"){\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: LangRes(subject_voting_edit))\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                }\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-1 mt-lg)\n                                    Div(Class: col-md-10 mt-lg){\n\t\t\t\t\t\t\t\t\t\tIf(#vOpportunityVote#==1){\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: pull-left){\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(reject), Class: btn btn-danger, Contract: voting_RejectDecision, PageParams: \"vID=#vID#\", Page: voting_view)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tDiv(Class: pull-right){\n\t\t\t\t\t\t\t\t\t\t\t\tButton(Body: LangRes(accept), Class: btn btn-success, Contract: voting_AcceptDecision, PageParams: \"vID=#vID#\", Page: voting_view)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n                                    }\n                                    Div(Class: col-md-1 mt-lg)\n                                }\n\t\t\t\t\t\t\t}\n                        }\n\t\t\t\t\t\t\n                        Div(Class: list-group-item text-center){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-6 mt-sm text-right){\n                                    P(Class: h5 text-normal m0, Body: LangRes(status))\n                                }\n                                Div(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\t\tIf(#instance_flag_success#==1){ \n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-success m0, Body: LangRes(success))\n\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\tIf(#vCmpEndDate#<0){\n\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: LangRes(finished))\n\t\t\t\t\t\t\t\t\t\t}.Else{\t\n\t\t\t\t\t\t\t\t\t\t\tIf(#vCmpStartDate#<0){ \n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-success m0, Body: LangRes(started))\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\t\n\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-warning m0, Body: LangRes(waiting))\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n                                }\n                            }\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(notifications))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\tIf(#instance_flag_notifics#==1){\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(yes))\n\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(no))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-6 mc-sm text-right){\n                                    P(Class: h5 text-normal m0, Body: LangRes(decision))\n                                }\n                                Div(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\tIf(#instance_flag_decision#==-2){\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(not_enough_votes))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tIf(#instance_flag_decision#==-1){ \n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(rejected))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tIf(#instance_flag_decision#==0){\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(no))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tIf(#instance_flag_decision#==1){\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-success m0, Body: LangRes(accepted))\n\t\t\t\t\t\t\t\t\t}\n                                }\n                            }\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(date_start))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\t\tIf(#vCmpStartDate#<0){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: DateTime(DateTime: #instance_startdate#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: DateTime(DateTime: #instance_startdate#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(date_end))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\tIf(#vCmpEndDate#<0){\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: DateTime(DateTime: #instance_enddate#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: DateTime(DateTime: #instance_enddate#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(voting_volume))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #instance_volume#)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-right){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: LangRes(voting_quorum))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mc-sm text-left){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #instance_quorum#)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-right){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0){\n\t\t\t\t\t\t\t\t\t\tSpan(Body: LangRes(participants))\n\t\t\t\t\t\t\t\t\t\tSpan(Class: text-danger, Body:*)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDiv(Class: col-md-6 mt-sm text-left){\n\t\t\t\t\t\t\t\t\tIf(#instance_number_participants# > 0){\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-normal m0, Body: #instance_number_participants#)\n\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: #instance_number_participants#)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-2 mt-sm)\n                                Div(Class: col-md-8 mt-sm text-left){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tDBFind(Name: voting_participants, Source: src_voting_participants).Where(\"voting_id=#vID#\").Custom(custom_address){\n                                            P(Class: h6 m0, Body: Address(#member_id#))\n                                        }.Custom(custom_member){\n                                            Button(Class: btn btn-link, Page: profile_view, PageParams: \"v_member_id=#member_id#\"){\n                                                Image(Src: \"#member_avatar#\", Class: img-circle).Style(width: 30px;  border: 1px solid #5A5D63; margin-right: 10px;)\n                                                Span(Class: h5 text-bold, Body: #member_name#)\n                                            }\n                                        }.Custom(custom_decision){\n\n\t\t\t\t\t\t\t\t\t\t\tIf(Or(#instance_typedecision#==1,#instance_typedecision#==2)){ \n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==0){ \n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h6 m0, Body: LangRes(did_not_vote))\n\t\t\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-success text-center h6 m0, Body: $vote_for_candidate$:)\n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-success text-center h6 m0, Body: Address(#decision#) )\n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-success text-center h6 m0, Body: $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tIf(#instance_typedecision#==3){ \n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==0){\n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h6 m0, Body: LangRes(did_not_vote))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==1){ \n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-success h6 m0, Body: $document_accept$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==-1){ \n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-danger h6 m0, Body: $document_reject$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tIf(#instance_typedecision#==4){\n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==0){\n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h6 m0, Body: LangRes(did_not_vote))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==1){\n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-success h6 m0, Body: $decision_accept$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==-1){ \n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-danger h6 m0, Body: $decision_reject$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tIf(#instance_typedecision#==5){ \n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==0){\n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: h6 m0, Body: LangRes(did_not_vote))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==1){ \n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-success h6 m0, Body: $contract_accepted$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tIf(#decision#==-1){ \n\t\t\t\t\t\t\t\t\t\t\t\t\tP(Class: text-danger h6 m0, Body: $contract_rejected$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}.Order(\"member_name\")\n                                        Table(src_voting_participants, \"=custom_member,=custom_decision\")\n\t\t\t\t\t\t\t\t\n                                }\n\t\t\t\t\t\t\t\tDiv(Class: col-md-2 mt-sm)\n                            }\n\t\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\t\tDiv(Class: col-md-12 mc-sm){\n\t\t\t\t\t\t\t\t\tIf(And(#vCmpStartDate#>0,#instance_type_voting#==1)){\n\t\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: voting_invite, PageParams: \"vID=#vID#\"){\n\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: LangRes(participants_add))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n                        Div(Class: list-group-item text-center){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-1 mt-sm )\n                                Div(Class: col-md-5 mt-sm text-center){\n\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: LangRes(voted))\n                                }\n                                Div(Class: col-md-5 mt-sm text-center){\n\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: LangRes(progress))\n                                }\n                                Div(Class: col-md-1 mt-sm)\n                            }\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-1 mt-sm )\n                                Div(Class: col-md-5 mt-sm text-center){\n\t\t\t\t\t\t\t\t\tP(Class: h6 text-muted m0, Body: LangRes(voting_graph_voted))\n                                }\n                                Div(Class: col-md-5 mt-sm text-center){\n\t\t\t\t\t\t\t\t\tP(Class: h6 text-muted m0, Body: LangRes(voting_graph_progress))\n                                }\n                                Div(Class: col-md-1 mt-sm)\n                            }\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-1 mt-sm )\n                                Div(Class: col-md-5 mt-sm text-center){\n                                    P(Class: h3 text-normal m0, Body: #instance_number_voters# / #instance_percent_voters#)\n                                }\n                                Div(Class: col-md-5 mt-sm text-center){\n                                    P(Class: h3 text-normal m0, Body: #instance_percent_success# / 100)\n                                }\n                                Div(Class: col-md-1 mt-sm)\n                            }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n                    }\n                }\n\n            }\n            Div(Class: col-md-2)\n        }   \n    }.Else{\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu"
        }
    ],
    "parameters": [
        {
            "Name": "notification_closure",
            "Value": "single,multiple",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "notification_icon",
            "Value": "fa-bell,fa-comment,fa-envelope,fa-bookmark,fa-check,fa-exclamation-triangle,fa-info-circle",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "notification_type",
            "Value": "single,role",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "roles_types",
            "Value": "assigned_role,elective_role,system_role,company_role",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "type_voting",
            "Value": "type_voting_custom,type_voting_system",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "type_voting_decisions",
            "Value": "voting_decisions_candidate_requests,voting_decisions_candidate_manual,voting_decisions_document,voting_decisions_db,voting_decisions_contract",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "type_voting_participants",
            "Value": "voting_participants_everybody,voting_participants_manual,voting_participants_role",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "tables": [
        {
            "Name": "voting_instances",
            "Columns": "[{\"name\":\"flag_success\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_UpdateDataForGraphs\\\")\"},{\"name\":\"typedecision\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"flag_decision\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_CheckDecision\\\")\"},{\"name\":\"contract_reject_params\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"voting_SubjectSettings\\\", \\\"voting_SubjectDocument\\\", \\\"voting_SubjectFormal\\\")\"},{\"name\":\"creator_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"description\",\"type\":\"text\",\"conditions\":\"false\"},{\"name\":\"contract_accept_params\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"voting_SubjectSettings\\\", \\\"voting_SubjectDocument\\\", \\\"voting_SubjectFormal\\\")\"},{\"name\":\"flag_notifics\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_SendNotifics\\\")\"},{\"name\":\"creator_avatar\",\"type\":\"bytea\",\"conditions\":\"false\"},{\"name\":\"percent_voters\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_UpdateDataForGraphs\\\")\"},{\"name\":\"optional_number_cands\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_SubjectCandidates\\\")\"},{\"name\":\"name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"volume\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"startdate\",\"type\":\"datetime\",\"conditions\":\"false\"},{\"name\":\"number_participants\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_Invite\\\")\"},{\"name\":\"flag_fulldata\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_SubjectCheckFulldata\\\")\"},{\"name\":\"creator_name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"percent_success\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_UpdateDataForGraphs\\\")\"},{\"name\":\"optional_contract_accept\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"voting_SubjectSettings\\\", \\\"voting_SubjectDocument\\\", \\\"voting_SubjectFormal\\\")\"},{\"name\":\"optional_contract_reject\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"voting_SubjectSettings\\\", \\\"voting_SubjectDocument\\\", \\\"voting_SubjectFormal\\\")\"},{\"name\":\"enddate\",\"type\":\"datetime\",\"conditions\":\"false\"},{\"name\":\"type_voting\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"number_voters\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_UpdateDataForGraphs\\\")\"},{\"name\":\"optional_role_id\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_SubjectSettings\\\")\"},{\"name\":\"typeparticipants\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"optional_role_vacancies\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_SubjectSettings\\\")\"},{\"name\":\"delete\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_Delete\\\")\"},{\"name\":\"quorum\",\"type\":\"number\",\"conditions\":\"false\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "voting_participants",
            "Columns": "[{\"name\":\"decision\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"voting_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"member_name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"decision_date\",\"type\":\"datetime\",\"conditions\":\"ContractAccess(\\\"voting_AcceptCandidates\\\",\\\"voting_AcceptDecision\\\",\\\"voting_RejectDecision\\\")\"},{\"name\":\"member_avatar\",\"type\":\"bytea\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "voting_subject",
            "Columns": "[{\"name\":\"voting_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"member_avatar\",\"type\":\"bytea\",\"conditions\":\"true\"},{\"name\":\"text_document\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"voting_SubjectDocument\\\")\"},{\"name\":\"formal_decision_description\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"voting_SubjectFormal\\\")\"},{\"name\":\"formal_decision_column\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"voting_SubjectFormal\\\")\"},{\"name\":\"formal_decision_colvalue\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"voting_SubjectFormal\\\")\"},{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"member_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"formal_decision_table\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"voting_SubjectFormal\\\")\"},{\"name\":\"contract_accept_params\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"voting_SubjectContract\\\")\"},{\"name\":\"number_accept\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_AcceptCandidates\\\",\\\"voting_AcceptDecision\\\")\"},{\"name\":\"text_doc_hash\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"voting_SubjectDocument\\\")\"},{\"name\":\"contract_accept\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"voting_SubjectContract\\\")\"},{\"name\":\"formal_decision_tableid\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"voting_SubjectFormal\\\")\"},{\"name\":\"contract_reject\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"voting_SubjectContract\\\")\"},{\"name\":\"contract_reject_params\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"voting_SubjectContract\\\")\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}