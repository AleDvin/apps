contract land_registry_Update{
    data {
        LandId int
        Coords string
        LandUse int
        BuildingsUseClass int
        Area int
        CoordsAddress string
        LandNature int
        LandLocalBody int
    }
    func conditions {}

    func action {
        var log_table, table, fields string
        table = "land_registry"
        log_table = "land_registry_editing"
        fields = "editing_attribute,lend_object_id,new_attr_value,old_attr_value,person_id,person_name,timestamp date"
        
        var name string
        name = DBFind("members").Where("id=?", $key_id).One("member_name")
        
        var record map        
        record = DBFind(table).Where("id=?", $LandId).Row()
        
        if $LandUse!=Int(record["land_use"]){
            DBInsert(log_table, fields, "land_use", $LandId, $LandUse, Int(record["land_use"]),$key_id, name, $block_time)
        }
        
        if $BuildingsUseClass!=Int(record["buildings_use_class"]){
            DBInsert(log_table, fields, "buildings_use_class", $LandId, $BuildingsUseClass, Int(record["buildings_use_class"]),$key_id, name, $block_time)
        }
        
        if $CoordsAddress!=record["address"]{
            DBInsert(log_table, fields, "address", $LandId, $CoordsAddress, record["address"],$key_id, name, $block_time)
        }
        
        if $Coords!=record["map_coords"]{
            DBInsert(log_table, fields, "coords", $LandId, $Coords, record["map_coords"],$key_id, name, $block_time)
        }
        
        if $Area!=Int(record["area"]){
            DBInsert(log_table, fields, "area", $LandId, $Area, record["area"],$key_id, name, $block_time)
        }
        
        DBUpdate(table, $LandId, "address,area,buildings_use_class,map_coords,land_use,land_nature,land_local_body", $CoordsAddress,$Area,$BuildingsUseClass,$Coords,$LandUse,$LandNature,$LandLocalBody)
    }
}