contract land_registry_MoneyTransfer
{
    data {
        from_acc_id int
        to_acc_id int
        Amount money
        Signature string "optional"
    }
    
    func conditions {
        if $from_acc_id == $to_acc_id {
            warning "Sender account ID and Recipient account ID are the same."
        }
        
        //----CHECK RECIPIENT----------------------------
        var recipientAccount map
        recipientAccount = DBFind("accounts").Where("id=? and onhold=0", $to_acc_id).Row()
        
        var recipientType int
        recipientType = Int(recipientAccount["type"])
        
        // transfer of tokens to sys-emission account is impossible; use emission
        if recipientType==1 && $from_acc_id != 0 {
            warning "Sorry, you can not send money to the system account"
        }
        
        // transfer of tokens to sys-trash account is impossible; this account is necessary for storing remote tokens
        if recipientType==2 && $Signature == "" {
            warning "Sorry, you can not send money to the system account"
        }
        
        recipientAccount = DBFind("accounts").Where("id=?", $to_acc_id).Row()
        var recipientHold int
        recipientHold = Int(recipientAccount["onhold"])
        
        if recipientHold > 0 && recipientType != 2{
            warning "Recipient account on hold"
        }
        
        //----CHECKING SENDER----------------------------
        if $from_acc_id != 0 {
            var senderAccount map
            
            senderAccount = DBFind("accounts").WhereId($from_acc_id).Order("id desc").Row()
            
            // transfer tokens from sys-emission account can only gov_account
            if Int(senderAccount["type"]) == 1{
                MainCondition()
            }
            
            // transfer tokens from sys-trash is impossible
            if Int(senderAccount["type"]) == 2 {
                warning "Sorry, you can not send funds from trash-account"
            }
            
            if Int(senderAccount["onhold"]) > 0 && recipientType != 2 {
                warning "Sender account on hold"
            }
            
            $senderBalance = money(senderAccount["amount"])
            if $senderBalance < $Amount {
                warning "Sorry, your account has insufficient funds"
            }
        }
        else {
            // if from_acc_id == 0, then this emission
            MainCondition()
        }
    }
    
    func action {
        var recipientAccount map
        var recipientBalance money
        recipientAccount = DBFind("accounts").WhereId($to_acc_id).Row()
        recipientBalance = Int(recipientAccount["amount"]) + $Amount
        DBUpdate("accounts", $to_acc_id, "amount", recipientBalance)
        
        if($from_acc_id != 0) {
            $senderBalance = $senderBalance - $Amount
            DBUpdate("accounts", $from_acc_id, "amount", $senderBalance)
        }
    }
    
}