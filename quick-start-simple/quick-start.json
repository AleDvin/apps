{
    "name": "Basic application",
    "data": [
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetTitle($role_notifics$)\r\nAddToolButton(Title: $send$, Page: notifications_roles_send, Icon: icon-plus)\r\n\r\nIf(GetVar(Search)){\r\n    SetVar(Where,\"notification->type='2' and recipient->role_name='#Search#' and recipient->role_id='#role_id#'\")\r\n}.Else{\r\n    SetVar(Where,\"notification->type='2' and recipient->role_id='#role_id#'\").(Search,)\r\n}\r\n\r\nDBFind(Name: notifications, Source: src_notifications).Limit(20).Columns(\"id,recipient->role_id,recipient->role_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,page_name,page_params,date_created,date_closed,date_start_processing,processing_info->member_name,closed\").Custom(_id){\r\n    If(#closed# == 0){\r\n        SetVar(style_text,\"text-normal\").(style_link,\"text-primary\")\r\n    }.Else{\r\n        SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\r\n    }\r\n    Span(Class: #style_text#, Body: #id#)\r\n}.Custom(_recipient){\r\n    LinkPage(Class: #style_link# t5 text-bold, Page: roles_view, PageParams: \"v_role_id=#recipient.role_id#\"){\r\n        If(#recipient.image_id#>0){\r\n            Image(Src: Binary().ById(#recipient.image_id#) \"#img_data#\", Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n            #recipient.role_name#\r\n        }.Else{\r\n            Div(){\r\n                Span(Em(Class: fa icon-settings fa-2x)).Style(margin-right:10px;)\r\n                Span(#recipient.role_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }\r\n}.Custom(_sender){\r\n    If(#sender.type#==1){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#sender.member_id#\"){#sender.member_name#}\r\n    }\r\n    If(#sender.type#==2){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#sender.role_id#\"){#sender.role_name#}\r\n    }\r\n}.Custom(_icon){\r\n    Span(Class: fa #notification.icon# fa-2x #style_text#)\r\n}.Custom(_page){\r\n    LinkPage(Class: #style_link# t5 text-bold, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n        #page_name#\r\n    }\r\n}.Custom(_date){\r\n    Div(#style_text# t6){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\r\n    Div(#style_text# t6){DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\")}\r\n}.Custom(_processing){\r\n    Div(Class: #style_text# t6){\r\n        If(#date_start_processing# == NULL){\r\n            $not_started$\r\n        }.Else{\r\n            Span(LangRes(started), mr-sm) #processing_info.member_name# \r\n            Span(LangRes(at), mr-sm)\r\n            DateTime(DateTime: #date_start_processing#, Format: \"DD.MM.YYYY HH:MI\")\r\n        }\r\n    }\r\n}.Custom(_status){\r\n    If(#closed# == 0){\r\n        Span(Class: #style_text#){\r\n            If(#date_start_processing# == NULL){\r\n                LangRes(active)\r\n            }.Else{\r\n                LangRes(processing)\r\n            }\r\n        }\r\n    }.Else{\r\n        Span(Class: #style_text#, Body: LangRes(closed))\r\n    }\r\n}.Custom(_actions){\r\n    Div(text-right){\r\n        If(#closed# == 0){\r\n            If(#date_start_processing# == NULL){\r\n                Button(Class: btn btn-default fa fa-play, Contract: notifications_Process, Params: \"notific_id=#id#\", Page: notifications_list, PageParams: \"type=1\").Alert(Text: $want_start_processing_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n            }.Else{\r\n                Button(Class: btn btn-default fa fa-trash, Contract: notifications_Close, Params: \"notific_id=#id#\", Page: notifications_list, PageParams: \"type=1\").Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n            }\r\n        }\r\n    }\r\n}.Where(#Where#).Order(\"closed ASC, id DESC\")\r\n\r\nForm(panel panel-primary){\r\n    Div(panel-body){\r\n        Div(row){\r\n            Div(col-md-12){\r\n                Div(input-group){\r\n                    Div(input-group-addon){\r\n                        LangRes(recipient)\r\n                    }\r\n                    Input(Name: Search, Value: #Search#)\r\n                    Div(input-group-btn){\r\n                        Button(Class: btn btn-default fa fa-search, Page: notifications_list, PageParams: \"Search=Val(Search),type=1\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-12){\r\n                Table(Source: src_notifications, Columns: \"$id$=_id,$icon$=_icon,$recipient$=_recipient,$page_name$=_page,$sender$=_sender,$processing$=_processing,$sent$/$сlosed$=_date,$status$=_status,=_actions\")\r\n            }\r\n        }\r\n        If(GetVar(Search)){\r\n            Div(row){\r\n                Div(col-md-12 mt-lg){\r\n                    Div(text-center){\r\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_list, PageParams: \"type=1\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_roles",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetTitle($single_notifics$)\r\nAddToolButton(Title: $send$, Page: notifications_single_send, Icon: icon-plus)\r\n\r\nIf(GetVar(Search)){\r\n    SetVar(Where,\"notification->type='1' and recipient->member_name='#Search#' and recipient->member_id='#key_id#'\")\r\n}.Else{\r\n    SetVar(Where,\"notification->type='1' and recipient->member_id='#key_id#'\").(Search,)\r\n}\r\n\r\nDBFind(Name: notifications, Source: src_notifications).Limit(20).Columns(\"id,recipient->member_id,recipient->member_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,page_name,page_params,date_created,date_closed,closed\").Custom(custom_id){\r\n    If(#closed# == 0){\r\n        SetVar(Name: style_text, Value: \"text-normal\")\r\n        SetVar(Name: style_link, Value: \"text-primary\")\r\n    }.Else{\r\n        SetVar(Name: style_text, Value: \"text-muted\")\r\n        SetVar(Name: style_link, Value: \"text-muted\")\r\n    }\r\n    Span(Class: #style_text#, Body: #id#)\r\n}.Custom(custom_recipient){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#recipient.member_id#\"){\r\n        If(#recipient.image_id#>0){\r\n            Image(Src: Binary().ById(#recipient.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n            Span(#recipient.member_name#)\r\n        }.Else{\r\n            Div(){\r\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                Span(#recipient.member_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }\r\n}.Custom(custom_sender){\r\n    If(#sender.type#==1){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#sender.member_id#\"){\r\n            Span(Body: #sender.member_name#)\r\n        }\r\n    }\r\n    If(#sender.type#==2){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#sender.role_id#\"){\r\n            Span(Body: #sender.role_name#)\r\n        }\r\n    }\r\n}.Custom(custom_icon){\r\n    Em(Class: fa #notification.icon# fa-2x #style_text#)\r\n}.Custom(custom_page){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n        Span(Body: #page_name#)\r\n    }\r\n}.Custom(custom_date){\r\n    Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n    Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\"))\r\n}.Custom(custom_status){\r\n    If(#closed# == 0){\r\n        Span(Class: #style_text#, Body: LangRes(active))\r\n    }.Else{\r\n        Span(Class: #style_text#, Body: LangRes(сlosed))\r\n    }\r\n}.Custom(actions){\r\n    Div(pull-right){\r\n        If(#closed# == 0){\r\n            Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: notifications_Close, Params: \"notific_id=#id#\", Page: notifications_list).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n        }\r\n    }\r\n}.Where(#Where#).Order(\"closed ASC, id DESC\")\r\n\r\nForm(panel panel-primary){\r\n    Div(panel-body){\r\n        Div(row){\r\n            Div(col-md-12){\r\n                Div(input-group){\r\n                    Div(input-group-addon){\r\n                        LangRes(recipient)\r\n                    }\r\n                    Input(Name: Search, Value: #Search#)\r\n                    Div(input-group-btn){\r\n                        Button(Class: btn btn-default fa fa-search, Page: notifications_list, PageParams: \"Search=Val(Search)\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-12){\r\n                Table(Source: src_notifications, Columns: \"$id$=custom_id,$icon$=custom_icon,$recipient$=custom_recipient,$page_name$=custom_page,$sender$=custom_sender,$sent$/$сlosed$=custom_date,$status$=custom_status,=actions\")\r\n            }\r\n        }\r\n        If(GetVar(Search)){\r\n            Div(row){\r\n                Div(col-md-12 mt-lg){\r\n                    Div(text-center){\r\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_list)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_single",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "If(#ecosystem_id#==1){\r\n\tMenuItem(Title:Profile, Page:profile_view, Icon:\"icon-user\")\r\n\tMenuItem(Title:Notifications, Page:notifications_list, Icon:\"icon-flag\")\r\n\tMenuItem(Title:Users, Page:members_list, Icon:\"fa icon-people\")\r\n\tMenuItem(Title:Groups, Page:roles_list, Icon:\"fa fa-group\")\r\n\tMenuItem(Title:Ecosystems, Page:membership_ecosystems, Icon:\"fa fa-reorder\")\r\n\tMenuItem(Title:Block Explorer, Page:block_explorer, Icon:\"fa fa-chain\")\r\n\tMenuGroup(Title:References, Icon:\"icon-arrow-right\"){\r\n\t\tMenuItem(Title:Apla Docker, Page:apla_docker, Icon:\"fa fa-cog\")\r\n\t\tMenuItem(Title:Documentation, Page:documentation, Icon:\"fa fa-book\")\r\n\t\tMenuItem(Title:Versions, Page:versions, Icon:\"fa fa-bars\")\r\n\t}\r\n}.Else{\r\n\tMenuItem(Title:Profile, Page:profile_view, Icon:\"icon-user\")\r\n\tMenuItem(Title:Notifications, Page:notifications_list, Icon:\"icon-flag\")\r\n\tMenuItem(Title:Users, Page:members_list, Icon:\"fa icon-people\")\r\n\tMenuItem(Title:Groups, Page:roles_list, Icon:\"fa fa-group\")\r\n\tMenuItem(Title:Marketspace, Page:marketspace, Icon:\"fa fa-chain\")\r\n}",
            "Name": "default_menu",
            "Type": "menu"
        },
        {
            "Name": "APL_not_required",
            "Trans": "{\"en\":\"APL not required\",\"ru\":\"Не требуется наличие APL\"}",
            "Type": "languages"
        },
        {
            "Name": "APL_required",
            "Trans": "{\"en\":\"APL required\",\"ru\":\"Требуется наличие APL\"}",
            "Type": "languages"
        },
        {
            "Name": "NewValue",
            "Trans": "{\"en\": \"New value\", \"ru\": \"Новое значение\"}",
            "Type": "languages"
        },
        {
            "Name": "OldValue",
            "Trans": "{\"en\": \"Old value\", \"ru\": \"Старое значение\"}",
            "Type": "languages"
        },
        {
            "Name": "accept",
            "Trans": "{\"en\": \"Accept\", \"ru\": \"Принять\"}",
            "Type": "languages"
        },
        {
            "Name": "accept_request_member",
            "Trans": "{\"en\": \"Accept the request of this user?\", \"ru\": \"Принять запрос этого пользователя?\"}",
            "Type": "languages"
        },
        {
            "Name": "accepted",
            "Trans": "{\"en\": \"Accepted\", \"ru\": \"Принят\"}",
            "Type": "languages"
        },
        {
            "Name": "account",
            "Trans": "{\"en\": \"Account\", \"ru\": \"Счет\"}",
            "Type": "languages"
        },
        {
            "Name": "accounts",
            "Trans": "{\"en\": \"Accounts\", \"ru\": \"Счета\"}",
            "Type": "languages"
        },
        {
            "Name": "actions",
            "Trans": "{\"en\": \"Actions\", \"ru\": \"Действия\"}",
            "Type": "languages"
        },
        {
            "Name": "active",
            "Trans": "{\"en\": \"Active\", \"ru\": \"Активно\"}",
            "Type": "languages"
        },
        {
            "Name": "add",
            "Trans": "{\"en\": \"Add\", \"ru\": \"Добавить\"}",
            "Type": "languages"
        },
        {
            "Name": "add_member",
            "Trans": "{\"en\": \"Add user\", \"ru\": \"Добавить пользователя\"}",
            "Type": "languages"
        },
        {
            "Name": "add_role",
            "Trans": "{\"en\": \"Add group\", \"ru\": \"Добавить группу\"}",
            "Type": "languages"
        },
        {
            "Name": "address",
            "Trans": "{\"en\":\"Address\",\"ru\":\"Адрес\"}",
            "Type": "languages"
        },
        {
            "Name": "admin",
            "Trans": "{\"en\":\"Administrator\",\"ru\":\"Администратор\"}",
            "Type": "languages"
        },
        {
            "Name": "admin_tools",
            "Trans": "{\"en\": \"Admin tools\", \"ru\": \"Инструменты администратора\"}",
            "Type": "languages"
        },
        {
            "Name": "agency",
            "Trans": "{\"en\": \"Agency\", \"ru\": \"Агенский\"}",
            "Type": "languages"
        },
        {
            "Name": "all",
            "Trans": "{\"en\": \"All\", \"ru\": \"Все\"}",
            "Type": "languages"
        },
        {
            "Name": "amount",
            "Trans": "{\"en\": \"Amount\", \"ru\": \"Сумма\"}",
            "Type": "languages"
        },
        {
            "Name": "apply",
            "Trans": "{\"en\": \"Apply\", \"ru\": \"Подать\"}",
            "Type": "languages"
        },
        {
            "Name": "appointed",
            "Trans": "{\"en\": \"Appointed\", \"ru\": \"Назначен\"}",
            "Type": "languages"
        },
        {
            "Name": "appointment_impossible",
            "Trans": "{\"ru\":\"*Эта группа не является назначаемой. Назначение пользователей невозможно\",\"en\":\"*This group is not assignable. The appointment of users is impossible\"}",
            "Type": "languages"
        },
        {
            "Name": "arguments",
            "Trans": "{\"en\": \"Arguments\", \"ru\": \"Аргументы\"}",
            "Type": "languages"
        },
        {
            "Name": "assign",
            "Trans": "{\"en\": \"Assign\", \"ru\": \"Назначить\"}",
            "Type": "languages"
        },
        {
            "Name": "assigned",
            "Trans": "{\"en\": \"Assigned\", \"ru\": \"Назначен\"}",
            "Type": "languages"
        },
        {
            "Name": "assigned_role",
            "Trans": "{\"en\": \"Assigned\", \"ru\": \"Назначаемая\"}",
            "Type": "languages"
        },
        {
            "Name": "at",
            "Trans": "{\"en\": \"at\", \"ru\": \"в\"}",
            "Type": "languages"
        },
        {
            "Name": "attention",
            "Trans": "{\"en\": \"ATTENTION! The page has not received parameters and is unavailable for viewing.\", \"ru\": \"ВНИМАНИЕ! Страница не получила параметров и не доступна для просмотра.\"}",
            "Type": "languages"
        },
        {
            "Name": "available",
            "Trans": "{\"en\":\"Available\",\"ru\":\"Доступно\"}",
            "Type": "languages"
        },
        {
            "Name": "avatar",
            "Trans": "{\"en\": \"Avatar\", \"ru\": \"Фото\"}",
            "Type": "languages"
        },
        {
            "Name": "back",
            "Trans": "{\"en\": \"Back\", \"ru\": \"Назад\"}",
            "Type": "languages"
        },
        {
            "Name": "balance",
            "Trans": "{\"en\": \"Balance\", \"ru\": \"Баланс\"}",
            "Type": "languages"
        },
        {
            "Name": "begin",
            "Trans": "{\"en\": \"Begin\", \"ru\": \"Начать\"}",
            "Type": "languages"
        },
        {
            "Name": "birthdate",
            "Trans": "{\"en\": \"Birthdate\", \"ru\": \"Дата рождения\"}",
            "Type": "languages"
        },
        {
            "Name": "block_timer",
            "Trans": "{\"en\": \"Block timer\", \"ru\": \"Блок-таймер\"}",
            "Type": "languages"
        },
        {
            "Name": "blockcron_list",
            "Trans": "{\"en\": \"Block cron timers\", \"ru\": \"Блок-крон таймеры\"}",
            "Type": "languages"
        },
        {
            "Name": "blocked_at",
            "Trans": "{\"en\": \"Date of lock\", \"ru\": \"Дата блокировки\"}",
            "Type": "languages"
        },
        {
            "Name": "blocks",
            "Trans": "{\"en\": \"Blocks\", \"ru\": \"Блоки\"}",
            "Type": "languages"
        },
        {
            "Name": "body_text",
            "Trans": "{\"en\":\"Text\",\"ru\":\"Текст\"}",
            "Type": "languages"
        },
        {
            "Name": "business",
            "Trans": "{\"en\":\"Business\",\"ru\":\"Бизнес\"}",
            "Type": "languages"
        },
        {
            "Name": "can_apply_voting",
            "Trans": "{\"en\": \"You can apply for voting\", \"ru\": \"Вы можете подать заявку на голосование\"}",
            "Type": "languages"
        },
        {
            "Name": "candidate_manual",
            "Trans": "{\"en\": \"Candidate (manual addition)\", \"ru\": \"Кандидат (ручное добавление)\"}",
            "Type": "languages"
        },
        {
            "Name": "candidate_requests",
            "Trans": "{\"en\": \"Candidate (addition on request)\", \"ru\": \"Кандидат (добавление по запросу)\"}",
            "Type": "languages"
        },
        {
            "Name": "candidates",
            "Trans": "{\"en\": \"Candidates\", \"ru\": \"Кандидаты\"}",
            "Type": "languages"
        },
        {
            "Name": "candidates_role",
            "Trans": "{\"en\": \"Candidates group\", \"ru\": \"Группа кандидатов\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems",
            "Trans": "{\"en\":\"Catalog of ecosystems\",\"ru\":\"Каталог экосистем\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_conditions",
            "Trans": "{\"en\":\"Ecosystem conditions and procedure for accession\",\"ru\":\"Условия и порядок присоединения к экосистеме\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_contact_email",
            "Trans": "{\"en\":\"Contact e-mail\",\"ru\":\"Почта для контактов\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_contact_phone",
            "Trans": "{\"en\":\"Contact phone\",\"ru\":\"Контактный телефон\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_contact_vde_page",
            "Trans": "{\"en\":\"Web site\",\"ru\":\"Веб сайт\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_description",
            "Trans": "{\"en\":\"Ecosystem hardware description\",\"ru\":\"Описание оборудования экосистемы\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_form",
            "Trans": "{\"en\":\"Add ecosystem to Catalog\",\"ru\":\"Добавить экосистему в каталог\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_freetype",
            "Trans": "{\"en\":\"Availability of own funds for entry\",\"ru\":\"Наличие собственных средств для вступления\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_logo",
            "Trans": "{\"en\":\"Logotype image\",\"ru\":\"Изображение логотипа\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_name",
            "Trans": "{\"en\":\"Ecosystem name in the Catalog\",\"ru\":\"Имя экосистемы в Каталоге\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_number",
            "Trans": "{\"en\":\"Ecosystem\",\"ru\":\"Экосистема\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_type",
            "Trans": "{\"en\":\"Ecosystem type\",\"ru\":\"Тип экосистемы\"}",
            "Type": "languages"
        },
        {
            "Name": "change",
            "Trans": "{\"en\": \"Change\", \"ru\": \"Изменить\"}",
            "Type": "languages"
        },
        {
            "Name": "check_expiration",
            "Trans": "{\"en\": \"Check expiration\", \"ru\": \"Проверить истечение\"}",
            "Type": "languages"
        },
        {
            "Name": "close",
            "Trans": "{\"en\": \"Close\", \"ru\": \"Закрыть\"}",
            "Type": "languages"
        },
        {
            "Name": "closure_type",
            "Trans": "{\"en\": \"Closure type\", \"ru\": \"Тип закрытия\"}",
            "Type": "languages"
        },
        {
            "Name": "column_name",
            "Trans": "{\"en\": \"Column name\", \"ru\": \"Название столбца\"}",
            "Type": "languages"
        },
        {
            "Name": "column_name_desc",
            "Trans": "{\"en\": \"Column name to which the value will be written (Example: onhold)\", \"ru\": \"Название столбца, в который будет записано значение (Пример: onhold)\"}",
            "Type": "languages"
        },
        {
            "Name": "comment",
            "Trans": "{\n    \"en\": \"Comment\",\n    \"ru\": \"Комментарий\"\n}",
            "Type": "languages"
        },
        {
            "Name": "commission_address",
            "Trans": "{\"en\":\"Account address\",\"ru\":\"Адрес аккаунта\"}",
            "Type": "languages"
        },
        {
            "Name": "commission_pub",
            "Trans": "{\"en\":\"Account public key\",\"ru\":\"Публичный ключ аккаунта\"}",
            "Type": "languages"
        },
        {
            "Name": "companies",
            "Trans": "{\"en\":\"Companies\",\"ru\":\"Компании\"}",
            "Type": "languages"
        },
        {
            "Name": "company",
            "Trans": "{\"en\": \"Company\", \"ru\": \"Компания\"}",
            "Type": "languages"
        },
        {
            "Name": "company_add",
            "Trans": "{\"en\":\"Add company\",\"ru\":\"Добавить компанию\"}",
            "Type": "languages"
        },
        {
            "Name": "company_role",
            "Trans": "{\"en\":\"Company group\",\"ru\":\"Группа компании\"}",
            "Type": "languages"
        },
        {
            "Name": "confirmation",
            "Trans": "{\"en\":\"Confirmation\",\"ru\":\"Подтверждение\"}",
            "Type": "languages"
        },
        {
            "Name": "contract",
            "Trans": "{\"en\": \"Contract\", \"ru\": \"Контракт\"}",
            "Type": "languages"
        },
        {
            "Name": "contract_accept",
            "Trans": "{\"en\": \"Contract of accept\", \"ru\": \"Контракт при принятии\"}",
            "Type": "languages"
        },
        {
            "Name": "contract_accept_des",
            "Trans": "{\"en\": \"Name of the contract, which should be started if the decision is accepted\", \"ru\": \"Название контракта, который должен быть запущен, если решение будет одобрено\"}",
            "Type": "languages"
        },
        {
            "Name": "contract_accepted",
            "Trans": "{\"en\": \"Contract accept\", \"ru\": \"Контракт принят\"}",
            "Type": "languages"
        },
        {
            "Name": "contract_params_des",
            "Trans": "{\"ru\":\"Строка в формате JSON\",\"en\":\"String in JSON format\"}",
            "Type": "languages"
        },
        {
            "Name": "contract_reject",
            "Trans": "{\"en\": \"Contract of reject\", \"ru\": \"Контракт при отклонении\"}",
            "Type": "languages"
        },
        {
            "Name": "contract_reject_des",
            "Trans": "{\"en\": \"Name of the contract, which should be started if the decision is rejected\", \"ru\": \"Название контракта, который должен быть запущен, если решение будет отклонено\"}",
            "Type": "languages"
        },
        {
            "Name": "contract_rejected",
            "Trans": "{\"en\": \"Contract reject\", \"ru\": \"Контракт отклонен\"}",
            "Type": "languages"
        },
        {
            "Name": "contract_run",
            "Trans": "{\"en\": \"Contract run\", \"ru\": \"Выполнение контракта\"}",
            "Type": "languages"
        },
        {
            "Name": "contracts",
            "Trans": "{\"en\": \"Contracts\", \"ru\": \"Контракты\"}",
            "Type": "languages"
        },
        {
            "Name": "copy",
            "Trans": "{\"en\": \"Copy\", \"ru\": \"Копировать\"}",
            "Type": "languages"
        },
        {
            "Name": "create",
            "Trans": "{\"en\": \"Create\", \"ru\": \"Создать\"}",
            "Type": "languages"
        },
        {
            "Name": "create_account",
            "Trans": "{\"en\": \"Create account\", \"ru\": \"Создать счет\"}",
            "Type": "languages"
        },
        {
            "Name": "create_cron_title",
            "Trans": "{\"en\":\"The creation of a new block-timer\",\"ru\":\"Создание нового блок-таймера\"}",
            "Type": "languages"
        },
        {
            "Name": "create_role",
            "Trans": "{\"en\": \"Create group\", \"ru\": \"Создать группу\"}",
            "Type": "languages"
        },
        {
            "Name": "created",
            "Trans": "{\"en\": \"Created\", \"ru\": \"Создан\"}",
            "Type": "languages"
        },
        {
            "Name": "creator",
            "Trans": "{\"en\": \"Creator\", \"ru\": \"Кто создал\"}",
            "Type": "languages"
        },
        {
            "Name": "dashboard",
            "Trans": "{\"en\": \"Dashboard\", \"ru\": \"Приборная панель\"}",
            "Type": "languages"
        },
        {
            "Name": "database_write",
            "Trans": "{\"en\": \"The entry in the database\", \"ru\": \"Запись в базу данных\"}",
            "Type": "languages"
        },
        {
            "Name": "date_created",
            "Trans": "{\n    \"en\": \"Date created\",\n    \"ru\": \"Дата создания\"\n}",
            "Type": "languages"
        },
        {
            "Name": "date_end",
            "Trans": "{\"en\": \"Date end\", \"ru\": \"Дата окончания\"}",
            "Type": "languages"
        },
        {
            "Name": "date_start",
            "Trans": "{\"en\": \"Date start\", \"ru\": \"Дата начала\"}",
            "Type": "languages"
        },
        {
            "Name": "decision",
            "Trans": "{\"en\": \"Decision\", \"ru\": \"Решение\"}",
            "Type": "languages"
        },
        {
            "Name": "decision_accept",
            "Trans": "{\"en\": \"Decision accept\", \"ru\": \"Решение одобрено\"}",
            "Type": "languages"
        },
        {
            "Name": "decision_reject",
            "Trans": "{\"en\": \"Decision reject\", \"ru\": \"Решение отклонено\"}",
            "Type": "languages"
        },
        {
            "Name": "delete_node",
            "Trans": "{\"en\": \"Delete node\", \"ru\": \"Удалить узел\"}",
            "Type": "languages"
        },
        {
            "Name": "delete_node_desc",
            "Trans": "{\"en\": \"The owner of the validating node can remove it from the list without a vote. Your key_id were found in the list of node owners and you can delete your entry at any time\", \"ru\": \"Владелец валидирующего узла может удалить его из списка без голосования. Ваш key_id был найден в списке владельцев узлов и вы можете удалить свою запись в любое время\"}",
            "Type": "languages"
        },
        {
            "Name": "deleted",
            "Trans": "{\"en\": \"Deleted\", \"ru\": \"Удалено\"}",
            "Type": "languages"
        },
        {
            "Name": "description",
            "Trans": "{\"en\": \"Description\", \"ru\": \"Описание\"}",
            "Type": "languages"
        },
        {
            "Name": "description_desc",
            "Trans": "{\"en\": \"Text description of the subject of voting\", \"ru\": \"Текстовое описание предмета голосования\"}",
            "Type": "languages"
        },
        {
            "Name": "description_equipment",
            "Trans": "{\"en\":\"Description equipment\",\"ru\":\"Описание оборудования\"}",
            "Type": "languages"
        },
        {
            "Name": "did_not_vote",
            "Trans": "{\"en\": \"Did not vote\", \"ru\": \"Не голосовал\"}",
            "Type": "languages"
        },
        {
            "Name": "document",
            "Trans": "{\"en\": \"Document\", \"ru\": \"Документ\"}",
            "Type": "languages"
        },
        {
            "Name": "document_accept",
            "Trans": "{\"en\": \"Document accept\", \"ru\": \"Документ одобрен\"}",
            "Type": "languages"
        },
        {
            "Name": "document_reject",
            "Trans": "{\"en\": \"Document reject\", \"ru\": \"Документ отклонен\"}",
            "Type": "languages"
        },
        {
            "Name": "duration",
            "Trans": "{\"en\":\"Duration\",\"ru\":\"Продолжительность\"}",
            "Type": "languages"
        },
        {
            "Name": "ecosystem",
            "Trans": "{\"en\": \"Ecosystem\", \"ru\": \"Экосистема\"}",
            "Type": "languages"
        },
        {
            "Name": "ecosystem_number",
            "Trans": "{\"en\":\"Number\",\"ru\":\"Номер\"}",
            "Type": "languages"
        },
        {
            "Name": "edit",
            "Trans": "{\"en\":\"Edit\",\"ru\":\"Редактировать\"}",
            "Type": "languages"
        },
        {
            "Name": "edit_role",
            "Trans": "{\"en\":\"Edit group\",\"ru\":\"Редактирование группы\"}",
            "Type": "languages"
        },
        {
            "Name": "editing_profile",
            "Trans": "{\"en\": \"Editing profile\", \"ru\": \"Редактирование профиля\"}",
            "Type": "languages"
        },
        {
            "Name": "elective",
            "Trans": "{\"en\": \"Elective\", \"ru\": \"Выбран\"}",
            "Type": "languages"
        },
        {
            "Name": "elective_role",
            "Trans": "{\"en\": \"Elective\", \"ru\": \"Выборная\"}",
            "Type": "languages"
        },
        {
            "Name": "elective_roles_not_found",
            "Trans": "{\"en\": \"Elective groups not found\", \"ru\": \"Выборные группы не найдены\"}",
            "Type": "languages"
        },
        {
            "Name": "email",
            "Trans": "{\"en\": \"Email\", \"ru\": \"Почта\"}",
            "Type": "languages"
        },
        {
            "Name": "emission",
            "Trans": "{\"en\": \"Emission\", \"ru\": \"Эмиссия\"}",
            "Type": "languages"
        },
        {
            "Name": "emission_account_not_found",
            "Trans": "{\"en\":\"System emission account is not found\",\"ru\":\"Системный эмиссионный счет не найден\"}",
            "Type": "languages"
        },
        {
            "Name": "empty",
            "Trans": "{\"en\": \"[no]\", \"ru\": \"[нет]\"}",
            "Type": "languages"
        },
        {
            "Name": "everybody",
            "Trans": "{\"en\": \"Everybody\", \"ru\": \"Все\"}",
            "Type": "languages"
        },
        {
            "Name": "execute",
            "Trans": "{\"en\": \"Execute\", \"ru\": \"Выполнить\"}",
            "Type": "languages"
        },
        {
            "Name": "expiration",
            "Trans": "{\"en\": \"Expiration\", \"ru\": \"Окончание\"}",
            "Type": "languages"
        },
        {
            "Name": "expiration_only_visitor",
            "Trans": "{\"en\": \"Expiration only for visitor\", \"ru\": \"Окончание только для посетителя\"}",
            "Type": "languages"
        },
        {
            "Name": "expired",
            "Trans": "{\"en\": \"Expired\", \"ru\": \"Истекло\"}",
            "Type": "languages"
        },
        {
            "Name": "female",
            "Trans": "{\"en\": \"Female\", \"ru\": \"Женский\"}",
            "Type": "languages"
        },
        {
            "Name": "filled",
            "Trans": "{\"en\": \"Filled\", \"ru\": \"Заполнено\"}",
            "Type": "languages"
        },
        {
            "Name": "finance",
            "Trans": "{\"en\":\"Finance\",\"ru\":\"Финансы\"}",
            "Type": "languages"
        },
        {
            "Name": "finished",
            "Trans": "{\"en\": \"Finished\", \"ru\": \"Завершено\"}",
            "Type": "languages"
        },
        {
            "Name": "freetype",
            "Trans": "{\"en\":\"Pay type\",\"ru\":\"Тип оплаты\"}",
            "Type": "languages"
        },
        {
            "Name": "gender",
            "Trans": "{\"en\": \"Gender\", \"ru\": \"Пол\"}",
            "Type": "languages"
        },
        {
            "Name": "group_person",
            "Trans": "{\"en\":\"Group of person\",\"ru\":\"Группа персон\"}",
            "Type": "languages"
        },
        {
            "Name": "header",
            "Trans": "{\"en\": \"Header\", \"ru\": \"Заголовок\"}",
            "Type": "languages"
        },
        {
            "Name": "host_ip",
            "Trans": "{\"en\":\"IP\",\"ru\":\"IP\"}",
            "Type": "languages"
        },
        {
            "Name": "icon",
            "Trans": "{\"en\": \"Icon\", \"ru\": \"Иконка\"}",
            "Type": "languages"
        },
        {
            "Name": "id",
            "Trans": "{\"en\": \"ID\", \"ru\": \"ID\"}",
            "Type": "languages"
        },
        {
            "Name": "image",
            "Trans": "{\"ru\":\"Изображение\",\"en\":\"Image\"}",
            "Type": "languages"
        },
        {
            "Name": "impossible",
            "Trans": "{\"en\": \"Impossible\", \"ru\": \"Не возможно\"}",
            "Type": "languages"
        },
        {
            "Name": "include_in_role",
            "Trans": "{\"en\":\"YES - Include a user in the group\",\"ru\":\"ДА - Включить пользователя в группу\"}",
            "Type": "languages"
        },
        {
            "Name": "information",
            "Trans": "{\"en\":\"Information\",\"ru\":\"Информация\"}",
            "Type": "languages"
        },
        {
            "Name": "init_condition",
            "Trans": "{\n    \"en\": \"Initiate process condition\",\n    \"ru\": \"Условие для начала процесса\"\n}",
            "Type": "languages"
        },
        {
            "Name": "init_contract",
            "Trans": "{\"en\": \"The initial contract\", \"ru\": \"Инициализирующий контракт\"}",
            "Type": "languages"
        },
        {
            "Name": "install_default_templates",
            "Trans": "{\"en\":\"Install default templates\",\"ru\":\"Установить шаблоны\"}",
            "Type": "languages"
        },
        {
            "Name": "institution",
            "Trans": "{\"en\":\"Institution\",\"ru\":\"Учреждение\"}",
            "Type": "languages"
        },
        {
            "Name": "interval_blocks",
            "Trans": "{\"en\": \"Interval, in blocks\", \"ru\": \"Интервал в блоках\"}",
            "Type": "languages"
        },
        {
            "Name": "invalid",
            "Trans": "{\"en\": \"Invalid\", \"ru\": \"Недействительно\"}",
            "Type": "languages"
        },
        {
            "Name": "limit",
            "Trans": "{\"en\": \"Limit\", \"ru\": \"Предел\"}",
            "Type": "languages"
        },
        {
            "Name": "limited",
            "Trans": "{\"en\": \"Limited\", \"ru\": \"Ограничены\"}",
            "Type": "languages"
        },
        {
            "Name": "lists_of_roles",
            "Trans": "{\"en\": \"Lists of groups and\", \"ru\": \"Список групп и\"}",
            "Type": "languages"
        },
        {
            "Name": "logo",
            "Trans": "{\"en\":\"Logo\",\"ru\":\"Лого\"}",
            "Type": "languages"
        },
        {
            "Name": "male",
            "Trans": "{\"en\": \"Male\", \"ru\": \"Мужской\"}",
            "Type": "languages"
        },
        {
            "Name": "manual_add",
            "Trans": "{\"en\": \"Manually adding\", \"ru\": \"Ручное добавление\"}",
            "Type": "languages"
        },
        {
            "Name": "member",
            "Trans": "{\"en\": \"User\", \"ru\": \"Пользователь\"}",
            "Type": "languages"
        },
        {
            "Name": "member_id",
            "Trans": "{\"en\": \"User ID\", \"ru\": \"ID пользователя\"}",
            "Type": "languages"
        },
        {
            "Name": "member_image",
            "Trans": "{\"en\":\"Avatar\",\"ru\":\"Фото\"}",
            "Type": "languages"
        },
        {
            "Name": "member_name",
            "Trans": "{\"en\":\"User name\",\"ru\":\"Никнейм\"}",
            "Type": "languages"
        },
        {
            "Name": "members",
            "Trans": "{\"en\": \"Users\", \"ru\": \"Пользователи\"}",
            "Type": "languages"
        },
        {
            "Name": "membership",
            "Trans": "{\"en\": \"Users\", \"ru\": \"Пользователи\"}",
            "Type": "languages"
        },
        {
            "Name": "membership_management",
            "Trans": "{\"en\": \"Usership management and\", \"ru\": \"Управление пользователями и\"}",
            "Type": "languages"
        },
        {
            "Name": "membership_request_accept",
            "Trans": "{\"ru\":\"Вы хотите принять этот запрос?\",\"en\":\"Do you want to accept this request?\"}",
            "Type": "languages"
        },
        {
            "Name": "membership_request_reject",
            "Trans": "{\"en\":\"Do you want to reject this request?\",\"ru\":\"Вы хотите отклонить этот запрос?\"}",
            "Type": "languages"
        },
        {
            "Name": "membership_requests",
            "Trans": "{\"en\": \"Users requests\", \"ru\": \"Запросы в пользователи\"}",
            "Type": "languages"
        },
        {
            "Name": "membership_roles_notifications",
            "Trans": "{\"en\": \"Users, groups, notifications\", \"ru\": \"Пользователи, группы, уведомления\"}",
            "Type": "languages"
        },
        {
            "Name": "multiple",
            "Trans": "{\"en\": \"Multiple\", \"ru\": \"Множественные\"}",
            "Type": "languages"
        },
        {
            "Name": "my_account",
            "Trans": "{\"en\": \"My account\", \"ru\": \"Мой счет\"}",
            "Type": "languages"
        },
        {
            "Name": "name",
            "Trans": "{\"en\": \"Name\", \"ru\": \"Название\"}",
            "Type": "languages"
        },
        {
            "Name": "name_first",
            "Trans": "{\"en\": \"First name\", \"ru\": \"Имя\"}",
            "Type": "languages"
        },
        {
            "Name": "name_last",
            "Trans": "{\"en\": \"Last name\", \"ru\": \"Фамилия\"}",
            "Type": "languages"
        },
        {
            "Name": "name_middle",
            "Trans": "{\"en\": \"Middle name\", \"ru\": \"Отчество\"}",
            "Type": "languages"
        },
        {
            "Name": "need_fuel",
            "Trans": "{\n    \"en\": \"Need APL\",\n    \"ru\": \"Нужно APL\"\n}",
            "Type": "languages"
        },
        {
            "Name": "new_ecosystem",
            "Trans": "{\"en\":\"New ecosystem\",\"ru\":\"Создать экосистему\"}",
            "Type": "languages"
        },
        {
            "Name": "new_role",
            "Trans": "{\"en\": \"New group\", \"ru\": \"Новая группа\"}",
            "Type": "languages"
        },
        {
            "Name": "new_template",
            "Trans": "{\n    \"en\": \"New template\",\n    \"ru\": \"Новый шаблон\"\n}",
            "Type": "languages"
        },
        {
            "Name": "new_value",
            "Trans": "{\"en\": \"New value\", \"ru\": \"Новое значение\"}",
            "Type": "languages"
        },
        {
            "Name": "new_voting",
            "Trans": "{\"en\": \"New voting\", \"ru\": \"Новое голосование\"}",
            "Type": "languages"
        },
        {
            "Name": "next",
            "Trans": "{\"en\": \"Next\", \"ru\": \"Далее\"}",
            "Type": "languages"
        },
        {
            "Name": "no",
            "Trans": "{\"en\":\"No\",\"ru\":\"Нет\"}",
            "Type": "languages"
        },
        {
            "Name": "no_assigned_roles",
            "Trans": "{\"en\": \"No assigned groups in this ecosystem.\", \"ru\": \"Нет назначаемых групп в этой экосистеме.\"}",
            "Type": "languages"
        },
        {
            "Name": "no_expiration",
            "Trans": "{\"en\": \"No expiration\", \"ru\": \"Без окончания\"}",
            "Type": "languages"
        },
        {
            "Name": "no_include_in_role",
            "Trans": "{\"en\":\"NO - Do not include a user in the group\",\"ru\":\"НЕТ - Не включать пользователя в группу\"}",
            "Type": "languages"
        },
        {
            "Name": "not_enough_votes",
            "Trans": "{\"en\": \"Not enough votes\", \"ru\": \"Недостаточно голосов\"}",
            "Type": "languages"
        },
        {
            "Name": "not_filled",
            "Trans": "{\"ru\":\"Не заполнено\",\"en\":\"Not filled\"}",
            "Type": "languages"
        },
        {
            "Name": "not_need_fuel",
            "Trans": "{\n    \"en\": \"Not need APL\",\n    \"ru\": \"Не нужно APL\"\n}",
            "Type": "languages"
        },
        {
            "Name": "not_participants",
            "Trans": "{\"ru\":\"Не имеет участников\",\"en\":\"Not has participants\"}",
            "Type": "languages"
        },
        {
            "Name": "not_started",
            "Trans": "{\"ru\":\"Не начата\",\"en\":\"Not started\"}",
            "Type": "languages"
        },
        {
            "Name": "notification_sender_member",
            "Trans": "{\"en\":\"Send from user\",\"ru\":\"Отправить от пользователя\"}",
            "Type": "languages"
        },
        {
            "Name": "notification_sender_role",
            "Trans": "{\"en\":\"Send from group\",\"ru\":\"Отправить от группы\"}",
            "Type": "languages"
        },
        {
            "Name": "notifications",
            "Trans": "{\"en\": \"Notifications\", \"ru\": \"Уведомления\"}",
            "Type": "languages"
        },
        {
            "Name": "notifics",
            "Trans": "{\"en\": \"Notifications\", \"ru\": \"Уведомления\"}",
            "Type": "languages"
        },
        {
            "Name": "num_members",
            "Trans": "{\"en\": \"Number of users\", \"ru\": \"Количество пользователей\"}",
            "Type": "languages"
        },
        {
            "Name": "onhold",
            "Trans": "{\"en\": \"onHold\", \"ru\": \"Закрыт\"}",
            "Type": "languages"
        },
        {
            "Name": "only_if_role_type",
            "Trans": "{\"en\":\"Only if group type -> Company group. For all other types is not used\",\"ru\":\"Только если тип группы - Группа компании. Для всех других типов не используется\"}",
            "Type": "languages"
        },
        {
            "Name": "optional",
            "Trans": "{\"en\": \"[Optional]\", \"ru\": \"[Необязательный]\"}",
            "Type": "languages"
        },
        {
            "Name": "organization",
            "Trans": "{\"en\":\"Organization\",\"ru\":\"Организация\"}",
            "Type": "languages"
        },
        {
            "Name": "page",
            "Trans": "{\"en\":\"Page\",\"ru\":\"Страница\"}",
            "Type": "languages"
        },
        {
            "Name": "page_name",
            "Trans": "{\"en\":\"Page\",\"ru\":\"Страница\"}",
            "Type": "languages"
        },
        {
            "Name": "pages",
            "Trans": "{\"en\": \"Pages\", \"ru\": \"Страницы\"}",
            "Type": "languages"
        },
        {
            "Name": "parameter_name",
            "Trans": "{\"en\": \"Parameter name\", \"ru\": \"Название параметра\"}",
            "Type": "languages"
        },
        {
            "Name": "params",
            "Trans": "{\"en\":\"Parameters\",\"ru\":\"Параметры\"}",
            "Type": "languages"
        },
        {
            "Name": "participants",
            "Trans": "{\"en\": \"Participants\", \"ru\": \"Участники\"}",
            "Type": "languages"
        },
        {
            "Name": "participants_add",
            "Trans": "{\"en\": \"Add participants\", \"ru\": \"Добавить участников\"}",
            "Type": "languages"
        },
        {
            "Name": "pending_notifics",
            "Trans": "{\"en\": \"Pending notifications\", \"ru\": \"Ожидающие уведомления\"}",
            "Type": "languages"
        },
        {
            "Name": "person",
            "Trans": "{\"en\": \"Person\", \"ru\": \"Персональный\"}",
            "Type": "languages"
        },
        {
            "Name": "phone",
            "Trans": "{\"en\": \"Phone\", \"ru\": \"Телефон\"}",
            "Type": "languages"
        },
        {
            "Name": "possible",
            "Trans": "{\"en\": \"Possible\", \"ru\": \"Возможно\"}",
            "Type": "languages"
        },
        {
            "Name": "processing",
            "Trans": "{\"en\": \"Processing\", \"ru\": \"Обработка\"}",
            "Type": "languages"
        },
        {
            "Name": "profile",
            "Trans": "{\"en\": \"Profile\", \"ru\": \"Профиль\"}",
            "Type": "languages"
        },
        {
            "Name": "progress",
            "Trans": "{\"en\": \"Progress\", \"ru\": \"Прогресс\"}",
            "Type": "languages"
        },
        {
            "Name": "pub_key",
            "Trans": "{\"en\":\"Public key\",\"ru\":\"Публичный ключ\"}",
            "Type": "languages"
        },
        {
            "Name": "public_org",
            "Trans": "{\"en\":\"Public organization\",\"ru\":\"Публичная организация\"}",
            "Type": "languages"
        },
        {
            "Name": "quorum",
            "Trans": "{\n    \"en\": \"Quorum\",\n    \"ru\": \"Кворум\"\n}",
            "Type": "languages"
        },
        {
            "Name": "recipient",
            "Trans": "{\"en\": \"Recipient\", \"ru\": \"Получатель\"}",
            "Type": "languages"
        },
        {
            "Name": "recipient_account",
            "Trans": "{\"en\": \"Recipient account\", \"ru\": \"Счет получателя\"}",
            "Type": "languages"
        },
        {
            "Name": "reject",
            "Trans": "{\"en\": \"Reject\", \"ru\": \"Отклонить\"}",
            "Type": "languages"
        },
        {
            "Name": "rejected",
            "Trans": "{\"en\": \"Rejected\", \"ru\": \"Отклонено\"}",
            "Type": "languages"
        },
        {
            "Name": "request",
            "Trans": "{\"en\": \"Request\", \"ru\": \"Запрос\"}",
            "Type": "languages"
        },
        {
            "Name": "request_accepted",
            "Trans": "{\"en\":\"Request was approved\",\"ru\":\"Запрос был одобрен\"}",
            "Type": "languages"
        },
        {
            "Name": "request_info",
            "Trans": "{\"en\":\"Request info\",\"ru\":\"Информация о запросе\"}",
            "Type": "languages"
        },
        {
            "Name": "request_membership",
            "Trans": "{\"ru\":\"Запрос в пользователи\",\"en\":\"Request for users\"}",
            "Type": "languages"
        },
        {
            "Name": "request_not_sent",
            "Trans": "{\"ru\":\"Запрос не отправлялся\",\"en\":\"Request not sent\"}",
            "Type": "languages"
        },
        {
            "Name": "request_refund",
            "Trans": "{\"en\": \"To request a refund\", \"ru\": \"Запросить возврат средств\"}",
            "Type": "languages"
        },
        {
            "Name": "request_rejected",
            "Trans": "{\"en\":\"Request was rejected\",\"ru\":\"Запрос был отклонен\"}",
            "Type": "languages"
        },
        {
            "Name": "request_wating",
            "Trans": "{\"en\":\"Request has been sent. Wait for administrator's decision\",\"ru\":\"Запрос отправлен. Ожидайте решение\"}",
            "Type": "languages"
        },
        {
            "Name": "required_logo",
            "Trans": "{\"en\":\"Required logo\",\"ru\":\"Требуется логотип\"}",
            "Type": "languages"
        },
        {
            "Name": "resign",
            "Trans": "{\"en\": \"Resign\", \"ru\": \"В отставку\"}",
            "Type": "languages"
        },
        {
            "Name": "result",
            "Trans": "{\"en\": \"Result\", \"ru\": \"Результат\"}",
            "Type": "languages"
        },
        {
            "Name": "right_sign",
            "Trans": "{\"en\":\"Signature right\",\"ru\":\"Право подписи\"}",
            "Type": "languages"
        },
        {
            "Name": "right_sign_no",
            "Trans": "{\"en\":\"No signature right\",\"ru\":\"Нет права подписи\"}",
            "Type": "languages"
        },
        {
            "Name": "right_sign_yes",
            "Trans": "{\"en\":\"Have signature rights\",\"ru\":\"Имеет право подписи\"}",
            "Type": "languages"
        },
        {
            "Name": "role",
            "Trans": "{\"en\": \"Group\", \"ru\": \"Группа\"}",
            "Type": "languages"
        },
        {
            "Name": "role_notifics",
            "Trans": "{\"en\": \"Group notifications\", \"ru\": \"Групповые уведомления\"}",
            "Type": "languages"
        },
        {
            "Name": "roles",
            "Trans": "{\"en\": \"Groups\", \"ru\": \"Группы\"}",
            "Type": "languages"
        },
        {
            "Name": "roles_access",
            "Trans": "{\"en\": \"Groups Access\"}",
            "Type": "languages"
        },
        {
            "Name": "roles_managers",
            "Trans": "{\"en\": \"Groups Managers\"}",
            "Type": "languages"
        },
        {
            "Name": "rollback",
            "Trans": "{\"en\": \"Rollback\", \"ru\": \"Откат\"}",
            "Type": "languages"
        },
        {
            "Name": "row_id",
            "Trans": "{\"en\": \"Row ID\", \"ru\": \"ID строки\"}",
            "Type": "languages"
        },
        {
            "Name": "row_id_desc",
            "Trans": "{\"en\": \"Row ID to which the value will be written (Example: 14)\", \"ru\": \"ID строки, в которую будет записано значение (Пример: 14)\"}",
            "Type": "languages"
        },
        {
            "Name": "save",
            "Trans": "{\"en\": \"Save\", \"ru\": \"Сохранить\"}",
            "Type": "languages"
        },
        {
            "Name": "select_member",
            "Trans": "{\"en\": \"Select a user to add\", \"ru\": \"Укажите пользователя, чтобы добавить\"}",
            "Type": "languages"
        },
        {
            "Name": "select_role",
            "Trans": "{\"en\": \"Select a group to add all users of this group\", \"ru\": \"Выберите группу, чтобы добавить всех участников этой группе\"}",
            "Type": "languages"
        },
        {
            "Name": "select_role_if_include",
            "Trans": "{\"ru\":\"Выберите группу, если вы хотите включить пользователя в группу\",\"en\":\"Select a group if you want to include a user in the group\"}",
            "Type": "languages"
        },
        {
            "Name": "send",
            "Trans": "{\"en\": \"Send\", \"ru\": \"Отправить\"}",
            "Type": "languages"
        },
        {
            "Name": "send_not_possible",
            "Trans": "{\"en\": \"Send request is not possible.\", \"ru\": \"Отправить запрос не возможно\"}",
            "Type": "languages"
        },
        {
            "Name": "sender",
            "Trans": "{\"en\": \"Sender\", \"ru\": \"Отправитель\"}",
            "Type": "languages"
        },
        {
            "Name": "sender_account",
            "Trans": "{\"en\":\"Sender account\",\"ru\":\"Счет отправителя\"}",
            "Type": "languages"
        },
        {
            "Name": "sent",
            "Trans": "{\"ru\":\"Отправлено\",\"en\":\"Sent\"}",
            "Type": "languages"
        },
        {
            "Name": "single",
            "Trans": "{\"en\": \"Single\", \"ru\": \"Одиночные\"}",
            "Type": "languages"
        },
        {
            "Name": "single_and_role",
            "Trans": "{\"en\": \"Single and Group\", \"ru\": \"Одиночные и групповые\"}",
            "Type": "languages"
        },
        {
            "Name": "single_notifics",
            "Trans": "{\"en\": \"Single notifications\", \"ru\": \"Одиночные уведомления\"}",
            "Type": "languages"
        },
        {
            "Name": "start",
            "Trans": "{\n    \"en\": \"Start\",\n    \"ru\": \"Начать\"\n}",
            "Type": "languages"
        },
        {
            "Name": "start_block",
            "Trans": "{\"en\": \"Start block\", \"ru\": \"Стартовый блок\"}",
            "Type": "languages"
        },
        {
            "Name": "start_refund",
            "Trans": "{\"en\": \"To start the refund\", \"ru\": \"Начать возврат средств\"}",
            "Type": "languages"
        },
        {
            "Name": "started",
            "Trans": "{\"en\": \"Started\", \"ru\": \"Начато\"}",
            "Type": "languages"
        },
        {
            "Name": "status",
            "Trans": "{\"en\": \"Status\", \"ru\": \"Статус\"}",
            "Type": "languages"
        },
        {
            "Name": "subject_voting",
            "Trans": "{\"en\": \"Subject of voting\", \"ru\": \"Предмет голосования\"}",
            "Type": "languages"
        },
        {
            "Name": "subject_voting_edit",
            "Trans": "{\"en\": \"Edit subject of voting\", \"ru\": \"Редактировать предмет голосования\"}",
            "Type": "languages"
        },
        {
            "Name": "success",
            "Trans": "{\"en\": \"Success\", \"ru\": \"Успешно\"}",
            "Type": "languages"
        },
        {
            "Name": "sure_want_delete",
            "Trans": "{\"ru\":\"Вы уверены что хотите удалить?\",\"en\":\"Are you sure you want to delete?\"}",
            "Type": "languages"
        },
        {
            "Name": "sys_emission",
            "Trans": "{\"en\":\"sys-emission\",\"ru\":\"Эмиссия (системный)\"}",
            "Type": "languages"
        },
        {
            "Name": "sys_trash",
            "Trans": "{\"en\":\"sys-trash\",\"ru\":\"Корзина (системный)\"}",
            "Type": "languages"
        },
        {
            "Name": "sysparams_candidate_validators_form",
            "Trans": "{\"en\":\"Request form of candidate for validators\",\"ru\":\"Форма запроса кандидата в валидаторы\"}",
            "Type": "languages"
        },
        {
            "Name": "sysparams_candidates",
            "Trans": "{\"en\":\"Candidate for validators\",\"ru\":\"Кандидаты в валидаторы\"}",
            "Type": "languages"
        },
        {
            "Name": "sysparams_candidates_list",
            "Trans": "{\"en\":\"Candidate for validators list\",\"ru\":\"Список кандидатов в валидаторы\"}",
            "Type": "languages"
        },
        {
            "Name": "sysparams_ecos",
            "Trans": "{\"en\":\"Ecosystems list\",\"ru\":\"Список экосистем\"}",
            "Type": "languages"
        },
        {
            "Name": "sysparams_list",
            "Trans": "{\"en\":\"System parameters list\",\"ru\":\"Список системных параметров\"}",
            "Type": "languages"
        },
        {
            "Name": "sysparams_metrics",
            "Trans": "{\"en\": \"Metrics\", \"ru\": \"Метрики\"}",
            "Type": "languages"
        },
        {
            "Name": "system_params",
            "Trans": "{\"en\":\"System parameters\",\"ru\":\"Системные параметры\"}",
            "Type": "languages"
        },
        {
            "Name": "system_role",
            "Trans": "{\"en\":\"System\",\"ru\":\"Системная\"}",
            "Type": "languages"
        },
        {
            "Name": "system_tokens",
            "Trans": "{\"en\": \"System of tokens\", \"ru\": \"Система токенов\"}",
            "Type": "languages"
        },
        {
            "Name": "table",
            "Trans": "{\"en\": \"Table\", \"ru\": \"Таблица\"}",
            "Type": "languages"
        },
        {
            "Name": "table_to_written",
            "Trans": "{\"en\": \"Table name\", \"ru\": \"Название таблицы\"}",
            "Type": "languages"
        },
        {
            "Name": "table_to_written_desc",
            "Trans": "{\"en\": \"Table to which the value will be written (Example: accounts)\", \"ru\": \"Таблица, в которую будет записано значение (Пример: accounts)\"}",
            "Type": "languages"
        },
        {
            "Name": "tables",
            "Trans": "{\"en\": \"Tables\", \"ru\": \"Таблицы\"}",
            "Type": "languages"
        },
        {
            "Name": "template_create",
            "Trans": "{\n    \"en\": \"Creating template\",\"ru\": \"Создание шаблона\"}",
            "Type": "languages"
        },
        {
            "Name": "test_page",
            "Trans": "{\"en\": \"Test page\", \"ru\": \"Тестовая страница\"}",
            "Type": "languages"
        },
        {
            "Name": "text_document",
            "Trans": "{\"en\": \"Text of the document\", \"ru\": \"Текст документа\"}",
            "Type": "languages"
        },
        {
            "Name": "their_members",
            "Trans": "{\"en\": \"their users\", \"ru\": \"их пользователи\"}",
            "Type": "languages"
        },
        {
            "Name": "timestam",
            "Trans": "{\"en\": \"Timestamp\", \"ru\": \"Отметка времени\"}",
            "Type": "languages"
        },
        {
            "Name": "tip_start_block",
            "Trans": "{\"en\":\"If less than the current block will be equal to the current block\",\"ru\":\"Если меньше текущего блока то будет равно текущему блоку\"}",
            "Type": "languages"
        },
        {
            "Name": "title",
            "Trans": "{\n    \"en\": \"Title\",\n    \"ru\": \"Название\"\n}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_attacker",
            "Trans": "{\"en\": \"Attacker\", \"ru\": \"Злоумышленник\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_list",
            "Trans": "{\"en\": \"Tokens refund list\", \"ru\": \"Список возврата токенов\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_note_header",
            "Trans": "{\"en\": \"Token refund\", \"ru\": \"Возврат средств\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_result0",
            "Trans": "{\"en\": \"Discussion and voting\", \"ru\": \"Oбсуждение и голосование\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_result1",
            "Trans": "{\"en\": \"Return cancelled\", \"ru\": \"Возврат отменен\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_result2",
            "Trans": "{\"en\": \"The tokens returned\", \"ru\": \"Токены возвращены\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_start",
            "Trans": "{\"en\": \"Refund\", \"ru\": \"Возврат средств\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_status0",
            "Trans": "{\"en\": \"Blocked accounts\", \"ru\": \"Аккаунты заблокированы\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_status1",
            "Trans": "{\"en\": \"Discussion\", \"ru\": \"Обсуждение\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_status2",
            "Trans": "{\"en\": \"Voting\", \"ru\": \"Голосование\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_status3",
            "Trans": "{\"en\": \"Closed\", \"ru\": \"Закрыто\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_victim",
            "Trans": "{\"en\": \"Victim\", \"ru\": \"Жертва\"}",
            "Type": "languages"
        },
        {
            "Name": "tokens",
            "Trans": "{\"en\": \"Tokens\", \"ru\": \"Токены\"}",
            "Type": "languages"
        },
        {
            "Name": "tokens_rollback",
            "Trans": "{\"en\": \"Tokens rollback\", \"ru\": \"Удаление токенов\"}",
            "Type": "languages"
        },
        {
            "Name": "tokens_transfer",
            "Trans": "{\"en\": \"Tokens transfer\", \"ru\": \"Перевод токенов\"}",
            "Type": "languages"
        },
        {
            "Name": "tranche",
            "Trans": "{\"en\":\"Tranche\",\"ru\":\"Транш\"}",
            "Type": "languages"
        },
        {
            "Name": "trash_account_not_found",
            "Trans": "{\"en\":\"System trash account is not found\",\"ru\":\"Системный счет корзины не найден\"}",
            "Type": "languages"
        },
        {
            "Name": "tx",
            "Trans": "{\"en\": \"Transactions\", \"ru\": \"Транзакции\"}",
            "Type": "languages"
        },
        {
            "Name": "type",
            "Trans": "{\"en\": \"Type\", \"ru\": \"Тип\"}",
            "Type": "languages"
        },
        {
            "Name": "type_voting_custom",
            "Trans": "{\"en\":\"Custom\",\"ru\":\"Пользовательское\"}",
            "Type": "languages"
        },
        {
            "Name": "type_voting_system",
            "Trans": "{\"en\":\"System\",\"ru\":\"Системное\"}",
            "Type": "languages"
        },
        {
            "Name": "unlimited",
            "Trans": "{\"en\": \"Unlimited\", \"ru\": \"Не ограничены\"}",
            "Type": "languages"
        },
        {
            "Name": "update_metrics",
            "Trans": "{\"en\": \"Update metrics\", \"ru\": \"Обновить метрики\"}",
            "Type": "languages"
        },
        {
            "Name": "use",
            "Trans": "{\n    \"en\": \"Use\",\n    \"ru\": \"Использовать\"\n}",
            "Type": "languages"
        },
        {
            "Name": "user_info",
            "Trans": "{\"en\": \"User information\", \"ru\": \"Информация о пользователе\"}",
            "Type": "languages"
        },
        {
            "Name": "username",
            "Trans": "{\"en\": \"Username\", \"ru\": \"Никнейм\"}",
            "Type": "languages"
        },
        {
            "Name": "vacancies",
            "Trans": "{\"en\": \"Vacancies\", \"ru\": \"Вакансии\"}",
            "Type": "languages"
        },
        {
            "Name": "validate_contract_name",
            "Trans": "{\"en\":\"must be between 3 and 255 characters\",\"ru\":\"должно быть от 3 до 255 символов\"}",
            "Type": "languages"
        },
        {
            "Name": "validate_member_name",
            "Trans": "{\"en\":\"must be between 5 and 20 characters\",\"ru\":\"должно быть от 5 до 20 символов\"}",
            "Type": "languages"
        },
        {
            "Name": "validate_notification",
            "Trans": "{\"en\":\"must be between 3 and 255 characters\",\"ru\":\"должно быть от 3 до 255 символов\"}",
            "Type": "languages"
        },
        {
            "Name": "validate_role_name",
            "Trans": "{\"en\":\"must be between 3 and 30 characters\",\"ru\":\"должно быть от 3 до 30 символов\"}",
            "Type": "languages"
        },
        {
            "Name": "validator_removing",
            "Trans": "{\"en\": \"Validator's removing\", \"ru\": \"Удаление валидатора\"}",
            "Type": "languages"
        },
        {
            "Name": "validator_removing_desc",
            "Trans": "{\"en\": \"You are a Validator. At any time you can remove the entry about your node and leave with a group of Validator\", \"ru\": \"Вы являетесь Валидатором. В любой момент вы можете удалить запись о своем узле и уйти с группы Валидатор\"}",
            "Type": "languages"
        },
        {
            "Name": "value",
            "Trans": "{\"en\":\"Value\",\"ru\":\"Значение\"}",
            "Type": "languages"
        },
        {
            "Name": "value_number",
            "Trans": "{\"en\": \"Value number\", \"ru\": \"Значение (число)\"}",
            "Type": "languages"
        },
        {
            "Name": "value_string",
            "Trans": "{\"en\": \"Value string\", \"ru\": \"Значение (строка)\"}",
            "Type": "languages"
        },
        {
            "Name": "vde_form",
            "Trans": "{\"en\":\"VDE form address\",\"ru\":\"Адрес VDE-формы\"}",
            "Type": "languages"
        },
        {
            "Name": "vde_form_desc",
            "Trans": "{\"en\":\"Address of the VDE form in VDE system for applying for users (who do not yet have APL)\",\"ru\":\"Адрес VDE-формы для подачи заявки в пользователи (у кого еще нет APL)\"}",
            "Type": "languages"
        },
        {
            "Name": "view",
            "Trans": "{\"en\": \"View\", \"ru\": \"Просмотр\"}",
            "Type": "languages"
        },
        {
            "Name": "view_all",
            "Trans": "{\"en\":\"View all\",\"ru\":\"Показать все\"}",
            "Type": "languages"
        },
        {
            "Name": "visitor",
            "Trans": "{\"en\": \"Visitor\", \"ru\": \"Посетитель\"}",
            "Type": "languages"
        },
        {
            "Name": "visitor_rights",
            "Trans": "{\"en\": \"Visitor (with SR)\", \"ru\": \"Посетитель (с правами)\"}",
            "Type": "languages"
        },
        {
            "Name": "volume",
            "Trans": "{\n    \"en\": \"Volume\",\n    \"ru\": \"Объем\"\n}",
            "Type": "languages"
        },
        {
            "Name": "vote",
            "Trans": "{\"en\": \"Vote\", \"ru\": \"Голосовать\"}",
            "Type": "languages"
        },
        {
            "Name": "vote_for_candidate",
            "Trans": "{\"en\": \"voted for the candidate\", \"ru\": \"голосовал за кандидата\"}",
            "Type": "languages"
        },
        {
            "Name": "voted",
            "Trans": "{\"en\": \"Voted\", \"ru\": \"Проголосовавшие\"}",
            "Type": "languages"
        },
        {
            "Name": "voters",
            "Trans": "{\n    \"en\": \"Voters\",\n    \"ru\": \"Голосующие\"\n}",
            "Type": "languages"
        },
        {
            "Name": "voters_role",
            "Trans": "{\"en\": \"Voters group\", \"ru\": \"Группа голосующих\"}",
            "Type": "languages"
        },
        {
            "Name": "voting",
            "Trans": "{\"en\": \"Voting\", \"ru\": \"Голосование\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_all_members",
            "Trans": "{\"en\":\"All users were added automatically\",\"ru\":\"Все пользователи были добавлены автоматически\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_contract_accept",
            "Trans": "{\n    \"en\": \"Run contract after accept decision\",\n    \"ru\": \"Выполнить контракт при положительном решении\"\n}",
            "Type": "languages"
        },
        {
            "Name": "voting_contract_reject",
            "Trans": "{\n    \"en\": \"Run contract after reject decision\",\n    \"ru\": \"Выполнить контракт при отрицательном решении\"\n}",
            "Type": "languages"
        },
        {
            "Name": "voting_decisions_candidate_manual",
            "Trans": "{\"en\": \"Group candidates with manual registration of participants\", \"ru\": \"Групповые кандидаты с ручной регистрацией участников\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_decisions_candidate_requests",
            "Trans": "{\"en\": \"Group candidates with registration of participants by request\", \"ru\": \"Групповые кандидаты с регистрацией участников по запросу\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_decisions_contract",
            "Trans": "{\"en\": \"Performance of the contract\", \"ru\": \"Выполнение контракта\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_decisions_db",
            "Trans": "{\"en\": \"Formal decision\", \"ru\": \"Формальное решение\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_decisions_document",
            "Trans": "{\"en\": \"Document approval\", \"ru\": \"Утверждение документа\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_graph_progress",
            "Trans": "{\"en\": \"Graph of the percentages of votes needed to make a decision\", \"ru\": \"График процента голосов, необходимых для принятия решения\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_graph_voted",
            "Trans": "{\"en\": \"Graph of the proportion of voters from the total number of participants\", \"ru\": \"График отношения проголосовавших от общего числа участников\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_init_condition",
            "Trans": "{\n    \"en\": \"Initial Сondition for starts\",\n    \"ru\": \"Условие при запуске\"\n}",
            "Type": "languages"
        },
        {
            "Name": "voting_init_condition_desc",
            "Trans": "{\n    \"en\": \"Contract for check rights for starts voting\",\n    \"ru\": \"Контракт для проверки права начать голосование\"\n}",
            "Type": "languages"
        },
        {
            "Name": "voting_init_contract",
            "Trans": "{\"en\": \"Initializing contract\", \"ru\": \"Инициализирующий контракт\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_init_contract_desc",
            "Trans": "{\"en\": \"Is executed before the beginning of voting\", \"ru\": \"Выполняется перед началом голосования\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_params",
            "Trans": "{\"en\": \"Voting params\", \"ru\": \"Параметры голосования \"}",
            "Type": "languages"
        },
        {
            "Name": "voting_participants_everybody",
            "Trans": "{\"en\": \"Anybody\", \"ru\": \"Все\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_participants_manual",
            "Trans": "{\"en\": \"Choose manually\", \"ru\": \"Ручной выбор\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_participants_role",
            "Trans": "{\"en\": \"By group\", \"ru\": \"По группе\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_precondition",
            "Trans": "{\n    \"en\": \"Initial condition for the subject of voting\",\n    \"ru\": \"Начальное условие для предмета голосования\"\n}",
            "Type": "languages"
        },
        {
            "Name": "voting_quorum",
            "Trans": "{\"en\": \"Quorum\", \"ru\": \"Кворум\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_quorum_desc",
            "Trans": "{\"en\": \"Percentage value of votes for a decision (from 5 to 100)\", \"ru\": \"Процентная доля голосов для принятия решения (от 5 до 100)\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_start",
            "Trans": "{\n    \"en\": \"Voting start\",\n    \"ru\": \"Начать голосование\"\n}",
            "Type": "languages"
        },
        {
            "Name": "voting_subject",
            "Trans": "{\"en\": \"Voting subject\", \"ru\": \"Тема голосования\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_template_not_found",
            "Trans": "{\"en\": \"The template ID to vote is not found in the parameters of the ecosystem\", \"ru\": \"Идентификатор шаблона голосования не найден в параметрах экосистемы\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_templates",
            "Trans": "{\"en\": \"Voting templates\", \"ru\": \"Шаблоны голосования\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_type",
            "Trans": "{\n    \"en\": \"Voting type\",\n    \"ru\": \"Тип голосования\"\n}",
            "Type": "languages"
        },
        {
            "Name": "voting_volume",
            "Trans": "{\"en\": \"Volume\", \"ru\": \"Объем\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_volume_desc",
            "Trans": "{\"en\": \"Percentage value of votes to fulfill requirements of this voting (from 50 to 100)\", \"ru\": \"Процентная доля голосов для выполнения этого голосования (от 50 до 100)\"}",
            "Type": "languages"
        },
        {
            "Name": "waiting",
            "Trans": "{\"en\": \"Waiting\", \"ru\": \"Ожидание\"}",
            "Type": "languages"
        },
        {
            "Name": "wallet_address",
            "Trans": "{\"en\": \"Wallet Address\", \"ru\": \"Адрес кошелька\"}",
            "Type": "languages"
        },
        {
            "Name": "want_accept_contract",
            "Trans": "{\"en\": \"Do you want to accept this contract?\", \"ru\": \"Вы хотите принять этот контракт?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_accept_decision",
            "Trans": "{\"en\": \"Are you sure you want to accept decision?\", \"ru\": \"Вы уверены, что хотите принять решение?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_accept_document",
            "Trans": "{\"en\": \"Are you sure you want to accept document?\", \"ru\": \"Вы уверены, что хотите принять документ?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_assign_member_to_role",
            "Trans": "{\"en\":\"Do you want to assign this user of the ecosystem to this group?\",\"ru\":\"Вы хотите назначить этого пользователя экосистемы на эту группу?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_change_status",
            "Trans": "{\"en\": \"Do you want to change the status of this user?\", \"ru\": \"Вы хотите изменить статус этого пользователя?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_check_decision",
            "Trans": "{\"en\": \"Do you want to check decision?\", \"ru\": \"Вы хотите проверить решение?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_check_tokens",
            "Trans": "{\"en\": \"Do you want to check the expiration of the tokens?\", \"ru\": \"Вы хотите проверить истечение токенов?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_close_account",
            "Trans": "{\"en\": \"Do you want to close this account?\", \"ru\": \"Вы хотите закрыть этот счет?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_close_notification",
            "Trans": "{\"en\": \"Do you want to close this notification?\", \"ru\": \"Вы хотите закрыть это уведомление?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_create_block_timer",
            "Trans": "{\"en\": \"Are you sure you want to create a block timer\", \"ru\": \"Вы уверены, что хотите создать блок таймера\"}",
            "Type": "languages"
        },
        {
            "Name": "want_create_new_account",
            "Trans": "{\"en\":\"Do you want to create a new account?\",\"ru\":\"Вы хотите создать новый счет?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_create_new_company",
            "Trans": "{\"en\":\"Do you want to add a new company? The current account will become a multi-account. This action is not reversible.\",\"ru\":\"Вы хотите добавить новую компанию? Текущий аккаунт станет мульти-аккаунтом. Это действие не обратимо.\"}",
            "Type": "languages"
        },
        {
            "Name": "want_create_new_role",
            "Trans": "{\"en\":\"Do you want to create a new group?\",\"ru\":\"Вы хотите создать новую группу?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_create_role_company",
            "Trans": "{\"en\":\"Do you want to create a new group for the company?\",\"ru\":\"Вы хотите создать новую группу для компании?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_delete_block_timer",
            "Trans": "{\"en\": \"Are you sure you want to delete a block timer?\", \"ru\": \"Вы уверены, что хотите удалить блок таймера?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_delete_company",
            "Trans": "{\"en\":\"Do you want to delete the company? All company groups will also be deleted\",\"ru\":\"Вы хотите удалить компанию? Также будут удалены все группы компании\"}",
            "Type": "languages"
        },
        {
            "Name": "want_delete_from_role",
            "Trans": "{\"en\": \"Are you sure you want to delete this user from the group?\", \"ru\": \"Вы уверены, что хотите удалить этого пользователя из группы?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_delete_member",
            "Trans": "{\"en\": \"Do you want to delete this user?\", \"ru\": \"Вы хотите удалить этого пользователя?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_delete_participant_company",
            "Trans": "{\"en\":\"Do you want to remove a participant from the company?\",\"ru\":\"Вы хотите удалить участника из компании?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_delete_role",
            "Trans": "{\"en\": \"Do you want to delete this group?\", \"ru\": \"Вы хотите удалить эту группу?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_delete_tokens",
            "Trans": "{\"en\": \"Do you want to delete this tokens?\", \"ru\": \"Вы хотите удалить эти токены?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_delete_voting",
            "Trans": "{\"en\": \"Do you want to delete this voting?\", \"ru\": \"Вы хотите удалить это голосование?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_delete_your_role_from_manager",
            "Trans": "{\"en\": \"It is your group. Are you sure you want to delete your group from managers list? You cannot edit this group after the action\", \"ru\": \"Это ваша группа. Вы действительно хотите удалить группу из списка менеджеров? Вы не сможете редактировать эту группу после данного действия\"}",
            "Type": "languages"
        },
        {
            "Name": "want_edit_block_timer",
            "Trans": "{\"en\": \"Are you sure you want to edit a block timer?\", \"ru\": \"Вы уверены, что хотите изменить блок таймера?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_finish_processing",
            "Trans": "{\"en\": \"Do you want to finish processing this notification?\", \"ru\": \"Вы хотите завершить обработку этого уведомления?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_make_emission",
            "Trans": "{\"en\":\"Do you want to make an emission?\",\"ru\":\"Вы хотите выполнить эмиссию?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_reject_contract",
            "Trans": "{\"en\": \"Do you want to reject this contract?\", \"ru\": \"Вы хотите отклонить этот контракт?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_reject_decision",
            "Trans": "{\"en\": \"Are you sure you want to reject decision?\", \"ru\": \"Вы уверены, что хотите отклонить решение?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_reject_document",
            "Trans": "{\"en\": \"Are you sure you want to reject document?\", \"ru\": \"Вы уверены, что хотите отклонить документ?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_reject_request",
            "Trans": "{\"en\": \"Do you want to reject the request?\", \"ru\": \"Вы хотите отклонить запрос?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_release_tokens",
            "Trans": "{\"en\":\"Do you want to release new tokens?\",\"ru\":\"Вы хотите выпустить новые токены?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_resign",
            "Trans": "{\"en\": \"Are you sure you want to resign the group of the Validator?\", \"ru\": \"Вы действительно хотите уйти с группы Валидатор?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_return_member",
            "Trans": "{\"en\": \"Do you want to return this user?\", \"ru\": \"Вы хотите восстановить этого пользователя?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_rollback_tokens",
            "Trans": "{\"en\":\"Do you want to rollback the tokens?\",\"ru\":\"Вы хотите откатить токены?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_save_changes",
            "Trans": "{\"en\":\"Do you want to save the changes?\",\"ru\":\"Вы хотите сохранить изменения?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_send_notific_voters",
            "Trans": "{\"en\": \" Do you want to send a notification to all the voters?\", \"ru\": \"Вы хотите отправить уведомление всем участникам голосования?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_send_tokens",
            "Trans": "{\"en\":\"Do you want to send tokens?\",\"ru\":\"Вы хотите отправить токены?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_start_processing",
            "Trans": "{\"en\": \"Do you want to start processing this notification?\", \"ru\": \"Вы хотите начать обработку этого уведомления?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_start_processing_notification",
            "Trans": "{\"ru\":\"Вы хотите начать обработку уведомления?\",\"en\":\"Do you want to start processing the notification?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_vote_for_candidate",
            "Trans": "{\"en\": \"Are you sure you want to vote for this candidate?\", \"ru\": \"Вы уверены, что хотите проголосовать за этого кандидата?\"}",
            "Type": "languages"
        },
        {
            "Name": "web_form",
            "Trans": "{\"en\":\"Web form address\",\"ru\":\"Адрес web-формы\"}",
            "Type": "languages"
        },
        {
            "Name": "web_form_desc",
            "Trans": "{\"en\":\"Web address of the form for applying for users (who do not yet have APL)\",\"ru\":\"Адрес web-формы для подачи заявки в пользователи (у кого еще нет APL)\"}",
            "Type": "languages"
        },
        {
            "Name": "web_page",
            "Trans": "{\n    \"en\": \"Page web-address\",\n    \"ru\": \"Вэб-адрес страницы\"\n}",
            "Type": "languages"
        },
        {
            "Name": "written_value",
            "Trans": "{\"en\": \"Written value\", \"ru\": \"Записываемое значение\"}",
            "Type": "languages"
        },
        {
            "Name": "written_value_desc",
            "Trans": "{\"en\": \"Value to be written to the table (Example: 1)\", \"ru\": \"Значение, которое должно быть записано в таблицу (Пример: 1)\"}",
            "Type": "languages"
        },
        {
            "Name": "yes",
            "Trans": "{\"en\":\"Yes\",\"ru\":\"Да\"}",
            "Type": "languages"
        },
        {
            "Name": "сlosed",
            "Trans": "{\"en\": \"Closed\", \"ru\": \"Закрыто\"}",
            "Type": "languages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "single,multiple",
            "Name": "notification_closure",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "fa-bell,fa-comment,fa-envelope,fa-bookmark,fa-check,fa-exclamation-triangle,fa-info-circle",
            "Name": "notification_icon",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "notification_sender_member,notification_sender_role",
            "Name": "notification_sender",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "single,role",
            "Name": "notification_type",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "assigned_role,elective_role,system_role,company_role",
            "Name": "roles_types",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetTitle(\"Apla Docker\")",
            "Name": "apla_docker",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetTitle(\"Block Explorer\")",
            "Name": "block_explorer",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(#ecosystem_id#==1){\r\n\tSetTitle(\"\")\r\n}.Else{\r\n\tDiv(content-wrapper){\r\n\t\tDiv(panel panel-primary){\r\n\t\t\tDiv(list-group-item text-center){\r\n\t\t\t\tP(Class: h3 m0 text-bold, Body: Congratulations! You created your own ecosystem.)\r\n\t\t\t}\r\n\t\t\tDiv(list-group-item){\r\n\t\t\t\tSpan(Class: h3, Body: \"You as Founder hold a complete set of rights for controlling the ecosystem – creating and editing applications, modifying ecosystem parameters, etc. \")\r\n\t\t\t\tSpan(Class: h3, Body: \"To get started, you can download the finished applications from the\")\r\n\t\t\t\tSpan(Class: h3 text-primary, Body: \" https://github.com/GenesisKernel/apps \")\r\n\t\t\t\tSpan(Class: h3, Body: \"and install them using the Import service. \")\r\n\t\t\t\tSpan(Class: h3, Body: \"The Strong(basic.json) contains applications for managing roles, creating notifications and votings. \")\r\n\t\t\t\tSpan(Class: h3, Body: \"Or you can create your own apps using the tools in the Admin tab. \")\r\n\t\t\t\tSpan(Class: h3, Body: \"Documentation \")\r\n\t\t\t\tSpan(Class: h3 text-primary, Body: \"https://genesiskernel.readthedocs.io\")\r\n\t\t\t}\r\n\t\t\tDiv(panel-footer text-right clearfix){\r\n\t\t\t\tDiv(pull-left){\r\n\t\t\t\t\tButton(Body: Ecosystem parameters, Class: btn btn-default, Page: params_list)\r\n\t\t\t\t}.Style(margin-right: 20px;)\r\n\t\t\t\tDiv(pull-left){\r\n\t\t\t\t\tButton(Body: Dashboard, Class: btn btn-default, Page: admin_dashboard)          \r\n\t\t\t\t}\r\n\t\t\t\tButton(Body: Import, Class: btn btn-primary, Page: import_upload)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
            "Name": "default_page",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetTitle(\"Documentation\")",
            "Name": "documentation",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Form(){\n    Div(form-group){\n        Label($name$)\n        Input(Placeholder: Name of Ecosystem, Name:Name)\n    }\n    Div(form-group){\n        Button(Body: LangRes(create), Class: btn pull-right btn-primary, Contract: @1NewEcosystem, Page: membership_ecosystems)\n        Button(Body: LangRes(back), Class: btn pull-right btn-default, Page: membership_ecosystems)\n    }\n}",
            "Name": "ecosystem_new",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetTitle(\"Marketspace\")",
            "Name": "marketspace",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle($membership$)\r\n\r\n    If(GetVar(Search)){\r\n        SetVar(Where,\"member_name='#Search#'\")\r\n    }.Else{\r\n        SetVar(Where,\"id!=0\").(Search,)\r\n    } \r\n    \r\n    DBFind(Name: members, Source: src_member).Columns(\"id,member_name,image_id\").Custom(custom_id){\r\n        SetVar(Name: style_text, Value: \"text-normal\")\r\n        SetVar(Name: style_link, Value: \"text-primary\")\r\n        Span(Class: h5, Body: #id#)\r\n    }.Custom(custom_member_id){\r\n        Button(Body: Address(#id#), Class: btn btn-link, Page: tokens_transfer, PageParams: \"v_id=#id#\").Popup(Header: $tokens_transfer$, Width: \"30\")\r\n    }.Custom(custom_username){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#id#\"){\r\n            If(#image_id#>0){\r\n                Image(Src: Binary().ById(#image_id#), Class: img-circle).Style(height: 30px;width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n                Span(#member_name#)\r\n            }.Else{\r\n                Div(){\r\n                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                    Span(#member_name#)\r\n                }.Style(display:flex; align-items:center;)\r\n            }\r\n        }\r\n    }.Where(#Where#).Order(\"member_name\")\r\n    \r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Div(input-group){\r\n                        Div(input-group-addon){\r\n                            LangRes(name)\r\n                        }\r\n                        Input(Name: Search, Value: #Search#)\r\n                        Div(input-group-btn){\r\n                            Button(Class: btn btn-default fa fa-search, Page: members_list, PageParams: \"Search=Val(Search)\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Table(Source: src_member, Columns: \"$name$=custom_username,$id$=custom_id,$wallet_address$=custom_member_id\")\r\n                }\r\n            }\r\n            If(GetVar(Search)){\r\n                Div(row){\r\n                    Div(col-md-12 mt-lg){\r\n                        Div(text-center){\r\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: members_list)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "members_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle(Membership Request)\r\n\t\r\n\tDBFind(Name: notifications, Source: src_notific).Columns(\"page_params->request_id,sender->image_id,sender->member_id,sender->member_name\").Where(\"id = #notific_id#\").Vars(notific)\r\n   \r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: Membership Request)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n\t\t\t\t\t\t\t\tDiv(m0 h3 text-bold){#notific_sender_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(address))\r\n                        Span(Class: h5 text-bold, Body: Address(#notific_sender_member_id#))\r\n                    }\r\n\t\t\t\t\tDiv(list-group-item text-center){\r\n                        Button(Class: btn btn-success, Body: Accept, Contract: \"membership_decide\", Page: default_page, Params: \"notific_id=#notific_id#,Accept=0\")\r\n                        Button(Class: btn btn-danger, Body: Reject, Contract: \"membership_decide\", Page: default_page, Params: \"notific_id=#notific_id#,Accept=1\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "membership_admin_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(Ecosystems)\n    Div(breadcrumb){\n        Div(row){\n            Div(col-md-10){\n                Div(Class: text-muted, Body: \"Ecosystems are relatively closed programming environments, which include applications and members.\")\n                Div(Class: text-muted, Body: \"Create your own ecosystem for your blockchain apps.\")\n            }\n            Div(col-md-2){\n                Button(Body: $create$, Class: pull-right, Page: ecosystem_new).Popup(Header: $create$, Width: \"30\")\n            }\n        }\n    }\n\n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"name='#v_Search#' and id != 1\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"id != 1\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n\n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-12){\n                    Div(input-group){\n                        Div(input-group-addon){\n                            LangRes(name)\n                        }\n                        Input(Name: Search, Value: #v_Search#)\n                        Div(input-group-btn){\n                            Button(Class: btn btn-default fa fa-search, Page: membership_ecosystems, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                        }\n                    }\n                }\n            }\n\n            DBFind(ecosystems, src_ecosystems).Ecosystem(1).Where(\"#v_Where#\").Custom(custom_id){\n                Span(#id#)\n            }.Custom(custom_name){\n                Span(#name#)\n            }.Custom(custom_actions){\n                SetVar(req_id, \"\")\n                SetVar(k_id, \"\")\n                DBFind(notifications, src_notifications).Where(\"sender->member_id = '#key_id#' and page_params->ecosystem_id = '#id#' and closed = 0\").Count(notific_count)\n                DBFind(keys, src_keys).Where(\"id = #key_id#\").Ecosystem(#id#).Limit(1).Vars(\"k\")\n\n                If(And(#notific_count# == 0, GetVar(k_id) == \"\")){\n                    Button(Class: btn btn-link pull-right, Body: Send Request, Contract: \"membership_send_request\", Page: membership_ecosystems, Params: \"ecosystem_num=#id#\")\n                }\n            }\n\t\t\t\n            Div(row){\n                Div(col-md-12){\n                    Table(Source: src_ecosystems, Columns: \"ID=custom_id,$name$=custom_name,=custom_actions\")\n                }\n            }\n\t\t\t\n            If(GetVar(isSearch) == 1){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: membership_ecosystems, PageParams: \"isSearch=0\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "membership_ecosystems",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle(Membership Request)\r\n\t\r\n\tDBFind(Name: notifications, Source: src_notific).Columns(\"page_params->ecosystem_id,page_params->status,recipient->image_id,recipient->member_name\").Where(\"id = #notific_id#\").Vars(notific)\r\n    \r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: Membership Request)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                Div(m0 h3 text-bold){#notific_recipient_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    If(#notific_page_params_status# == 1){\r\n                        Div(list-group-item text-center){\r\n                            Span(Class: text-success h3){\r\n                                Request is accepted!\r\n                            }\r\n                        }\r\n                        Div(list-group-item text-center){\r\n                            Button(Class: btn btn-primary, Body: Add ecosystem to list, Contract: \"notifications_Close\", Params: \"notific_id=#notific_id#\", Page: \"@invite\", PageParams: \"ecosystem=#notific_page_params_ecosystem_id#,page=default_page\")\r\n                        }\r\n                    }.Else{\r\n                       Div(list-group-item text-center){\r\n                            Span(Class: text-danger h3){\r\n                                Request is rejected!\r\n                            }\r\n                        }\r\n                        Div(list-group-item text-center){\r\n                            Button(Class: btn btn-primary, Body: OK, Contract: \"notifications_Close\", Params: \"notific_id=#notific_id#\", Page: default_page)\r\n                        } \r\n                    }\r\n\t\t\t\t\t\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "membership_user_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    If(Or(#type#==0,#type#==1)){\r\n    }.Else{\r\n        SetVar(Name: type, Value: 0)\r\n    }\r\n    Div(row){\r\n        Div(col-md-12){\r\n            Div(btn-group){\r\n                If(#type#==0){\r\n                    Span(Button(Body: Em(Class: fa fa-bell-o) $single_notifics$, Page: notifications_list, PageParams: \"type=0\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-bell-o) $single_notifics$, Page: notifications_list, PageParams: \"type=0\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n                If(#type#==1){\r\n                    Span(Button(Body: Em(Class: fa fa-bullhorn) $role_notifics$, Page: notifications_list, PageParams: \"type=1\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-bullhorn) $role_notifics$, Page: notifications_list, PageParams: \"type=1\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-md-12){\r\n            Div(btn-group){\r\n                If(#type#==0){\r\n                    Include(notifications_single)\r\n                }\r\n                If(#type#==1){\r\n                    Include(notifications_roles)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
            "Name": "notifications_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\r\n\r\n    SetTitle($role_notifics$)\r\n    Div(breadcrumb){\r\n        LinkPage($role_notifics$, notifications_list,, \"type=1\")\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $send$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading){LangRes(role_notifics)}\r\n                Div(panel-body){\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(recipient))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                DBFind(Name: roles, Source: source_roles).Columns(\"id,role_name\").Where(\"deleted=0\")\r\n                                Select(Name: rid, Source: source_roles, NameColumn: role_name, ValueColumn: id)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(closure_type))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                AppParam(App:#app_id#, Name: notification_closure, Source: src_closure_type)\r\n                                Select(Name: closure_type, Source: src_closure_type, NameColumn: name, ValueColumn: id)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(sender))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                AppParam(App:#app_id#, Name: notification_sender, Source: src_sender)\r\n                                Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(icon))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                AppParam(App:#app_id#, Name: notification_icon, Source: src_icon)\r\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(header))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\r\n                                InputErr(Name: text_header, minLength: $validate_notification$, maxLength: $validate_role_name$)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(body_text))\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                Input(Name: text_body, Value: \"Body text\")\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(page_name))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                Input(Name: page_name, Value: \"notifications_testpage\").Validate(minLength:3, maxLength:255)\r\n                                InputErr(Name: page_name, minLength: $validate_notification$, maxLength: $validate_role_name$)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(params))\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                Input(Name: params_map, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: notifications_list, PageParams: \"type=1\")\r\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_list, PageParams: \"type=1\", Contract: notifications_Send)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_roles_send",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\r\n\r\n    SetTitle($single_notifics$)\r\n    Div(breadcrumb){\r\n        LinkPage($single_notifics$, notifications_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $send$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-6 col-md-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading){LangRes(single_notifics)}\r\n                Div(panel-body){\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(recipient)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 text-left){\r\n                                DBFind(keys,src_keys).Columns(\"id\").Custom(_name){\r\n                                    DBFind(members).Columns(\"id,member_name\").Where(\"id=#id#\").Vars(m)\r\n                                    Address(#id#)\r\n                                    If(Or(#m_id#>0,#m_id#<0)){\r\n                                        \" (#m_member_name#)\"\r\n                                    }\r\n                                }\r\n                                Select(Name: member_id, Source: src_keys, NameColumn: _name, ValueColumn: id)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(sender)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 text-left){\r\n                                AppParam(App:#app_id#, Name: notification_sender, Source: src_sender)\r\n                                Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(icon)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                AppParam(App:#app_id#, Name: notification_icon, Source: src_icon)\r\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(header)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\r\n                                InputErr(Name: text_header, minLength: $validate_notification$, maxLength: $validate_role_name$)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(body_text))\r\n                                }\r\n                            }\r\n                            Div(col-md-9 text-left){\r\n                                Input(Name: text_body, Value: \"Body text\")\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(page_name)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                Input(Name: page_name, Value: \"notifications_testpage\").Validate(minLength:3, maxLength:255)\r\n                                InputErr(Name: page_name, minLength: $validate_notification$, maxLength: $validate_role_name$)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(params))\r\n                                }\r\n                            }\r\n                            Div(col-md-9 text-left){\r\n                                Input(Name: params_map, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: notifications_list)\r\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_list, Contract: notifications_Send)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_single_send",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\r\n    SetTitle($test_page$)\r\n\r\n    If(#notific_id# > 0){\r\n        DBFind(Name: notifications, Source: src_notifications).Columns(\"id,notification->type,notification->header,page_params->param_int,page_params->param_str,date_start_processing,closed\").Where(\"id=#notific_id#\").Vars(prefix)\r\n        SetVar(Name: notific_type, Value: #prefix_notification_type#)\r\n        SetVar(Name: notific_header, Value: #prefix_notification_header#)\r\n        SetVar(Name: notific_val_int, Value: #prefix_page_params_param_int#)\r\n        SetVar(Name: notific_val_str, Value: #prefix_page_params_param_str#)\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n        SetVar(Name: notific_id, Value: \"0\")\r\n        SetVar(Name: notific_type, Value: \"0\")\r\n        SetVar(Name: notific_header, Value: \"null\")\r\n        SetVar(Name: notific_val_int, Value: \"null\")\r\n        SetVar(Name: notific_val_str, Value: \"null\")\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-6 col-md-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-body){\r\n                    Div(list-group-item text-center){\r\n                        Span(Class: h3, Body: #notific_header#)\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                Span(Class: h4, Body: LangRes(id))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                Span(Class: h4, Body: #notific_id#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                Span(Class: h4, Body: LangRes(type))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                If(#notific_type# > 0){\r\n                                    Span(Class: h4, Body: AppParam(App:#app_id#, Name: notification_type, Index: #notific_type#))\r\n                                }.Else{\r\n                                    Span(Class: h4, Body: #notific_type#)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                Span(Class: h4, Body: LangRes(value_number))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                Span(Class: h4, Body: #notific_val_int#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                Span(Class: h4, Body: LangRes(value_string))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                Span(Class: h4, Body: #notific_val_str#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                If(#notific_type# == 1){\r\n                    If(#prefix_closed# == 0){\r\n                        Div(panel-footer text-right){\r\n                            Button(Body: LangRes(close), Class: btn btn-primary, Contract: notifications_Close, Params: \"notific_id=#notific_id#\", Page: notifications_list).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                        }\r\n                    }\r\n                }\r\n                If(#notific_type# == 2){\r\n                    If(#prefix_closed# == 0){\r\n                        Div(panel-footer text-right){\r\n                            If(#prefix_date_start_processing# == \"\"){\r\n                                Button(Body: LangRes(begin), Class: btn btn-primary, Contract: notifications_Process, Params: \"notific_id=#notific_id#\", Page: notifications_list, PageParams: \"type=1\").Alert(Text: $want_start_processing_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                            }.Else{\r\n                                Button(Body: LangRes(close), Class: btn btn-primary, Contract: notifications_Close, Params: \"notific_id=#notific_id#\", Page: notifications_list, PageParams: \"type=1\").Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_testpage",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Form(){\r\n    Div(form-group){\r\n        Label($avatar$)\r\n        Input(Name: member_image, Type: file)\r\n    }\r\n    Div(form-group){\r\n        Button(Body: LangRes(save), Class: btn btn-primary pull-right, Contract: ProfileEditAvatar, Page: profile_edit, PageParams:\"v_member_id=#v_member_id#\")\r\n        Button(Body: LangRes(close), Class: btn btn-default pull-right, Page: profile_edit, PageParams:\"v_member_id=#v_member_id#\")\r\n    }\r\n}",
            "Name": "profile_avatar_edit",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle($editing_profile$)\r\n    Div(breadcrumb){\r\n        LinkPage($user_info$, profile_view)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $editing_profile$)\r\n    }\r\n    \r\n    If(Or(#v_member_id#>0,#v_member_id#<0)){\r\n        DBFind(Name: members, Source: src_member).Columns(\"id,member_name,image_id,member_info->information\").Where(\"id=#v_member_id#\").Vars(prefix)\r\n    }.Else{\r\n        DBFind(Name: members, Source: src_member).Columns(\"id,member_name,image_id,member_info->information\").Where(\"id=#key_id#\").Vars(prefix)\r\n    }\r\n    \r\n    Div(row){\r\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading, Body: LangRes(editing_profile))\r\n                Div(panel-body){\r\n                    Div(row){\r\n                        Div(col-md-5 mt-lg text-center){\r\n                            Button(Class: btn btn-link, Page: profile_avatar_edit, PageParams: \"v_member_id=#key_id#\"){\r\n                                If(#prefix_image_id#>0){\r\n                                    Image(Src: Binary().ById(#prefix_image_id#), Class: img-thumbnail).Style(width: 140px; border: 1px solid #5A5D63;)\r\n                                }.Else{\r\n                                    Span(Class: fa icon-user fa-5x).Style(margin-top:20px;)\r\n                                }\r\n                            }.Popup(Header: $editing_profile$, Width: 30)\r\n                        }\r\n                        Div(col-md-7 mc-sm text-left){\r\n                            Div(form-group){\r\n                                Label(){\r\n                                    Span(Body: LangRes(member_name))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                If(Or(#prefix_id#>0,#prefix_id#<0)){\r\n                                    Input(Name: member_name, Value: #prefix_member_name#, Disabled: true)\r\n                                }.Else{\r\n                                    Input(Name: member_name).Validate(minLength:5, maxLength:20)\r\n                                    InputErr(Name: member_name, minLength: $validate_member_name$, maxLength: $validate_member_name$)\r\n                                }\r\n                            }\r\n                            Div(form-group){\r\n                                If(GetVar(prefix_member_info_information)){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(information))\r\n                                    }\r\n                                    Input(Name: information, Type: textarea, Value: #prefix_member_info_information#)\r\n                                }.Else{\r\n                                    Label(){\r\n                                        Span(Body: LangRes(information))\r\n                                    }\r\n                                    Input(Name: information, Type: textarea)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer clearfix){\r\n                    Button(Body: LangRes(save), Class: btn btn-primary pull-right, Page: profile_view, PageParams: \"v_member_id=#v_member_id#\", Contract: Profile_Edit).Alert(Text: $want_save_changes$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                    Button(Body: LangRes(back), Class: btn btn-default pull-right, Page: profile_view, PageParams: \"v_member_id=#v_member_id#\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "profile_edit",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(Or(#v_member_id#>0,#v_member_id#<0)){\n    }.Else{\n        SetVar(Name: v_member_id, Value: #key_id#)\n    }\n    DBFind(Name: members, Source: src_member).Columns(\"id,image_id,member_name,member_info->information\").Where(\"id=#v_member_id#\").Vars(prefix)\n    \n    If(Or(#prefix_id#>0,#prefix_id#<0)){\n    }.Else{\n        SetVar(Name: prefix_member_name, Value: \"\")\n    }\n    \n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(list-group-item){\n                    P(Class: text-center text-bold h4 m0, Body: LangRes(user_info))\n                    Div(panel-body){\n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-12 mt-sm text-center){\n                                    If(Or(#prefix_id#>0,#prefix_id#<0)){\n                                        If(#prefix_id# == #key_id#){\n                                            Button(Class: btn btn-link, Page: profile_edit, PageParams: \"v_member_id=#key_id#\"){\n                                                If(#prefix_image_id#>0){\n                                                    Image(Src: Binary().ById(#prefix_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\n                                                }.Else{\n                                                    Span(Class: fa icon-user fa-5x text-primary)\n                                                }\n                                                Div(m0 h4 text-bold){#prefix_member_name#}\n                                            }\n                                        }.Else{\n                                            If(#prefix_image_id#>0){\n                                                Image(Src: Binary().ById(#prefix_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\n                                            }.Else{\n                                                Span(Class: fa icon-user fa-5x)\n                                            }\n                                            Div(m0 h4 text-bold){#prefix_member_name#}\n                                        }\n                                        Div(Class: h5 text-muted m0, Body: #prefix_member_info_information#)\n                                    }.Else{\n                                        Div(text-muted m0 h5, Body: LangRes(wallet_address))\n                                        Div(Class: h5, Body: Address(#key_id#))\n                                        Button(Class: btn btn-link, Page: profile_edit){\n                                            Div(Class: h5 m0, Body: LangRes(editing_profile))\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        Div(list-group-item text-center){\n                            Div(text-muted m0 h5, Body: LangRes(roles))\n                            DBFind(Name: roles_participants, Source: src_check).Columns(\"id\").Where(\"member->member_id='#v_member_id#' and deleted=0\").Vars(check)\n                            If(#check_id#>0){\n                                DBFind(Name: roles_participants, Source: src_roles).Columns(\"role->id,role->name\").Where(\"member->member_id='#v_member_id#' and deleted=0\").Order(\"id\")\n                                ForList(src_roles){\n                                    Span(){\n                                        LinkPage(Page: roles_view, PageParams: \"v_role_id=#role.id#\"){\n                                            Span(Class: h5, Body: \"#role.name#\")\n                                        }\n                                    }.Style(margin-right: 6px; margin-left: 6px;)\n                                }\n                            }.Else{\n                                Span(LangRes(no))\n                            }\n                            If(#prefix_id# == #key_id#){\n                                Div(){\n                                    Button(Class: btn btn-link, Page: roles_request, Body: LangRes(request)).Popup(Header: $request$, Width: \"30\")\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "profile_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(applications,src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\n    If(#v_role_id#>0){\r\n        DBFind(roles,src_roles).Columns(\"id,role_name,role_type,roles_access->rids,creator->member_id\").Where(\"id=#v_role_id#\").Vars(prefix)\r\n\r\n        If(#prefix_creator_member_id#==#key_id#){\r\n            SetVar(manager_id,1)\r\n        }.ElseIf(#prefix_roles_access_rids#!=\"\"){\r\n            DBFind(roles).Columns(\"id\").Where(\"id in (#prefix_roles_access_rids#) and id=#role_id#\").Vars(manager)\r\n        }.Else{\r\n            SetVar(manager_id,0)\r\n        }\r\n        SetTitle($assign$)\r\n        Div(breadcrumb){\r\n            LinkPage($roles$, roles_list)\r\n            Span(/,mh-sm)\r\n            LinkPage(#prefix_role_name#, roles_view,, \"v_role_id=#v_role_id#\")\r\n            Span(/,mh-sm).($assign$,text-muted)\r\n        }\r\n\r\n        Div(row){\r\n            Div(col-md-6 col-md-offset-3){\r\n                Form(panel panel-primary){\r\n                    Div(panel-heading){LangRes(assign)}\r\n                    Div(panel-body){\r\n                        Div(list-group-item){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(role))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Type: hidden, Name: rid, Value: #prefix_id#)\r\n                                    SetVar(Name: var_prefix_role_name, Value: LangRes(#prefix_role_name#))\r\n                                    Input(Name: input_prefix_role_name, Value: #var_prefix_role_name#, Disabled: true)\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        LangRes(type) Span(*,text-danger)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    SetVar(Name: var_prefix_role_type, Value: AppParam(App:#application_id#, Name: roles_types, Index: #prefix_role_type#))\r\n                                    Input(Name: input_prefix_role_type, Value: #var_prefix_role_type#, Disabled: true)\r\n                                    If(#manager_id#==0){\r\n                                        P(Class: m0 text-danger h6, Body: LangRes(appointment_impossible))\r\n                                    }\r\n                                }\r\n                            }\r\n                            If(#manager_id#>0){\r\n                                Div(row){\r\n                                    Div(col-md-3 mt-sm text-right){\r\n                                        Label(){\r\n                                            Span(Body: LangRes(member)).(Class: text-danger, Body:*)\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-9 text-left){\r\n                                        DBFind(keys,src_keys).Columns(\"id\").Custom(_name){\r\n                                            DBFind(members).Columns(\"id,member_name\").Where(\"id=#id#\").Vars(m)\r\n                                            Address(#id#)\r\n                                            If(Or(#m_id#>0,#m_id#<0)){\r\n                                                \" (#m_member_name#)\"\r\n                                            }\r\n                                        }\r\n                                        Select(Name: member_id, Source: src_keys, NameColumn: _name, ValueColumn: id)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: roles_view, PageParams: \"v_role_id=#v_role_id#\")\r\n                        If(#manager_id#>0){\r\n                            Button(Body: LangRes(assign), Class: btn btn-primary, Page: roles_view, PageParams: \"v_role_id=#v_role_id#\", Contract: Roles_Assign, Params: \"member_id=Val(member_id)\").Alert(Text: $want_assign_member_to_role$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Name": "roles_assign",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\nDBFind(roles, src_roles).Columns(\"role_name,id\").Where(\"deleted=0\").Order(id)\r\n\r\nIf(GetVar(role_name)){}.Else{SetVar(role_name,)}\r\nIf(GetVar(role_type)){}.Else{SetVar(role_type,1)}\r\n\r\nIf(GetVar(rid)){\r\n    DBFind(roles).Where(\"id=#rid#\").Columns(\"roles_access->rids,id,role_type,role_name\").Vars(rid)\r\n    SetVar(title,$edit_role$).(role_type,\"AppParam(App:#application_id#, Name: roles_types, Index: #rid_role_type#)\")\r\n\r\n    If(#rid_roles_access_rids#!=\"\"){\r\n        DBFind(roles,src_roles_access).Columns(\"id,role_name\").Where(\"id in (#rid_roles_access_rids#)\").Order(role_name)\r\n    }\r\n    DBFind(roles,src_roles).Columns(\"id,role_name\").Where(\"deleted=0\").Order(id)\r\n    Data(form, \"Name,Res,Type,Src,Val\"){\r\n        role_name,name,text,,#role_name#\r\n        roles_types,type,app_param,,#rid_role_type#\r\n        roles_managers,roles_managers,rids,src_roles,\r\n    }\r\n}.Else{\r\n    AppParam(App:#application_id#, Name: roles_types, Source: app_roles_types)\r\n    SetVar(rid,0).(title,$new_role$)\r\n    Data(form, \"Name,Res,Type,Req,Src,Val\"){\r\n        role_name,name,input,*,\"\",#role_name#\r\n        role_type,type,select,*,app_roles_types,#role_type#\r\n    }\r\n}\r\nSetTitle(#title#)\r\nIf(And(#role_name#==\"\",#rid_id#>0)){\r\n    SetVar(role_name,#rid_role_name#).(role_type,#rid_role_type#)\r\n}\r\n\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage($roles$, roles_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: #title#)\r\n    }\r\n    Div(container){\r\n        Div(row){\r\n            Div(col-md-8 col-md-offset-2){\r\n                Form(panel panel-primary){\r\n                    Div(panel-heading){#title#}\r\n                    Div(panel-body){\r\n                        ForList(form){\r\n                            Div(row form-group){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(For:#Name#){\r\n                                        LangRes(#Res#)\r\n                                        If(#Req#==\"*\"){\r\n                                            Span(*,text-danger)\r\n                                        }\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 text-left){\r\n                                    If(#Type#==input){\r\n                                        Input(Name: #Name#, Value:#Val#).Validate(minLength:3, maxLength:30)\r\n                                        InputErr(Name: #Name#, minLength: $validate_role_name$, maxLength: $validate_role_name$)\r\n                                    }.ElseIf(#Type#==text){\r\n                                        Div(text-muted mt-sm){#Val#}\r\n                                    }.ElseIf(#Type#==app_param){\r\n                                        Div(text-muted mt-sm){\r\n                                            AppParam(App:#application_id#, Name: #Name#, Index: #Val#)\r\n                                        }\r\n                                    }.ElseIf(#Type#==select){\r\n                                        Select(Name: #Name#, Source: #Src#, NameColumn: name, ValueColumn: id, Value:#Val#)\r\n                                    }.ElseIf(#Type#==rids){\r\n                                        Div(input-group mb-sm){\r\n                                            Select(Name:#Name#, Source:#Src#, NameColumn:role_name, ValueColumn: id)\r\n                                            Div(input-group-btn){\r\n                                                Button(Class: btn btn-primary fa fa-plus, Page: roles_create, PageParams:\"role_name=Val(role_name),role_type=Val(role_type),rid=#rid#\", Contract:Roles_AccessManager, Params:\"Rid=#rid#,ManagerRid=Val(#Name#),Action=add\")\r\n                                            }\r\n                                        }\r\n                                        ForList(src_roles_access){\r\n                                            If(#id#==#role_id#){\r\n                                                Button(Class: btn btn-info mr-sm mb-sm, Page: roles_create, PageParams:\"role_name=Val(role_name),role_type=Val(role_type),rid=#rid#\", Contract:Roles_AccessManager, Params:\"Rid=#rid#,ManagerRid=#id#,Action=remove\", Body: Span(Class: fa fa-remove) #role_name#).Alert(Text: $want_delete_your_role_from_manager$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                                            }.Else{\r\n                                                Button(Class: btn btn-default mr-sm mb-sm, Page: roles_create, PageParams:\"role_name=Val(role_name),role_type=Val(role_type),rid=#rid#\", Contract:Roles_AccessManager, Params:\"Rid=#rid#,ManagerRid=#id#,Action=remove\"){\r\n                                                    Span(Class: fa fa-remove)\r\n                                                    #role_name#\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right clearfix){\r\n                        Div(pull-left){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: roles_list)\r\n                        }\r\n                        If(#rid_id#>0){}.Else{\r\n                            Button(Body: LangRes(create), Class: btn btn-primary, Page: roles_list, Contract: Roles_Create)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "roles_create",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\r\n    SetTitle($roles$)\r\n    AddToolButton(Title: $create$, Page: roles_create, Icon: icon-plus)\r\n\r\n    If(GetVar(search)){\r\n        SetVar(where,\"role_name='#search#'\")\r\n    }.Else{\r\n        SetVar(where,\"id>0\").(search,)\r\n    }\r\n\r\n    DBFind(Name: roles, Source: src_roles).Custom(_id){\r\n        JsonToSource(rids,#roles_access#)\r\n        If(#deleted# == 0){\r\n            SetVar(style_text,).(style_link,\"text-primary\")\r\n        }.Else{\r\n            SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\r\n        }\r\n        Span(Class: #style_text#, Body: #id#)\r\n    }.Custom(_creator){\r\n        If(#role_type#==3){\r\n        }.ElseIf(And(#creator.member_name#!=NULL,#creator.member_name#!=\"\")){\r\n            LinkPage(Class: #style_link# text-bold, Page: profile_view, PageParams: \"v_member_id=#creator.member_id#\"){\r\n                #creator.member_name#\r\n            }\r\n        }\r\n    }.Custom(_name){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#id#\"){\r\n            If(#image_id#>0){\r\n                Image(Src: Binary().ById(#image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n                #role_name#\r\n            }.Else{\r\n                Div(){\r\n                    Span(Class: fa icon-settings fa-2x mr-sm).(#role_name#)\r\n                }.Style(display:flex; align-items:center;)\r\n            }\r\n        }\r\n    }.Custom(_date){\r\n        Div(#style_text# small){\r\n            Div(text-nowrap){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\r\n            Div(text-nowrap){DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\")}\r\n        }\r\n    }.Custom(_type){\r\n        Span(Class: #style_text#, Body: AppParam(App:#app_id#, Name: roles_types, Index: #role_type#))\r\n    }.Custom(_status){\r\n        Span(Class:#style_text#){\r\n            If(#deleted# == 0){\r\n                LangRes(active)\r\n            }.Else{\r\n                LangRes(deleted)\r\n            }\r\n        }\r\n    }.Custom(_access){\r\n        If(#creator.member_id#==#key_id#){\r\n            SetVar(access,done)\r\n        }.Else{\r\n            SetVar(access,)\r\n        }\r\n        If(#roles_access.rids#!=\"\"){\r\n            DBFind(roles, src_roles_list).Where(\"id in (#roles_access.rids#)\").Columns(\"id,role_name\").Count(access_count).Order(role_name)\r\n            Div(#style_text# breaker){\r\n                ForList(src_roles_list){\r\n                    If(And(#role_id#==#id#)){\r\n                        SetVar(access,done)\r\n                    }\r\n\r\n                    If(#access_count#!=#src_roles_list_index#){\r\n                        Span(\"#role_name#,\",mr-sm)\r\n                    }.Else{\r\n                        #role_name#\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Custom(_actions){\r\n        Div(text-right button-group text-nowrap){\r\n            If(#access#==\"done\"){\r\n                Button(Class: fa fa-edit btn btn-default, PageParams: \"rid=#id#\", Page: roles_create)\r\n                If(And(#deleted#==0,#role_type#!=3)){\r\n                    Button(Class: fa fa-trash btn btn-danger, Contract: Roles_Del, Params: \"rid=#id#\", Page: roles_list).Alert(Text: $sure_want_delete$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                }.ElseIf(#deleted#==1){\r\n                    Button(Class: fa fa-recycle btn btn-info, Contract: Roles_Restore, Params: \"rid=#id#\", Page: roles_list)\r\n                }\r\n            }\r\n        }\r\n    }.Where(#where#).Order(\"deleted ASC, id ASC\").Columns(\"id,role_name,role_type,image_id,creator->member_id,creator->member_name,date_created,date_deleted,deleted,roles_access->rids\")\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Div(input-group){\r\n                        Div(input-group-addon mt-sm){\r\n                            LangRes(name)\r\n                        }\r\n                        Input(Name: search, Value: #search#)\r\n                        Div(input-group-btn){\r\n                            Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: roles_list, PageParams: \"search=Val(search)\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(table-responsive){\r\n                Table(Source: src_roles, Columns: \"$id$=_id,$name$=_name,$type$=_type,$creator$=_creator,$created$ / $deleted$=_date,$status$=_status,$roles_access$=_access,=_actions\")\r\n            }\r\n            If(GetVar(search)){\r\n                Div(row){\r\n                    Div(col-md-12 mt-lg){\r\n                        Div(text-center){\r\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: roles_list)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Style(\r\n    .inline {display:inline-block;}\r\n    .breaker {word-break: break-all;}\r\n)",
            "Name": "roles_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Form(){\r\n    Div(form-group){\r\n        DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name\").Count(roles_count).Where(\"role_type=1 AND deleted=0\")\r\n        If(#roles_count#==0){\r\n            Div(Body: LangRes(send_not_possible))\r\n            Div(Body: LangRes(no_assigned_roles))\r\n        }.Else{\r\n            Select(Name: rid, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n        }\r\n    }\r\n    Div(form-group){\r\n        If(#roles_count#>0){\r\n            Button(Body: LangRes(sent), Class: btn btn-primary pull-right, Contract: RolesRequest, Page: profile_view)\r\n        }\r\n        Button(Body: LangRes(close), Class: btn btn-default pull-right, Page: profile_view)\r\n    }\r\n}",
            "Name": "roles_request",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n\tDBFind(Name: notifications, Source: src_notific).Columns(\"page_params->rid,sender->image_id,sender->member_id,sender->member_name\").Where(\"id = #notific_id#\").Vars(notific)\r\n   \r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: Request to role)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(#notific_sender_image_id#>0){\r\n                                    Image(Src: Binary().ById(#notific_sender_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                }.Else{\r\n                                    Span(Class: fa icon-user fa-5x text-primary)\r\n                                }\r\n                                Div(m0 h4 text-bold){#notific_sender_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(address))\r\n                        Span(Class: h5 text-bold, Body: Address(#notific_sender_member_id#))\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        DBFind(Name: roles).Where(\"id=#notific_page_params_rid#\").Columns(\"role_name\").Vars(r)\r\n                        Div(text-muted m0 h5, Body: LangRes(role))\r\n                        Span(Class: h5 text-bold, Body: #notific_page_params_rid# - #r_role_name#)\r\n                    }\r\n\t\t\t\t\tDiv(list-group-item text-center){\r\n                        Input(Name: member_id, Class: hidden, Value: #notific_sender_member_id#)\r\n                        Input(Name: rid, Class: hidden, Value: #notific_page_params_rid#)\r\n                        Button(Class: btn btn-danger, Body: Reject, Contract: RolesRequestDecision, Page: roles_list, Params: \"notific_id=#notific_id#,decision=0\")\r\n                        Button(Class: btn btn-success, Body: Accept, Contract: RolesRequestDecision, Page: roles_list, Params: \"notific_id=#notific_id#,decision=1\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "roles_request_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    \n    If(#v_role_id# > 0){\n        DBFind(Name: roles, Source: src_roles).Columns(\"role_name,role_type,deleted\").Where(\"id=#v_role_id#\").Vars(prefix)\n        \n        SetTitle($role$: #prefix_role_name#)\n        Div(breadcrumb){\n            LinkPage($roles$, roles_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: #prefix_role_name#)\n        }\n        \n        DBFind(Name: roles_participants, Source: src_participants).Columns(\"id,member->member_id,member->member_name,member->image_id,appointed->member_id,appointed->member_name,appointed->voting_id,appointed->voting_name,date_created,date_deleted,deleted\").Custom(custom_id){\n            If(#deleted# == 0){\n                SetVar(Name: style_text, Value: \"text-normal\")\n                SetVar(Name: style_link, Value: \"text-primary\")\n            }.Else{\n                SetVar(Name: style_text, Value: \"text-muted\")\n                SetVar(Name: style_link, Value: \"text-muted\")\n            }\n            Span(Class: #style_text#, Body: #id#)\n        }.Custom(custom_appointed){\n            If(Or(#appointed.member_id#>0,#appointed.member_id#<0)){\n                LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#appointed.member_id#\"){\n                    Span(Body: #appointed.member_name#)\n                }\n            }\n            If(#appointed.voting_id#>0){\n                LinkPage(Page: voting_view, PageParams: \"vID=#appointed.voting_id#\"){\n                    Span(Class: h5 text-bold, Body: #appointed.voting_name#)\n                }\n            }\n        }.Custom(custom_member){\n            LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#member.member_id#\"){\n                If(#member.image_id#>0){\n                    Image(Src: Binary().ById(#member.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                    Span(#member.member_name#)\n                }.Else{\n                    Div(){\n                        Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                        Span(#member.member_name#)\n                    }.Style(display:flex; align-items:center;)\n                }\n            }\n        }.Custom(custom_address){\n            Span(Class: #style_text#, Body: Address(#member.member_id#))\n        }.Custom(custom_date){\n            Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\n            Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\"))\n        }.Custom(custom_status){\n            If(#deleted# == 0){\n                Span(Class: #style_text#, Body: LangRes(active))\n            }.Else{\n                Span(Class: #style_text#, Body: LangRes(deleted))\n            }\n        }.Custom(actions){\n            Div(pull-right){\n                If(And(#deleted#==0,#prefix_role_type#!=3)){\n                    Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: Roles_Unassign, Params: \"row_id=#id#\", Page: roles_view, PageParams: \"v_role_id=#v_role_id#\").Alert(Text: $sure_want_delete$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }\n            }\n        }.Where(\"role->id='#v_role_id#'\").Order(\"deleted ASC, id ASC\")\n        \n        Form(panel panel-primary){\n            Div(panel-body){\n                Table(Source: src_participants, Columns: \"$id$=custom_id,$member$=custom_member,$address$=custom_address,$appointed$=custom_appointed,$appointed$ / $deleted$=custom_date,$status$=custom_status,=actions\")\n            }\n            Div(panel-footer text-right){\n                Button(Body: LangRes(back), Class: btn btn-default, Page: roles_list)\n                If(#prefix_deleted#==0){\n                    Button(Body: LangRes(assign), Class: btn btn-primary, Page: roles_assign, PageParams: \"v_role_id=#v_role_id#\")\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Name": "roles_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Form(){\r\n    If(Or(#v_id#>0,#v_id#<0)){\r\n        SetVar(Name: v_address, Value: Address(#v_id#))\r\n    }.Else{\r\n        SetVar(Name: v_address, Value: \"\")\r\n    }\r\n    Div(form-group){\r\n        Label($recipient$)\r\n        Input(Name: Recipient_Account, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #v_address#)\r\n    }\r\n    Div(form-group){\r\n        Label($amount$)\r\n        Input(Name: Amount, Type: Number)\r\n    }\r\n    Div(form-group){\r\n        Button(Body: LangRes(send), Class: btn pull-right btn-primary, Page: members_list, Contract: SendTokens).Alert(Text: $want_send_tokens$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n        Button(Body: LangRes(back), Class: btn pull-right btn-default, Page: members_list)\r\n    }\r\n}",
            "Name": "tokens_transfer",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetTitle(\"Versions\")",
            "Name": "versions",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ProfileEditAvatar {\r\n    data {\r\n        member_image bytes \"file\"\r\n    }\r\n\r\n    conditions {\r\n        var app_name string\r\n        app_name = \"Basic application\"\r\n\r\n        $member_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\r\n        $app_id = DBFind(\"applications\").Where(\"name = $ AND deleted = 0\", app_name).One(\"id\")\r\n\r\n        if !$member_map {\r\n            warning \"Member name is not specified\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var image_name string\r\n        image_name = \"avatar\"\r\n\r\n        var image_id int\r\n        if $member_map {\r\n            image_id = @1UploadBinary(\"Name,Data,ApplicationId\", image_name, $member_image, Int($app_id))\r\n            DBUpdate(\"members\", Int($member_map[\"id\"]), \"image_id\", image_id)\r\n        }\r\n    }\r\n}",
            "Name": "ProfileEditAvatar",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Profile_Edit {\r\n   data {\r\n       member_name string\r\n       information string \"optional\"\r\n   }\r\n\r\n   conditions {\r\n       var app_name string\r\n       app_name = \"Basic application\"\r\n\r\n       $member_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\r\n       $app_id = DBFind(\"applications\").Where(\"name = $ AND deleted = 0\", app_name).One(\"id\")\r\n\r\n       if !$member_map {\r\n           // check member_name\r\n           $member_id = DBFind(\"members\").Where(\"member_name = $\", $member_name).One(\"id\")\r\n           if $member_id {\r\n               warning \"This member name is busy. Enter another member name, please\"\r\n           }\r\n       }\r\n   }\r\n\r\n   action {\r\n       var memberInfo map\r\n       memberInfo[\"information\"] = $information\r\n       if !$member_map{\r\n            DBInsert(\"members\", \"id,member_name,member_info\", $key_id, $member_name, memberInfo)\r\n       } else {\r\n            DBUpdate(\"members\", $key_id, \"member_info\", memberInfo)\r\n       }\r\n   }\r\n}",
            "Name": "Profile_Edit",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RoleConditions {\r\n    data{\r\n        role string\r\n    }\r\n    conditions {\r\n        if !DBFind(\"roles_participants\").Where(\"role->name=? and member->member_id=? and deleted=0\", $role, $key_id).Row() {\r\n            warning Sprintf(\"This action allowed only for role: %v\", $role)\r\n        }\r\n    }\r\n}",
            "Name": "RoleConditions",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract notifications_Send {\r\n    data {\r\n        member_id int \"optional\"\r\n        rid int \"optional\"\r\n        closure_type int \"optional\"\r\n\r\n        sender int\r\n        icon_name string \"optional\"\r\n        text_header string\r\n        text_body string \"optional\"\r\n        page_name string\r\n        params_map string // json encoded expected\r\n    }\r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"members\").Where(\"id=?\", kid).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            if DBFind(\"keys\").Columns(\"id\").Where(\"id=?\", kid).Row() {\r\n                res[\"member_id\"] = Str(kid)\r\n                res[\"member_name\"] = IdToAddress(kid)\r\n                res[\"image_id\"] = \"0\"\r\n            }\r\n        }\r\n        return res\r\n    }\r\n    func sendNotify(recipient map){\r\n        var notification map\r\n        notification[\"header\"] = $text_header\r\n        notification[\"type\"] = $notify_type\r\n        notification[\"icon\"] = $icon_name\r\n        notification[\"body\"] = $text_body\r\n        var sender map\r\n        if $sender == 1 && $senderMember {\r\n            // send from member\r\n            sender[\"type\"] = $sender\r\n            sender[\"member_id\"] = $senderMember[\"member_id\"]\r\n            sender[\"member_name\"] = $senderMember[\"member_name\"]\r\n            sender[\"image_id\"] = $senderMember[\"image_id\"]\r\n        }else{\r\n            if $sender == 2 && $senderRole{\r\n                // send from role\r\n                sender[\"type\"] = $sender\r\n                sender[\"role_id\"] = $senderRole[\"id\"]\r\n                sender[\"role_name\"] = $senderRole[\"role_name\"]\r\n                sender[\"image_id\"] = $senderRole[\"image_id\"]\r\n            }\r\n        }\r\n\r\n        DBInsert(\"notifications\", \"recipient,sender,notification,page_name,page_params,timestamp date_created\",\r\n        recipient, sender, notification, $page_name, $params_map, $block_time)\r\n    }\r\n\r\n    func sendToRole(roleId int){\r\n        var role recipient map\r\n        role = DBFind(\"roles\").Where(\"id=?\", roleId).Row()\r\n        recipient[\"role_id\"] = role[\"id\"]\r\n        recipient[\"role_name\"] = role[\"role_name\"]\r\n        recipient[\"image_id\"] = role[\"image_id\"]\r\n\r\n        sendNotify(recipient)\r\n    }\r\n\r\n    conditions {\r\n        $member_id = Int($member_id)\r\n        $rid = Int($rid)\r\n        if Size($icon_name) < 1{\r\n            $icon_name = \"icon-envelope\"\r\n        }\r\n        if $member_id != 0 {\r\n            if !DBFind(\"keys\").Where(\"id=?\", $member_id).Row(){\r\n                warning \"Key not found\"\r\n            }\r\n            $notify_type = 1 // is \"member\"\r\n        }else{\r\n            if $rid > 0{\r\n                $notify_type = 2 // is \"role\"\r\n                if !DBFind(\"roles\").Where(\"id=?\", $rid).One(\"id\") {\r\n                    warning $this_contract+\": Recipient role not found\"\r\n                }\r\n                if !DBFind(\"roles_participants\").Where(\"role->id=? and deleted=0\", $rid).One(\"id\") {\r\n                    warning $this_contract+\": Recipient role does not contain members\"\r\n                }\r\n            } else{\r\n                warning $this_contract+\": Notification type not defined\"\r\n            }\r\n        }\r\n        $senderMember = nil\r\n        $senderRole = nil\r\n        if $sender == 1 {\r\n            $senderMember = getMemberInfo($key_id)\r\n        }else{\r\n            if $sender == 2 {\r\n                $senderRole = DBFind(\"roles\").Where(\"id=?\", $role_id).Row()\r\n                if !$senderRole {\r\n                    warning $this_contract+\": Sender role not found\"\r\n                }\r\n            }else{\r\n                warning $this_contract+\": Sender invalid\"\r\n            }\r\n        }\r\n    }\r\n    action {\r\n        if $member_id != 0 {\r\n            sendNotify(getMemberInfo($member_id))\r\n        }else{\r\n            if $rid > 0 {\r\n                if $closure_type == 1 {\r\n                    // Single closure: one begins the process - the others do not see\r\n                    // Одиночное закрытие: все имеющие роль получают оповещение, но как только один из них запустит процесс работы с оповещением оно скроется от остальных\r\n                    sendToRole($rid)\r\n                } else {\r\n                    // Multiple closure: to each his own notification\r\n                    // Множественное закрытие: каждый участник роли получает свое одиночное оповещение\r\n                    $notify_type = 1\r\n                    var participants array\r\n                    participants = DBFind(\"roles_participants\").Columns(\"member->member_id\").Where(\"role->id=? and deleted=0\", $rid)\r\n                    var i int\r\n                    while i < Len(participants) {\r\n                        var p map\r\n                        p = participants[i]\r\n                        sendNotify(getMemberInfo(Int(p[\"member.member_id\"])))\r\n                        i=i+1\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_Send",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract notifications_Process {\r\n    data {\r\n        notific_id int\r\n    }\r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"members\").Where(\"id=?\", kid).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            member = DBFind(\"keys\").Where(\"id=?\", kid).Row()\r\n            if member {\r\n                res[\"member_id\"] = member[\"id\"]\r\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\r\n                res[\"image_id\"] = 0\r\n            }\r\n        }\r\n        return res\r\n    }\r\n    conditions {\r\n        $notify = DBFind(\"notifications\").Columns(\"recipient->role_id,sender->type,date_start_processing\").Where(\"id=?\", $notific_id).Row()\r\n        if !$notify {\r\n            warning \"Notification not found\"\r\n        }\r\n\r\n        if $notify[\"sender.type\"] == 2{\r\n            if $notify[\"date_start_processing\"] != \"\" {\r\n                warning \"Sorry, processing of this notification has already begun\"\r\n            }\r\n            if !DBFind(\"roles_participants\").Where(\"role->id=? and member->member_id=? and deleted=0\", Int($notify[\"recipient.role_id\"]), $key_id).One(\"id\") {\r\n                warning \"Sorry, you are not part of the role for which this notification is intended\"\r\n            }\r\n        }else{\r\n            if $notify[\"sender.type\"] != 1 {\r\n                warning \"Notification type not found\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"notifications\", $notific_id, \"timestamp date_start_processing,processing_info\", $block_time, JSONEncode(getMemberInfo($key_id)))\r\n    }\r\n}",
            "Name": "notifications_Process",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_CheckAccess {\r\n    data {\r\n        rid int\r\n    }\r\n    conditions {\r\n        var role map\r\n        role = DBFind(\"roles\").Columns(\"id,role_name,deleted,roles_access->rids,role_type,creator->member_id,company_id\").Where(\"id=?\", $rid).Row()\r\n        if !role {\r\n            warning Sprintf(\"%v: Role not found\", $this_contract)\r\n        }\r\n        \r\n        if role[\"creator.member_id\"] == $key_id {\r\n            return\r\n        }\r\n\r\n        var rids rawRids array, i int\r\n        rawRids = Split(role[\"roles_access.rids\"], \",\")\r\n        while i < Len(rawRids){\r\n            if rawRids[i] > 0 {\r\n                rids = Append(rids, rawRids[i])\r\n            }\r\n            i=i+1\r\n        }\r\n        i=0\r\n        while i<Len(rids){\r\n            if rids[i] == $role_id {\r\n                return\r\n            }\r\n            i=i+1\r\n        }\r\n\r\n        if role[\"role_type\"] == 4 {\r\n            // company role\r\n            if role[\"company_id\"] == $key_id {\r\n                return\r\n            }else{\r\n                warning \"Sorry, you are not the creator of this company\"\r\n            }\r\n        }\r\n        warning Sprintf(\"Sorry, you don't have permission to change this role (%q)\", role[\"role_name\"])\r\n    }\r\n}",
            "Name": "Roles_CheckAccess",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_AccessManager {\r\n    data {\r\n        Action string\r\n        Rid int\r\n        ManagerRid string \"optional\"\r\n    }\r\n    func updateAccess(ra string){\r\n        var roles_access map\r\n        roles_access[\"rids\"] = ra\r\n        DBUpdate(\"roles\", $Rid, \"roles_access\", roles_access)\r\n    }\r\n    conditions {\r\n        Roles_CheckAccess(\"rid\", $Rid)\r\n\r\n        $ManagerRid = Int($ManagerRid)\r\n        $role = DBFind(\"roles\").Columns(\"id,roles_access->rids\").Where(\"id=?\", $Rid).Row()\r\n        if !$role {\r\n            warning \"Role not found\"\r\n        }\r\n        if $ManagerRid > 0{\r\n            if !DBFind(\"roles\").Where(\"id=?\", $ManagerRid).One(\"id\") {\r\n                warning \"Role not found\"\r\n            }\r\n        }\r\n        var ids array, i int\r\n        $ids = ids\r\n        ids = Split($role[\"roles_access.rids\"],\",\")\r\n        while i < Len(ids){\r\n            if ids[i] > 0 {\r\n                $ids = Append($ids, ids[i])\r\n            }\r\n            i=i+1\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $Action == \"clean\"{\r\n            updateAccess(\"\")\r\n        }\r\n        if $ManagerRid > 0{\r\n            var i int, idsNew array\r\n            if $Action == \"remove\"{\r\n                while i<Len($ids){\r\n                    if $ids[i] != $ManagerRid{\r\n                        idsNew = Append(idsNew, $ids[i])\r\n                    }\r\n                    i=i+1\r\n                }\r\n                updateAccess(Join(idsNew, \",\"))\r\n            }\r\n            if $Action == \"add\"{\r\n                var double bool\r\n                while i<Len($ids){\r\n                    if $ids[i] == $ManagerRid{\r\n                        double = true\r\n                    }\r\n                    i=i+1\r\n                }\r\n                if !double {\r\n                    $ids = Append($ids, $ManagerRid)\r\n                }\r\n                updateAccess(Join($ids, \",\"))\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "Roles_AccessManager",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Assign {\r\n    data {\r\n        rid int\r\n        member_id int\r\n    }\r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"members\").Where(\"id=?\", kid).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            member = DBFind(\"keys\").Where(\"id=?\", kid).Row()\r\n            if member {\r\n                res[\"member_id\"] = member[\"id\"]\r\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\r\n                res[\"image_id\"] = 0\r\n            }\r\n        }\r\n        return res\r\n    }\r\n    conditions {\r\n        $role = DBFind(\"roles\").Columns(\"id,deleted,role_type,role_name,image_id,creator->member_id\").Where(\"id=?\", $rid).Row()\r\n        if !$role {\r\n            warning \"Role not found\"\r\n        }\r\n        \r\n        if !DBFind(\"keys\").Where(\"id=?\", $member_id).Row() {\r\n            warning \"Key not found\"\r\n        }\r\n\r\n        if $role[\"deleted\"] == 1 {\r\n            warning \"This role has been deleted. The appointment of members is impossible\"\r\n        }\r\n\r\n        var specialRules map prev_contract string stack array\r\n        stack = JSONDecode(JSONEncode($stack))\r\n        prev_contract = stack[0]\r\n        if Len(stack)>2{\r\n            prev_contract = stack[Len(stack)-2]\r\n        }\r\n        specialRules[\"@1sysparams_AcceptValidator\"] = \"Validator\"\r\n        specialRules[\"@1sysparams_DelegateRefresh\"] = \"Delegate\"\r\n        specialRules[\"@1sysparams_CandidateValidatorRequest\"] = \"Candidate for validators\"\r\n        specialRules[\"@1voting_TemplateRun\"] = \"Investor with voting rights\"\r\n        specialRules[\"@1tokenrefund_Start\"] = \"Investor with voting rights\"\r\n        if specialRules[prev_contract] != $role[\"role_name\"] {\r\n            Roles_CheckAccess(\"rid\", $rid)\r\n        }\r\n\r\n        $assigned = DBFind(\"roles_participants\").Where(\"role->id=? and member->member_id=? and deleted=0\", $rid, $member_id).One(\"id\")\r\n    }\r\n\r\n    action {\r\n        if $assigned {\r\n            // do not re-assign and do not warning because this contract may be called for other\r\n            return\r\n        }\r\n        var role member appointer map\r\n        role[\"id\"] = $role[\"id\"]\r\n        role[\"type\"] = $role[\"role_type\"]\r\n        role[\"name\"] = $role[\"role_name\"]\r\n        role[\"image_id\"] = $role[\"image_id\"]\r\n\r\n        member = getMemberInfo($member_id)\r\n        appointer = getMemberInfo($key_id)\r\n\r\n        DBInsert(\"roles_participants\", \"role,member,appointed,timestamp date_created\", role, member, appointer, $block_time)\r\n    }\r\n}",
            "Name": "Roles_Assign",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Create {\r\n    data {\r\n        role_name string\r\n        role_type int\r\n        company_id string \"optional\"\r\n    }\r\n   func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"members\").Where(\"id=?\", kid).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            member = DBFind(\"keys\").Where(\"id=?\", kid).Row()\r\n            if member {\r\n                res[\"member_id\"] = member[\"id\"]\r\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\r\n                res[\"image_id\"] = 0\r\n            }\r\n        }\r\n        return res\r\n    }\r\n    conditions {\r\n        $company_id = Int($company_id)\r\n        // system role\r\n        if $role_type == 3 {\r\n            warning \"System role can not be created\"\r\n        }\r\n\r\n        // company role\r\n        if $role_type == 4 {\r\n            // check param\r\n            if $company_id == 0 {\r\n                warning \"On this page you can not create a role for the company. Go to the company's view page to create a role\"\r\n            }\r\n\r\n            // check creator of the company\r\n            if $company_id != $key_id {\r\n                warning \"Sorry, you are not the creator of this company\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var creator map\r\n        creator = getMemberInfo($key_id)\r\n\r\n        if $role_type != 4 {\r\n            $company_id = 0\r\n        }\r\n        $result = DBInsert(\"roles\", \"role_name,role_type,creator,timestamp date_created,company_id\", $role_name, $role_type, creator, $block_time, $company_id)\r\n    }\r\n}",
            "Name": "Roles_Create",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Unassign {\r\n    data {\r\n        row_id int\r\n    }\r\n\r\n    conditions {\r\n        // check record\r\n        var assigned role map\r\n        assigned = DBFind(\"roles_participants\").Columns(\"id,role->id\").Where(\"id=$\", $row_id).Row()\r\n        if !assigned {\r\n            warning \"Participant not found\"\r\n        }\r\n\r\n        role = DBFind(\"roles\").Columns(\"id,creator->member_id,role_name\").Where(\"id=?\", assigned[\"role.id\"]).Row()\r\n        if !role {\r\n            warning \"Role not found in the roles registry\"\r\n        }\r\n\r\n        var specialRules map prev_contract string stack array\r\n        stack = JSONDecode(JSONEncode($stack))\r\n        prev_contract = stack[0]\r\n        if Len(stack)>2{\r\n            prev_contract = stack[Len(stack)-2]\r\n        }\r\n        specialRules[\"@1sysparams_AcceptValidator\"] = \"Candidate for validators\"\r\n        specialRules[\"@1sysparams_DelegateRefresh\"] = \"Delegate\"\r\n        specialRules[\"@1sysparams_CandidateValidatorRequest\"] = \"Candidate for validators\"\r\n        specialRules[\"@1sysparams_InvestorRefresh\"] = \"Investor with voting rights\"\r\n        specialRules[\"@1tokenrefund_Start\"] = \"Investor with voting rights\"\r\n        specialRules[\"@1sysparams_ValidatorResign\"] = \"Validator\"\r\n\r\n        if specialRules[prev_contract] != role[\"role_name\"] {\r\n            Roles_CheckAccess(\"rid\", Int(role[\"id\"]))\r\n        }\r\n    }\r\n\r\n    action {\r\n        // delete the member\r\n        DBUpdate(\"roles_participants\", $row_id, \"deleted,timestamp date_deleted\", 1, $block_time)\r\n    }\r\n}",
            "Name": "Roles_Unassign",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Restore {\r\n    data {\r\n        rid int\r\n    }\r\n    \r\n    conditions {        \r\n        Roles_CheckAccess(\"rid\", $rid)\r\n    }\r\n    \r\n    action {\r\n        DBUpdate(\"roles\", $rid, \"deleted\", 0)\r\n    }\r\n}",
            "Name": "Roles_Restore",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Del {\r\n    data {\r\n        rid int\r\n    }\r\n\r\n    conditions {\r\n        Roles_CheckAccess(\"rid\", $rid)\r\n    }\r\n\r\n    action {\r\n        var participants array\r\n        participants = DBFind(\"roles_participants\").Columns(\"id\").Where(\"role->id=? and deleted=0\", $rid)\r\n\r\n        // delete all participants\r\n        var i int\r\n        while i < Len(participants) {\r\n            var p map\r\n            p = participants[i]\r\n            Roles_Unassign(\"row_id\", Int(p[\"id\"]))\r\n            i = i + 1\r\n        }\r\n\r\n        DBUpdate(\"roles\", $rid, \"deleted,timestamp date_deleted\", 1, $block_time)\r\n    }\r\n}",
            "Name": "Roles_Del",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokenTransfer {\n    data {\n        Amount money\n        Sender_AccountId int\n        Recipient_AccountId int\n        Comment string \"optional\"\n        //Signature string \"optional hidden\"\n    }\n    \n    conditions {\n        //check amount\n        if $Amount == 0 {\n            error \"Amount is zero\"\n        }\n        if $Amount < 0 {\n            error \"Amount is negative\"\n        }\n        \n        //check the sender\n        var sender string\n        sender = DBFind(\"keys\").Where(\"id=$\", $Sender_AccountId).One(\"id\")\n        if !sender {\n            error Sprintf(\"Sender %v is invalid\", $Sender_AccountId)\n        }\n        \n        //check balance\n        $sender_balance = Money(DBFind(\"keys\").Where(\"id=$\", $Sender_AccountId).One(\"amount\"))\n        if $Amount > $sender_balance {\n            error Sprintf(\"Money is not enough %v < %v\", $sender_balance, $Amount)\n        }\n        \n        //check the recipient\n        var recipient string\n        recipient = DBFind(\"keys\").Where(\"id=$\", $Recipient_AccountId).One(\"id\")\n        if !recipient {\n            error Sprintf(\"Recipient %v is invalid\", $Recipient_AccountId)\n        }\n    }\n    \n    action {\n        DBUpdate(\"keys\", $Sender_AccountId, \"-amount\", $Amount)\n        DBUpdate(\"keys\", $Recipient_AccountId, \"+amount\", $Amount)\n        DBInsert(\"history\", \"sender_id,recipient_id,amount,comment,block_id,txhash\", $Sender_AccountId, $Recipient_AccountId, $Amount, $Comment, $block, $txhash)\n    }\n}",
            "Name": "TokenTransfer",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract SendTokens {\n    data {\n        Amount money\n        Recipient_Account string\n        //Signature string \"signature:TokenTransfer\"\n    }\n\n    conditions {\n        $recipient = AddressToId($Recipient_Account)\n        if $recipient == 0 {\n            error Sprintf(\"Recipient %v is invalid\", $Recipient_Account)\n        }\n    }\n\n    action {\n        //TokenTransfer(\"Amount,Sender_AccountId,Recipient_AccountId,Signature\", $Amount, $key_id, $recipient, $Signature)\n        TokenTransfer(\"Amount,Sender_AccountId,Recipient_AccountId\", $Amount, $key_id, $recipient)\n    }\n}",
            "Name": "SendTokens",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract buffer_Manager {\r\n    data {\r\n        Action string\r\n        Key string\r\n        Val string \"optional\"\r\n    }\r\n    func decodeArray(s string) array{\r\n        var ar array\r\n        if HasPrefix($buf[\"value\"], \"[\") && Substr($buf[\"value\"], Size($buf[\"value\"])-1, 1) == \"]\"{\r\n            ar = JSONDecode($buf[\"value\"])\r\n        }\r\n        return ar\r\n    }\r\n    conditions {\r\n        $emptyVal = JSONEncode(\"\")\r\n        $buf = DBFind(\"buffer_data\").Where(\"key=? and member_id=?\", $Key, $key_id).Row()\r\n        if !$buf {\r\n            var buf map, id int\r\n            id = DBInsert(\"buffer_data\", \"key,value,member_id\", $Key, $emptyVal, $key_id)\r\n            buf[\"id\"] = Str(id)\r\n            buf[\"value\"] = \"\"\r\n            buf[\"member_id\"] = Str($key_id)\r\n            buf[\"key\"] = Str($Key)\r\n            $buf = buf\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $Action == \"clean\" {\r\n            DBUpdate(\"buffer_data\", Int($buf[\"id\"]), \"value\", $emptyVal)\r\n        }\r\n        if $Action == \"set\" {\r\n            DBUpdate(\"buffer_data\", Int($buf[\"id\"]), \"value\", $Val)\r\n        }\r\n        if $Action == \"array_add_value\" {\r\n            var ar array\r\n            ar = decodeArray($buf[\"value\"])\r\n            ar[Len(ar)] = $Val\r\n            DBUpdate(\"buffer_data\", Int($buf[\"id\"]), \"value\", JSONEncode(ar))\r\n        }\r\n        if $Action == \"array_remove_value\" {\r\n            var ar arNew array, i int\r\n            ar = decodeArray($buf[\"value\"])\r\n            while i<Len(ar){\r\n                if ar[i] != $Val{\r\n                    arNew[Len(arNew)] = ar[i]\r\n                }\r\n                i=i+1\r\n            }\r\n            DBUpdate(\"buffer_data\", Int($buf[\"id\"]), \"value\", JSONEncode(arNew))\r\n        }\r\n    }\r\n}\r\n",
            "Name": "buffer_Manager",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract notifications_Close {\r\n    data {\r\n        notific_id int\r\n    }\r\n\r\n    conditions {\r\n        $notify = DBFind(\"notifications\").Columns(\"id,date_start_processing,processing_info->member_id,closed,sender->type\").Where(\"id=$\", $notific_id).Row()\r\n        if !$notify {\r\n            warning \"Notification not found\"\r\n        }\r\n        if $notify[\"sender.type\"] == 2{\r\n            //role has processing check\r\n            if $notify[\"date_start_processing\"] == \"\" {\r\n                warning \"Sorry, processing of this notification has not yet begun\"\r\n            }\r\n\r\n            if $notify[\"processing_info.member_id\"] != $key_id {\r\n                warning \"Sorry, processing of this notice began another member\"\r\n            }\r\n\r\n            if $notify[\"closed\"] > 0 {\r\n                warning \"Sorry, this notification has already been closed before\"\r\n            }\r\n        }else {\r\n            if $notify[\"sender.type\"] != 1 { // not single\r\n                warning \"Notification type not found\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $notify[\"sender.type\"] == 1{\r\n            notifications_Process(\"notific_id\", $notific_id)\r\n        }\r\n\r\n        DBUpdate(\"notifications\", $notific_id, \"timestamp date_closed,closed\", $block_time, 1)\r\n    }\r\n}",
            "Name": "notifications_Close",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesRequest {\r\n    data {\r\n        rid int\r\n    }\r\n\r\n    conditions {\r\n        $role = DBFind(\"roles\").Where(\"id=?\", $rid).One(\"id\")\r\n        if !$role {\r\n            warning \"Role not found\"\r\n        }\r\n\r\n        $assigned = DBFind(\"roles_participants\").Where(\"role->id=? and member->member_id=? and deleted=0\", $rid, $key_id).One(\"id\")\r\n        if $assigned {\r\n            warning \"You have already been added to the role\"\r\n        }\r\n\r\n        $notifications = DBFind(\"notifications\").Where(\"page_name=? and page_params->rid=? and sender->member_id=? and closed=0\", \"roles_request_view\", $rid, $key_id).One(\"id\")\r\n        if $notifications {\r\n            warning \"Request already sent\"\r\n        }\r\n    }\r\n    \r\n    action {\r\n        var params map\r\n        params[\"rid\"] = $rid\r\n        \r\n        var member_id int\r\n        member_id = EcosysParam(\"founder_account\") \r\n\r\n        notifications_Send(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", \r\n            member_id, 1, \"fa-bars\", \"Roles\", \"New request received\", \"roles_request_view\", JSONEncode(params))\r\n    }\r\n}",
            "Name": "RolesRequest",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesRequestDecision {\r\n    data {\r\n        decision int\r\n        notific_id int\r\n        rid int \"optional\"\r\n        member_id int \"optional\"\r\n    }\r\n\r\n    conditions {\r\n    }\r\n    \r\n    action {\r\n        if ($decision == 1){\r\n            Roles_Assign(\"rid,member_id\", $rid, $member_id)\r\n        }\r\n        \r\n        if ($notific_id > 0){\r\n            notifications_Close(\"notific_id\", $notific_id)\r\n        }\r\n    }\r\n}",
            "Name": "RolesRequestDecision",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract membership_membership_decide {\r\n    data {\r\n        notific_id int\r\n        Accept int\r\n    }\r\n    conditions {\r\n        $request = DBFind(\"notifications\").Columns(\"id,closed,sender->member_id,page_params->ecosystem_id\").Where(\"id = ?\", $notific_id).Row()\r\n       \r\n\r\n        if Int($request[\"closed\"]) == 1 {\r\n            warning \"Request already processed\"\r\n        }\r\n\r\n        var founder_id int\r\n        founder_id = DBFind(\"parameters\").Where(\"name = 'founder_account'\").Ecosystem(Int($request[\"page_params.ecosystem_id\"])).One(\"value\")\r\n       \r\n        if founder_id != $key_id {\r\n            warning \"You are not the founder of the ecosystem\"\r\n        }\r\n    }\r\n    action {\r\n        var params map\r\n        params[\"ecosystem_id\"] = $request[\"page_params.ecosystem_id\"]\r\n        if ($Accept == 0){\r\n            params[\"status\"] = 1\r\n  \r\n            var table_name string\r\n            table_name = Sprintf(\"@%v_keys\", $request[\"page_params.ecosystem_id\"]) \r\n\r\n            var pub string\r\n            pub = DBFind(\"keys\").Where(\"id = ?\", $request[\"sender.member_id\"]).One(\"pub\")\r\n            DBInsert(table_name, \"id,pub\", $request[\"sender.member_id\"], pub)\r\n        }\r\n        else{   \r\n            params[\"status\"] = 0\r\n        }\r\n        \r\n        notifications_Send(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", $request[\"sender.member_id\"], 1, \"icon icon-user-follow\", \"Request is accepted\", \"Your request for membership is accepted\", \"membership_user_view\", params)\r\n        notifications_Close(\"notific_id\", $notific_id)\r\n    }\r\n}",
            "Name": "membership_decide",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract membership_send_request {\r\n    data {\r\n        ecosystem_num int\r\n    }\r\n    \r\n    conditions {\r\n        \r\n    }\r\n    \r\n    action {\r\n\r\n        $found = DBFind(\"notifications\").Where(\"page_params->ecosystem_id = ? and sender->member_id = ? and closed = 0 and page_name = 'membership_admin_view'\", $ecosystem_num, $key_id)\r\n        \r\n        if Len($found) > 0 {\r\n            warning \"Request already sent\"\r\n        }\r\n\r\n        var notific_params map\r\n        notific_params[\"ecosystem_id\"] = $ecosystem_num\r\n\r\n\r\n        var founder_id int\r\n        founder_id = DBFind(\"parameters\").Where(\"name = 'founder_account'\").Ecosystem($ecosystem_num).One(\"value\")\r\n\r\n        notifications_Send(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", founder_id, 1, \"icon icon-user-follow\", \"New request for membership\", \"View details\", \"membership_admin_view\", notific_params)\r\n    }\r\n}",
            "Name": "membership_send_request",
            "Type": "contracts"
        }
    ]
}