{
    "blocks": [
        {
            "Name": "export_info",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\n\nIf(#buffer_value_app_id# > 0){\n    DBFind(pages, src_pages).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_pages)\n    DBFind(blocks, src_blocks).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_blocks)\n    DBFind(app_param, src_parameters).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_parameters)\n    DBFind(languages, src_languages).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_languages)\n    DBFind(contracts, src_contracts).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_contracts)\n    DBFind(tables, src_tables).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_tables)\n}\n\nDiv(panel panel-primary){\n    If(#buffer_value_app_id# > 0){\n\t    Div(panel-heading, \"Export - #buffer_value_app_name#\")\n    }.Else{\n        Div(panel-heading, \"Export\") \n    }\n\tForm(){\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Pages\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_pages# > 0){\n                        Span(\"(#count_pages#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_pages# > 0){\n                        ForList(src_pages){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Blocks\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_blocks# > 0){\n                        Span(\"(#count_blocks#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_blocks# > 0){\n                        ForList(src_blocks){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row df f-valign){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n\t\t\t\t\tSpan(\"Menu\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#buffer_value_app_id# > 0){\n                        Span(\"(#buffer_value_count_menu#)\")\n                    }.Else{\n                        Span(\"(0)\")\n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row df f-valign){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(And(#buffer_value_app_id#>0,#buffer_value_count_menu#>0)){\n                        Span(Class: text-muted h6, Body:\"#buffer_value_menu_name#\")\n                    }.Else{\n                        Span(Class: text-muted h6, Body:\"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Parameters\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_parameters# > 0){\n                        Span(\"(#count_parameters#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_parameters# > 0){\n                        ForList(src_parameters){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Language resources\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_languages# > 0){\n                        Span(\"(#count_languages#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_languages# > 0){\n                        ForList(src_languages){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Contracts\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_contracts# > 0){\n                        Span(\"(#count_contracts#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_contracts# > 0){\n                        ForList(src_contracts){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Tables\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_tables# > 0){\n                        Span(\"(#count_tables#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_tables# > 0){\n                        ForList(src_tables){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n        If(#buffer_value_app_id# > 0){\n            Div(Class: panel-footer clearfix){\n                Div(Class: pull-right){\n                    Button(Body: Export, Class: btn btn-primary, Page: export_download, Contract: Export)\n                }\n            }\n        }\n\t}\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "export_link",
            "Value": "If(And(#res_type#!=\"apps\",#res_type#!=\"pages\",#res_type#!=\"blocks\",#res_type#!=\"menu\",#res_type#!=\"parameters\",#res_type#!=\"languages\",#res_type#!=\"contracts\",#res_type#!=\"tables\")){\n    SetVar(res_type, \"apps\")\n}\n\nDiv(Class: breadcrumb){\n    If(#res_type#==\"apps\"){\n        Span(Class: text-muted, Body: Application)\n    }.Else{\n        LinkPage(Body: Application, Page: export_apps,, \"res_type=apps\")\n    }\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"pages\"){\n        Span(Class: text-muted, Body: Pages)\n    }.Else{\n        LinkPage(Body: Pages, Page: export_resources,, \"res_type=pages\")\n    }\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"blocks\"){\n        Span(Class: text-muted, Body: Blocks)\n    }.Else{\n        LinkPage(Body: Blocks, Page: export_resources,, \"res_type=blocks\")\n    }\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"menu\"){\n        Span(Class: text-muted, Body: Menu)\n    }.Else{\n       LinkPage(Body: Menu, Page: export_resources,, \"res_type=menu\")\n    }\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"parameters\"){\n        Span(Class: text-muted, Body: Parameters)\n    }.Else{\n       LinkPage(Body: Parameters, Page: export_resources,, \"res_type=parameters\")\n    }\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"languages\"){\n        Span(Class: text-muted, Body: Language resources)\n    }.Else{\n       LinkPage(Body: Language resources, Page: export_resources,, \"res_type=languages\")\n    }\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"contracts\"){\n        Span(Class: text-muted, Body: Contracts)\n    }.Else{\n       LinkPage(Body: Contracts, Page: export_resources,, \"res_type=contracts\")\n    } \n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"tables\"){\n        Span(Class: text-muted, Body: Tables)\n    }.Else{\n       LinkPage(Body: Tables, Page: export_resources,, \"res_type=tables\")\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "contracts": [
        {
            "Name": "Export",
            "Value": "contract Export {\n\n    func ReplaceValue(s string) string {\n\t\ts = Replace(s, `\\`, `\\\\`)\n        s = Replace(s, `\t`, `\\t`)\n        s = Replace(s, \"\\n\", `\\n`)\n        s = Replace(s, \"\\r\", `\\r`)\n        s = Replace(s, `\"`, `\\\"`)\n        return s\n    }\n\n    func AssignAll(app_name string, all_blocks string, all_contracts string, all_data string, all_languages string, all_menus string, all_pages string, all_parameters string, all_tables string) string {\n\n        var res_str string\n        res_str = res_str + all_blocks\n\n        if ( Size(res_str)>0 && Size(all_contracts)>0 ){\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_contracts\n\n        if ( Size(res_str)>0 && Size(all_data)>0 ){\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_data\n\n        if ( Size(res_str)>0 && Size(all_languages)>0 ){\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_languages\n\n        if ( Size(res_str)>0 && Size(all_menus)>0 ){\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_menus\n\n        if ( Size(res_str)>0 && Size(all_pages)>0 ){\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_pages\n\n        if ( Size(res_str)>0 && Size(all_parameters)>0 ){\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_parameters\n\n        if ( Size(res_str)>0 && Size(all_tables)>0 ){\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_tables\n\n        res_str = Sprintf(`{\n    \"name\": \"%v\",\n    \"data\": [%v\n    ]\n}`, app_name, res_str)\n\n        return res_str\n    }\n\n    func AddPage(page_name string, page_value string, page_conditions string, page_menu string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"page\",\n            \"Name\": \"%v\",\n            \"Value\": \"%v\",\n            \"Conditions\": \"%v\",\n            \"Menu\": \"%v\"\n        }`, page_name, page_value, page_conditions, page_menu)\n        return s\n    }\n\n    func AddMenu(menu_name string, menu_value string, menu_conditions string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"menu\",\n            \"Name\": \"%v\",\n            \"Value\": \"%v\",\n            \"Conditions\": \"%v\"\n        }`, menu_name, menu_value, menu_conditions)\n        return s\n    }\n\n    func AddContract(contract_name string, contract_value string, contract_conditions string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"contract\",\n            \"Name\": \"%v\",\n            \"Value\": \"%v\",\n            \"Conditions\": \"%v\"\n        }`, contract_name, contract_value, contract_conditions)\n        return s\n    }\n\n    func AddBlock(block_name string, block_value string, block_conditions string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"block\",\n            \"Name\": \"%v\",\n            \"Value\": \"%v\",\n            \"Conditions\": \"%v\"\n        }`, block_name, block_value, block_conditions)\n        return s\n    }\n\n    func AddLanguage(language_name string, language_conditions string, language_trans string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"language\",\n            \"Name\": \"%v\",\n            \"Conditions\": \"%v\",\n            \"Trans\": \"%v\"\n        }`, language_name, language_conditions, language_trans)\n        return s\n    }\n\n    func AddParameter(parameter_name string, parameter_value string, parameter_conditions string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"parameter\",\n            \"Name\": \"%v\",\n            \"Value\": \"%v\",\n            \"Conditions\": \"%v\"\n        }`, parameter_name, parameter_value, parameter_conditions)\n        return s\n    }\n\n    func AddTable(table_name string, table_columns string, table_permissions string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"table\",\n            \"Name\": \"%v\",\n            \"Columns\": \"%v\",\n            \"Permissions\": \"%v\"\n        }`, table_name, table_columns, table_permissions)\n        return s\n    }\n\n    func AddTypeForColumns(table_name string, table_columns string) string {\n\t\tvar result string\n\n\t\ttable_columns = Replace(table_columns, \"{\", \"\")\n\t\ttable_columns = Replace(table_columns, \"}\", \"\")\n\t\ttable_columns = Replace(table_columns, \" \", \"\")\n\n\t\tvar columns_arr array\n\t\tcolumns_arr = Split(table_columns, \",\")\n\n\t\tvar i int\n\t\twhile (i < Len(columns_arr)){\n\t\t\tvar s_split string\n\t\t\ts_split = Str(columns_arr[i])\n\n\t\t\tif Size(s_split) > 0 {\n\t\t\t\tvar clm array\n\t\t\t\tclm = Split(s_split, \":\")\n\n\t\t\t\tvar s string\n\n\t\t\t\tif (Len(clm) == 2){\n\t\t\t\t\tvar col_name string\n\t\t\t\t\tvar col_cond string\n\t\t\t\t\tvar col_type string\n\n\t\t\t\t\tcol_name = Replace(Str(clm[0]), `\"`, \"\")\n\t\t\t\t\tcol_cond = Str(clm[1])\n\t\t\t\t\tcol_type = GetColumnType(table_name, col_name)\n\n\t\t\t\t\ts = Sprintf(`{\"name\":\"%v\",\"type\":\"%v\",\"conditions\":%v}`, col_name, col_type, col_cond)\n\t\t\t\t}\n\n                if (Size(result) > 0) {\n                    result = result + \",\"\n\t\t\t\t}\n\t\t\t\tresult = result + s\n\t\t\t}\n\t\t\ti = i + 1\n\t\t}\n\n\t\tresult = Sprintf(\"[%v]\", result)\n\t\treturn result\n    }\n\n\n    data {}\n\n    conditions {\n        var buffer_map map\n        buffer_map = DBFind(\"buffer_data\").Columns(\"id,value->app_id,value->app_name\").Where(\"member_id=$ and key=$\", $key_id, \"export\").Row()\n        if !buffer_map{\n            warning \"Application not found\"\n        }\n        $ApplicationID = Int(buffer_map[\"value.app_id\"])\n        $ApplicationName = Str(buffer_map[\"value.app_name\"])\n    }\n\n    action {\n        //warning $ApplicationID\n\n        var full_result string\n        var i int\n\n        var all_blocks string\n        var all_contracts string\n        var all_data string\n        var all_languages string\n        var all_menus string\n        var all_pages string\n        var all_parameters string\n        var all_tables string\n\n        //=====================================================================================================\n        //------------------------------------Export pages-----------------------------------------------------\n        var string_for_menu string\n\n        i = 0\n        var pages_array array\n        pages_array = DBFind(\"pages\").Limit(250).Where(\"app_id=?\", $ApplicationID)\n        while i < Len(pages_array) {\n            var page_map map\n            page_map = pages_array[i]\n\n            var page_name string\n            var page_value string\n            var page_conditions string\n            var page_menu string\n\n            page_name = ReplaceValue(Str(page_map[\"name\"]))\n            page_value = ReplaceValue(Str(page_map[\"value\"]))\n            page_conditions = ReplaceValue(Str(page_map[\"conditions\"]))\n            page_menu = ReplaceValue(Str(page_map[\"menu\"]))\n\n            if (Size(all_pages) > 0) {\n                all_pages = all_pages + \",\\r\\n\"\n            } else {\n                all_pages = all_pages + \"\\r\\n\"\n            }\n\n            if (Size(string_for_menu) > 0) {\n                string_for_menu = string_for_menu + \",\"\n            }\n            string_for_menu = string_for_menu + Sprintf(\"'%v'\", page_menu)           \n\n            all_pages = all_pages + AddPage(page_name, page_value, page_conditions, page_menu)\n            i = i + 1\n        }\n\n        //=====================================================================================================\n        //------------------------------------Export menus-----------------------------------------------------\n        if (Size(string_for_menu) > 0) {\n\n            var where_for_menu string\n            where_for_menu = Sprintf(\"name in (%v)\", string_for_menu)\n            //warning where_for_menu \n\n            i = 0\n            var menus_array array\n            menus_array = DBFind(\"menu\").Limit(250).Where(where_for_menu)\n            while i < Len(menus_array) {\n                var menu_map map\n                menu_map = menus_array[i]\n\n                var menu_name string\n                var menu_value string\n                var menu_conditions string\n\n                menu_name = ReplaceValue(Str(menu_map[\"name\"]))\n                menu_value = ReplaceValue(Str(menu_map[\"value\"]))\n                menu_conditions = ReplaceValue(Str(menu_map[\"conditions\"]))\n\n                if (Size(all_menus) > 0) {\n                    all_menus = all_menus + \",\\r\\n\"\n                } else {\n                    all_menus = all_menus + \"\\r\\n\"\n                }\n\n                all_menus = all_menus + AddMenu(menu_name, menu_value, menu_conditions)\n                i = i + 1\n            }\n\n        }\n\n        //=====================================================================================================\n        //------------------------------------Export contracts-------------------------------------------------\n\n        i = 0\n        var contracts_array array\n        contracts_array = DBFind(\"contracts\").Limit(250).Where(\"app_id=?\", $ApplicationID)\n        while i < Len(contracts_array) {\n            var contract_map map\n            contract_map = contracts_array[i]\n\n            var contract_name string\n            var contract_value string\n            var contract_conditions string\n\n            contract_name = ReplaceValue(Str(contract_map[\"name\"]))\n            contract_value = ReplaceValue(Str(contract_map[\"value\"]))\n            contract_conditions = ReplaceValue(Str(contract_map[\"conditions\"]))\n\n            if (Size(all_contracts) > 0) {\n                all_contracts = all_contracts + \",\\r\\n\"\n            } else {\n                all_contracts = all_contracts + \"\\r\\n\"\n            }\n\n            all_contracts = all_contracts + AddContract(contract_name, contract_value, contract_conditions)\n            i = i + 1\n        }\n\n        //=====================================================================================================\n        //------------------------------------Export blocks----------------------------------------------------\n\n        i = 0\n        var blocks_array array\n        blocks_array = DBFind(\"blocks\").Limit(250).Where(\"app_id=?\", $ApplicationID)\n        while i < Len(blocks_array) {\n            var block_map map\n            block_map = blocks_array[i]\n\n            var block_name string\n            var block_value string\n            var block_conditions string\n\n            block_name = ReplaceValue(Str(block_map[\"name\"]))\n            block_value = ReplaceValue(Str(block_map[\"value\"]))\n            block_conditions = ReplaceValue(Str(block_map[\"conditions\"]))\n\n            if (Size(all_blocks) > 0) {\n                all_blocks = all_blocks + \",\\r\\n\"\n            } else {\n                all_blocks = all_blocks + \"\\r\\n\"\n            }\n\n            all_blocks = all_blocks + AddBlock(block_name, block_value, block_conditions)\n            i = i + 1\n        }\n\n        //=====================================================================================================\n        //------------------------------------Export languages-------------------------------------------------\n\n        i = 0\n        var languages_array array\n        languages_array = DBFind(\"languages\").Limit(250).Where(\"app_id=?\", $ApplicationID)\n        while i < Len(languages_array) {\n            var language_map map\n            language_map = languages_array[i]\n\n            var language_name string\n            var language_conditions string\n            var language_trans string\n\n            language_name = ReplaceValue(Str(language_map[\"name\"]))\n            language_conditions = ReplaceValue(Str(language_map[\"conditions\"]))\n            language_trans = ReplaceValue(Str(language_map[\"res\"]))\n\n            if (Size(all_languages) > 0) {\n                all_languages = all_languages + \",\\r\\n\"\n            } else {\n                all_languages = all_languages + \"\\r\\n\"\n            }\n\n            all_languages = all_languages + AddLanguage(language_name, language_conditions, language_trans)\n            i = i + 1\n        }\n\n        //=====================================================================================================\n        //------------------------------------Export params----------------------------------------------------\n\n        i = 0\n        var parameters_array array\n        parameters_array = DBFind(\"app_param\").Limit(250).Where(\"app_id=?\", $ApplicationID)\n        while i < Len(parameters_array) {\n            var parameter_map map\n            parameter_map = parameters_array[i]\n\n            var parameter_name string\n            var parameter_value string\n            var parameter_conditions string\n\n            parameter_name = ReplaceValue(Str(parameter_map[\"name\"]))\n            parameter_value = ReplaceValue(Str(parameter_map[\"value\"]))\n            parameter_conditions = ReplaceValue(Str(parameter_map[\"conditions\"]))\n\n            if (Size(all_parameters) > 0) {\n                all_parameters = all_parameters + \",\\r\\n\"\n            } else {\n                all_parameters = all_parameters + \"\\r\\n\"\n            }\n\n            all_parameters = all_parameters + AddParameter(parameter_name, parameter_value, parameter_conditions)\n            i = i + 1\n        }\n\n        //=====================================================================================================\n        //------------------------------------Export tables----------------------------------------------------\n\n        i = 0\n        var tables_array array\n        tables_array = DBFind(\"tables\").Limit(250).Where(\"app_id=?\", $ApplicationID)\n        while i < Len(tables_array) {\n            var table_map map\n            table_map = tables_array[i]\n\n            var table_name string\n            var table_columns string\n            var table_permissions string\n\n            table_name = Str(table_map[\"name\"])\n            table_columns = Str(table_map[\"columns\"])\n\t\t\ttable_permissions = Str(table_map[\"permissions\"])\n\n\t\t\ttable_columns = AddTypeForColumns(table_name, table_columns)\n            \n\t\t\ttable_name = ReplaceValue(table_name)\n\t\t\ttable_columns = ReplaceValue(table_columns)\n\t\t\ttable_permissions = ReplaceValue(table_permissions)\n\n            if (Size(all_tables) > 0) {\n                all_tables = all_tables + \",\\r\\n\"\n            } else {\n                all_tables = all_tables + \"\\r\\n\"\n            }\n\n            all_tables = all_tables + AddTable(table_name, table_columns, table_permissions)\n            i = i + 1\n        }\n\n        //=====================================================================================================\n\n        full_result = AssignAll($ApplicationName, all_blocks, all_contracts, all_data, all_languages, all_menus, all_pages, all_parameters, all_tables)\n        full_result = full_result\n\n        $binaries_id = DBFind(\"binaries\").Where(\"member_id=$ and name=$\", $key_id, \"export\").One(\"id\")\n        if !$binaries_id {\n            DBInsert(\"binaries\", \"member_id,name,data\", $key_id, \"export\", full_result)\n        } else {\n            DBUpdate(\"binaries\", Int($binaries_id), \"data\", full_result)\n        }\n        $binaries2_id = DBFind(\"binaries2\").Where(\"member_id=$ and name=$\", $key_id, \"export\").One(\"id\")\n        if !$binaries2_id {\n            DBInsert(\"binaries2\", \"member_id,name,data\", $key_id, \"export\", full_result)\n        } else {\n            DBUpdate(\"binaries2\", Int($binaries2_id), \"data\", full_result)\n        }\n    }\n}",
            "Conditions": "true"
        },
        {
            "Name": "Export_NewApp",
            "Value": "contract Export_NewApp {\n    data {\n        app_id int\n    }\n\n    conditions {\n        $app_map = DBFind(\"applications\").Columns(\"id,name\").Where(\"id=$\", $app_id).Row()\n        if !$app_map{\n            warning \"Application not found\"\n        }\n    }\n\n    action {\n\n        //=====================================================================================================\n        //------------------------------------Menu search------------------------------------------------------\n        var i int\n        var pages_array array\n        var menu_name_array array\n\t\tvar menu_id_array array\n\n        i = 0\n        var pages_ret array\n        pages_ret = DBFind(\"pages\").Where(\"app_id=?\", $app_id)\n        while i < Len(pages_ret) {\n            var page_map map\n            page_map = pages_ret[i]\n\n            pages_array[Len(pages_array)] = Sprintf(\"'%v'\", Str(page_map[\"menu\"]))\n            i = i + 1\n        }\n\n\n        if (Len(pages_array) > 0) {\n            var where_for_menu string\n            where_for_menu = Sprintf(\"name in (%v)\", Join(pages_array, \",\"))\n\n            i = 0\n            var menu_ret array\n            menu_ret = DBFind(\"menu\").Where(where_for_menu)\n            while i < Len(menu_ret) {\n                var menu_map map\n                menu_map = menu_ret[i]\n\n                menu_name_array[Len(menu_name_array)] = Str(menu_map[\"name\"])\n\t\t\t\tmenu_id_array[Len(menu_id_array)] = Str(menu_map[\"id\"])\n                i = i + 1\n            }\n        }\n\n        //=====================================================================================================\n        //------------------------------------Creating settings------------------------------------------------\n    \n        var value map\n        value[\"app_id\"] = Str($app_id)\n        value[\"app_name\"] = Str($app_map[\"name\"])\n\t\t\n\t\tif (Len(menu_name_array) > 0){\n\t\t\tvalue[\"menu_id\"] = Str(Join(menu_id_array, \", \"))\n\t\t\tvalue[\"menu_name\"] = Str(Join(menu_name_array, \", \"))\n\t\t\tvalue[\"count_menu\"] = Str(Len(menu_name_array))\n\t\t} else {\n\t\t\tvalue[\"menu_id\"] = \"0\"\n\t\t\tvalue[\"menu_name\"] = \"\"\n\t\t\tvalue[\"count_menu\"] = \"0\"\n\t\t}\n\n        $buffer_id = DBFind(\"buffer_data\").Where(\"member_id=$ and key=$\", $key_id, \"export\").One(\"id\")\n        if !$buffer_id {\n            DBInsert(\"buffer_data\", \"member_id,key,value\", $key_id, \"export\", value)\n        } else {\n            DBUpdate(\"buffer_data\", Int($buffer_id), \"value\", value)\n        }\n    }\n}",
            "Conditions": "true"
        },
        {
            "Name": "Import_CreateApp",
            "Value": "contract Import_CreateApp {\n    data {}\n\n    conditions {\n        var app_map map\n        app_map = DBFind(\"buffer_data\").Columns(\"value->app_name\").Where(\"key='import_info' and member_id=$\", $key_id).Row()\n        if !app_map{\n           warning \"Application not found\"\n        }\n        $app_name = Str(app_map[\"value.app_name\"])\n    }\n\n    action {\n        var app_id int\n        app_id = DBFind(\"applications\").Columns(\"id\").Where(\"name=$\", $app_name).One(\"id\")\n\n        if !app_id {\n            DBInsert(\"applications\", \"name\", $app_name)\n        }        \n    }\n}",
            "Conditions": "true"
        },
        {
            "Name": "Import_New",
            "Value": "contract Import_New {\n\tdata {\n        Type string \n        Name string \"optional\" \n        Value string \"optional\" \n        Conditions string \"optional\" \n        Menu string \"optional\" \n        Trans string \"optional\" \n        Columns string \"optional\" \n        Permissions string \"optional\" \n    }\n\n    conditions {\n\t\tPrintln(\"Import: \" + $Name)\n        $ApplicationId = 0\n\n        var app_map map\n        app_map = DBFind(\"buffer_data\").Columns(\"value->app_name\").Where(\"key='import_info' and member_id=$\", $key_id).Row()\n        if app_map{\n            var app_id int\n            app_id = DBFind(\"applications\").Columns(\"id\").Where(\"name=$\", Str(app_map[\"value.app_name\"])).One(\"id\")\n\n            if app_id {\n                $ApplicationId = app_id\n            }\n        }\n    }\n\n    action {\n        var idata map\n\n        if $Type == \"page\" {\n            $page_id = DBFind(\"pages\").Where(\"name=?\", $Name).One(\"id\")\n            if $page_id {\n                idata[\"Id\"] = Int($page_id)\n                idata[\"Value\"] = $Value\n                idata[\"Menu\"] = $Menu\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"EditPage\", idata)\n            } else {\n                idata[\"ApplicationId\"] = $ApplicationId\n                idata[\"Name\"] = $Name\n                idata[\"Value\"] = $Value\n                idata[\"Menu\"] = $Menu\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"NewPage\", idata)\n            }\n        }\n        if $Type == \"block\" {\n            $block_id = DBFind(\"blocks\").Where(\"name=?\", $Name).One(\"id\")\n            if $block_id {\n                idata[\"Id\"] = Int($block_id)\n                idata[\"Value\"] = $Value\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"EditBlock\", idata)\n            } else {\n                idata[\"ApplicationId\"] = $ApplicationId\n                idata[\"Name\"] = $Name\n                idata[\"Value\"] = $Value\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"NewBlock\", idata)\n            }\n        }\n        if $Type == \"menu\" {\n            $menu = DBFind(\"menu\").Where(\"name=?\", $Name).Row()\n            if $menu {\n                idata[\"Id\"] = Int($menu[\"id\"])\n                idata[\"Value\"] = $menu[\"value\"] + \"\\n\" + $Value\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"EditMenu\", idata)\n            } else {\n                idata[\"Name\"] = $Name\n                idata[\"Value\"] = $Value\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"NewMenu\", idata)\n            }\n        }\n        if $Type == \"parameter\" {\n            $param_id = DBFind(\"app_param\").Where(\"name=?\", $Name).One(\"id\")\n            if $param_id {\n                idata[\"Id\"] = Int($param_id)\n                idata[\"Value\"] = $Value\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"EditAppParam\", idata)\n            } else {\n                idata[\"App\"] = $ApplicationId\n                idata[\"Name\"] = $Name\n                idata[\"Value\"] = $Value\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"NewAppParam\", idata)\n            }\n        }\n        if $Type == \"language\" {\n            $lang_id = DBFind(\"languages\").Where(\"name=?\", $Name).One(\"id\")\n            if $lang_id {\n                idata[\"Name\"] = $Name\n                idata[\"Trans\"] = $Trans\n                CallContract(\"EditLang\", idata)\n            } else {\n                idata[\"ApplicationId\"] = $ApplicationId\n                idata[\"Name\"] = $Name\n                idata[\"Trans\"] = $Trans\n                CallContract(\"NewLang\", idata)\n            }\n        }\n        if $Type == \"contract\" {\n            $contract_id = GetContractByName($Name)\n            if $contract_id > 0 {\n                idata[\"Id\"] = $contract_id\n                idata[\"Value\"] = $Value\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"EditContract\", idata)\n            } else {\n                idata[\"ApplicationId\"] = $ApplicationId\n                idata[\"Value\"] = $Value\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"NewContract\", idata)\n            }\n        }\n        if $Type == \"table\" {\n            $table_id = DBFind(\"tables\").Where(\"name=?\", $Name).One(\"id\")\n            if $table_id {\n                //nothing\n            } else {\n                idata[\"ApplicationId\"] = $ApplicationId\n                idata[\"Name\"] = $Name\n                idata[\"Columns\"] = $Columns\n                idata[\"Permissions\"] = $Permissions\n                CallContract(\"NewTable\", idata)\n            }\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Import_Upload",
            "Value": "contract Import_Upload {\n\tdata {\n        input_file string\n    }\n\n    conditions {\n    }\n\n    action {\n        var encoded, decoded, prefix string\n        encoded = Replace($input_file, \"data:application/json;base64,\", \"\")\n        encoded = Replace(encoded, \"data:;base64,\", \"\")\n        decoded = DecodeBase64(encoded)\n\n        var json map\n        json = JSONToMap(decoded)\n        var arr_data array\n        arr_data = json[\"data\"]\n\n        var pages_arr, blocks_arr, menu_arr, parameters_arr, languages_arr, contracts_arr, tables_arr array\n\n        var i int\n        while i<Len(arr_data){\n            var tmp_object map\n            tmp_object = arr_data[i]\n\n            if (tmp_object[\"Type\"] == \"page\"){\n                pages_arr[Len(pages_arr)] = Str(tmp_object[\"Name\"])\n            }\n            if (tmp_object[\"Type\"] == \"block\"){\n                blocks_arr[Len(blocks_arr)] = Str(tmp_object[\"Name\"])\n            }\n            if (tmp_object[\"Type\"] == \"menu\"){\n                menu_arr[Len(menu_arr)] = Str(tmp_object[\"Name\"])\n            }\n            if (tmp_object[\"Type\"] == \"parameter\"){\n                parameters_arr[Len(parameters_arr)] = Str(tmp_object[\"Name\"])\n            }\n            if (tmp_object[\"Type\"] == \"language\"){\n                languages_arr[Len(languages_arr)] = Str(tmp_object[\"Name\"])\n            }\n            if (tmp_object[\"Type\"] == \"contract\"){\n                contracts_arr[Len(contracts_arr)] = Str(tmp_object[\"Name\"])\n            }\n            if (tmp_object[\"Type\"] == \"table\"){\n                tables_arr[Len(tables_arr)] = Str(tmp_object[\"Name\"])\n            }\n\n            i = i + 1\n        }\n\n        var info_map map\n\t\tinfo_map[\"app_name\"] = json[\"name\"]\n        info_map[\"pages\"] = Join(pages_arr, \", \")\n        info_map[\"pages_count\"] = Len(pages_arr)\n        info_map[\"blocks\"] = Join(blocks_arr, \", \")\n        info_map[\"blocks_count\"] = Len(blocks_arr)\n        info_map[\"menu\"] = Join(menu_arr, \", \")\n        info_map[\"menu_count\"] = Len(menu_arr)\n        info_map[\"parameters\"] = Join(parameters_arr, \", \")\n        info_map[\"parameters_count\"] = Len(parameters_arr)\n        info_map[\"languages\"] = Join(languages_arr, \", \")\n        info_map[\"languages_count\"] = Len(languages_arr)\n        info_map[\"contracts\"] = Join(contracts_arr, \", \")\n        info_map[\"contracts_count\"] = Len(contracts_arr)\n        info_map[\"tables\"] = Join(tables_arr, \", \")\n        info_map[\"tables_count\"] = Len(tables_arr)\n\n        $import_id = DBFind(\"buffer_data\").Where(\"member_id=$ and key=$\", $key_id, \"import\").One(\"id\")\n        if !$import_id {\n            DBInsert(\"buffer_data\", \"member_id,key,value\", $key_id, \"import\", decoded)\n        } else {\n            DBUpdate(\"buffer_data\", Int($import_id), \"value\", decoded)\n        }\n\n        $info_id = DBFind(\"buffer_data\").Where(\"member_id=$ and key=$\", $key_id, \"import_info\").One(\"id\")\n        if !$info_id {\n            DBInsert(\"buffer_data\", \"member_id,key,value\", $key_id, \"import_info\", info_map)\n        } else {\n            DBUpdate(\"buffer_data\", Int($info_id), \"value\", info_map)\n        }\n\n    }\n}",
            "Conditions": "true"
        }
    ],
    "data": [],
    "languages": [],
    "menus": [
        {
            "Name": "admin_menu",
            "Value": "MenuItem(Title:Import, Page:import_upload, Icon:\"icon-cloud-upload\")\nMenuItem(Title:Export, Page:export_apps, Icon:\"icon-cloud-download\")",
            "Conditions": "true"
        }
    ],
    "pages": [
        {
            "Name": "export_apps",
            "Value": "Div(content-wrapper){\n\n\tSetTitle(Export)\n\tDiv(Class: breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"Select the application which do you want to export and proceed to the payload generation process.\")\n\t}\n\n\tInclude(export_link)\n\n\tDBFind(Name: applications, Source: src_apps).Columns(\"id,name\").Custom(actions){\n        Div(Class: text-right){\n            Button(Body: \"Load\", Class: btn btn-default, Contract: Export_NewApp, Params: \"app_id=#id#\", Page: export_apps)\n        }\n    }.Where(\"deleted=0\").Order(\"name\")\n\n    Div(row df f-valign){\n        Div(col-md-9 col-md-offset-0){\n\t\t\tTable(src_apps, \"Name=name,=actions\").Style(\n            tbody > tr:nth-of-type(odd) {\n                background-color: #fafbfc; \n            } \n            tbody > tr > td {\n                word-break: break-all;\n                padding: 8px 20px !important;\n                font-weight: 400;\n                font-size: 13px;\n                color: #666;\n                border-top: 1px solid #eee;\n                vertical-align: middle;\n            } \n            tr  > *:first-child {\n                padding-left:20px;\n            } \n            tr  > *:last-child {\n                text-align:right; \n                padding-right:20px;\n                width: 300px;\n            }\n            thead {\n                background-color: #eee;\n            })\n        }\n        Div(col-md-3 col-md-offset-0){\n\t\t\tInclude(export_info)\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "export_download",
            "Value": "SetTitle(Export)\nDiv(content-wrapper){\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"Payload was formed. You can download it now\")\n    }\n    Div(row){\n        DBFind(Name: binaries, Source: src_binaries).Where(\"name='export' and member_id=#key_id#\")\n        Div(col-md-12){\n            Div(table-responsive){\n                Table(Source: src_binaries, \"=app_id,=data\")\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "export_resources",
            "Value": "Div(content-wrapper){\n \n\tSetTitle(Export)\n\tDiv(Class: breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"Select the application which do you want to export and proceed to the payload generation process.\")\n\t}\n\n\tInclude(export_link)\n\n    DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\n\n    If(#buffer_value_app_id# > 0){\n        If(#res_type#==\"pages\"){\n            DBFind(pages, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\n        }\n        If(#res_type#==\"blocks\"){\n            DBFind(blocks, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\n        }\n        If(#res_type#==\"menu\"){\n            DBFind(menu, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"id in (#buffer_value_menu_id#)\").Order(\"id\")\n        }\n        If(#res_type#==\"parameters\"){\n            DBFind(app_param, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\n        }\n        If(#res_type#==\"languages\"){\n            DBFind(languages, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\n        }\n        If(#res_type#==\"contracts\"){\n            DBFind(contracts, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\n        }\n        If(#res_type#==\"tables\"){\n            DBFind(tables, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\n        }\n    }\n\n    Div(row){\n        Div(col-md-9 col-md-offset-0){\n            Table(src, \"Key=id,Name=name,=cbox\").Style(\n            tbody > tr:nth-of-type(odd) {\n                background-color: #fafbfc; \n            } \n            tbody > tr > td {\n                word-break: break-all;\n                padding: 8px 20px !important;\n                font-weight: 400;\n                font-size: 13px;\n                color: #666;\n                border-top: 1px solid #eee;\n                vertical-align: middle;\n            } \n            tr  > *:first-child {\n                padding-left:20px;\n                width: 100px;\n            } \n            tr  > *:last-child {\n                text-align:right; \n                padding-right:20px;\n                width: 50px;\n            }\n            thead {\n                background-color: #eee;\n            })\n        }\n        Div(col-md-3 col-md-offset-0){\n\t\t\tInclude(export_info)\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "import_app",
            "Value": "Div(content-wrapper){\n\n    DBFind(Name: buffer_data, Source: src_buffer).Columns(\"id,value->name,value->data\").Where(\"key='import' and member_id=#key_id#\").Vars(prefix)\n    DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_name,value->pages,value->pages_count,value->blocks,value->blocks_count,value->menu,value->menu_count,value->parameters,value->parameters_count,value->languages,value->languages_count,value->contracts,value->contracts_count,value->tables,value->tables_count\").Where(\"key='import_info' and member_id=#key_id#\").Vars(info)\n\n\tSetTitle(\"Import - #info_value_app_name#\")  \n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"Select payload that you want to import\")\n\t}\n\n    Div(panel panel-primary){\n        Div(list-group-item){\n            Div(row){\n                Div(col-md-10 mc-sm text-left){\n                    Span(Class: text-bold, Body: \"Pages\")\n                }\n                Div(col-md-2 mc-sm text-right){\n                    If(#info_value_pages_count# > 0){\n                        Span(Class: text-bold, Body: \"(#info_value_pages_count#)\")\n                    }.Else{\n                        Span(Class: text-muted, Body: \"(0)\")   \n                    }\n                } \n            }\n            Div(row){\n                Div(col-md-12 mc-sm text-left){\n                    If(#info_value_pages_count# > 0){\n                        Span(Class: h6, Body: \"#info_value_pages#\")\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(row){\n                Div(col-md-10 mc-sm text-left){\n                    Span(Class: text-bold, Body: \"Blocks\")\n                }\n                Div(col-md-2 mc-sm text-right){\n                    If(#info_value_blocks_count# > 0){\n                        Span(Class: text-bold, Body: \"(#info_value_blocks_count#)\")\n                    }.Else{\n                        Span(Class: text-muted, Body: \"(0)\")  \n                    }\n                } \n            }\n            Div(row){\n                Div(col-md-12 mc-sm text-left){\n                    If(#info_value_blocks_count# > 0){\n                        Span(Class: h6, Body: \"#info_value_blocks#\")\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(row df f-valign){\n                Div(col-md-10 mc-sm text-left){\n                    Span(Class: text-bold, Body: \"Menu\")\n                }\n                Div(col-md-2 mc-sm text-right){\n                    If(#info_value_menu_count# > 0){\n                        Span(Class: text-bold, Body: \"(#info_value_menu_count#)\")\n                    }.Else{\n                        Span(Class: text-muted, Body: \"(0)\") \n                    }\n                } \n            }\n            Div(row df f-valign){\n                Div(col-md-12 mc-sm text-left){\n                    If(#info_value_menu_count# > 0){\n                        Span(Class: h6, Body:\"#info_value_menu#\")\n                    }.Else{\n                        Span(Class: text-muted h6, Body:\"Nothing selected\")\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(row){\n                Div(col-md-10 mc-sm text-left){\n                    Span(Class: text-bold, Body: \"Parameters\")\n                }\n                Div(col-md-2 mc-sm text-right){\n                    If(#info_value_parameters_count# > 0){\n                        Span(Class: text-bold, Body: \"(#info_value_parameters_count#)\")\n                    }.Else{\n                        Span(Class: text-muted, Body: \"(0)\")  \n                    }\n                } \n            }\n            Div(row){\n                Div(col-md-12 mc-sm text-left){\n                    If(#info_value_parameters_count# > 0){\n                        Span(Class: h6, Body: \"#info_value_parameters#\")\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(row){\n                Div(col-md-10 mc-sm text-left){\n                    Span(Class: text-bold, Body: \"Language resources\")\n                }\n                Div(col-md-2 mc-sm text-right){\n                    If(#info_value_languages_count# > 0){\n                        Span(Class: text-bold, Body: \"(#info_value_languages_count#)\")\n                    }.Else{\n                        Span(Class: text-muted, Body: \"(0)\")  \n                    }\n                } \n            }\n            Div(row){\n                Div(col-md-12 mc-sm text-left){\n                    If(#info_value_languages_count# > 0){\n                        Span(Class: h6, Body: \"#info_value_languages#\")\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(row){\n                Div(col-md-10 mc-sm text-left){\n                    Span(Class: text-bold, Body: \"Contracts\")\n                }\n                Div(col-md-2 mc-sm text-right){\n                    If(#info_value_contracts_count# > 0){\n                        Span(Class: text-bold, Body: \"(#info_value_contracts_count#)\")\n                    }.Else{\n                        Span(Class: text-muted, Body: \"(0)\")  \n                    }\n                } \n            }\n            Div(row){\n                Div(col-md-12 mc-sm text-left){\n                    If(#info_value_contracts_count# > 0){\n                        Span(Class: h6, Body: \"#info_value_contracts#\")\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(row){\n                Div(col-md-10 mc-sm text-left){\n                    Span(Class: text-bold, Body: \"Tables\")\n                }\n                Div(col-md-2 mc-sm text-right){\n                    If(#info_value_tables_count# > 0){\n                        Span(Class: text-bold, Body: \"(#info_value_tables_count#)\")\n                    }.Else{\n                        Span(Class: text-muted, Body: \"(0)\")  \n                    }\n                } \n            }\n            Div(row){\n                Div(col-md-12 mc-sm text-left){\n                    If(#info_value_tables_count# > 0){\n                        Span(Class: h6, Body: \"#info_value_tables#\")\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n                }\n            }\n        }\n        If(#prefix_id# > 0){\n            Div(list-group-item text-right){\n                Button(Body: \"Import\", Class: btn btn-primary).CompositeContract(\"Import_CreateApp\", `[{}]`).CompositeContract(\"Import\", `#prefix_value_data#`)\n            }\n        }\n    }\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "import_upload",
            "Value": "Div(content-wrapper){\n\tSetTitle(Import)  \n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"Select payload that you want to import\")\n\t}\n\tDiv(panel panel-primary){\n\t\tForm(){ \n\t\t\tDiv(list-group-item){\n\t\t\t\tInput(Name: input_file, Type: file)\n\t\t\t}\n\t\t\tDiv(list-group-item text-right){\n\t\t\t\tButton(Body: Load, Class: btn btn-primary, Contract: Import_Upload, Page: import_app)\n\t\t\t}\n\t\t}\n\t}\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        }
    ],
    "parameters": [],
    "tables": [
        {
            "Name": "binaries2",
            "Columns": "[{\"name\":\"hash\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"app_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"data\",\"type\":\"text\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "buffer_data",
            "Columns": "[{\"name\":\"key\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"value\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}