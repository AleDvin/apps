{
    "name": "System",
    "data": [
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#sort#==1){\n\tSetVar(sort_name, \"id asc\")\n}.ElseIf(#sort#==2){\n\tSetVar(sort_name, \"id desc\")\n}.ElseIf(#sort#==3){\n\tSetVar(sort_name, \"name asc\")\n}.ElseIf(#sort#==4){\n\tSetVar(sort_name, \"name desc\")\n}.Else{\n\tSetVar(sort, \"1\")\n\tSetVar(sort_name, \"id asc\") \n}\n\nIf(Or(#width#==12,#width#==6,#width#==4)){\n}.Else{\n\tSetVar(width, \"12\")\n}\n\nDiv(clearfix){\n\tDiv(pull-left){\n\t\tIf(#width#==12){\n\t\t\tSpan(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=12,current_page=#current_page#,this_app_id=#this_app_id#\")).Style(margin-left:10px;)\n\t\t}.Else{\n\t\t\tSpan(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=12,current_page=#current_page#,this_app_id=#this_app_id#\")).Style(margin-left:10px;)\n\t\t}\n\t\tIf(#width#==6){\n\t\t\tSpan(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=6,current_page=#current_page#,this_app_id=#this_app_id#\")).Style(margin-left:5px;)\n\t\t}.Else{\n\t\t\tSpan(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=6,current_page=#current_page#,this_app_id=#this_app_id#\")).Style(margin-left:5px;)\n\t\t}\n\t\tIf(#width#==4){\n\t\t\tSpan(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=4,current_page=#current_page#,this_app_id=#this_app_id#\")).Style(margin-left:5px;)\n\t\t}.Else{\n\t\t\tSpan(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=4,current_page=#current_page#,this_app_id=#this_app_id#\")).Style(margin-left:5px;)\n\t\t}\n\t}\n\tDiv(pull-right){\n\t\tIf(#sort#==1){\n\t\t\tSpan(Button(Body: Em(Class: fa fa-long-arrow-down) Sort by ID, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=2,width=#width#,current_page=#current_page#,this_app_id=#this_app_id#\")).Style(margin-right:5px;)\n\t\t}.ElseIf(#sort#==2){\n\t\t\tSpan(Button(Body: Em(Class: fa fa-long-arrow-up) Sort by ID, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=1,width=#width#,current_page=#current_page#,this_app_id=#this_app_id#\")).Style(margin-right:5px;)\n\t\t}.Else{\n\t\t\tSpan(Button(Body: Sort by ID, Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=1,width=#width#,current_page=#current_page#,this_app_id=#this_app_id#\")).Style(margin-right:5px;)\n\t\t}\n\n\t\tIf(#sort#==3){\n\t\t\tSpan(Button(Body: Em(Class: fa fa-long-arrow-down) Sort by NAME, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=4,width=#width#,current_page=#current_page#,this_app_id=#this_app_id#\")).Style(margin-right:10px;)\n\t\t}.ElseIf(#sort#==4){\n\t\t\tSpan(Button(Body: Em(Class: fa fa-long-arrow-up) Sort by NAME, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=3,width=#width#,current_page=#current_page#,this_app_id=#this_app_id#\")).Style(margin-right:10px;)\n\t\t}.Else{\n\t\t\tSpan(Button(Body: Sort by NAME, Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=3,width=#width#,current_page=#current_page#,this_app_id=#this_app_id#\")).Style(margin-right:10px;)\n\t\t}\n\t}\n}",
            "Name": "admin_link",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(And(GetVar(this_page),#this_app_id#>0)){\n    DBFind(applications,apps)\n    Form(row form-group){\n        Div(col-sm-4){\n            Select(Name:AppId, Source:apps, NameColumn: name, ValueColumn: id, Value: #this_app_id#)\n        }\n        Div(col-sm-2){\n            Button(Body:go, Page:#this_page#, Class:btn btn-default, PageParams: \"this_app_id=Val(AppId)\")\n        }\n    }\n}",
            "Name": "apps_select",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\n\nIf(#buffer_value_app_id# > 0){\n    DBFind(pages, src_pages).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_pages)\n    DBFind(blocks, src_blocks).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_blocks)\n    DBFind(app_params, src_parameters).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_parameters)\n    DBFind(languages, src_languages).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_languages)\n    DBFind(contracts, src_contracts).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_contracts)\n    DBFind(tables, src_tables).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_tables)\n}\n\nDiv(panel panel-primary){\n    If(#buffer_value_app_id# > 0){\n\t    Div(panel-heading, \"Export - #buffer_value_app_name#\")\n    }.Else{\n        Div(panel-heading, \"Export\") \n    }\n\tForm(){\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Pages\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_pages# > 0){\n                        Span(\"(#count_pages#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_pages# > 0){\n                        ForList(src_pages){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Blocks\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_blocks# > 0){\n                        Span(\"(#count_blocks#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_blocks# > 0){\n                        ForList(src_blocks){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n\t\t\t\t\tSpan(\"Menu\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#buffer_value_app_id# > 0){\n                        Span(\"(#buffer_value_count_menu#)\")\n                    }.Else{\n                        Span(\"(0)\")\n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(And(#buffer_value_app_id#>0,#buffer_value_count_menu#>0)){\n                        Span(Class: text-muted h6, Body:\"#buffer_value_menu_name#\")\n                    }.Else{\n                        Span(Class: text-muted h6, Body:\"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Parameters\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_parameters# > 0){\n                        Span(\"(#count_parameters#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_parameters# > 0){\n                        ForList(src_parameters){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Language resources\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_languages# > 0){\n                        Span(\"(#count_languages#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_languages# > 0){\n                        ForList(src_languages){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Contracts\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_contracts# > 0){\n                        Span(\"(#count_contracts#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_contracts# > 0){\n                        ForList(src_contracts){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Tables\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_tables# > 0){\n                        Span(\"(#count_tables#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_tables# > 0){\n                        ForList(src_tables){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n        If(#buffer_value_app_id# > 0){\n            Div(panel-footer clearfix){\n                Div(pull-left){\n                    Button(Body: Em(Class: fa fa-refresh), Class: btn btn-default, Contract: Export_NewApp, Params: \"app_id=#buffer_value_app_id#\", Page: export_resources)\n                }\n                Div(pull-right){\n                    Button(Body: Export, Class: btn btn-primary, Page: export_download, Contract: Export)\n                }\n            }\n        }\n\t}\n}",
            "Name": "export_info",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(And(#res_type#!=\"pages\",#res_type#!=\"blocks\",#res_type#!=\"menu\",#res_type#!=\"parameters\",#res_type#!=\"languages\",#res_type#!=\"contracts\",#res_type#!=\"tables\")){\n    SetVar(res_type, \"pages\")\n}\n\nDiv(breadcrumb){\n    If(#res_type#==\"pages\"){\n        Span(Class: text-muted, Body: \"Pages\")\n    }.Else{\n        LinkPage(Body: \"Pages\", Page: export_resources,, \"res_type=pages\")\n    }\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"blocks\"){\n        Span(Class: text-muted, Body: \"Blocks\")\n    }.Else{\n        LinkPage(Body: \"Blocks\", Page: export_resources,, \"res_type=blocks\")\n    }\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"menu\"){\n        Span(Class: text-muted, Body: \"Menu\")\n    }.Else{\n       LinkPage(Body: \"Menu\", Page: export_resources,, \"res_type=menu\")\n    }\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"parameters\"){\n        Span(Class: text-muted, Body: \"Application parameters\")\n    }.Else{\n       LinkPage(Body: \"Application parameters\", Page: export_resources,, \"res_type=parameters\")\n    }\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"languages\"){\n        Span(Class: text-muted, Body: \"Language resources\")\n    }.Else{\n       LinkPage(Body: \"Language resources\", Page: export_resources,, \"res_type=languages\")\n    }\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"contracts\"){\n        Span(Class: text-muted, Body: \"Contracts\")\n    }.Else{\n       LinkPage(Body: \"Contracts\", Page: export_resources,, \"res_type=contracts\")\n    } \n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"tables\"){\n        Span(Class: text-muted, Body: \"Tables\")\n    }.Else{\n       LinkPage(Body: \"Tables\", Page: export_resources,, \"res_type=tables\")\n    }\n}",
            "Name": "export_link",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(#pager_table#, src_records).Where(#pager_where#).Count(records_count)\n\t\nSetVar(previous_page, Calculate(Exp: #current_page# - 1, Type: int))\nSetVar(next_page, Calculate(Exp: #current_page# + 1, Type: int))\nSetVar(count_div_limit_int, Calculate(Exp: (#records_count# / #pager_limit#), Type: int))\nSetVar(remainder, Calculate(Exp: (#records_count# / #pager_limit#) - #count_div_limit_int#, Type: float))\n\nIf(#remainder# != 0){\n    SetVar(last_page, Calculate(Exp: #count_div_limit_int# + 1, Type: int))\n}.Else{\n    SetVar(last_page, #count_div_limit_int#)\n}\n\nSetVar(last_page_plus_one, Calculate(Exp: #last_page# + 1, Type: int))\nSetVar(delta_last_page, Calculate(Exp: #last_page# - #current_page#))\nSetVar(range_l, Calculate(Exp: #current_page# - 4, Type: int))\nSetVar(range_r, Calculate(Exp: #current_page# + 6, Type: int))\nSetVar(range_l_max, Calculate(Exp: #last_page# - #pager_limit#, Type: int))\nSetVar(pager_limit_plus_one, Calculate(Exp: #pager_limit# + 1, Type: int))\n\nIf(#current_page# < 5){\n    If(#last_page# >= 10){\n        Range(src_pages, 1, 11)\n    }.Else{\n        Range(src_pages, 1, #last_page_plus_one#) \n    }\n}.ElseIf(#delta_last_page# < 6){\n    If(#range_l_max# > 0){\n        Range(src_pages, #range_l_max#, #last_page_plus_one#)\n    }.Else{\n        Range(src_pages, 1, #last_page_plus_one#)\n    }\n}.Else{\n    Range(src_pages, #range_l#, #range_r#)\n}\n\nDiv(){\n    Span(){\n        If(#current_page# == 1){\n            Button(Body: Em(Class: fa fa-angle-double-left), Class: btn btn-default disabled)\n        }.Else{\n            Button(Body: Em(Class: fa fa-angle-double-left), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=1,sort=#sort#,width=#width#\")\n        }\n    }\n    Span(){\n        If(#current_page# == 1){\n            Button(Body: Em(Class: fa fa-angle-left), Class: btn btn-default disabled)\n        }.Else{\n            Button(Body: Em(Class: fa fa-angle-left), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#previous_page#,sort=#sort#,width=#width#\")\n        }\n    }\n    ForList(src_pages){\n        Span(){\n            If(#id# == #current_page#){\n                Button(Class: btn btn-primary float-left, Page: #pager_page#, PageParams: \"current_page=#id#,sort=#sort#,width=#width#\", Body: #id#)\n            }.Else{\n                Button(Class: btn btn-default float-left, Page: #pager_page#, PageParams: \"current_page=#id#,sort=#sort#,width=#width#\", Body: #id#)\n            }\n        }\n    }\n    Span(){\n        If(#current_page# == #last_page#){\n            Button(Body: Em(Class: fa fa-angle-right), Class: btn btn-default disabled)\n        }.Else{\n            Button(Body: Em(Class: fa fa-angle-right), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#next_page#,sort=#sort#,width=#width#\")\n        }\n    }\n    Span(){\n        If(#current_page# == #last_page#){\n            Button(Body: Em(Class: fa fa-angle-double-right), Class: btn btn-default disabled)\n        }.Else{\n            Button(Body: Em(Class: fa fa-angle-double-right), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#last_page#,sort=#sort#,width=#width#\")\n        }\n    }\n}.Style(\"div {display:inline-block;}\")",
            "Name": "pager",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#current_page# > 0){}.Else{\n\tSetVar(current_page, 1)\n}\nSetVar(pager_offset, Calculate(Exp: (#current_page# - 1) * #pager_limit#, Type: int))\nSetVar(current_page, #current_page#)",
            "Name": "pager_header",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "MenuItem(Title:\"Application\", Page:apps_list, Icon:\"icon-folder\")\nMenuItem(Title:\"Ecosystem parameters\", Page:params_list, Icon:\"icon-settings\")\nMenuItem(Title:\"Menu\", Page:menus_list, Icon:\"icon-list\")\nMenuItem(Title:\"Confirmations\", Page:confirmations, Icon:\"icon-check\")\nMenuItem(Title:\"Import\", Page:import_upload, Icon:\"icon-cloud-upload\")\nMenuItem(Title:\"Export\", Page:export_resources, Icon:\"icon-cloud-download\")\nMenuGroup(Title:\"Resources\", Icon:\"icon-share\"){\n    MenuItem(Title:\"Pages\", Page:app_pages, Icon:\"icon-screen-desktop\")\n    MenuItem(Title:\"Blocks\", Page:app_blocks, Icon:\"icon-grid\")\n    MenuItem(Title:\"Tables\", Page:app_tables, Icon:\"icon-docs\")\n    MenuItem(Title:\"Contracts\", Page:app_contracts, Icon:\"icon-briefcase\")\n    MenuItem(Title:\"Application parameters\", Page:app_params, Icon:\"icon-wrench\")\n    MenuItem(Title:\"Language resources\", Page:app_langres, Icon:\"icon-globe\")\n    MenuItem(Title:\"Binary data\", Page:app_binary, Icon:\"icon-layers\")\n}",
            "Name": "admin_menu",
            "Type": "menu"
        },
        {
            "Name": "buffer_data",
            "Columns": "[{\"name\":\"key\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"value\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"false\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(#this_app_id#>0){\n    SetVar(buffer_value_app_id,#this_app_id#)\n}.Else{\n    DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\n    SetVar(this_app_id,#buffer_value_app_id#)\n}\nSetVar(this_page,app_binary)\nIf(#buffer_value_app_id# > 0){\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Limit(1).Vars(\"app\")\n\n    Div(content-wrapper){\n        Include(apps_select)\n        SetTitle(\"Binary data\": #app_name#)\n        AddToolButton(Title: \"Upload binary\", Page: app_upload_binary, Icon: icon-plus, PageParams: \"app_id=#app_id#\")\n\n        SetVar(pager_table, binaries).(pager_where, \"app_id=#buffer_value_app_id#\").(pager_page, app_binary).(pager_limit, 50)\n        Include(pager_header)\n\n        SetVar(admin_page, app_binary)\n        Include(admin_link)\n\n        DBFind(binaries, src_binparameters).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    ForList(src_binparameters){\n                        Div(col-md-#width# col-sm-12){\n                            Div(list-group-item){\n                                Div(row){\n                                    Div(col-md-4){\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n                                        If(#member_id# == #key_id#){\n                                            LinkPage(Class: text-primary h5, Body: #name#, Page: app_upload_binary, PageParams: \"id=#id#,app_id=#buffer_value_app_id#\")\n                                        }.Else{\n                                            Span(Class: h5, Body: #name#)\n                                        }\n                                    }\n                                    Div(col-md-8 text-right){\n                                        Span(#hash#)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Div(panel-footer clearfix){\n                Include(pager)\n            }\n        }\n    }\n}.Else{\n    SetTitle(\"Binary data\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n    }\n}",
            "Name": "app_binary",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(#this_app_id#>0){\n    SetVar(buffer_value_app_id,#this_app_id#)\n}.Else{\n    DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\n    SetVar(this_app_id,#buffer_value_app_id#)\n}\nSetVar(this_page,app_blocks)\n\nIf(#buffer_value_app_id# > 0){\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Vars(\"app\")\n\n    Div(content-wrapper){\n        SetTitle(\"Blocks\": #app_name#)\n        Include(apps_select)\n        AddToolButton(Title: \"Create\", Page: editor, Icon: icon-plus, PageParams: \"create=block,appId=#buffer_value_app_id#\")\n\n        SetVar(pager_table, blocks).(pager_where, \"app_id=#buffer_value_app_id#\").(pager_page, app_blocks).(pager_limit, 50)\n        Include(pager_header)\n\n        SetVar(admin_page, app_blocks)\n        Include(admin_link)\n\n        DBFind(blocks, src_blocks).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    ForList(src_blocks){\n                        Div(col-md-#width# col-sm-12){\n                            Div(list-group-item){\n                                Div(row){\n                                    Div(col-md-4){\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n                                        Span(Class: h5, Body: \"#name#\")\n                                    }\n                                    Div(col-md-8){\n                                        Div(pull-right){\n                                            Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=block\")).Style(margin-right: 15px;)\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=block,name=#name#\"))\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Div(panel-footer clearfix){\n                Include(pager)\n            }\n        }\n    }\n}.Else{\n    SetTitle(\"Blocks\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n    }\n}",
            "Name": "app_blocks",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(#this_app_id#>0){\n    SetVar(buffer_value_app_id,#this_app_id#)\n}.Else{\n    DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\n    SetVar(this_app_id,#buffer_value_app_id#)\n}\nSetVar(this_page,app_contracts)\n\nIf(#buffer_value_app_id#>0){\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Limit(1).Vars(\"app\")\n\n    Div(content-wrapper){\n        SetTitle(\"Contracts\": #app_name#)\n        AddToolButton(Title: \"Create\", Page: editor, Icon: icon-plus, PageParams: \"create=contract,appId=#buffer_value_app_id#\")\n        Include(apps_select)\n\n        SetVar(pager_table, contracts).(pager_where, \"app_id=#buffer_value_app_id#\").(pager_page, app_contracts).(pager_limit, 50)\n        Include(pager_header)\n\n        SetVar(admin_page, app_contracts)\n        Include(admin_link)\n\n        DBFind(contracts, src_contracts).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    ForList(src_contracts){\n                        Div(col-md-#width# col-sm-12){\n                            Div(list-group-item){\n                                Div(row){\n                                    Div(col-md-4){\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n                                        Span(Class: h5, Body: \"#name#\")\n                                    }\n                                    Div(col-md-8){\n                                        Div(pull-right){\n                                            Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=contract\")).Style(margin-right: 15px;)\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=contract,name=#name#\"))\n                                        }\n                                        Div(pull-right){\n                                            If(#active#==1){\n                                                Span(Class: h5, Body: Em(Class: fa fa-check)).Style(margin-right: 50px;)\n                                            }.Else{\n                                                Span(Class: h5 text-muted, Body: Em(Class: fa fa-minus)).Style(margin-right: 50px;)\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Div(panel-footer clearfix){\n                Include(pager)\n            }\n        }\n    }\n}.Else{\n    SetTitle(\"Contracts\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n    }\n}",
            "Name": "app_contracts",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle(\"Applications\")\n    Div(breadcrumb){\n\t\tLinkPage(\"Applications\", apps_list)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tIf(#id# > 0){\n\t\t\tSpan(Class: text-muted, Body: \"Edit\")\n\t\t}.Else{\n\t\t\tSpan(Class: text-muted, Body: \"New\")\n\t\t}\n    }\n\t\n\tForm(){\n\t\tIf(#id# > 0){\n\t\t\tDBFind(applications, src_apps).Columns(\"id,name,conditions,deleted\").Where(\"id=#id#\").Limit(1).Vars(\"app\")\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Name\")\n\t\t\t\tInput(Name: Name, Disabled: \"true\", Value: #app_name#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Change conditions\")\n\t\t\t\tInput(Name: Conditions, Value: #app_conditions#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(text-left col-md-6){\n\t\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: apps_list, Contract: @1EditApplication, Params: \"ApplicationId=#id#\")\n\t\t\t\t\t}\n\t\t\t\t\tDiv(text-right col-md-6){\n\t\t\t\t\t\tIf(#app_deleted# == 0){\n\t\t\t\t\t\t\tButton(Body: \"Delete\", Class: btn btn-danger, Page: apps_list, Contract: @1DelApplication, Params: \"ApplicationId=#app_id#,Value=1\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}.Else{\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Name\")\n\t\t\t\tInput(Name: Name)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Change conditions\")\n\t\t\t\tInput(Name: Conditions)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tDiv(text-left){\n\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: apps_list, Contract: @1NewApplication)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n}",
            "Name": "app_edit",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(#this_app_id#>0){\n    SetVar(buffer_value_app_id,#this_app_id#)\n}.Else{\n    DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\n    SetVar(this_app_id,#buffer_value_app_id#)\n}\nSetVar(this_page,app_langres)\n\nIf(#buffer_value_app_id# > 0){\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Vars(\"app\")\n\n    Div(content-wrapper){\n        SetTitle(\"Language resources\": #app_name#)\n        Include(apps_select)\n        AddToolButton(Title: \"Create\", Page: langres_add, Icon: icon-plus, PageParams: \"app_id=#app_id#\")\n\n        SetVar(pager_table, languages).(pager_where, \"app_id=#buffer_value_app_id#\").(pager_page, app_langres).(pager_limit, 50)\n        Include(pager_header)\n\n        SetVar(admin_page, app_langres)\n        Include(admin_link)\n\n        DBFind(languages, src_languages).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    ForList(src_languages){\n                        Div(col-md-#width# col-sm-12){\n                            Div(list-group-item){\n                                Div(row){\n                                    Div(col-md-4){\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n                                        Span(Class: h5, Body: \"#name#\")\n                                    }\n                                    Div(col-md-8){\n                                        Div(pull-right){\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: langres_edit, PageParams: \"lang_id=#id#\"))\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Div(panel-footer clearfix){\n                Include(pager)\n            }\n        }\n    }\n}.Else{\n    SetTitle(\"Language resources\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n    }\n}",
            "Name": "app_langres",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(#this_app_id#>0){\n    SetVar(buffer_value_app_id,#this_app_id#)\n}.Else{\n    DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\n    SetVar(this_app_id,#buffer_value_app_id#)\n}\nSetVar(this_page,app_pages)\nIf(#this_app_id#>0){\n    Div(content-wrapper){\n        DBFind(applications).Where(\"id=#this_app_id#\").Vars(application)\n        SetTitle(\"Pages: \"#application_name#)\n\n        Include(apps_select)\n        AddToolButton(Title: \"Create\", Page: editor, Icon: icon-plus, PageParams: \"create=page,appId=#this_app_id#\")\n\n        SetVar(pager_table, pages).(pager_where, \"app_id=#this_app_id#\").(pager_page,#this_page#).(pager_limit, 50)\n        Include(pager_header)\n\n        SetVar(admin_page, #this_page#)\n        Include(admin_link)\n\n        DBFind(pages, src_pages).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#this_app_id#\")\n\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    ForList(src_pages){\n                        Div(col-md-#width# col-sm-12){\n                            Div(list-group-item){\n                                Div(row){\n                                    Div(col-md-4){\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n                                        LinkPage(Page: #name#, Class: text-primary h5, Body: \"#name#\")\n                                    }\n                                    Div(col-md-8){\n                                        Div(pull-right){\n                                            Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=page\")).Style(margin-right: 15px;)\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=page,name=#name#\"))\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Div(panel-footer clearfix){\n                Include(pager)\n            }\n        }\n    }\n}.Else{\n    SetTitle(\"Pages\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n    }\n}",
            "Name": "app_pages",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(#this_app_id#>0){\n    SetVar(buffer_value_app_id,#this_app_id#)\n}.Else{\n    DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\n    SetVar(this_app_id,#buffer_value_app_id#)\n}\nSetVar(this_page,app_params)\n\nIf(#buffer_value_app_id# > 0){\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Vars(\"app\")\n\n    Div(content-wrapper){\n        Include(apps_select)\n        SetTitle(\"Application parameters\": #app_name#)\n        AddToolButton(Title: \"Create\", Page: app_params_edit, Icon: icon-plus, PageParams: \"application_id=#buffer_value_app_id#,create=create\")\n\n        SetVar(pager_table, app_params).(pager_where, \"app_id=#buffer_value_app_id#\").(pager_page, app_params).(pager_limit, 50)\n        Include(pager_header)\n\n        SetVar(admin_page, app_params)\n        Include(admin_link)\n\n        DBFind(app_params, src_appparameters).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    ForList(src_appparameters){\n                        Div(col-md-#width# col-sm-12){\n                            Div(list-group-item){\n                                Div(row){\n                                    Div(col-md-4){\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n                                        Span(Class: h5, Body: \"#name#\")\n                                    }\n                                    Div(col-md-8 text-right){\n                                        Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: app_params_edit, PageParams: \"id=#id#\"))\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Div(panel-footer clearfix){\n                Include(pager)\n            }\n        }\n    }\n}.Else{\n    SetTitle(\"Application parameters\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n    }\n}",
            "Name": "app_params",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(#create# == create){\n        SetVar(param_name, \"New\")\n    }.Else{\n\t\tDBFind(app_params, src_params).Where(\"id=#id#\").Vars(\"param\")\n    }\n\t\n\tSetTitle(\"Application parameter\")\n\tDiv(Class: breadcrumb){\n\t\tLinkPage(\"Application parameters\", app_params)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: #param_name#)\n\t}\n\n    Form(){\n        Div(form-group){\n            Label(\"Name\")\n            If(#create# == create){\n                Input(Name: name)\n            }.Else{\n                Input(Name: name, Value: #param_name#, Disabled: \"true\")\n            }\n        }\n        Div(form-group){\n            If(#create# == create){\n                Input(Type: textarea, Name: value).Style(height: 500px !important;)\n            }.Else{\n                Input(Type: textarea, Name: value, Value: \"#param_value#\").Style(height: 500px !important;)\n            }\n        }\n        Div(form-group){\n            Label(\"Change conditions\")\n            If(#create# == create){\n                Input(Name: conditions)\n            }.Else{\n                Input(Name: conditions, Value: #param_conditions#)\n            }\n        }\n        Div(form-group){\n            If(#create# == create){\n                Button(Class: btn btn-primary, Body: \"Save\", Contract: NewAppParam, Params: \"Name=Val(name),Value=Val(value),Conditions=Val(conditions),ApplicationId=#application_id#\", Page: app_params)\n            }.Else{\n                Button(Class: btn btn-primary, Body: \"Save\", Contract: EditAppParam, Params: \"Id=#id#,Value=Val(value),Conditions=Val(conditions)\", Page: app_params)\n            }\n        }\n    }\n}",
            "Name": "app_params_edit",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(#this_app_id#>0){\n    SetVar(buffer_value_app_id,#this_app_id#)\n}.Else{\n    DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\n    SetVar(this_app_id,#buffer_value_app_id#)\n}\nSetVar(this_page,app_tables)\n\nIf(#buffer_value_app_id# > 0){\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Limit(1).Vars(\"app\")\n\n    Div(content-wrapper){\n        Include(apps_select)\n        SetTitle(\"Tables\": #app_name#)\n        AddToolButton(Title: \"Create\", Page: table_create, Icon: icon-plus, PageParams: \"app_id=#app_id#\")\n\n        SetVar(pager_table, tables).(pager_where, \"app_id=#buffer_value_app_id#\").(pager_page, app_tables).(pager_limit, 50)\n        Include(pager_header)\n\n        SetVar(admin_page, app_tables)\n        Include(admin_link)\n\n        DBFind(tables, src_tables).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    ForList(src_tables){\n                        Div(col-md-#width# col-sm-12){\n                            Div(list-group-item){\n                                Div(row){\n                                    Div(col-md-4){\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n                                        LinkPage(Page: table_view, Class: text-primary h5, Body: \"#name#\", PageParams: \"tabl_id=#id#\")\n                                    }\n                                    Div(col-md-8){\n                                        Div(pull-right){\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: table_edit, PageParams: \"tabl_id=#id#\"))\n                                        }\n                                        Div(pull-right){\n                                            DBFind(#name#).Columns(\"id\").Count(countvar)\n                                            Span(Class: h5 text-muted, Body: #countvar#).Style(margin-right: 50px;)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Div(panel-footer clearfix){\n                Include(pager)\n            }\n        }\n    }\n}.Else{\n    SetTitle(\"Tables\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n    }\n}",
            "Name": "app_tables",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle(\"Binary data\")\n    Div(breadcrumb){\n        LinkPage(\"Binary data\", app_binary)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tIf(#id# > 0){\n\t\t\tSpan(\"Edit\", text-muted)\n\t\t\tDBFind(binaries).Columns(name).Where(id = #id#).Vars(binary)\n\t\t}.Else{\n\t\t\tSpan(\"Upload\", text-muted)\n\t\t}\n    }\n\t\n\tForm(){\n\t\tDiv(form-group){\n\t\t\tDiv(text-left){\n\t\t\t\tLabel(\"Name\")\n\t\t\t}\n\t\t\tIf(#id# > 0){\n\t\t\t\tInput(Name: name, Disabled: disabled, Value: #binary_name#)\n\t\t\t}.Else{\n\t\t\t\tInput(Name: name)\n\t\t\t}\n\t\t}\n\t\tDiv(form-group){\n\t\t\tDiv(text-left){\n\t\t\t\tLabel(\"File\")\n\t\t\t}\n\t\t\tInput(Name: databin, Type: file)\n\t\t}\n\t\tDiv(form-group text-left){\n\t\t\tButton(Body: \"Upload\", Contract: UploadBinary, Class: btn btn-primary, Params: \"Name=Val(name),ApplicationId=#app_id#,Data=Val(databin),MemberID=#key_id#\", Page: app_binary)\n\t\t}\n    }\n}",
            "Name": "app_upload_binary",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\n    If(#deleted# == deleted){\n        SetTitle(\"Inactive applications\")\n\t\tDiv(breadcrumb){\n\t\t\tLinkPage(\"Applications\", apps_list)\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tSpan(Class: text-muted, Body: \"Inactive applications\")\n\t\t}\n\t\n        DBFind(applications, src_applications).Where(\"deleted=1\").Order(\"id\").Count(countvar).Custom(restore_btn){\n            Button(Class: btn btn-link, Page: apps_list, Contract: DelApplication, Params: \"ApplicationId=#id#\", Body: \"Restore\")\n        }\n        If(#countvar# > 0) {\n            Table(Source: src_applications, Columns: \"ID=id,Name=name,Conditions=conditions,=restore_btn\").Style(\n                tbody > tr:nth-of-type(odd) {\n                    background-color: #fafbfc;\n                }\n                tbody > tr > td {\n                    word-break: break-all;\n                    font-weight: 400;\n                    font-size: 13px;\n                    color: #666;\n                    border-top: 1px solid #eee;\n                    vertical-align: middle;\n                }\n                tr > *:first-child {\n                    padding-left:20px;\n                    width: 80px;\n                }\n                tr > *:last-child {\n                    padding-right:80px;\n                    text-align:right;\n                    width: 100px;\n                }\n                thead {\n                    background-color: #eee;\n                }\n            )\n        }.Else{\n            Div(content-wrapper){\n                Span(Class: text-muted, Body: \"You don't have any inactive applications\")\n            }\n        }\n    }.Else{\n        SetTitle(\"Applications\")\n\t\tDiv(breadcrumb){\n\t\t\tSpan(Class: text-muted, Body: \"This section is used to select installed applications\")\n\t\t}\n        AddToolButton(Title: \"Inactive apps\", Page: apps_list, Icon: icon-close, PageParams:\"deleted=deleted\")\n        AddToolButton(Title: \"Create\", Page: app_edit, Icon: icon-plus)\n\t\n        DBFind(buffer_data, src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\n        DBFind(applications, src_applications).Where(\"deleted=0\").Order(\"id\").Custom(custom_check){\n            If(#id#==#buffer_value_app_id#){\n                Span(Em(Class: fa fa-check)).Style(margin-left:30px;)\n            }.Else{\n                Button(Class: btn btn-link, Contract: Export_NewApp, Params: \"app_id=#id#\", Page: apps_list, Body: \"select\")\n            }\n        }.Custom(custom_actions){\n            Button(Class: btn btn-link, Body: Em(Class: fa fa-edit), Page: app_edit, PageParams: \"id=#id#\")\n        }\n\n        Table(Source: src_applications, Columns: \"ID=id,Name=name,Conditions=conditions,Selected=custom_check,=custom_actions\").Style(\n            tbody > tr:nth-of-type(odd) {\n                background-color: #fafbfc;\n            }\n            tbody > tr > td {\n                word-break: break-all;\n                font-weight: 400;\n                font-size: 13px;\n                color: #666;\n                border-top: 1px solid #eee;\n                vertical-align: middle;\n            }\n            tr > *:first-child {\n                padding-left:20px;\n                width: 80px;\n            }\n            tr > *:last-child {\n                padding-right:15px;\n                text-align:right;\n                width: 100px;\n            }\n            thead {\n                background-color: #eee;\n            }\n        )\n    }\n}",
            "Name": "apps_list",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(\"Tables\")\n\tDiv(breadcrumb){\n\t\tDiv(){\n\t\t\tLinkPage(\"Tables\", app_tables)\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tLinkPage(\"Edit table\", table_edit, PageParams:\"tabl_id=#tabl_id#\")\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tSpan(\"Add column\", text-muted)\n\t\t}\n\t}\n\n\tForm(panel panel-default){\n\t\tDiv(panel-body){\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Column\")\n\t\t\t\tInput(Name: ColumnName)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tData(src_type,\"type,name\"){\n\t\t\t\t\ttext,\"Text\"\n\t\t\t\t\tnumber,\"Number\"\n\t\t\t\t\tvarchar,\"Varchar\"\n\t\t\t\t\tdatetime,\"Date/Time\"\n\t\t\t\t\tmoney,\"Money\"\n\t\t\t\t\tdouble,\"Double\"\n\t\t\t\t\tcharacter,\"Character\"\n\t\t\t\t\tjson,\"JSON\"\n\t\t\t\t}\n\t\t\t\tLabel(\"Type\")\n\t\t\t\tSelect(Name: Coltype, Source: src_type, NameColumn: name, ValueColumn: type, Value:\"text\")\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Update\")\n\t\t\t\tInput(Name: ColumnUp)\n\t\t\t}\n\t\t}\n\t\tDiv(panel-footer clearfix){\n\t\t\tButton(Body: \"Add column\", Contract: NewColumn, Class: btn btn-primary, Page: table_edit, PageParams: \"tabl_id=#tabl_id#\", Params: \"TableName=#next_table_name#,Name=Val(ColumnName),Type=Val(Coltype),Permissions=Val(ColumnUp)\")\n\t\t}\n\t}\n}",
            "Name": "column_add",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(\"Edit column\")\n\tDiv(breadcrumb){\n\t\tDiv(){\n\t\t\tLinkPage(\"Tables\", app_tables)\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tLinkPage(\"Edit table\", table_edit, PageParams:\"tabl_id=#tabl_id#\")\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tSpan(\"Edit column\", text-muted)\n\t\t}\n\t}\n\n\tDBFind(tables, src_mem).Columns(\"id,name,columns,conditions\").Vars(pre).WhereId(#tabl_id#)\n\tJsonToSource(src_columns, #pre_columns#)\n\tForm(panel panel-default){\n\t\tDiv(panel-body){\n\t\t\tForList(src_columns){\n\t\t\t\tIf(#key# == #name_column#){\n\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\tLabel(\"Column\")\n\t\t\t\t\t\tInput(Name: ColumnName, Disabled: \"true\", Value: #name_column#)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\tLabel(\"Type\")\n\t\t\t\t\t\tSetVar(col_type, GetColumnType(#pre_name#, #key#))\n\t\t\t\t\t\tIf(#col_type# == character){\n\t\t\t\t\t\t\tSetVar(input_type, \"Character\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == text){\n\t\t\t\t\t\t\tSetVar(input_type, \"Text\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == number){\n\t\t\t\t\t\t\tSetVar(input_type, \"Number\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == money){\n\t\t\t\t\t\t\tSetVar(input_type, \"Money\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == varchar){\n\t\t\t\t\t\t\tSetVar(input_type, \"Varchar\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == datetime){\n\t\t\t\t\t\t\tSetVar(input_type, \"Date/Time\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == double){\n\t\t\t\t\t\t\tSetVar(input_type, \"Double\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == json){\n\t\t\t\t\t\t\tSetVar(input_type, \"JSON\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == bytea){\n\t\t\t\t\t\t\tSetVar(input_type, \"Binary Data\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == uuid){\n\t\t\t\t\t\t\tSetVar(input_type, \"UUID\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tInput(Name: Coltype, Disabled: \"true\", Value: #input_type#)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\tLabel(\"Update\")\n\t\t\t\t\t\tInput(Name: ColumnUp, Value: #value#)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(panel-footer clearfix){\n\t\t\tButton(Body: \"Save\", Contract: EditColumn, Class: btn btn-primary, Page: table_edit, PageParams: \"tabl_id=#tabl_id#\", Params: \"TableName=#pre_name#,Name=Val(ColumnName),Type=Val(Coltype),Permissions=Val(ColumnUp)\")\n\t\t}\n\t}\n}\n",
            "Name": "column_edit",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\n    SetTitle(Confirmations)\n    AddToolButton(Title: \"Create\", Page: confirmations_new, Icon: icon-plus)\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"This section is used to manage contracts with confirmation\")\n\t}\n\n    DBFind(signatures, src_sign).Limit(250).Order(\"id\").Columns(\"id,name,value->params,value->title,conditions\").Custom(custom_title){\n        Span(#value.title#)\n    }.Custom(custom_params){\n        Span(#value.params#)\n    }.Custom(action){\n        Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: confirmations_edit, PageParams: \"sign_id=#id#\"))\n    }\n\n    Table(Source:src_sign, Columns:\"Contract=name,Title=custom_title,Params=custom_params,Conditions=conditions,=action\").Style(\n    tbody > tr:nth-of-type(odd) {\n        background-color: #fafbfc; \n    }\n    tbody > tr > td {\n        word-break: break-all;\n        font-weight: 400;\n        font-size: 13px;\n        color: #666;\n        border-top: 1px solid #eee;\n        vertical-align: middle;\n    }\n    tr  > *:first-child {\n        padding-left:20px;\n    }\n    tr  > *:last-child {\n        padding-right:30px;\n        text-align:right; \n        width: 100px;\n    }\n    thead {\n        background-color: #eee;\n    })\n}",
            "Name": "confirmations",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(\"Confirmations\")\n\tDiv(Class: breadcrumb){\n\t\tLinkPage(\"Confirmations\", confirmations)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: \"Edit\")\n\t}\n\n\tForm(){\n\t\tDBFind(signatures, src_signatures).Columns(\"name,conditions,value->title,value->params\").Vars(pre).WhereId(#sign_id#)\n\t\tDiv(form-group){\n\t\t\tLabel(\"Contract name\")\n\t\t\tInput(Name: Name, Value: #pre_name#)\n\t\t}\t\t\n\t\tDiv(form-group){\n\t\t\tLabel(\"Title of confirmation\")\n\t\t\tInput(Name: Title, Value: #pre_value_title#)\n\t\t}\t\t\n\t\tDiv(form-group){\n\t\t\tLabel(\"Parameters\")\n\t\t\tInput(Name: Parameter, Value: #pre_value_params#)\n\t\t}\t\t\n\t\tDiv(form-group){\n\t\t\tLabel(\"Conditions\")\n\t\t\tInput(Name: Conditions, Value: #pre_conditions#)\n\t\t}\n\t\tDiv(form-group){\n\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Contract: @1EditSign, Page: confirmations, Params: \"Id=#sign_id#\")\n\t\t}\n\t}\n}",
            "Name": "confirmations_edit",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(\"Confirmations\")\n\tDiv(Class: breadcrumb){\n\t\tLinkPage(\"Confirmations\", confirmations)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: \"Create\")\n\t}\n\n\tForm(){\n\t\tDiv(form-group){\n\t\t\tLabel(\"Contract name\")\n\t\t\tInput(Name: Name, Placeholder: \"Name\")\n\t\t}\t\t\n\t\tDiv(form-group){\n\t\t\tLabel(\"Title of confirmation\")\n\t\t\tInput(Name: Title, Placeholder: \"Title\")\n\t\t}\t\t\n\t\tDiv(form-group){\n\t\t\tLabel(\"Parameters\")\n\t\t\tInput(Name: Parameter, Placeholder: `[{\"name\":\"Amount\",\"text\":\"Transaction amount\"}]`)\n\t\t}\t\t\n\t\tDiv(form-group){\n\t\t\tLabel(\"Conditions\")\n\t\t\tInput(Name: Conditions, Placeholder: \"Conditions\")\n\t\t}\n\t\tDiv(form-group){\n\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Contract: @1NewSign, Page: confirmations)\n\t\t}\n\t}\t\n}",
            "Name": "confirmations_new",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\n    SetTitle(\"Export\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"Payload was formed. You can download it now\")\n    }\n\n    DBFind(binaries, src_binaries).Where(\"name='export' and member_id=#key_id# and app_id=1\").Custom(app_name){\n        DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_name\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\n        Span(#buffer_value_app_name#)\n    }\n\n    Table(Source: src_binaries, \"Applications=app_name,=data\").Style(\n        tbody > tr:nth-of-type(odd) {\n            background-color: #fafbfc;\n        }\n        tbody > tr > td {\n            word-break: break-all;\n            font-weight: 400;\n            font-size: 13px;\n            color: #666;\n            border-top: 1px solid #eee;\n            vertical-align: middle;\n        }\n        tr > *:first-child {\n            padding-left:20px;\n            width: 100px;\n        }\n        tr > *:last-child {\n            padding-right:20px;\n            text-align:right;\n        }\n        thead {\n            background-color: #eee;\n        }\n    )\n}",
            "Name": "export_download",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle(\"Export\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"Select the application which do you want to export and proceed to the payload generation process.\")\n    }\n\n    Include(export_link)\n    DBFind(buffer_data, src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\n\n    If(#buffer_value_app_id# > 0){\n        If(#res_type#==\"pages\"){\n            DBFind(pages, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\n        }\n        If(#res_type#==\"blocks\"){\n            DBFind(blocks, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\n        }\n        If(#res_type#==\"menu\"){\n            DBFind(menu, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"id in (#buffer_value_menu_id#)\").Order(\"id\")\n        }\n        If(#res_type#==\"parameters\"){\n            DBFind(app_params, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\n        }\n        If(#res_type#==\"languages\"){\n            DBFind(languages, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\n        }\n        If(#res_type#==\"contracts\"){\n            DBFind(contracts, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\n        }\n        If(#res_type#==\"tables\"){\n            DBFind(tables, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\n        }\n    }\n\n    Div(row){\n        Div(col-md-9 col-md-offset-0){\n            Table(src, \"ID=id,Name=name,=cbox\").Style(\n                tbody > tr:nth-of-type(odd) {\n                    background-color: #fafbfc;\n                }\n                tbody > tr > td {\n                    word-break: break-all;\n                    padding: 8px 20px !important;\n                    font-weight: 400;\n                    font-size: 13px;\n                    color: #666;\n                    border-top: 1px solid #eee;\n                    vertical-align: middle;\n                }\n                tr > *:first-child {\n                    padding-left:20px;\n                    width: 100px;\n                }\n                tr > *:last-child {\n                    text-align:right;\n                    padding-right:20px;\n                    width: 50px;\n                }\n                thead {\n                    background-color: #eee;\n                }\n            )\n        }\n        Div(col-md-3 col-md-offset-0){\n            Include(export_info)\n        }\n    }\n}",
            "Name": "export_resources",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(buffer_data, src_buffer).Columns(\"id,value->name,value->data\").Where(\"key='import' and member_id=#key_id#\").Vars(hash00001)\n    DBFind(buffer_data, src_buffer).Columns(\"value->app_name,value->pages,value->pages_count,value->blocks,value->blocks_count,value->menu,value->menu_count,value->parameters,value->parameters_count,value->languages,value->languages_count,value->contracts,value->contracts_count,value->tables,value->tables_count\").Where(\"key='import_info' and member_id=#key_id#\").Vars(hash00002)\n\n    SetTitle(\"Import - #hash00002_value_app_name#\")\n    Data(data_info, \"hash00003_name,hash00003_count,hash00003_info\"){\n        Pages,\"#hash00002_value_pages_count#\",\"#hash00002_value_pages#\"\n        Blocks,\"#hash00002_value_blocks_count#\",\"#hash00002_value_blocks#\"\n        Menu,\"#hash00002_value_menu_count#\",\"#hash00002_value_menu#\"\n        Parameters,\"#hash00002_value_parameters_count#\",\"#hash00002_value_parameters#\"\n        Language resources,\"#hash00002_value_languages_count#\",\"#hash00002_value_languages#\"\n        Contracts,\"#hash00002_value_contracts_count#\",\"#hash00002_value_contracts#\"\n        Tables,\"#hash00002_value_tables_count#\",\"#hash00002_value_tables#\"\n    }\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"Your data that you can import\")\n    }\n\n    Div(panel panel-primary){\n        ForList(data_info){\n            Div(list-group-item){\n                Div(row){\n                    Div(col-md-10 mc-sm text-left){\n                        Span(Class: text-bold, Body: \"#hash00003_name#\")\n                    }\n                    Div(col-md-2 mc-sm text-right){\n                        If(#hash00003_count# > 0){\n                            Span(Class: text-bold, Body: \"(#hash00003_count#)\")\n                        }.Else{\n                            Span(Class: text-muted, Body: \"(0)\")\n                        }\n                    }\n                }\n                Div(row){\n                    Div(col-md-12 mc-sm text-left){\n                        If(#hash00003_count# > 0){\n                            Span(Class: h6, Body: \"#hash00003_info#\")\n                        }.Else{\n                            Span(Class: text-muted h6, Body: \"Nothing selected\")\n                        }\n                    }\n                }\n            }\n        }\n        If(#hash00001_id# > 0){\n            Div(list-group-item text-right){\n                Button(Body: \"Import\", Class: btn btn-primary, Page: apps_list).CompositeContract(\"Import\", \"#hash00001_value_data#\")\n            }\n        }\n    }\n}",
            "Name": "import_app",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle(\"Import\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"Select payload that you want to import\")\n    }\n    Form(panel panel-primary){\n        Div(list-group-item){\n            Input(Name: input_file, Type: file)\n        }\n        Div(list-group-item text-right){\n            Button(Body: \"Load\", Class: btn btn-primary, Contract: Import_Upload, Page: import_app)\n        }\n    }\n}",
            "Name": "import_upload",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(\"Language resources\")\n\tDiv(Class: breadcrumb){\n\t\tLinkPage(\"Language resources\", app_langres)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: \"Create\")\n\t}\n\n\tForm(panel panel-default){\n\t\tDiv(panel-body){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12){\n\t\t\t\t\tLabel(\"Name\")\n\t\t\t\t\tInput(Name: LangName)\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-1 mt-lg){\n\t\t\t\t\tLabel(Class: text-muted, Body: \"Locale\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-10 mt-lg){\n\t\t\t\t\tLabel(Class: text-muted, Body: \"Value\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-1 mt-lg){\n\t\t\t\t\tLabel(Class: text-muted, Body: \"Action\")\n\t\t\t\t}\n\t\t\t}\n\t\t\tIf(GetVar(cs)==\"\"){\n\t\t\t\tSetVar(cs, Calculate( Exp: 0, Type: int))\n\t\t\t}\n\t\t\tIf(#del# == 1){\n\t\t\t\tSetVar(cs, Calculate( Exp: #cs# - 1, Type: int))\n\t\t\t}.Else{\n\t\t\t\tSetVar(cs, Calculate( Exp: #cs# + 1, Type: int))\n\t\t\t}\n\t\t\tRange(params_range, 0, #cs#)\n\t\t\tForList(Source: params_range){\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\tInput(Name:idshare)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-10 mt-sm){\n\t\t\t\t\t\tInput(Name:share)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\tIf(And(#cs#==#params_range_index#,#cs#>1)){\n\t\t\t\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"cs=#cs#,del=1,app_id=#app_id#\", Page: langres_add)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mt-lg){\n\t\t\t\t\tLinkPage(Body: \"Add localization\", Page: langres_add, PageParams:\"cs=#cs#,app_id=#app_id#\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(panel-footer){\n\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Contract:@1NewLang, Page: app_langres, Params: \"ApplicationId=#app_id#,Name=Val(LangName),Value=Val(share),IdLanguage=Val(idshare)\")\n\t\t}\n\t}\n}",
            "Name": "langres_add",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(\"Language resources\")\n\tDiv(Class: breadcrumb){\n\t\tLinkPage(\"Language resources\", app_langres)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: \"Edit\")\n\t}\n\t\n\tForm(panel panel-default){\n\t\tDiv(panel-body){\n\t\t\tDBFind(languages, src_leng).Vars(pre).WhereId(#lang_id#)\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12){\n\t\t\t\t\tLabel(\"Name\")\n\t\t\t\t\tInput(Name: LangName, Disabled: \"true\", Value: #pre_name#)\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-1 mt-lg){\n\t\t\t\t\tLabel(Class: text-muted, Body: \"Locale\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-10 mt-lg){\n\t\t\t\t\tLabel(Class: text-muted, Body: \"Value\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-1 mt-lg){\n\t\t\t\t\tLabel(Class: text-muted, Body: \"Action\")\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tJsonToSource(pv, #pre_res#)\n\t\t\tForList(Source: pv, Index:s_ind){\n\t\t\t\tSetVar(max_sec, #s_ind#)\n\t\t\t}\n\t\t\tIf(GetVar(cs)==\"\"){\n\t\t\t\tSetVar(cs, #max_sec#)\n\t\t\t}\n\t\t\tIf(Or(#del_flag#==1,#del_data#>0)){\n\t\t\t\tSetVar(cs, Calculate(Exp:#cs#-1, Type: int))\n\t\t\t}\n\t\t\t\n\t\t\tSetVar(next_sec, Calculate(Exp:#cs#+1, Type: int))\n\t\t\tSetVar(data_sec, Calculate(Exp:#cs#-#max_sec#, Type: int))\n\n\t\t\tForList(Source: pv, Index:s_ind){\n\t\t\t\tIf(#s_ind#>#cs#){\n\t\t\t\t}.Else{\n\t\t\t\t\tDiv(row){\n\t\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\t\tInput(Name: idshare, Value: #key#)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(col-md-10 mt-sm){\n\t\t\t\t\t\t\tInput(Name: share, Value: #value#)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\t\tIf(And(#s_ind#>1,#s_ind#==#cs#)){\n\t\t\t\t\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"lang_id=#lang_id#,cs=#cs#,del_data=#s_ind#\", Page: langres_edit)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tRange(params_range, #max_sec#, #cs#)\n\t\t\tForList(Source: params_range, Index:s_ind){\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\tInput(Name:idshare)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-10 mt-sm){\n\t\t\t\t\t\tInput(Name:share)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\tIf(#s_ind#==#data_sec#){\n\t\t\t\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"lang_id=#lang_id#,cs=#cs#,del_flag=1\", Page: langres_edit)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mt-lg){\n\t\t\t        LinkPage(Body: \"Add localization\", Page: langres_edit, PageParams: \"lang_id=#lang_id#,cs=#next_sec#\")\n                }\n            }\n\t\t}\n\t\tDiv(panel-footer){\n\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Contract: @1EditLang, Params: \"Value=Val(share),IdLanguage=Val(idshare),Id=#lang_id#\", Page: app_langres)\n\t\t}\n\t}\n}",
            "Name": "langres_edit",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\n    SetTitle(\"Menu\")\n    AddToolButton(Title: \"Create\", Page: editor, Icon: icon-plus, PageParams: \"create=menu,appId=0\")\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"This section is used to manage the menu\")\n\t}\n\n    DBFind(menu, src_menus).Limit(250).Order(\"id\").Custom(action){\n        Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=menu\")).Style(margin-right: 20px;)\n        Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=menu,name=#name#\"))\n    }\n\n    Table(src_menus, \"ID=id,Name=name,Title=title,Conditions=conditions,=action\").Style(\n    tbody > tr:nth-of-type(odd) {\n        background-color: #fafbfc; \n    }\n    tbody > tr > td {\n        word-break: break-all;\n        font-weight: 400;\n        font-size: 13px;\n        color: #666;\n        border-top: 1px solid #eee;\n        vertical-align: middle;\n    }\n    tr  > *:first-child {\n        padding-left:20px;\n        width: 80px;\n    }\n    tr  > *:last-child {\n        padding-right:30px;\n        text-align:right; \n        width: 100px;\n    }\n    thead {\n        background-color: #eee;\n    })\n}",
            "Name": "menus_list",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tIf(#stylesheet# == stylesheet){\n\t\tDBFind(parameters, src_params).Where(name='#stylesheet#').Vars(\"param\")\n\t}.Else{\n\t\tIf(#id#>0){\n\t\t\tDBFind(parameters, src_params).WhereId(#id#).Vars(\"param\")\n\t\t}.Else{\n\t\t\tSetVar(param_name, \"New\")\n\t\t}\n\t}\n\n\tSetTitle(\"Ecosystem parameters\")\n    Div(Class: breadcrumb){\n        LinkPage(\"Ecosystem parameters\", params_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: #param_name#)\n    }\n\t\n\tForm(){\n\t\tDiv(form-group){\n\t\t\tLabel(\"Name\")\n\t\t\tIf(#param_id#>0){\n\t\t\t\tInput(Name: name, Value: #param_name#, Disabled: \"true\")\n\t\t\t}.Else{\n\t\t\t\tInput(Name: name)\n\t\t\t}\n\t\t}\n\t\tDiv(form-group){\n\t\t\tIf(#param_id#>0){\n\t\t\t\tInput(Type: textarea, Name: value, Value: \"#param_value#\").Style(height: 500px !important;)\n\t\t\t}.Else{\n\t\t\t\tInput(Type: textarea, Name: value).Style(height: 500px !important;)\n\t\t\t}\n\t\t}\n\t\tDiv(form-group){\n\t\t\tLabel(\"Change conditions\")\n\t\t\tIf(#param_id#>0){\n\t\t\t\tInput(Name: conditions, Value: #param_conditions#)\n\t\t\t}.Else{\n\t\t\t\tInput(Name: conditions)\n\t\t\t}\n\t\t}\n\t\tDiv(form-group){\n\t\t\tIf(#param_id#>0){\n\t\t\t\tButton(Class: btn btn-primary, Body: \"Save\", Contract: EditParameter, Params: \"Id=#param_id#,Value=Val(value),Conditions=Val(conditions)\", Page: params_list)\n\t\t\t}.Else{\n\t\t\t\tButton(Class: btn btn-primary, Body: \"Save\", Contract: NewParameter, Params: \"Name=Val(name),Value=Val(value),Conditions=Val(conditions)\", Page: params_list)\n\t\t\t}\n\t\t}\n\t}\n}",
            "Name": "params_edit",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\n    SetTitle(\"Ecosystem parameters\")\n    AddToolButton(Title: \"Manage stylesheet\", Page: params_edit, Icon: icon-picture, PageParams:\"stylesheet=stylesheet\")\n    AddToolButton(Title: \"Create\", Page: params_edit, Icon: icon-plus)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"This section is used to configure stored reusable parameters\")\n    }\n\n    DBFind(parameters, src_appparameters).Order(\"id\").Custom(custom_actions){\n        LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: params_edit, PageParams: \"id=#id#\")\n    }\n\n    Table(src_appparameters, \"ID=id,Name=name,Application=app_id,Value=value,Conditions=conditions,=custom_actions\").Style(\n        tbody > tr:nth-of-type(odd) {\n            background-color: #fafbfc;\n        }\n        tbody > tr > td {\n            word-break: break-all;\n            font-weight: 400;\n            font-size: 13px;\n            color: #666;\n            border-top: 1px solid #eee;\n            vertical-align: middle;\n        }\n        tr > *:first-child {\n            padding-left:20px;\n            width: 80px;\n        }\n        tr > *:last-child {\n            padding-right:30px;\n            text-align:right;\n            width: 100px;\n        }\n        thead {\n            background-color: #eee;\n        }\n    )\n}",
            "Name": "params_list",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(Class: content-wrapper){\n\tSetTitle(\"Edit properties\")\n\tDiv(breadcrumb){\n\t\tDiv(){\n\t\t\tIf(#type# == page){\n\t\t\t\tLinkPage(\"Pages\", app_pages)\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\t\tSpan(\"Edit page\", text-muted)\n\t\t\t\tDBFind(Name: pages, Source: src_page).WhereId(#edit_property_id#).Vars(item)\n\t\t\t\tDBFind(menu, src_menus)\n\t\t\t}\n\t\t\tIf(#type# == contract){\n\t\t\t\tLinkPage(\"Contracts\", app_contracts)\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\t\tSpan(\"Edit contract\", text-muted)\n\t\t\t\tDBFind(Name: contracts, Source: src_contract).WhereId(#edit_property_id#).Vars(item)\n\t\t\t}\n            If(#type# == block){\n\t\t\t\tLinkPage(\"Blocks\", app_blocks)\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\t\tSpan(\"Edit block\", text-muted)\n\t\t\t\tDBFind(Name: blocks, Source: src_block).WhereId(#edit_property_id#).Vars(item)\n\t\t\t}\n\t\t\tIf(#type# == menu){\n\t\t\t\tLinkPage(\"Menu\", menus_list)\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\t\tSpan(\"Edit menu\", text-muted)\n\t\t\t\tDBFind(Name: menu, Source: src_menu).WhereId(#edit_property_id#).Vars(item)\n\t\t\t}\n\t\t}\n\t}\n    Form(){\n\t\tDiv(form-group){\n\t\t\tLabel(\"Name\")\n\t\t\tInput(Name: Name, Value: #item_name#, Disabled: \"true\")\n\t\t}\n\t\tIf(#type# == page){\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Menu\")\n\t\t\t\tSelect(Name: Menu, Source: src_menus, NameColumn: name, ValueColumn: name, Value: #item_menu#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Change conditions\")\n\t\t\t\tInput(Name: Conditions, Value: #item_conditions#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: app_pages, Contract: EditPage, Params: \"Menu=Val(Menu),Conditions=Val(Conditions),Id=#edit_property_id#\")\n\t\t\t}\n\t\t}\n\t\tIf(#type# == contract){\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Change conditions\")\n\t\t\t\tInput(Name: Conditions, Value: #item_conditions#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Wallet\")\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(col-md-10){\n\t\t\t\t\t\tInput(Name: Wallet,Value: Address(#item_wallet_id#))\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-2){\n\t\t\t\t\t\tIf(#item_active# == 0){\n\t\t\t\t\t\t\tButton(Body: \"Bind\", Class: btn btn-primary btn-block, Contract: ActivateContract, Params: \"Id=#edit_property_id#\", Page:app_contracts)\n\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\tButton(Body: \"Unbind\", Class: btn btn-primary btn-block, Contract: DeactivateContract, Params: \"Id=#edit_property_id#\", Page:properties_edit, PageParams: \"edit_property_id=#edit_property_id#,type=#type#\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: app_contracts, Contract: EditContract, Params: \"Conditions=Val(Conditions),WalletId=Val(Wallet),Id=#edit_property_id#\")\n\t\t\t}\n\t\t}\n\t\tIf(#type# == block){\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Change conditions\")\n\t\t\t\tInput(Name: Conditions, Value: #item_conditions#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: app_blocks, Contract: EditBlock, Params: \"Conditions=Val(Conditions),Id=#edit_property_id#\")\n\t\t\t}\n\t\t}\n\t\tIf(#type# == menu){\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Menu title\")\n\t\t\t\tInput(Name: Title, Value: #item_title#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Change conditions\")\n\t\t\t\tInput(Name: Conditions, Value: #item_conditions#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: menus_list, Contract: EditMenu, Params: \"Conditions=Val(Conditions),Id=#edit_property_id#,NameTitle=Val(Title)\")\n\t\t\t}\n\t\t}\n    }\n}",
            "Name": "properties_edit",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(\"Create table\")\n\tDiv(breadcrumb){\n\t\tDiv(){\n\t\t\tLinkPage(\"Tables\", app_tables)\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tSpan(\"Create\", text-muted)\n\t\t}\n\t}\n\n\tData(src_type,\"type,name\"){\n\t\ttext,\"Text\"\n\t\tnumber,\"Number\"\n\t\tvarchar,\"Varchar\"\n\t\tdatetime,\"Date/Time\"\n\t\tmoney,\"Money\"\n\t\tdouble,\"Double\"\n\t\tcharacter,\"Character\"\n\t\tjson,\"JSON\"\n\t}\n\tForm(){\n\t\tDiv(panel panel-default){\n\t\t\tDiv(panel-body){\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(col-md-12){\n\t\t\t\t\t\tLabel(\"Name\")\n\t\t\t\t\t\tInput(Name:TableName)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(col-md-4 mt-lg){\n\t\t\t\t\t\tLabel(Class: text-muted, Body: \"Columns\")\n\t\t\t\t\t\tInput(Name:disinp, Disabled: true, Value: id)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-7 mt-lg){\n\t\t\t\t\t\tLabel(Class: text-muted, Body: \"Type\")\n\t\t\t\t\t\tInput(Name: disinp, Disabled: true, Value: Number)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-1 mt-lg){\n\t\t\t\t\t\tLabel(Class: text-muted, Body: \"Action\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tIf(GetVar(cs)==\"\"){\n\t\t\t\t\tSetVar(cs, Calculate( Exp: 0, Type: int))\n\t\t\t\t}\n\t\t\t\tIf(#del# == 1){\n\t\t\t\t\tSetVar(cs, Calculate( Exp: #cs# - 1, Type: int))\n\t\t\t\t}.Else{\n\t\t\t\t\tSetVar(cs, Calculate( Exp: #cs# + 1, Type: int))\n\t\t\t\t}\n\t\t\t\tRange(params_range, 0, #cs#)\n\t\t\t\tForList(Source: params_range){\n\t\t\t\t\tDiv(row){\n\t\t\t\t\t\tDiv(col-md-4 mt-sm){\n\t\t\t\t\t\t\tInput(Name:idshare)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(col-md-7 mt-sm){\n\t\t\t\t\t\t\tSelect(Name: share, Source: src_type, NameColumn: name, ValueColumn: type,Value:\"text\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\t\tIf(And(#cs#==#params_range_index#, #cs# > 1)){\n\t\t\t\t\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"cs=#cs#,del=1,app_id=#app_id#\", Page: table_create)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\n\t\t\t}\n\t\t\tDiv(panel-footer){\n\t\t\t\tButton(Body: \"Add column\", Class: btn btn-primary, Page: table_create, PageParams: \"cs=#cs#,app_id=#app_id#\")\n\t\t\t}\n\t\t}\n\t\tDiv(row){\n\t\t\tDiv(col-md-6){\n\t\t\t\tDiv(panel panel-default){\n\t\t\t\t\tDiv(panel-heading, Body: \"Write permissions\")\n\t\t\t\t\tDiv(panel-body){\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tLabel(Insert)\n\t\t\t\t\t\t\tInput(Name: Insert_con, Value: ContractConditions(\"MainCondition\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tLabel(Update)\n\t\t\t\t\t\t\tInput(Name: Update_con, Value: ContractConditions(\"MainCondition\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tLabel(New column)\n\t\t\t\t\t\t\tInput(Name: New_column_con, Value: ContractConditions(\"MainCondition\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tDiv(panel-footer){\n\t\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Contract: @1NewTable, Page: app_tables, Params: \"Shareholding=Val(share),Id=Val(idshare),ApplicationId=#app_id#\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
            "Name": "table_create",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tDBFind(tables, src_mem).Columns(\"id,name,columns,conditions,permissions->insert,permissions->update,permissions->new_column\").Vars(pre).WhereId(#tabl_id#)\n\t\n\tSetTitle(\"Tables\")\n\tDiv(breadcrumb){\n\t\tDiv(){\n\t\t\tLinkPage(\"Tables\", app_tables)\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tLinkPage(#pre_name#, table_view,, \"tabl_id=#tabl_id#\")\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tSpan(\"Edit\", text-muted)\n\t\t}\n\t}\n\n\tForm(){\n\t\tDiv(panel panel-default){\n\t\t\tDiv(panel-body){\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(col-md-3 h4){\n\t\t\t\t\t\tLabel(\"Name\")\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-2 h4){\n\t\t\t\t\t\tLabel(\"Type\")\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-5 h4){\n\t\t\t\t\t\tLabel(\"Conditions\")\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-2 h4 text-right){\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tJsonToSource(src_columns, #pre_columns#)\n\t\t\t\tForList(src_columns){\n\t\t\t\t\tDiv(list-group-item){\n\t\t\t\t\t\tDiv(row){\n\t\t\t\t\t\t\tDiv(col-md-3 h5){\n\t\t\t\t\t\t\t\tSpan(#key#)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(col-md-2 h5){\n\t\t\t\t\t\t\t\tSetVar(col_type,GetColumnType(#pre_name#, #key#))\n\t\t\t\t\t\t\t\tIf(#col_type# == text){\n\t\t\t\t\t\t\t\t\tSpan(\"Text\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == number){\n\t\t\t\t\t\t\t\t\tSpan(\"Number\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == money){\n\t\t\t\t\t\t\t\t\tSpan(\"Money\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == varchar){\n\t\t\t\t\t\t\t\t\tSpan(\"Varchar\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == datetime){\n\t\t\t\t\t\t\t\t\tSpan(\"Date/Time\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == double){\n\t\t\t\t\t\t\t\t\tSpan(\"Double\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == character){\n\t\t\t\t\t\t\t\t\tSpan(\"Character\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == json){\n\t\t\t\t\t\t\t\t\tSpan(\"JSON\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == bytea){\n\t\t\t\t\t\t\t\t\tSpan(\"Binary Data\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == uuid){\n\t\t\t\t\t\t\t\t\tSpan(\"UUID\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(col-md-5 h5){\n\t\t\t\t\t\t\t\tSpan(#value#)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(col-md-2 text-right){\n\t\t\t\t\t\t\t\tButton(Body: \"Edit\", Class: btn btn-primary, Page: column_edit, PageParams: \"name_column=#key#,tabl_id=#tabl_id#\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(panel-footer){\n\t\t\t\tButton(Body: \"Add Column\", Class: btn btn-primary, Page: column_add, PageParams: \"next_table_name=#pre_name#,tabl_id=#tabl_id#\")\n\t\t\t}\n\t\t}\n\t\tDiv(row){\n\t\t\tDiv(col-md-6){\n\t\t\t\tDiv(panel panel-default){\n\t\t\t\t\tDiv(panel-heading){Write permissions}\n\t\t\t\t\tDiv(panel-body){\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tLabel(\"Insert\")\n\t\t\t\t\t\t\tInput(Name: Insert_con, Type: text, Value: #pre_permissions_insert#)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tLabel(\"Update\")\n\t\t\t\t\t\t\tInput(Name: Update_con, Type: text, Value: #pre_permissions_update#)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tLabel(\"New column\")\n\t\t\t\t\t\t\tInput(Name: New_column_con, Type: text, Value: #pre_permissions_new_column#)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tDiv(panel-footer){\n\t\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Contract: @1EditTable, Page: app_tables, Params: \"Name=#pre_name#\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(col-md-6){\n\t\t\t\tDiv(panel panel-default){\n\t\t\t\t\tDiv(panel-heading){Conditions for changing permissions}\n\t\t\t\t\tDiv(panel-body){\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tInput(Name: Insert_condition, Disabled: true, Type: text, Value: #pre_conditions#)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
            "Name": "table_edit",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tDBFind(tables, src_mem).Columns(\"id,name\").Vars(pre).WhereId(#tabl_id#)\n\n    SetTitle(\"Tables\")\n    Div(breadcrumb){\n        LinkPage(\"Tables\", app_tables)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(#pre_name#, text-muted)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tLinkPage(\"Edit\", table_edit,, \"tabl_id=#tabl_id#\")\n    }\n\t\n\tDiv(panel panel-default){\n\t\tDiv(panel-body){\n\t\t\tDiv(table-responsive){\n\t\t\t\tDBFind(#pre_name#, src_mem)\n\t\t\t\tTable(Source: src_mem)\n\t\t\t}\n\t\t}\n\t}\n}",
            "Name": "table_view",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract DelApplication {\n    data {\n        ApplicationId int\n        Value int \"optional\"\n    }\n\n    conditions {\n        RowConditions(\"applications\", $ApplicationId, false)\n    }\n\n    action {\n        if $Value == 1 {\n            DBUpdate(\"applications\", $ApplicationId, \"deleted\", 1)\n        }\n        else {\n            DBUpdate(\"applications\", $ApplicationId, \"deleted\", 0)\n        } \n    }\n}",
            "Name": "DelApplication",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditAppParam {\n\tdata {\n\t\tId int\n\t\tValue string \"optional\"\n\t\tConditions string \"optional\"\n\t}\n\tfunc onlyConditions() bool {\n\t\treturn $Conditions && !$Value\n\t}\n\t\n\tconditions {\n\t\tRowConditions(\"app_params\", $Id, onlyConditions())\n\t\tif $Conditions {\n\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\t\t}\n\t}\n\t\n\taction {\n\t\tvar pars, vals array\n\t\tif $Value {\n\t\t\tpars[0] = \"value\"\n\t\t\tvals[0] = $Value\n\t\t}\n\t\tif $Conditions {\n\t\t\tpars[Len(pars)] = \"conditions\"\n\t\t\tvals[Len(vals)] = $Conditions\n\t\t}\n\t\tif Len(vals) > 0 {\n\t\t\tDBUpdate(\"app_params\", $Id, Join(pars, \",\"), vals...)\n\t\t}\n\t}\n}",
            "Name": "EditAppParam",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditApplication {\n    data {\n        ApplicationId int\n        Conditions string \"optional\"\n    }\n\tfunc onlyConditions() bool {\n\t\treturn $Conditions && false\n\t}\n\n    conditions {\n\t\tRowConditions(\"applications\", $ApplicationId, onlyConditions())\n\t\tif $Conditions {\n\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\t\t}\n    }\n\n    action {\n\t\tvar pars, vals array\n\t\tif $Conditions {\n\t\t\tpars[0] = \"conditions\"\n\t\t\tvals[0] = $Conditions\n\t\t}\n\t\tif Len(vals) > 0 {\t\n\t\t\tDBUpdate(\"applications\", $ApplicationId, Join(pars, \",\"), vals...)\n\t\t}\n    }\n}",
            "Name": "EditApplication",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditBlock {\n\tdata {\n\t\tId int\n\t\tValue string \"optional\"\n\t\tConditions string \"optional\"\n\t}\n\tfunc onlyConditions() bool {\n\t\treturn $Conditions && !$Value\n\t}\n\n\tconditions {\n\t\tRowConditions(\"blocks\", $Id, onlyConditions())\n\t\tif $Conditions {\n\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\t\t}\n\t}\n\t\n\taction {\n\t\tvar pars, vals array\n\t\tif $Value {\n\t\t\tpars[0] = \"value\"\n\t\t\tvals[0] = $Value\n\t\t}\n\t\tif $Conditions {\n\t\t\tpars[Len(pars)] = \"conditions\"\n\t\t\tvals[Len(vals)] = $Conditions\n\t\t}\n\t\tif Len(vals) > 0 {\n\t\t\tDBUpdate(\"blocks\", $Id, Join(pars, \",\"), vals...)\n\t\t}\n\t}\n}",
            "Name": "EditBlock",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditColumn {\n\tdata {\n\t\tTableName string\n\t\tName string\n\t\tPermissions string\n\t}\n\t\n\tconditions {\n\t\tColumnCondition($TableName, $Name, \"\", $Permissions)\n\t}\n\t\n\taction {\n\t\tPermColumn($TableName, $Name, $Permissions)\n\t}\n}",
            "Name": "EditColumn",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditContract {\n\tdata {\n\t\tId int\n\t\tValue string \"optional\"\n\t\tConditions string \"optional\"\n\t\tWalletId string \"optional\"\n\t}\n\tfunc onlyConditions() bool {\n\t\treturn $Conditions && !$Value && !$WalletId\n\t}\n\n\tconditions {\n\t\tRowConditions(\"contracts\", $Id, onlyConditions())\n\t\tif $Conditions {\n\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\t\t}\n\t\t$cur = DBFind(\"contracts\").Columns(\"id,value,conditions,active,wallet_id,token_id\").WhereId($Id).Row()\n\t\tif !$cur {\n\t\t\terror Sprintf(\"Contract %d does not exist\", $Id)\n\t\t}\n\t\tif $Value {\n\t\t\tvar list, curlist array\n\t\t\tlist = ContractsList($Value)\n\t\t\tcurlist = ContractsList($cur[\"value\"])\n\t\t\tif Len(list) != Len(curlist) {\n\t\t\t\terror \"Contracts cannot be removed or inserted\"\n\t\t\t}\n\t\t\tvar i int\n\t\t\twhile i < Len(list) {\n\t\t\t\tvar j int\n\t\t\t\tvar ok bool\n\t\t\t\twhile j < Len(curlist) {\n\t\t\t\t\tif curlist[j] == list[i] {\n\t\t\t\t\t\tok = true\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tj = j + 1 \n\t\t\t\t}\n\t\t\t\tif !ok {\n\t\t\t\t\terror \"Contracts or functions names cannot be changed\"\n\t\t\t\t}\n\t\t\t\ti = i + 1\n\t\t\t}\n\t\t}\n\t\tif $WalletId != \"\" {\n\t\t\t$recipient = AddressToId($WalletId)\n\t\t\tif $recipient == 0 {\n\t\t\t\terror Sprintf(\"New contract owner %s is invalid\", $WalletId)\n\t\t\t}\n\t\t\tif Int($cur[\"active\"]) == 1 {\n\t\t\t\terror \"Contract must be deactivated before wallet changing\"\n\t\t\t}\n\t\t} else {\n\t\t\t$recipient = Int($cur[\"wallet_id\"])\n\t\t}\n\t}\n\t\n\taction {\n\t\tvar root int\n\t\tvar pars, vals array\n\t\tif $Value {\n\t\t\troot = CompileContract($Value, $ecosystem_id, $recipient, Int($cur[\"token_id\"]))\n\t\t\tpars[0] = \"value\"\n\t\t\tvals[0] = $Value\n\t\t}\n\t\tif $Conditions {\n\t\t\tpars[Len(pars)] = \"conditions\"\n\t\t\tvals[Len(vals)] = $Conditions\n\t\t}\n\t\tif $WalletId != \"\" {\n\t\t\tpars[Len(pars)] = \"wallet_id\"\n\t\t\tvals[Len(vals)] = $recipient\n\t\t}\n\t\tif Len(vals) > 0 {\n\t\t\tDBUpdate(\"contracts\", $Id, Join(pars, \",\"), vals...)\n\t\t}\t\t\n\t\tif $Value {\n\t\t\tFlushContract(root, $Id, Int($cur[\"active\"]) == 1)\n\t\t} else {\n\t\t\tif $WalletId != \"\" {\n\t\t\t\tSetContractWallet($Id, $ecosystem_id, $recipient)\n\t\t\t}\n\t\t}\n\t}\n\tfunc rollback() {\n\t\tRollbackEditContract()\n\t}\n}",
            "Name": "EditContract",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditLang {\n    data {\n        Id int\n        Trans string \"optional\"\n        Value array \"optional\"\n        IdLanguage array \"optional\"\n    }\n\n    conditions {\n        var j int\n        while j < Len($IdLanguage) {\n            if ($IdLanguage[j] == \"\"){\n                info(\"Locale empty\")\n            }\n            if ($Value[j] == \"\"){\n                info(\"Value empty\")\n            }\n            j = j + 1\n        }\n        EvalCondition(\"parameters\", \"changing_language\", \"value\")\n    }\n\n    action {\n        if Len($IdLanguage) > 0 {\n            var trans map\n            var i int\n            while i < Len($IdLanguage) {\n                trans[$IdLanguage[i]] = $Value[i]\n                i = i + 1\n            }\n            DBUpdate(\"languages\", $Id, \"res\", trans)\n        } else {\n            DBUpdate(\"languages\", $Id, \"res\", $Trans)\n        }\n    }\n}",
            "Name": "EditLang",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditMenu {\n\tdata {\n\t\tId int\n\t\tValue string \"optional\"\n\t\tTitle string \"optional\"\n\t\tConditions string \"optional\"\n\t}\n\tfunc onlyConditions() bool {\n\t\treturn $Conditions && !$Value && !$Title\n\t}\n\n\tconditions {\n\t\tRowConditions(\"menu\", $Id, onlyConditions())\n\t\tif $Conditions {\n\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\t\t}\n\t}\n\t\n\taction {\n\t\tvar pars, vals array\n\t\tif $Value {\n\t\t\tpars[0] = \"value\"\n\t\t\tvals[0] = $Value\n\t\t}\n\t\tif $Title {\n\t\t\tpars[Len(pars)] = \"title\"\n\t\t\tvals[Len(vals)] = $Title\n\t\t}\n\t\tif $Conditions {\n\t\t\tpars[Len(pars)] = \"conditions\"\n\t\t\tvals[Len(vals)] = $Conditions\n\t\t}\n\t\tif Len(vals) > 0 {\n\t\t\tDBUpdate(\"menu\", $Id, Join(pars, \",\"), vals...)\n\t\t}\t\t\t\n\t}\n}",
            "Name": "EditMenu",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditPage {\n\tdata {\n\t\tId int\n\t\tValue string \"optional\"\n\t\tMenu string \"optional\"\n\t\tConditions string \"optional\"\n\t\tValidateCount int \"optional\"\n\t\tValidateMode  string \"optional\"\n\t}\n\tfunc onlyConditions() bool {\n\t\treturn $Conditions && !$Value && !$Menu && !$ValidateCount \n\t}\n\tfunc preparePageValidateCount(count int) int {\n\t\tvar min, max int\n\t\tmin = Int(EcosysParam(\"min_page_validate_count\"))\n\t\tmax = Int(EcosysParam(\"max_page_validate_count\"))\n\t\tif count < min {\n\t\t\tcount = min\n\t\t} else {\n\t\t\tif count > max {\n\t\t\t\tcount = max\n\t\t\t}\n\t\t}\n\t\treturn count\n\t}\n\t\n\tconditions {\n\t\tRowConditions(\"pages\", $Id, onlyConditions())\n\t\tif $Conditions {\n\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\t\t}\n\t\t$ValidateCount = preparePageValidateCount($ValidateCount)\n\t}\n\t\n\taction {\n\t\tvar pars, vals array\n\t\tif $Value {\n\t\t\tpars[0] = \"value\"\n\t\t\tvals[0] = $Value\n\t\t}\n\t\tif $Menu {\n\t\t\tpars[Len(pars)] = \"menu\"\n\t\t\tvals[Len(vals)] = $Menu\n\t\t}\n\t\tif $Conditions {\n\t\t\tpars[Len(pars)] = \"conditions\"\n\t\t\tvals[Len(vals)] = $Conditions\n\t\t}\n\t\tif $ValidateCount {\n\t\t\tpars[Len(pars)] = \"validate_count\"\n\t\t\tvals[Len(vals)] = $ValidateCount\n\t\t}\n\t\tif $ValidateMode {\n\t\t\tif $ValidateMode != \"1\" {\n\t\t\t\t$ValidateMode = \"0\"\n\t\t\t}\n\t\t\tpars[Len(pars)] = \"validate_mode\"\n\t\t\tvals[Len(vals)] = $ValidateMode\n\t\t}\n\t\tif Len(vals) > 0 {\n\t\t\tDBUpdate(\"pages\", $Id, Join(pars, \",\"), vals...)\n\t\t}\n\t}\n}",
            "Name": "EditPage",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditParameter {\n\tdata {\n\t\tId int\n\t\tValue string \"optional\"\n\t\tConditions string \"optional\"\n\t}\n\tfunc onlyConditions() bool {\n\t\treturn $Conditions && !$Value\n\t}\n\n\tconditions {\n\t\tRowConditions(\"parameters\", $Id, onlyConditions())\n\t\tif $Conditions {\n\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\t\t}\n\t}\n\t\n\taction {\n\t\tvar pars, vals array\n\t\tif $Value {\n\t\t\tpars[0] = \"value\"\n\t\t\tvals[0] = $Value\n\t\t}\n\t\tif $Conditions {\n\t\t\tpars[Len(pars)] = \"conditions\"\n\t\t\tvals[Len(vals)] = $Conditions\n\t\t}\n\t\tif Len(vals) > 0 {\n\t\t\tDBUpdate(\"parameters\", $Id, Join(pars, \",\"), vals...)\n\t\t}\n\t}\n}",
            "Name": "EditParameter",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditSign {\n\tdata {\n\t\tId int\n\t\tValue string \"optional\"\n        Title string \"optional\"\n        Parameter string \"optional\"\n\t\tConditions string\n\t}\n\n\tfunc onlyConditions() bool {\n\t\treturn $Conditions && false\n\t}\n\tconditions {\n\t\tRowConditions(\"signatures\", $Id, onlyConditions())\n\t\tif $Conditions {\n\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\t\t}\n\t}\n\taction {\n        if Size($Value) > 0 {\n            DBUpdate(\"signatures\", $Id, \"value,conditions\", $Value, $Conditions)\n        } else {\n            var value map\n            value[\"title\"] = $Title \n            value[\"params\"] = $Parameter\n            DBUpdate(\"signatures\", $Id, \"value,conditions\", value, $Conditions)\n        }\n\t}\n}",
            "Name": "EditSign",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditTable {\n\tdata {\n\t\tName string\n\t\tInsert_con string \"optional\"\n    \tUpdate_con string \"optional\"\n    \tNew_column_con string \"optional\"\n\t}\n\t\n\tconditions {\n        $Permissions = Sprintf(`{\"insert\":%q,\"update\":%q,\"new_column\":%q}`, $Insert_con, $Update_con, $New_column_con)\n\t\tTableConditions($Name, \"\", $Permissions)\n\t}\n\t\n\taction {\n\t\tPermTable($Name, $Permissions )\n\t}\n}",
            "Name": "EditTable",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract UploadBinary {\n    data {\n        ApplicationId int\n        Name string\n        Data bytes \"file\"\n        DataMimeType string \"optional\"\n    }\n\n    conditions {\n        $Id = Int(DBFind(\"binaries\").Columns(\"id\").Where(\"app_id = ? AND member_id = ? AND name = ?\", $ApplicationId, $key_id, $Name).One(\"id\"))\n\t\t\n\t\tif $Id == 0 {\n\t\t\tif $ApplicationId == 0 {\n\t\t\t\twarning \"Application id cannot equal 0\"\n\t\t\t}\n\t\t}\n    }\n    action {\n        var hash string\n        hash = MD5($Data)\n\n        if $DataMimeType == \"\" {\n            $DataMimeType = \"application/octet-stream\"\n        }\n\n        if $Id != 0 {\n            DBUpdate(\"binaries\", $Id, \"data,hash,mime_type\", $Data, hash, $DataMimeType)\n        } else {\n            $Id = DBInsert(\"binaries\", \"app_id,member_id,name,data,hash,mime_type\", $ApplicationId, $key_id, $Name, $Data, hash, $DataMimeType)\n        }\n\n        $result = $Id\n    }\n}",
            "Name": "UploadBinary",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Export_NewApp {\n    data {\n        app_id int\n    }\n\n    conditions {\n        $app_map = DBFind(\"applications\").Columns(\"id,name\").Where(\"id=$\", $app_id).Row()\n        if !$app_map{\n            warning \"Application not found\"\n        }\n    }\n\n    action {\n\n        //=====================================================================================================\n        //------------------------------------Menu search------------------------------------------------------\n        var i int\n        var pages_array array\n        var menu_name_array array\n\t\tvar menu_id_array array\n\n        i = 0\n        var pages_ret array\n        pages_ret = DBFind(\"pages\").Where(\"app_id=?\", $app_id)\n        while i < Len(pages_ret) {\n            var page_map map\n            page_map = pages_ret[i]\n\n            pages_array[Len(pages_array)] = Sprintf(\"'%v'\", Str(page_map[\"menu\"]))\n            i = i + 1\n        }\n\n        if Len(pages_array) > 0 {\n            var where_for_menu string\n            where_for_menu = Sprintf(\"name in (%v)\", Join(pages_array, \",\"))\n\n            i = 0\n            var menu_ret array\n            menu_ret = DBFind(\"menu\").Where(where_for_menu)\n            while i < Len(menu_ret) {\n                var menu_map map\n                menu_map = menu_ret[i]\n\n                menu_name_array[Len(menu_name_array)] = Str(menu_map[\"name\"])\n\t\t\t\tmenu_id_array[Len(menu_id_array)] = Str(menu_map[\"id\"])\n                i = i + 1\n            }\n        }\n\n        //=====================================================================================================\n        //------------------------------------Creating settings------------------------------------------------\n    \n        var value map\n        value[\"app_id\"] = Str($app_id)\n        value[\"app_name\"] = Str($app_map[\"name\"])\n\t\t\n\t\tif Len(menu_name_array) > 0 {\n\t\t\tvalue[\"menu_id\"] = Str(Join(menu_id_array, \", \"))\n\t\t\tvalue[\"menu_name\"] = Str(Join(menu_name_array, \", \"))\n\t\t\tvalue[\"count_menu\"] = Str(Len(menu_name_array))\n\t\t} else {\n\t\t\tvalue[\"menu_id\"] = \"0\"\n\t\t\tvalue[\"menu_name\"] = \"\"\n\t\t\tvalue[\"count_menu\"] = \"0\"\n\t\t}\n\n        $buffer_id = DBFind(\"buffer_data\").Where(\"member_id=$ and key=$\", $key_id, \"export\").One(\"id\")\n        if !$buffer_id {\n            DBInsert(\"buffer_data\", \"member_id,key,value\", $key_id, \"export\", value)\n        } else {\n            DBUpdate(\"buffer_data\", Int($buffer_id), \"value\", value)\n        }\n    }\n}",
            "Name": "Export_NewApp",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Import {\n    data {\n        Data string\n    }\n    func ReplaceValue(s string) string {\n        s = Replace(s, \"#IMPORT_ECOSYSTEM_ID#\", \"#ecosystem_id#\")\n        s = Replace(s, \"#IMPORT_KEY_ID#\", \"#key_id#\")\n        s = Replace(s, \"#IMPORT_ISMOBILE#\", \"#isMobile#\")\n        s = Replace(s, \"#IMPORT_ROLE_ID#\", \"#role_id#\")\n        s = Replace(s, \"#IMPORT_ECOSYSTEM_NAME#\", \"#ecosystem_name#\")\n        return s\n    }\n\n    conditions {\n        $Data = ReplaceValue($Data)\n\n        $ApplicationId = 0\n        var app_map map\n        app_map = DBFind(\"buffer_data\").Columns(\"value->app_name\").Where(\"key='import_info' and member_id=$\", $key_id).Row()\n        if app_map{\n            var app_id int\n            app_id = DBFind(\"applications\").Columns(\"id\").Where(\"name=$\", Str(app_map[\"value.app_name\"])).One(\"id\")\n            if app_id {\n                $ApplicationId = Int(app_id)\n            }\n        }\n    }\n\n    action {\n        var editors, creators map\n        editors[\"pages\"] = \"EditPage\"\n        editors[\"blocks\"] = \"EditBlock\"\n        editors[\"menu\"] = \"EditMenu\"\n        editors[\"app_params\"] = \"EditAppParam\"\n        editors[\"languages\"] = \"EditLang\"\n        editors[\"contracts\"] = \"EditContract\"\n        editors[\"tables\"] = \"\" // nothing\n\n        creators[\"pages\"] = \"NewPage\"\n        creators[\"blocks\"] = \"NewBlock\"\n        creators[\"menu\"] = \"NewMenu\"\n        creators[\"app_params\"] = \"NewAppParam\"\n        creators[\"languages\"] = \"NewLang\"\n        creators[\"contracts\"] = \"NewContract\"\n        creators[\"tables\"] = \"NewTable\"\n\n        var dataImport array\n        dataImport = JSONDecode($Data)\n        var i int\n        while i<Len(dataImport){\n            var item, cdata map\n            cdata = dataImport[i]\n            cdata[\"ApplicationId\"] = $ApplicationId\n            $Type = cdata[\"Type\"]\n            $Name = cdata[\"Name\"]\n\n            Println(Sprintf(\"import %v: %v\", $Type, cdata[\"Name\"]))\n\n            item = DBFind($Type).Where(\"name=?\", $Name).Row()\n            var contractName string\n            if item {\n                contractName = editors[$Type]\n                cdata[\"Id\"] = Int(item[\"id\"])\n                if $Type == \"menu\"{\n                    var menu menuItem string\n                    menu = Replace(item[\"value\"], \" \", \"\")\n                    menu = Replace(menu, \"\\n\", \"\")\n                    menu = Replace(menu, \"\\r\", \"\")\n                    menuItem = Replace(cdata[\"Value\"], \" \", \"\")\n                    menuItem = Replace(menuItem, \"\\n\", \"\")\n                    menuItem = Replace(menuItem, \"\\r\", \"\")\n                    if Contains(menu, menuItem) {\n                        // ignore repeated\n                        contractName = \"\"\n                    }else{\n                        cdata[\"Value\"] = item[\"value\"] + \"\\n\" + cdata[\"Value\"]\n                    }\n                }\n            } else {\n                contractName = creators[$Type]\n            }\n\n            if contractName != \"\"{\n                CallContract(contractName, cdata)\n            }\n            i=i+1\n        }\n        Println(Sprintf(\"> time: %v\", $time))\n    }\n}",
            "Name": "Import",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Import_Upload {\n    data {\n        input_file string \"file\"\n    }\n    func ReplaceValue(s string) string {\n\t\ts = Replace(s, \"#ecosystem_id#\", \"#IMPORT_ECOSYSTEM_ID#\")\n        s = Replace(s, \"#key_id#\", \"#IMPORT_KEY_ID#\")\n        s = Replace(s, \"#isMobile#\", \"#IMPORT_ISMOBILE#\")\n        s = Replace(s, \"#role_id#\", \"#IMPORT_ROLE_ID#\")\n        s = Replace(s, \"#ecosystem_name#\", \"#IMPORT_ECOSYSTEM_NAME#\")\n        return s\n    }\n\t\n    conditions {\n        $input_file = BytesToString($input_file)\n\t\t$input_file = ReplaceValue($input_file)\n        $limit = 5 // data piece size of import\n\n        // init buffer_data, cleaning old buffer\n        var initJson map\n        $import_id = DBFind(\"buffer_data\").Where(\"member_id=$ and key=$\", $key_id, \"import\").One(\"id\")\n        if $import_id {\n            $import_id = Int($import_id)\n            DBUpdate(\"buffer_data\", $import_id, \"value\", initJson)\n        } else {\n            $import_id = DBInsert(\"buffer_data\", \"member_id,key,value\", $key_id, \"import\", initJson)\n        }\n\n        $info_id = DBFind(\"buffer_data\").Where(\"member_id=$ and key=$\", $key_id, \"import_info\").One(\"id\")\n        if $info_id {\n            $info_id = Int($info_id)\n            DBUpdate(\"buffer_data\", $info_id, \"value\", initJson)\n        } else {\n            $info_id = DBInsert(\"buffer_data\", \"member_id,key,value\", $key_id, \"import_info\", initJson)\n        }\n    }\n\n    action {\n        var input map\n        input = JSONDecode($input_file)\n        var arr_data array\n        arr_data = input[\"data\"]\n\n        var pages_arr, blocks_arr, menu_arr, parameters_arr, languages_arr, contracts_arr, tables_arr array\n        \n        // import info\n        var i int\n        while i<Len(arr_data){\n            var tmp_object map\n            tmp_object = arr_data[i]\n\n            if tmp_object[\"Type\"] == \"pages\" {\n                pages_arr[Len(pages_arr)] = Str(tmp_object[\"Name\"])\n            }\n            if tmp_object[\"Type\"] == \"blocks\" {\n                blocks_arr[Len(blocks_arr)] = Str(tmp_object[\"Name\"])\n            }\n            if tmp_object[\"Type\"] == \"menu\" {\n                menu_arr[Len(menu_arr)] = Str(tmp_object[\"Name\"])\n            }\n            if tmp_object[\"Type\"] == \"app_params\" {\n                parameters_arr[Len(parameters_arr)] = Str(tmp_object[\"Name\"])\n            }\n            if tmp_object[\"Type\"] == \"languages\" {\n                languages_arr[Len(languages_arr)] = Str(tmp_object[\"Name\"])\n            }\n            if tmp_object[\"Type\"] == \"contracts\" {\n                contracts_arr[Len(contracts_arr)] = Str(tmp_object[\"Name\"])\n            }\n            if tmp_object[\"Type\"] == \"tables\" {\n                tables_arr[Len(tables_arr)] = Str(tmp_object[\"Name\"])\n            }\n\n            i = i + 1\n        }\n\n        var info_map map\n        info_map[\"app_name\"] = input[\"name\"]\n        info_map[\"pages\"] = Join(pages_arr, \", \")\n        info_map[\"pages_count\"] = Len(pages_arr)\n        info_map[\"blocks\"] = Join(blocks_arr, \", \")\n        info_map[\"blocks_count\"] = Len(blocks_arr)\n        info_map[\"menu\"] = Join(menu_arr, \", \")\n        info_map[\"menu_count\"] = Len(menu_arr)\n        info_map[\"parameters\"] = Join(parameters_arr, \", \")\n        info_map[\"parameters_count\"] = Len(parameters_arr)\n        info_map[\"languages\"] = Join(languages_arr, \", \")\n        info_map[\"languages_count\"] = Len(languages_arr)\n        info_map[\"contracts\"] = Join(contracts_arr, \", \")\n        info_map[\"contracts_count\"] = Len(contracts_arr)\n        info_map[\"tables\"] = Join(tables_arr, \", \")\n        info_map[\"tables_count\"] = Len(tables_arr)\n\n        if 0 == Len(pages_arr) + Len(blocks_arr) + Len(menu_arr) + Len(parameters_arr) + Len(languages_arr) + Len(contracts_arr) + Len(tables_arr) {\n            warning \"Invalid or empty import file\"\n        }\n\n        // import data\n        i=0\n        var sliced array\n        var arr_data_len int\n        arr_data_len = Len(arr_data)\n        while i <arr_data_len{\n            var part array\n            var l int\n            while l < $limit && (i+l < arr_data_len) {\n                part[l] = arr_data[i+l]\n                l=l+1\n            }\n            var batch map\n            batch[\"Data\"] = JSONEncode(part)\n            sliced[Len(sliced)] = batch\n            i=i+$limit\n        }\n        input[\"data\"] = sliced\n\n        // storing\n        DBUpdate(\"buffer_data\", $import_id, \"value\", input)\n        DBUpdate(\"buffer_data\", $info_id, \"value\", info_map)\n\n        var app_id int\n        app_id = DBFind(\"applications\").Columns(\"id\").Where(\"name=$\", Str(input[\"name\"])).One(\"id\")\n\n        if !app_id {\n            DBInsert(\"applications\", \"name,conditions\", Str(input[\"name\"]), \"true\")\n        }\n    }\n}",
            "Name": "Import_Upload",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewAppParam {\n    data {\n        ApplicationId int\n        Name string\n        Value string\n        Conditions string\n    }\n\n    conditions {\n        ValidateCondition($Conditions, $ecosystem_id)\n\n        if $ApplicationId == 0 {\n            warning \"Application id cannot equal 0\"\n        }\n\n        if DBFind(\"app_params\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\") {\n            warning Sprintf( \"Application parameter %s already exists\", $Name)\n        }\n    }\n\n    action {\n        DBInsert(\"app_params\", \"app_id,name,value,conditions\", $ApplicationId, $Name, $Value, $Conditions)\n    }\n}",
            "Name": "NewAppParam",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewApplication {\n    data {\n        Name string\n        Conditions string\n    }\n\n    conditions {\n        ValidateCondition($Conditions, $ecosystem_id)\n\t\n        if Size($Name) == 0 {\n            warning \"Application name missing\"\n        }\n\n        if DBFind(\"applications\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\") {\n            warning Sprintf( \"Application %s already exists\", $Name)\n        }\n    }\n\n    action {\n        $result = DBInsert(\"applications\", \"name,conditions\", $Name, $Conditions)\n    }\n}",
            "Name": "NewApplication",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewBlock {\n    data {\n        ApplicationId int\n        Name string\n        Value string\n        Conditions string\n    }\n\n    conditions {\n        ValidateCondition($Conditions, $ecosystem_id)\n\n        if $ApplicationId == 0 {\n            warning \"Application id cannot equal 0\"\n        }\n\n        if DBFind(\"blocks\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\") {\n            warning Sprintf( \"Block %s already exists\", $Name)\n        }\n    }\n\n    action {\n        DBInsert(\"blocks\", \"name,value,conditions,app_id\", $Name, $Value, $Conditions, $ApplicationId)\n    }\n}",
            "Name": "NewBlock",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewColumn {\n    data {\n        TableName string\n        Name string\n        Type string\n        Permissions string\n    }\n    conditions {\n        ColumnCondition($TableName, $Name, $Type, $Permissions)\n    }\n    action {\n        CreateColumn($TableName, $Name, $Type, $Permissions)\n    }\n    func rollback() {\n        RollbackColumn($TableName, $Name)\n    }\n    func price() int {\n        return SysParamInt(\"column_price\")\n    }\n}",
            "Name": "NewColumn",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewContract {\n    data {\n        ApplicationId int\n        Value string\n        Conditions string\n        Wallet string \"optional\"\n        TokenEcosystem int \"optional\"\n    }\n\n    conditions {\n        ValidateCondition($Conditions,$ecosystem_id)\n\t\t\n        if $ApplicationId == 0 {\n            warning \"Application id cannot equal 0\"\n        }\n\t\t\n        $walletContract = $key_id\n        if $Wallet {\n            $walletContract = AddressToId($Wallet)\n            if $walletContract == 0 {\n                error Sprintf(\"wrong wallet %s\", $Wallet)\n            }\n        }\n        var list array\n        list = ContractsList($Value)\n\n        if Len(list) == 0 {\n            error \"must be the name\"\n        }\n\n        var i int\n        while i < Len(list) {\n            if IsObject(list[i], $ecosystem_id) {\n                warning Sprintf(\"Contract or function %s exists\", list[i])\n            }\n            i = i + 1\n        }\n\n        $contract_name = list[0]\n        if !$TokenEcosystem {\n            $TokenEcosystem = 1\n        } else {\n            if !SysFuel($TokenEcosystem) {\n                warning Sprintf(\"Ecosystem %d is not system\", $TokenEcosystem)\n            }\n        }\n    }\n\n    action {\n        var root, id int\n        root = CompileContract($Value, $ecosystem_id, $walletContract, $TokenEcosystem)\n        id = DBInsert(\"contracts\", \"name,value,conditions, wallet_id, token_id,app_id\", $contract_name, $Value, $Conditions, $walletContract, $TokenEcosystem, $ApplicationId)\n        FlushContract(root, id, false)\n        $result = id\n    }\n    func rollback() {\n        var list array\n        list = ContractsList($Value)\n        var i int\n        while i < Len(list) {\n            RollbackContract(list[i])\n            i = i + 1\n        }\n    }\n    func price() int {\n        return SysParamInt(\"contract_price\")\n    }\n}",
            "Name": "NewContract",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewLang {\n    data {\n        ApplicationId int\n        Name string\n        Trans string \"optional\"\n        Value array \"optional\"\n        IdLanguage array \"optional\"\n    }\n\n    conditions {\n        if $ApplicationId == 0 {\n            warning \"Application id cannot equal 0\"\n        }\n\n        if DBFind(\"languages\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\") {\n            warning Sprintf( \"Language resource %s already exists\", $Name)\n        }\n\n        var j int\n        while j < Len($IdLanguage) {\n            if $IdLanguage[j] == \"\" {\n                info(\"Locale empty\")\n            }\n            if $Value[j] == \"\" {\n                info(\"Value empty\")\n            }\n            j = j + 1\n        }\n        EvalCondition(\"parameters\", \"changing_language\", \"value\")\n    }\n\n    action {\n        if Len($IdLanguage) > 0 {\n            var trans map\n            var i int\n            while i < Len($IdLanguage) {\n                trans[$IdLanguage[i]] = $Value[i]\n                i = i + 1\n            }\n            $Id = DBInsert(\"languages\", \"name,res,app_id\", $Name, trans, $ApplicationId)\n        } else {\n            $Id = DBInsert(\"languages\", \"name,res,app_id\", $Name, $Trans, $ApplicationId)\n        }\n    }\n}",
            "Name": "NewLang",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewMenu {\n    data {\n        Name string\n        Value string\n        Title string \"optional\"\n        Conditions string\n    }\n\n    conditions {\n        ValidateCondition($Conditions,$ecosystem_id)\n\n        if DBFind(\"menu\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\") {\n            warning Sprintf( \"Menu %s already exists\", $Name)\n        }\n    }\n\n    action {\n        DBInsert(\"menu\", \"name,value,title,conditions\", $Name, $Value, $Title, $Conditions)\n    }\n    func price() int {\n        return SysParamInt(\"menu_price\")\n    }\n}",
            "Name": "NewMenu",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewPage {\n    data {\n        ApplicationId int\n        Name string\n        Value string\n        Menu string\n        Conditions string\n        ValidateCount int \"optional\"\n    }\n    func preparePageValidateCount(count int) int {\n        var min, max int\n        min = Int(EcosysParam(\"min_page_validate_count\"))\n        max = Int(EcosysParam(\"max_page_validate_count\"))\n\n        if count < min {\n            count = min\n        } else {\n            if count > max {\n                count = max\n            }\n        }\n        return count\n    }\n\n    conditions {\n        ValidateCondition($Conditions,$ecosystem_id)\n\n        if $ApplicationId == 0 {\n            warning \"Application id cannot equal 0\"\n        }\n\n        if DBFind(\"pages\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\") {\n            warning Sprintf( \"Block %s already exists\", $Name)\n        }\n\n        $ValidateCount = preparePageValidateCount($ValidateCount)\n    }\n\n    action {\n        DBInsert(\"pages\", \"name,value,menu,validate_count,conditions,app_id\", $Name, $Value, $Menu, $ValidateCount, $Conditions, $ApplicationId)\n    }\n    func price() int {\n        return SysParamInt(\"page_price\")\n    }\n}",
            "Name": "NewPage",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewParameter {\n    data {\n        Name string\n        Value string\n        Conditions string\n    }\n    \n    conditions {\n        ValidateCondition($Conditions, $ecosystem_id)\n        \n        if DBFind(\"parameters\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\") {\n            warning Sprintf(\"Parameter %s already exists\", $Name)\n        }\n    }\n    \n    action {\n        DBInsert(\"parameters\", \"name,value,conditions\", $Name, $Value, $Conditions)\n    }\n}",
            "Name": "NewParameter",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewSign {\n\tdata {\n\t\tName string\n\t\tValue string \"optional\"\n        Title string \"optional\"\n        Parameter string \"optional\"\n\t\tConditions string\n\t}\n\tconditions {\n\t\tValidateCondition($Conditions,$ecosystem_id)\n\t\tvar exist string\n\n\t\tvar row map\n\t\trow = DBRow(\"signatures\").Columns(\"id\").Where(\"name = ?\", $Name)\n\n\t\tif row {\n\t\t\terror Sprintf(\"The signature %s already exists\", $Name)\n\t\t}\n\t}\n\taction {\n        if Size($Value) > 0 {\n            DBInsert(\"signatures\", \"name,value,conditions\", $Name, $Value, $Conditions)\n        } else {\n            var value map\n            value[\"title\"] = $Title \n            value[\"params\"] = $Parameter\n            DBInsert(\"signatures\", \"name,value,conditions\", $Name, value, $Conditions)\n        }\t\n\t}\n}",
            "Name": "NewSign",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewTable {\n    data {\n        ApplicationId int\n        Name string \"optional\"\n        Columns string \"optional\"\n        Permissions string \"optional\"\n        TableName string \"optional\"\n        Id array \"optional\"\n        Shareholding array \"optional\"\n        Insert_con string \"optional\"\n        Update_con string \"optional\"\n        New_column_con string \"optional\"\n    }\n    conditions {\n        if $ApplicationId == 0 {\n            warning \"Application id cannot equal 0\"\n        }\n\t}\n    \n    action {\n        if Size($Name) > 0 && Size($Columns) > 0 && Size($Permissions) > 0{\n            CreateTable($Name, $Columns, $Permissions, $ApplicationId)\n        } else {\n            var i,len int\n            var res string\n            len = Len($Id)\n\t\t\t\n            while i < len {\n                if i + 1 == len {\n                    res = res + Sprintf(`{\"name\":%q,\"type\":%q,\"conditions\":\"true\"}`,$Id[i],$Shareholding[i])\n                }\n                else {\n                    res = res + Sprintf(`{\"name\":%q,\"type\":%q,\"conditions\":\"true\"},`,$Id[i],$Shareholding[i])\n                }\n\t\t\t\ti = i + 1\n            }\n\n            $Name = $TableName\n            $Columns = Sprintf(\"[\"+\"%v\"+\"]\", res)\n            $Permissions = Sprintf(`{\"insert\":%q,\"update\":%q,\"new_column\":%q}`,$Insert_con,$Update_con,$New_column_con)\n            CreateTable($Name, $Columns, $Permissions, $ApplicationId)\n        }\n    }\n    func rollback() {\n        RollbackTable($Name)\n    }\n    func price() int {\n        return SysParamInt(\"table_price\")\n    }\n}",
            "Name": "NewTable",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Export {\n\n    func ReplaceValue(s string) string {\n\t\ts = Replace(s, `\\`, `\\\\`)\n        s = Replace(s, `\t`, `\\t`)\n        s = Replace(s, \"\\n\", `\\n`)\n        s = Replace(s, \"\\r\", `\\r`)\n        s = Replace(s, `\"`, `\\\"`)\n        return s\n    }\n\n    func AssignAll(app_name string, all_blocks string, all_contracts string, all_data string, all_languages string, all_menus string, all_pages string, all_parameters string, all_tables string) string {\n\n        var res_str string\n        res_str = res_str + all_blocks\n\n        if  Size(res_str)>0 && Size(all_contracts)>0  {\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_contracts\n\n        if  Size(res_str)>0 && Size(all_data)>0  {\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_data\n\n        if  Size(res_str)>0 && Size(all_languages)>0  {\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_languages\n\n        if  Size(res_str)>0 && Size(all_menus)>0  {\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_menus\n\n        if  Size(res_str)>0 && Size(all_pages)>0  {\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_pages\n\n        if  Size(res_str)>0 && Size(all_parameters)>0  {\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_parameters\n\n        if  Size(res_str)>0 && Size(all_tables)>0  {\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_tables\n\n        res_str = Sprintf(`{\n    \"name\": \"%v\",\n    \"data\": [%v\n    ]\n}`, app_name, res_str)\n\n        return res_str\n    }\n\n    func AddPage(page_name string, page_value string, page_conditions string, page_menu string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"pages\",\n            \"Name\": \"%v\",\n            \"Value\": \"%v\",\n            \"Conditions\": \"%v\",\n            \"Menu\": \"%v\"\n        }`, page_name, page_value, page_conditions, page_menu)\n        return s\n    }\n\n    func AddMenu(menu_name string, menu_value string, menu_title string, menu_conditions string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"menu\",\n            \"Name\": \"%v\",\n            \"Value\": \"%v\",\n            \"Title\": \"%v\",\n            \"Conditions\": \"%v\"\n        }`, menu_name, menu_value, menu_title, menu_conditions)\n        return s\n    }\n\n    func AddContract(contract_name string, contract_value string, contract_conditions string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"contracts\",\n            \"Name\": \"%v\",\n            \"Value\": \"%v\",\n            \"Conditions\": \"%v\"\n        }`, contract_name, contract_value, contract_conditions)\n        return s\n    }\n\n    func AddBlock(block_name string, block_value string, block_conditions string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"blocks\",\n            \"Name\": \"%v\",\n            \"Value\": \"%v\",\n            \"Conditions\": \"%v\"\n        }`, block_name, block_value, block_conditions)\n        return s\n    }\n\n    func AddLanguage(language_name string, language_conditions string, language_trans string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"languages\",\n            \"Name\": \"%v\",\n            \"Conditions\": \"%v\",\n            \"Trans\": \"%v\"\n        }`, language_name, language_conditions, language_trans)\n        return s\n    }\n\n    func AddParameter(parameter_name string, parameter_value string, parameter_conditions string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"app_params\",\n            \"Name\": \"%v\",\n            \"Value\": \"%v\",\n            \"Conditions\": \"%v\"\n        }`, parameter_name, parameter_value, parameter_conditions)\n        return s\n    }\n\n    func AddTable(table_name string, table_columns string, table_permissions string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"tables\",\n            \"Name\": \"%v\",\n            \"Columns\": \"%v\",\n            \"Permissions\": \"%v\"\n        }`, table_name, table_columns, table_permissions)\n        return s\n    }\n\n    func AddTypeForColumns(table_name string, table_columns string) string {\n\t\tvar result string\n\n\t\ttable_columns = Replace(table_columns, \"{\", \"\")\n\t\ttable_columns = Replace(table_columns, \"}\", \"\")\n\t\ttable_columns = Replace(table_columns, \" \", \"\")\n\n\t\tvar columns_arr array\n\t\tcolumns_arr = Split(table_columns, \",\")\n\n\t\tvar i int\n\t\twhile (i < Len(columns_arr)){\n\t\t\tvar s_split string\n\t\t\ts_split = Str(columns_arr[i])\n\n\t\t\tif Size(s_split) > 0 {\n\t\t\t\tvar clm array\n\t\t\t\tclm = Split(s_split, \":\")\n\n\t\t\t\tvar s string\n\n\t\t\t\tif Len(clm) == 2 {\n\t\t\t\t\tvar col_name string\n\t\t\t\t\tvar col_cond string\n\t\t\t\t\tvar col_type string\n\n\t\t\t\t\tcol_name = Replace(Str(clm[0]), `\"`, \"\")\n\t\t\t\t\tcol_cond = Str(clm[1])\n\t\t\t\t\tcol_type = GetColumnType(table_name, col_name)\n\n\t\t\t\t\ts = Sprintf(`{\"name\":\"%v\",\"type\":\"%v\",\"conditions\":%v}`, col_name, col_type, col_cond)\n\t\t\t\t}\n\n                if Size(result) > 0 {\n                    result = result + \",\"\n\t\t\t\t}\n\t\t\t\tresult = result + s\n\t\t\t}\n\t\t\ti = i + 1\n\t\t}\n\n\t\tresult = Sprintf(\"[%v]\", result)\n\t\treturn result\n    }\n\n\n    data {}\n\n    conditions {\n        var buffer_map map\n        buffer_map = DBFind(\"buffer_data\").Columns(\"id,value->app_id,value->app_name\").Where(\"member_id=$ and key=$\", $key_id, \"export\").Row()\n        if !buffer_map{\n            warning \"Application not found\"\n        }\n        $ApplicationID = Int(buffer_map[\"value.app_id\"])\n        $ApplicationName = Str(buffer_map[\"value.app_name\"])\n    }\n\n    action {\n        //warning $ApplicationID\n\n        var full_result string\n        var i int\n\n        var all_blocks string\n        var all_contracts string\n        var all_data string\n        var all_languages string\n        var all_menus string\n        var all_pages string\n        var all_parameters string\n        var all_tables string\n\n        //=====================================================================================================\n        //------------------------------------Export pages-----------------------------------------------------\n        var string_for_menu string\n\n        i = 0\n        var pages_array array\n        pages_array = DBFind(\"pages\").Limit(250).Where(\"app_id=?\", $ApplicationID)\n        while i < Len(pages_array) {\n            var page_map map\n            page_map = pages_array[i]\n\n            var page_name string\n            var page_value string\n            var page_conditions string\n            var page_menu string\n\n            page_name = ReplaceValue(Str(page_map[\"name\"]))\n            page_value = ReplaceValue(Str(page_map[\"value\"]))\n            page_conditions = ReplaceValue(Str(page_map[\"conditions\"]))\n            page_menu = ReplaceValue(Str(page_map[\"menu\"]))\n\n            if Size(all_pages) > 0 {\n                all_pages = all_pages + \",\\r\\n\"\n            } else {\n                all_pages = all_pages + \"\\r\\n\"\n            }\n\n            if Size(string_for_menu) > 0 {\n                string_for_menu = string_for_menu + \",\"\n            }\n            string_for_menu = string_for_menu + Sprintf(\"'%v'\", page_menu)           \n\n            all_pages = all_pages + AddPage(page_name, page_value, page_conditions, page_menu)\n            i = i + 1\n        }\n\n        //=====================================================================================================\n        //------------------------------------Export menus-----------------------------------------------------\n        if Size(string_for_menu) > 0 {\n\n            var where_for_menu string\n            where_for_menu = Sprintf(\"name in (%v)\", string_for_menu)\n            //warning where_for_menu \n\n            i = 0\n            var menus_array array\n            menus_array = DBFind(\"menu\").Limit(250).Where(where_for_menu)\n            while i < Len(menus_array) {\n                var menu_map map\n                menu_map = menus_array[i]\n\n                var menu_name string\n                var menu_value string\n                var menu_title string\n                var menu_conditions string\n\n                menu_name = ReplaceValue(Str(menu_map[\"name\"]))\n                menu_value = ReplaceValue(Str(menu_map[\"value\"]))\n                menu_title = ReplaceValue(Str(menu_map[\"title\"]))\n                menu_conditions = ReplaceValue(Str(menu_map[\"conditions\"]))\n\n                if Size(all_menus) > 0 {\n                    all_menus = all_menus + \",\\r\\n\"\n                } else {\n                    all_menus = all_menus + \"\\r\\n\"\n                }\n\n                all_menus = all_menus + AddMenu(menu_name, menu_value, menu_title, menu_conditions)\n                i = i + 1\n            }\n\n        }\n\n        //=====================================================================================================\n        //------------------------------------Export contracts-------------------------------------------------\n\n        i = 0\n        var contracts_array array\n        contracts_array = DBFind(\"contracts\").Limit(250).Where(\"app_id=?\", $ApplicationID)\n        while i < Len(contracts_array) {\n            var contract_map map\n            contract_map = contracts_array[i]\n\n            var contract_name string\n            var contract_value string\n            var contract_conditions string\n\n            contract_name = ReplaceValue(Str(contract_map[\"name\"]))\n            contract_value = ReplaceValue(Str(contract_map[\"value\"]))\n            contract_conditions = ReplaceValue(Str(contract_map[\"conditions\"]))\n\n            if Size(all_contracts) > 0 {\n                all_contracts = all_contracts + \",\\r\\n\"\n            } else {\n                all_contracts = all_contracts + \"\\r\\n\"\n            }\n\n            all_contracts = all_contracts + AddContract(contract_name, contract_value, contract_conditions)\n            i = i + 1\n        }\n\n        //=====================================================================================================\n        //------------------------------------Export blocks----------------------------------------------------\n\n        i = 0\n        var blocks_array array\n        blocks_array = DBFind(\"blocks\").Limit(250).Where(\"app_id=?\", $ApplicationID)\n        while i < Len(blocks_array) {\n            var block_map map\n            block_map = blocks_array[i]\n\n            var block_name string\n            var block_value string\n            var block_conditions string\n\n            block_name = ReplaceValue(Str(block_map[\"name\"]))\n            block_value = ReplaceValue(Str(block_map[\"value\"]))\n            block_conditions = ReplaceValue(Str(block_map[\"conditions\"]))\n\n            if Size(all_blocks) > 0 {\n                all_blocks = all_blocks + \",\\r\\n\"\n            } else {\n                all_blocks = all_blocks + \"\\r\\n\"\n            }\n\n            all_blocks = all_blocks + AddBlock(block_name, block_value, block_conditions)\n            i = i + 1\n        }\n\n        //=====================================================================================================\n        //------------------------------------Export languages-------------------------------------------------\n\n        i = 0\n        var languages_array array\n        languages_array = DBFind(\"languages\").Limit(250).Where(\"app_id=?\", $ApplicationID)\n        while i < Len(languages_array) {\n            var language_map map\n            language_map = languages_array[i]\n\n            var language_name string\n            var language_conditions string\n            var language_trans string\n\n            language_name = ReplaceValue(Str(language_map[\"name\"]))\n            language_conditions = ReplaceValue(Str(language_map[\"conditions\"]))\n            language_trans = ReplaceValue(Str(language_map[\"res\"]))\n\n            if Size(all_languages) > 0 {\n                all_languages = all_languages + \",\\r\\n\"\n            } else {\n                all_languages = all_languages + \"\\r\\n\"\n            }\n\n            all_languages = all_languages + AddLanguage(language_name, language_conditions, language_trans)\n            i = i + 1\n        }\n\n        //=====================================================================================================\n        //------------------------------------Export params----------------------------------------------------\n\n        i = 0\n        var parameters_array array\n        parameters_array = DBFind(\"app_params\").Limit(250).Where(\"app_id=?\", $ApplicationID)\n        while i < Len(parameters_array) {\n            var parameter_map map\n            parameter_map = parameters_array[i]\n\n            var parameter_name string\n            var parameter_value string\n            var parameter_conditions string\n\n            parameter_name = ReplaceValue(Str(parameter_map[\"name\"]))\n            parameter_value = ReplaceValue(Str(parameter_map[\"value\"]))\n            parameter_conditions = ReplaceValue(Str(parameter_map[\"conditions\"]))\n\n            if Size(all_parameters) > 0 {\n                all_parameters = all_parameters + \",\\r\\n\"\n            } else {\n                all_parameters = all_parameters + \"\\r\\n\"\n            }\n\n            all_parameters = all_parameters + AddParameter(parameter_name, parameter_value, parameter_conditions)\n            i = i + 1\n        }\n\n        //=====================================================================================================\n        //------------------------------------Export tables----------------------------------------------------\n\n        i = 0\n        var tables_array array\n        tables_array = DBFind(\"tables\").Limit(250).Where(\"app_id=?\", $ApplicationID)\n        while i < Len(tables_array) {\n            var table_map map\n            table_map = tables_array[i]\n\n            var table_name string\n            var table_columns string\n            var table_permissions string\n\n            table_name = Str(table_map[\"name\"])\n            table_columns = Str(table_map[\"columns\"])\n\t\t\ttable_permissions = Str(table_map[\"permissions\"])\n\n\t\t\ttable_columns = AddTypeForColumns(table_name, table_columns)\n            \n\t\t\ttable_name = ReplaceValue(table_name)\n\t\t\ttable_columns = ReplaceValue(table_columns)\n\t\t\ttable_permissions = ReplaceValue(table_permissions)\n\n            if Size(all_tables) > 0 {\n                all_tables = all_tables + \",\\r\\n\"\n            } else {\n                all_tables = all_tables + \"\\r\\n\"\n            }\n\n            all_tables = all_tables + AddTable(table_name, table_columns, table_permissions)\n            i = i + 1\n        }\n\n        //=====================================================================================================\n\n        full_result = AssignAll($ApplicationName, all_blocks, all_contracts, all_data, all_languages, all_menus, all_pages, all_parameters, all_tables)\n        UploadBinary(\"Name,Data,ApplicationId,DataMimeType\", \"export\", full_result, 1, \"application/json\")\n    }\n}",
            "Name": "Export",
            "Type": "contracts"
        }
    ]
}