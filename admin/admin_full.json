{
    "blocks": [
        {
            "Name": "admin_link",
            "Value": "    If(#sort#==1){\r\n        SetVar(sort_name, \"id asc\")\r\n    }.ElseIf(#sort#==2){\r\n        SetVar(sort_name, \"id desc\")\r\n    }.ElseIf(#sort#==3){\r\n        SetVar(sort_name, \"name asc\")\r\n    }.ElseIf(#sort#==4){\r\n        SetVar(sort_name, \"name desc\")\r\n    }.Else{\r\n        SetVar(sort, \"1\")\r\n        SetVar(sort_name, \"id asc\") \r\n    }\r\n\r\n    If(Or(#width#==12,#width#==6,#width#==4)){\r\n    }.Else{\r\n        SetVar(width, \"12\")\r\n    }\r\n\r\n    Div(clearfix){\r\n        Div(pull-left){\r\n            If(#width#==12){\r\n                Span(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=12,current_page=#current_page#\")).Style(margin-left:10px;)\r\n            }.Else{\r\n                Span(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=12,current_page=#current_page#\")).Style(margin-left:10px;)\r\n            }\r\n            If(#width#==6){\r\n                Span(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=6,current_page=#current_page#\")).Style(margin-left:5px;)\r\n            }.Else{\r\n                Span(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=6,current_page=#current_page#\")).Style(margin-left:5px;)\r\n            }\r\n            If(#width#==4){\r\n                Span(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=4,current_page=#current_page#\")).Style(margin-left:5px;)\r\n            }.Else{\r\n                Span(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=4,current_page=#current_page#\")).Style(margin-left:5px;)\r\n            }\r\n        }\r\n        Div(pull-right){\r\n            If(#sort#==1){\r\n                Span(Button(Body: Em(Class: fa fa-long-arrow-down) Sort by ID, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=2,width=#width#,current_page=#current_page#\")).Style(margin-right:5px;)\r\n            }.ElseIf(#sort#==2){\r\n                Span(Button(Body: Em(Class: fa fa-long-arrow-up) Sort by ID, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=1,width=#width#,current_page=#current_page#\")).Style(margin-right:5px;)\r\n            }.Else{\r\n                Span(Button(Body: Sort by ID, Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=1,width=#width#,current_page=#current_page#\")).Style(margin-right:5px;)\r\n            }\r\n\r\n            If(#sort#==3){\r\n                Span(Button(Body: Em(Class: fa fa-long-arrow-down) Sort by Name, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=4,width=#width#,current_page=#current_page#\")).Style(margin-right:10px;)\r\n            }.ElseIf(#sort#==4){\r\n                Span(Button(Body: Em(Class: fa fa-long-arrow-up) Sort by Name, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=3,width=#width#,current_page=#current_page#\")).Style(margin-right:10px;)\r\n            }.Else{\r\n                Span(Button(Body: Sort by Name, Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=3,width=#width#,current_page=#current_page#\")).Style(margin-right:10px;)\r\n            }\r\n        }\r\n    }",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "export_info",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\r\n\r\nIf(#buffer_value_app_id# > 0){\r\n    DBFind(pages, src_pages).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_pages)\r\n    DBFind(blocks, src_blocks).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_blocks)\r\n    DBFind(app_params, src_parameters).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_parameters)\r\n    DBFind(languages, src_languages).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_languages)\r\n    DBFind(contracts, src_contracts).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_contracts)\r\n    DBFind(tables, src_tables).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_tables)\r\n}\r\n\r\nDiv(panel panel-primary){\r\n    If(#buffer_value_app_id# > 0){\r\n\t    Div(panel-heading, \"Export - #buffer_value_app_name#\")\r\n    }.Else{\r\n        Div(panel-heading, \"Export\") \r\n    }\r\n\tForm(){\r\n\t\tDiv(list-group-item){\r\n\t\t\tDiv(row){\r\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\r\n                    Span(\"Pages\")\r\n\t\t\t\t}\r\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\r\n                    If(#count_pages# > 0){\r\n                        Span(\"(#count_pages#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")  \r\n                    }\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t\tDiv(row){\r\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\r\n                    If(#count_pages# > 0){\r\n                        ForList(src_pages){\r\n                            Span(Class: text-muted h6, Body: \"#name#, \")\r\n                        }\r\n                    }.Else{\r\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\r\n                    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tDiv(list-group-item){\r\n\t\t\tDiv(row){\r\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\r\n                    Span(\"Blocks\")\r\n\t\t\t\t}\r\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\r\n                    If(#count_blocks# > 0){\r\n                        Span(\"(#count_blocks#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")  \r\n                    }\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t\tDiv(row){\r\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\r\n                    If(#count_blocks# > 0){\r\n                        ForList(src_blocks){\r\n                            Span(Class: text-muted h6, Body: \"#name#, \")\r\n                        }\r\n                    }.Else{\r\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\r\n                    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tDiv(list-group-item){\r\n\t\t\tDiv(row df f-valign){\r\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\r\n\t\t\t\t\tSpan(\"Menu\")\r\n\t\t\t\t}\r\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\r\n                    If(#buffer_value_app_id# > 0){\r\n                        Span(\"(#buffer_value_count_menu#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")\r\n                    }\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t\tDiv(row df f-valign){\r\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\r\n                    If(And(#buffer_value_app_id#>0,#buffer_value_count_menu#>0)){\r\n                        Span(Class: text-muted h6, Body:\"#buffer_value_menu_name#\")\r\n                    }.Else{\r\n                        Span(Class: text-muted h6, Body:\"Nothing selected\")\r\n                    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tDiv(list-group-item){\r\n\t\t\tDiv(row){\r\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\r\n                    Span(\"Parameters\")\r\n\t\t\t\t}\r\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\r\n                    If(#count_parameters# > 0){\r\n                        Span(\"(#count_parameters#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")  \r\n                    }\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t\tDiv(row){\r\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\r\n                    If(#count_parameters# > 0){\r\n                        ForList(src_parameters){\r\n                            Span(Class: text-muted h6, Body: \"#name#, \")\r\n                        }\r\n                    }.Else{\r\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\r\n                    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tDiv(list-group-item){\r\n\t\t\tDiv(row){\r\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\r\n                    Span(\"Language resources\")\r\n\t\t\t\t}\r\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\r\n                    If(#count_languages# > 0){\r\n                        Span(\"(#count_languages#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")  \r\n                    }\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t\tDiv(row){\r\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\r\n                    If(#count_languages# > 0){\r\n                        ForList(src_languages){\r\n                            Span(Class: text-muted h6, Body: \"#name#, \")\r\n                        }\r\n                    }.Else{\r\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\r\n                    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tDiv(list-group-item){\r\n\t\t\tDiv(row){\r\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\r\n                    Span(\"Contracts\")\r\n\t\t\t\t}\r\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\r\n                    If(#count_contracts# > 0){\r\n                        Span(\"(#count_contracts#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")  \r\n                    }\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t\tDiv(row){\r\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\r\n                    If(#count_contracts# > 0){\r\n                        ForList(src_contracts){\r\n                            Span(Class: text-muted h6, Body: \"#name#, \")\r\n                        }\r\n                    }.Else{\r\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\r\n                    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tDiv(list-group-item){\r\n\t\t\tDiv(row){\r\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\r\n                    Span(\"Tables\")\r\n\t\t\t\t}\r\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\r\n                    If(#count_tables# > 0){\r\n                        Span(\"(#count_tables#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")  \r\n                    }\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t\tDiv(row){\r\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\r\n                    If(#count_tables# > 0){\r\n                        ForList(src_tables){\r\n                            Span(Class: text-muted h6, Body: \"#name#, \")\r\n                        }\r\n                    }.Else{\r\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\r\n                    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n        If(#buffer_value_app_id# > 0){\r\n            Div(Class: panel-footer clearfix){\r\n                Div(Class: pull-right){\r\n                    Button(Body: Export, Class: btn btn-primary, Page: export_download, Contract: Export)\r\n                }\r\n            }\r\n        }\r\n\t}\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "export_link",
            "Value": "If(And(#res_type#!=\"pages\",#res_type#!=\"blocks\",#res_type#!=\"menu\",#res_type#!=\"parameters\",#res_type#!=\"languages\",#res_type#!=\"contracts\",#res_type#!=\"tables\")){\r\n    SetVar(res_type, \"pages\")\r\n}\r\n\r\nDiv(Class: breadcrumb){\r\n    If(#res_type#==\"pages\"){\r\n        Span(Class: text-muted, Body: Pages)\r\n    }.Else{\r\n        LinkPage(Body: Pages, Page: export_resources,, \"res_type=pages\")\r\n    }\r\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\r\n    If(#res_type#==\"blocks\"){\r\n        Span(Class: text-muted, Body: Blocks)\r\n    }.Else{\r\n        LinkPage(Body: Blocks, Page: export_resources,, \"res_type=blocks\")\r\n    }\r\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\r\n    If(#res_type#==\"menu\"){\r\n        Span(Class: text-muted, Body: Menu)\r\n    }.Else{\r\n       LinkPage(Body: Menu, Page: export_resources,, \"res_type=menu\")\r\n    }\r\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\r\n    If(#res_type#==\"parameters\"){\r\n        Span(Class: text-muted, Body: Parameters)\r\n    }.Else{\r\n       LinkPage(Body: Parameters, Page: export_resources,, \"res_type=parameters\")\r\n    }\r\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\r\n    If(#res_type#==\"languages\"){\r\n        Span(Class: text-muted, Body: Language resources)\r\n    }.Else{\r\n       LinkPage(Body: Language resources, Page: export_resources,, \"res_type=languages\")\r\n    }\r\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\r\n    If(#res_type#==\"contracts\"){\r\n        Span(Class: text-muted, Body: Contracts)\r\n    }.Else{\r\n       LinkPage(Body: Contracts, Page: export_resources,, \"res_type=contracts\")\r\n    } \r\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\r\n    If(#res_type#==\"tables\"){\r\n        Span(Class: text-muted, Body: Tables)\r\n    }.Else{\r\n       LinkPage(Body: Tables, Page: export_resources,, \"res_type=tables\")\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pager",
            "Value": "DBFind(#pager_table#, src_records).Where(#pager_where#).Count(records_count)\r\n\t\r\nSetVar(previous_page, Calculate(Exp: #current_page# - 1, Type: int))\r\nSetVar(next_page, Calculate(Exp: #current_page# + 1, Type: int))\r\nSetVar(count_div_limit_int, Calculate(Exp: (#records_count# / #pager_limit#), Type: int))\r\nSetVar(remainder, Calculate(Exp: (#records_count# / #pager_limit#) - #count_div_limit_int#, Type: float))\r\n\r\nIf(#remainder# != 0){\r\n    SetVar(last_page, Calculate(Exp: #count_div_limit_int# + 1, Type: int))\r\n}.Else{\r\n    SetVar(last_page, #count_div_limit_int#)\r\n}\r\n\r\nSetVar(last_page_plus_one, Calculate(Exp: #last_page# + 1, Type: int))\r\n\r\nSetVar(delta_last_page, Calculate(Exp: #last_page# - #current_page#))\t\r\n    \r\nSetVar(range_l, Calculate(Exp: #current_page# - 4, Type: int))\r\nSetVar(range_r, Calculate(Exp: #current_page# + 6, Type: int))\r\nSetVar(range_l_max, Calculate(Exp: #last_page# - #pager_limit#, Type: int))\r\nSetVar(pager_limit_plus_one, Calculate(Exp: #pager_limit# + 1, Type: int))\r\n\r\nIf(#current_page# < 5){\r\n    If(#last_page# >= 10){\r\n        Range(src_pages, 1, 11)\r\n    }.Else{\r\n        Range(src_pages, 1, #last_page_plus_one#) \r\n    }\r\n}.ElseIf(#delta_last_page# < 6){\r\n    If(#range_l_max# > 0){\r\n        Range(src_pages, #range_l_max#, #last_page_plus_one#)\r\n    }.Else{\r\n        Range(src_pages, 1, #last_page_plus_one#)\r\n    }\r\n}.Else{\r\n    Range(src_pages, #range_l#, #range_r#)\r\n}\r\n\r\n\r\nDiv(){\r\n    Div(){\r\n        If(#current_page# == 1){\r\n            Button(Body: Em(Class: fa fa-angle-double-left), Class: btn btn-default disabled)\r\n        }.Else{\r\n            Button(Body: Em(Class: fa fa-angle-double-left), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=1,sort=#sort#,width=#width#\")\r\n        }\r\n    }\r\n\r\n\r\n\r\n    Div(){\r\n        If(#current_page# == 1){\r\n            Button(Body: Em(Class: fa fa-angle-left), Class: btn btn-default disabled)\r\n        }.Else{\r\n            Button(Body: Em(Class: fa fa-angle-left), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#previous_page#,sort=#sort#,width=#width#\")\r\n        }\r\n    }\r\n\r\n    ForList(src_pages){\r\n        Div(){\r\n            If(#id# == #current_page#){\r\n                Button(Class: btn btn-primary float-left, Page: #pager_page#, PageParams: \"current_page=#id#,sort=#sort#,width=#width#\", Body: #id#)\r\n            }.Else{\r\n                Button(Class: btn btn-default float-left, Page: #pager_page#, PageParams: \"current_page=#id#,sort=#sort#,width=#width#\", Body: #id#)\r\n            }\r\n        }\r\n    }\r\n\r\n    Div(){\r\n        If(#current_page# == #last_page#){\r\n            Button(Body: Em(Class: fa fa-angle-right), Class: btn btn-default disabled)\r\n        }.Else{\r\n            Button(Body: Em(Class: fa fa-angle-right), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#next_page#,sort=#sort#,width=#width#\")\r\n        }\r\n    }\r\n\r\n    Div(){\r\n        If(#current_page# == #last_page#){\r\n            Button(Body: Em(Class: fa fa-angle-double-right), Class: btn btn-default disabled)\r\n        }.Else{\r\n            Button(Body: Em(Class: fa fa-angle-double-right), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#last_page#,sort=#sort#,width=#width#\")\r\n        }\r\n    }\r\n}.Style(\"div { float: left; }\")",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "pager_header",
            "Value": "\r\nIf(#current_page# > 0){}.Else{\r\n    SetVar(current_page, 1)\r\n}\r\n\r\nSetVar(pager_offset, Calculate(Exp: (#current_page# - 1) * #pager_limit#, Type: int))\r\nSetVar(current_page, #current_page#)\r\n",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "contracts": [
        {
            "Name": "DelApplication",
            "Value": "contract DelApplication {\r\n    data {\r\n        ApplicationId int\r\n        Value int \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        RowConditions(\"applications\", $ApplicationId, false)\r\n    }\r\n\r\n    action {\r\n        if ($Value == 1){\r\n            DBUpdate(\"applications\", $ApplicationId, \"deleted\", 1)\r\n        }\r\n        else {\r\n            DBUpdate(\"applications\", $ApplicationId, \"deleted\", 0)\r\n        } \r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditAppParam",
            "Value": "contract EditAppParam {\r\n\tdata {\r\n\t\tId int\r\n\t\tValue string\r\n\t\tConditions string\r\n\t}\r\n\tfunc onlyConditions() bool {\r\n\t\treturn $Conditions && !$Value\r\n\t}\r\n\t\r\n\tconditions {\r\n\t\tRowConditions(\"app_params\", $Id, onlyConditions())\r\n\t\tValidateCondition($Conditions, $ecosystem_id)\r\n\t}\r\n\t\r\n\taction {\r\n\t\tDBUpdate(\"app_params\", $Id, \"value,conditions\", $Value, $Conditions )\r\n\t}\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditApplication",
            "Value": "contract EditApplication {\r\n    data {\r\n        ApplicationId int\r\n        Conditions string\r\n    }\r\n\r\n    conditions {\r\n\t\tValidateCondition($Conditions, $ecosystem_id)\r\n\t\tRowConditions(\"applications\", $ApplicationId, false)\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"applications\", $ApplicationId, \"conditions\", $Conditions)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditColumn",
            "Value": "contract EditColumn {\r\n\tdata {\r\n\t\tTableName string\r\n\t\tName string\r\n\t\tPermissions string\r\n\t}\r\n\t\r\n\tconditions {\r\n\t\tColumnCondition($TableName, $Name, \"\", $Permissions)\r\n\t}\r\n\t\r\n\taction {\r\n\t\tPermColumn($TableName, $Name, $Permissions)\r\n\t}\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditLang",
            "Value": "contract EditLang {\r\n\tdata {\r\n        Id int\r\n\t\tTrans string \"optional\"\r\n\t\tValue array \"optional\"\r\n\t\tIdLanguage array \"optional\"\r\n        ApplicationId int \"optional\"\r\n\t}\r\n\t\r\n\tconditions {\r\n\t\tif (Len($IdLanguage) > 0){\r\n\t\t\tvar j,len int\r\n\t\t\tlen = Len($IdLanguage)\r\n\t\t\twhile j < len {\r\n\t\t\t\tif ($IdLanguage[j] == \"\"){\r\n\t\t\t\t\tinfo(\"Locale empty\")\r\n\t\t\t\t}\r\n\t\t\t\tif ($Value[j] == \"\"){\r\n\t\t\t\t\tinfo(\"Value empty\")\r\n\t\t\t\t}\r\n\t\t\t\tj = j + 1\r\n\t\t\t}\r\n\t\t}\r\n\t\tEvalCondition(\"parameters\", \"changing_language\", \"value\")\r\n\t}\r\n\t\r\n\taction {\r\n\t\tif (Len($IdLanguage) > 0){\r\n\t\t\tvar i,len,lenshar int\r\n\t\t\tvar res,langarr string\r\n\t\t\tlen = Len($IdLanguage)\r\n\t\t\tlenshar = Len($Value)\r\n\t\t\twhile i < len {\r\n\t\t\t\tif (i + 1 == len){\r\n\t\t\t\t\tres = res + Sprintf(`%q: %q`,$IdLanguage[i],$Value[i])\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tres = res + Sprintf(`%q: %q, `,$IdLanguage[i],$Value[i])\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlangarr = Sprintf(\"{\"+\"%v\"+\"}\", res)\r\n\t\t\t$Trans = langarr\r\n            DBUpdate(\"languages\",$Id,\"res\",$Trans)\r\n\t\t\t//UpdateLang($Id, $Trans)\r\n\t\t}\r\n\t\telse {\r\n\t\t\tDBUpdate(\"languages\",$Id,\"res\",$Trans)\r\n\t\t\t//UpdateLang($Id, $Trans)\r\n\t\t}\r\n\t}\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditParameter",
            "Value": "contract EditParameter {\r\n\tdata {\r\n\t\tId int\r\n\t\tValue string\r\n\t\tConditions string\r\n\t}\r\n\tfunc onlyConditions() bool {\r\n\t\treturn $Conditions && !$Value\r\n\t}\r\n\r\n\tconditions {\r\n\t\tRowConditions(\"parameters\", $Id, onlyConditions())\r\n\t\tValidateCondition($Conditions, $ecosystem_id)\r\n\t}\r\n\t\r\n\taction {\r\n\t\tDBUpdate(\"parameters\", $Id, \"value,conditions\", $Value, $Conditions )\r\n\t}\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditTable",
            "Value": "contract EditTable {\r\n\tdata {\r\n\t\tName string\r\n\t\tPermissions string \"optional\"\r\n        Insert_con string \"optional\"\r\n    \tUpdate_con string \"optional\"\r\n    \tNew_column_con string \"optional\"\r\n\t}\r\n\t\r\n\tconditions {\r\n        var permissions string\r\n        permissions = Sprintf(`{\"insert\":%q,\"update\":%q,\"new_column\":%q}`,$Insert_con,$Update_con,$New_column_con)\r\n        $Permissions = permissions\r\n\t\tTableConditions($Name, \"\", $Permissions)\r\n\t}\r\n\t\r\n\taction {\r\n\t\tPermTable($Name, $Permissions )\r\n\t}\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "UploadBinary",
            "Value": "contract UploadBinary {\r\n    data {\r\n        Name  string\r\n        Data  bytes \"file\"\r\n        AppID int\r\n        DataMimeType string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        $Id = Int(DBFind(\"binaries\").Columns(\"id\").Where(\"app_id = ? AND member_id = ? AND name = ?\", $AppID, $key_id, $Name).One(\"id\"))\r\n    }\r\n    action {\r\n        var hash string\r\n        hash = MD5($Data)\r\n\r\n        if $DataMimeType == \"\" {\r\n            $DataMimeType = \"application/octet-stream\"\r\n        }\r\n\r\n        if $Id != 0 {\r\n            DBUpdate(\"binaries\", $Id, \"data,hash,mime_type\", $Data, hash, $DataMimeType)\r\n        } else {\r\n            $Id = DBInsert(\"binaries\", \"app_id,member_id,name,data,hash,mime_type\", $AppID, $key_id, $Name, $Data, hash, $DataMimeType)\r\n        }\r\n\r\n        $result = $Id\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Export",
            "Value": "contract Export {\r\n\r\n    func ReplaceValue(s string) string {\r\n\t\ts = Replace(s, `\\`, `\\\\`)\r\n        s = Replace(s, `\t`, `\\t`)\r\n        s = Replace(s, \"\\n\", `\\n`)\r\n        s = Replace(s, \"\\r\", `\\r`)\r\n        s = Replace(s, `\"`, `\\\"`)\r\n        return s\r\n    }\r\n\r\n    func AssignAll(app_name string, all_blocks string, all_contracts string, all_data string, all_languages string, all_menus string, all_pages string, all_parameters string, all_tables string) string {\r\n\r\n        var res_str string\r\n        res_str = res_str + all_blocks\r\n\r\n        if ( Size(res_str)>0 && Size(all_contracts)>0 ){\r\n            res_str = res_str + \",\"\r\n        }\r\n        res_str = res_str + all_contracts\r\n\r\n        if ( Size(res_str)>0 && Size(all_data)>0 ){\r\n            res_str = res_str + \",\"\r\n        }\r\n        res_str = res_str + all_data\r\n\r\n        if ( Size(res_str)>0 && Size(all_languages)>0 ){\r\n            res_str = res_str + \",\"\r\n        }\r\n        res_str = res_str + all_languages\r\n\r\n        if ( Size(res_str)>0 && Size(all_menus)>0 ){\r\n            res_str = res_str + \",\"\r\n        }\r\n        res_str = res_str + all_menus\r\n\r\n        if ( Size(res_str)>0 && Size(all_pages)>0 ){\r\n            res_str = res_str + \",\"\r\n        }\r\n        res_str = res_str + all_pages\r\n\r\n        if ( Size(res_str)>0 && Size(all_parameters)>0 ){\r\n            res_str = res_str + \",\"\r\n        }\r\n        res_str = res_str + all_parameters\r\n\r\n        if ( Size(res_str)>0 && Size(all_tables)>0 ){\r\n            res_str = res_str + \",\"\r\n        }\r\n        res_str = res_str + all_tables\r\n\r\n        res_str = Sprintf(`{\r\n    \"name\": \"%v\",\r\n    \"data\": [%v\r\n    ]\r\n}`, app_name, res_str)\r\n\r\n        return res_str\r\n    }\r\n\r\n    func AddPage(page_name string, page_value string, page_conditions string, page_menu string) string {\r\n        var s string\r\n        s = Sprintf(`        {\r\n            \"Type\": \"page\",\r\n            \"Name\": \"%v\",\r\n            \"Value\": \"%v\",\r\n            \"Conditions\": \"%v\",\r\n            \"Menu\": \"%v\"\r\n        }`, page_name, page_value, page_conditions, page_menu)\r\n        return s\r\n    }\r\n\r\n    func AddMenu(menu_name string, menu_value string, menu_title string, menu_conditions string) string {\r\n        var s string\r\n        s = Sprintf(`        {\r\n            \"Type\": \"menu\",\r\n            \"Name\": \"%v\",\r\n            \"Value\": \"%v\",\r\n            \"Title\": \"%v\",\r\n            \"Conditions\": \"%v\"\r\n        }`, menu_name, menu_value, menu_title, menu_conditions)\r\n        return s\r\n    }\r\n\r\n    func AddContract(contract_name string, contract_value string, contract_conditions string) string {\r\n        var s string\r\n        s = Sprintf(`        {\r\n            \"Type\": \"contract\",\r\n            \"Name\": \"%v\",\r\n            \"Value\": \"%v\",\r\n            \"Conditions\": \"%v\"\r\n        }`, contract_name, contract_value, contract_conditions)\r\n        return s\r\n    }\r\n\r\n    func AddBlock(block_name string, block_value string, block_conditions string) string {\r\n        var s string\r\n        s = Sprintf(`        {\r\n            \"Type\": \"block\",\r\n            \"Name\": \"%v\",\r\n            \"Value\": \"%v\",\r\n            \"Conditions\": \"%v\"\r\n        }`, block_name, block_value, block_conditions)\r\n        return s\r\n    }\r\n\r\n    func AddLanguage(language_name string, language_conditions string, language_trans string) string {\r\n        var s string\r\n        s = Sprintf(`        {\r\n            \"Type\": \"language\",\r\n            \"Name\": \"%v\",\r\n            \"Conditions\": \"%v\",\r\n            \"Trans\": \"%v\"\r\n        }`, language_name, language_conditions, language_trans)\r\n        return s\r\n    }\r\n\r\n    func AddParameter(parameter_name string, parameter_value string, parameter_conditions string) string {\r\n        var s string\r\n        s = Sprintf(`        {\r\n            \"Type\": \"parameter\",\r\n            \"Name\": \"%v\",\r\n            \"Value\": \"%v\",\r\n            \"Conditions\": \"%v\"\r\n        }`, parameter_name, parameter_value, parameter_conditions)\r\n        return s\r\n    }\r\n\r\n    func AddTable(table_name string, table_columns string, table_permissions string) string {\r\n        var s string\r\n        s = Sprintf(`        {\r\n            \"Type\": \"table\",\r\n            \"Name\": \"%v\",\r\n            \"Columns\": \"%v\",\r\n            \"Permissions\": \"%v\"\r\n        }`, table_name, table_columns, table_permissions)\r\n        return s\r\n    }\r\n\r\n    func AddTypeForColumns(table_name string, table_columns string) string {\r\n\t\tvar result string\r\n\r\n\t\ttable_columns = Replace(table_columns, \"{\", \"\")\r\n\t\ttable_columns = Replace(table_columns, \"}\", \"\")\r\n\t\ttable_columns = Replace(table_columns, \" \", \"\")\r\n\r\n\t\tvar columns_arr array\r\n\t\tcolumns_arr = Split(table_columns, \",\")\r\n\r\n\t\tvar i int\r\n\t\twhile (i < Len(columns_arr)){\r\n\t\t\tvar s_split string\r\n\t\t\ts_split = Str(columns_arr[i])\r\n\r\n\t\t\tif Size(s_split) > 0 {\r\n\t\t\t\tvar clm array\r\n\t\t\t\tclm = Split(s_split, \":\")\r\n\r\n\t\t\t\tvar s string\r\n\r\n\t\t\t\tif (Len(clm) == 2){\r\n\t\t\t\t\tvar col_name string\r\n\t\t\t\t\tvar col_cond string\r\n\t\t\t\t\tvar col_type string\r\n\r\n\t\t\t\t\tcol_name = Replace(Str(clm[0]), `\"`, \"\")\r\n\t\t\t\t\tcol_cond = Str(clm[1])\r\n\t\t\t\t\tcol_type = GetColumnType(table_name, col_name)\r\n\r\n\t\t\t\t\ts = Sprintf(`{\"name\":\"%v\",\"type\":\"%v\",\"conditions\":%v}`, col_name, col_type, col_cond)\r\n\t\t\t\t}\r\n\r\n                if (Size(result) > 0) {\r\n                    result = result + \",\"\r\n\t\t\t\t}\r\n\t\t\t\tresult = result + s\r\n\t\t\t}\r\n\t\t\ti = i + 1\r\n\t\t}\r\n\r\n\t\tresult = Sprintf(\"[%v]\", result)\r\n\t\treturn result\r\n    }\r\n\r\n\r\n    data {}\r\n\r\n    conditions {\r\n        var buffer_map map\r\n        buffer_map = DBFind(\"buffer_data\").Columns(\"id,value->app_id,value->app_name\").Where(\"member_id=$ and key=$\", $key_id, \"export\").Row()\r\n        if !buffer_map{\r\n            warning \"Application not found\"\r\n        }\r\n        $ApplicationID = Int(buffer_map[\"value.app_id\"])\r\n        $ApplicationName = Str(buffer_map[\"value.app_name\"])\r\n    }\r\n\r\n    action {\r\n        //warning $ApplicationID\r\n\r\n        var full_result string\r\n        var i int\r\n\r\n        var all_blocks string\r\n        var all_contracts string\r\n        var all_data string\r\n        var all_languages string\r\n        var all_menus string\r\n        var all_pages string\r\n        var all_parameters string\r\n        var all_tables string\r\n\r\n        //=====================================================================================================\r\n        //------------------------------------Export pages-----------------------------------------------------\r\n        var string_for_menu string\r\n\r\n        i = 0\r\n        var pages_array array\r\n        pages_array = DBFind(\"pages\").Limit(250).Where(\"app_id=?\", $ApplicationID)\r\n        while i < Len(pages_array) {\r\n            var page_map map\r\n            page_map = pages_array[i]\r\n\r\n            var page_name string\r\n            var page_value string\r\n            var page_conditions string\r\n            var page_menu string\r\n\r\n            page_name = ReplaceValue(Str(page_map[\"name\"]))\r\n            page_value = ReplaceValue(Str(page_map[\"value\"]))\r\n            page_conditions = ReplaceValue(Str(page_map[\"conditions\"]))\r\n            page_menu = ReplaceValue(Str(page_map[\"menu\"]))\r\n\r\n            if (Size(all_pages) > 0) {\r\n                all_pages = all_pages + \",\\r\\n\"\r\n            } else {\r\n                all_pages = all_pages + \"\\r\\n\"\r\n            }\r\n\r\n            if (Size(string_for_menu) > 0) {\r\n                string_for_menu = string_for_menu + \",\"\r\n            }\r\n            string_for_menu = string_for_menu + Sprintf(\"'%v'\", page_menu)           \r\n\r\n            all_pages = all_pages + AddPage(page_name, page_value, page_conditions, page_menu)\r\n            i = i + 1\r\n        }\r\n\r\n        //=====================================================================================================\r\n        //------------------------------------Export menus-----------------------------------------------------\r\n        if (Size(string_for_menu) > 0) {\r\n\r\n            var where_for_menu string\r\n            where_for_menu = Sprintf(\"name in (%v)\", string_for_menu)\r\n            //warning where_for_menu \r\n\r\n            i = 0\r\n            var menus_array array\r\n            menus_array = DBFind(\"menu\").Limit(250).Where(where_for_menu)\r\n            while i < Len(menus_array) {\r\n                var menu_map map\r\n                menu_map = menus_array[i]\r\n\r\n                var menu_name string\r\n                var menu_value string\r\n                var menu_title string\r\n                var menu_conditions string\r\n\r\n                menu_name = ReplaceValue(Str(menu_map[\"name\"]))\r\n                menu_value = ReplaceValue(Str(menu_map[\"value\"]))\r\n                menu_title = ReplaceValue(Str(menu_map[\"title\"]))\r\n                menu_conditions = ReplaceValue(Str(menu_map[\"conditions\"]))\r\n\r\n                if (Size(all_menus) > 0) {\r\n                    all_menus = all_menus + \",\\r\\n\"\r\n                } else {\r\n                    all_menus = all_menus + \"\\r\\n\"\r\n                }\r\n\r\n                all_menus = all_menus + AddMenu(menu_name, menu_value, menu_title, menu_conditions)\r\n                i = i + 1\r\n            }\r\n\r\n        }\r\n\r\n        //=====================================================================================================\r\n        //------------------------------------Export contracts-------------------------------------------------\r\n\r\n        i = 0\r\n        var contracts_array array\r\n        contracts_array = DBFind(\"contracts\").Limit(250).Where(\"app_id=?\", $ApplicationID)\r\n        while i < Len(contracts_array) {\r\n            var contract_map map\r\n            contract_map = contracts_array[i]\r\n\r\n            var contract_name string\r\n            var contract_value string\r\n            var contract_conditions string\r\n\r\n            contract_name = ReplaceValue(Str(contract_map[\"name\"]))\r\n            contract_value = ReplaceValue(Str(contract_map[\"value\"]))\r\n            contract_conditions = ReplaceValue(Str(contract_map[\"conditions\"]))\r\n\r\n            if (Size(all_contracts) > 0) {\r\n                all_contracts = all_contracts + \",\\r\\n\"\r\n            } else {\r\n                all_contracts = all_contracts + \"\\r\\n\"\r\n            }\r\n\r\n            all_contracts = all_contracts + AddContract(contract_name, contract_value, contract_conditions)\r\n            i = i + 1\r\n        }\r\n\r\n        //=====================================================================================================\r\n        //------------------------------------Export blocks----------------------------------------------------\r\n\r\n        i = 0\r\n        var blocks_array array\r\n        blocks_array = DBFind(\"blocks\").Limit(250).Where(\"app_id=?\", $ApplicationID)\r\n        while i < Len(blocks_array) {\r\n            var block_map map\r\n            block_map = blocks_array[i]\r\n\r\n            var block_name string\r\n            var block_value string\r\n            var block_conditions string\r\n\r\n            block_name = ReplaceValue(Str(block_map[\"name\"]))\r\n            block_value = ReplaceValue(Str(block_map[\"value\"]))\r\n            block_conditions = ReplaceValue(Str(block_map[\"conditions\"]))\r\n\r\n            if (Size(all_blocks) > 0) {\r\n                all_blocks = all_blocks + \",\\r\\n\"\r\n            } else {\r\n                all_blocks = all_blocks + \"\\r\\n\"\r\n            }\r\n\r\n            all_blocks = all_blocks + AddBlock(block_name, block_value, block_conditions)\r\n            i = i + 1\r\n        }\r\n\r\n        //=====================================================================================================\r\n        //------------------------------------Export languages-------------------------------------------------\r\n\r\n        i = 0\r\n        var languages_array array\r\n        languages_array = DBFind(\"languages\").Limit(250).Where(\"app_id=?\", $ApplicationID)\r\n        while i < Len(languages_array) {\r\n            var language_map map\r\n            language_map = languages_array[i]\r\n\r\n            var language_name string\r\n            var language_conditions string\r\n            var language_trans string\r\n\r\n            language_name = ReplaceValue(Str(language_map[\"name\"]))\r\n            language_conditions = ReplaceValue(Str(language_map[\"conditions\"]))\r\n            language_trans = ReplaceValue(Str(language_map[\"res\"]))\r\n\r\n            if (Size(all_languages) > 0) {\r\n                all_languages = all_languages + \",\\r\\n\"\r\n            } else {\r\n                all_languages = all_languages + \"\\r\\n\"\r\n            }\r\n\r\n            all_languages = all_languages + AddLanguage(language_name, language_conditions, language_trans)\r\n            i = i + 1\r\n        }\r\n\r\n        //=====================================================================================================\r\n        //------------------------------------Export params----------------------------------------------------\r\n\r\n        i = 0\r\n        var parameters_array array\r\n        parameters_array = DBFind(\"app_params\").Limit(250).Where(\"app_id=?\", $ApplicationID)\r\n        while i < Len(parameters_array) {\r\n            var parameter_map map\r\n            parameter_map = parameters_array[i]\r\n\r\n            var parameter_name string\r\n            var parameter_value string\r\n            var parameter_conditions string\r\n\r\n            parameter_name = ReplaceValue(Str(parameter_map[\"name\"]))\r\n            parameter_value = ReplaceValue(Str(parameter_map[\"value\"]))\r\n            parameter_conditions = ReplaceValue(Str(parameter_map[\"conditions\"]))\r\n\r\n            if (Size(all_parameters) > 0) {\r\n                all_parameters = all_parameters + \",\\r\\n\"\r\n            } else {\r\n                all_parameters = all_parameters + \"\\r\\n\"\r\n            }\r\n\r\n            all_parameters = all_parameters + AddParameter(parameter_name, parameter_value, parameter_conditions)\r\n            i = i + 1\r\n        }\r\n\r\n        //=====================================================================================================\r\n        //------------------------------------Export tables----------------------------------------------------\r\n\r\n        i = 0\r\n        var tables_array array\r\n        tables_array = DBFind(\"tables\").Limit(250).Where(\"app_id=?\", $ApplicationID)\r\n        while i < Len(tables_array) {\r\n            var table_map map\r\n            table_map = tables_array[i]\r\n\r\n            var table_name string\r\n            var table_columns string\r\n            var table_permissions string\r\n\r\n            table_name = Str(table_map[\"name\"])\r\n            table_columns = Str(table_map[\"columns\"])\r\n\t\t\ttable_permissions = Str(table_map[\"permissions\"])\r\n\r\n\t\t\ttable_columns = AddTypeForColumns(table_name, table_columns)\r\n            \r\n\t\t\ttable_name = ReplaceValue(table_name)\r\n\t\t\ttable_columns = ReplaceValue(table_columns)\r\n\t\t\ttable_permissions = ReplaceValue(table_permissions)\r\n\r\n            if (Size(all_tables) > 0) {\r\n                all_tables = all_tables + \",\\r\\n\"\r\n            } else {\r\n                all_tables = all_tables + \"\\r\\n\"\r\n            }\r\n\r\n            all_tables = all_tables + AddTable(table_name, table_columns, table_permissions)\r\n            i = i + 1\r\n        }\r\n\r\n        //=====================================================================================================\r\n\r\n        full_result = AssignAll($ApplicationName, all_blocks, all_contracts, all_data, all_languages, all_menus, all_pages, all_parameters, all_tables)\r\n        UploadBinary(\"Name,Data,AppID,DataMimeType\", \"export\", full_result, 1, \"application/json\")\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Import_CreateApp",
            "Value": "contract Import_CreateApp {\r\n    data {}\r\n\r\n    conditions {\r\n        var app_map map\r\n        app_map = DBFind(\"buffer_data\").Columns(\"value->app_name\").Where(\"key='import_info' and member_id=$\", $key_id).Row()\r\n        if !app_map{\r\n           warning \"Application not found\"\r\n        }\r\n        $app_name = Str(app_map[\"value.app_name\"])\r\n    }\r\n\r\n    action {\r\n        var app_id int\r\n        app_id = DBFind(\"applications\").Columns(\"id\").Where(\"name=$\", $app_name).One(\"id\")\r\n\r\n        if !app_id {\r\n            DBInsert(\"applications\", \"name\", $app_name)\r\n        }        \r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewTable",
            "Value": "contract NewTable {\r\n\tdata {\r\n\t\tApplicationId int \"optional\"\r\n\t\tName string \"optional\"\r\n\t\tColumns string \"optional\"\r\n\t\tPermissions string \"optional\"\r\n\t\tTableName string \"optional\"\r\n    \tId array \"optional\"\r\n    \tShareholding array \"optional\"\r\n    \tInsert_con string \"optional\"\r\n    \tUpdate_con string \"optional\"\r\n    \tNew_column_con string \"optional\"\r\n\t}\r\n\tconditions {}\r\n\t\r\n\taction {\r\n\t\tif (Size($Name) > 0   &&   Size($Columns) > 0  &&  Size($Permissions) > 0){\r\n\t\t\tCreateTable($Name, $Columns, $Permissions, $ApplicationId)\r\n\t\t} else {\r\n\t\t\tvar i,len,lenshar int\r\n        \tvar res,columns string\r\n        \tlen = Len($Id)\r\n        \tlenshar = Len($Shareholding)\r\n\t\t\twhile i < len {\r\n            \tif (i + 1 == len){\r\n                \tres = res + Sprintf(`{\"name\":%q,\"type\":%q,\"conditions\":\"true\"}`,$Id[i],$Shareholding[i])\r\n                \ti = i + 1\r\n            \t}\r\n            \telse {\r\n            \t\tres = res + Sprintf(`{\"name\":%q,\"type\":%q,\"conditions\":\"true\"},`,$Id[i],$Shareholding[i])\r\n            \t\ti = i + 1\r\n            \t}\r\n\t\t\t}\r\n    \t\tcolumns = Sprintf(\"[\"+\"%v\"+\"]\", res)\r\n        \r\n        \tvar permissions string\r\n        \tpermissions = Sprintf(`{\"insert\":%q,\"update\":%q,\"new_column\":%q}`,$Insert_con,$Update_con,$New_column_con)\r\n\r\n\t\t\t$Name = $TableName\r\n\t\t\t$Columns = columns\r\n\t\t\t$Permissions = permissions\r\n\t\t\t\r\n\t\t\tCreateTable($Name, $Columns, $Permissions, $ApplicationId)\r\n\t\t}\r\n\t}\r\n\tfunc rollback() {\r\n\t\t\tRollbackTable($Name)\r\n\t}\r\n\tfunc price() int {\r\n\t\treturn  SysParamInt(\"table_price\")\r\n\t}\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Import_Upload",
            "Value": "contract Import_Upload {\r\n\tdata {\r\n        input_file string\r\n    }\r\n\r\n    conditions {\r\n    }\r\n\r\n    action {\r\n        var json map\r\n        json = JSONToMap($input_file)\r\n        var arr_data array\r\n        arr_data = json[\"data\"]\r\n\r\n        var pages_arr, blocks_arr, menu_arr, parameters_arr, languages_arr, contracts_arr, tables_arr array\r\n\r\n        var i int\r\n        while i<Len(arr_data){\r\n            var tmp_object map\r\n            tmp_object = arr_data[i]\r\n\r\n            if (tmp_object[\"Type\"] == \"page\"){\r\n                pages_arr[Len(pages_arr)] = Str(tmp_object[\"Name\"])\r\n            }\r\n            if (tmp_object[\"Type\"] == \"block\"){\r\n                blocks_arr[Len(blocks_arr)] = Str(tmp_object[\"Name\"])\r\n            }\r\n            if (tmp_object[\"Type\"] == \"menu\"){\r\n                menu_arr[Len(menu_arr)] = Str(tmp_object[\"Name\"])\r\n            }\r\n            if (tmp_object[\"Type\"] == \"parameter\"){\r\n                parameters_arr[Len(parameters_arr)] = Str(tmp_object[\"Name\"])\r\n            }\r\n            if (tmp_object[\"Type\"] == \"language\"){\r\n                languages_arr[Len(languages_arr)] = Str(tmp_object[\"Name\"])\r\n            }\r\n            if (tmp_object[\"Type\"] == \"contract\"){\r\n                contracts_arr[Len(contracts_arr)] = Str(tmp_object[\"Name\"])\r\n            }\r\n            if (tmp_object[\"Type\"] == \"table\"){\r\n                tables_arr[Len(tables_arr)] = Str(tmp_object[\"Name\"])\r\n            }\r\n\r\n            i = i + 1\r\n        }\r\n\r\n        var info_map map\r\n\t\tinfo_map[\"app_name\"] = json[\"name\"]\r\n        info_map[\"pages\"] = Join(pages_arr, \", \")\r\n        info_map[\"pages_count\"] = Len(pages_arr)\r\n        info_map[\"blocks\"] = Join(blocks_arr, \", \")\r\n        info_map[\"blocks_count\"] = Len(blocks_arr)\r\n        info_map[\"menu\"] = Join(menu_arr, \", \")\r\n        info_map[\"menu_count\"] = Len(menu_arr)\r\n        info_map[\"parameters\"] = Join(parameters_arr, \", \")\r\n        info_map[\"parameters_count\"] = Len(parameters_arr)\r\n        info_map[\"languages\"] = Join(languages_arr, \", \")\r\n        info_map[\"languages_count\"] = Len(languages_arr)\r\n        info_map[\"contracts\"] = Join(contracts_arr, \", \")\r\n        info_map[\"contracts_count\"] = Len(contracts_arr)\r\n        info_map[\"tables\"] = Join(tables_arr, \", \")\r\n        info_map[\"tables_count\"] = Len(tables_arr)\r\n\r\n        $import_id = DBFind(\"buffer_data\").Where(\"member_id=$ and key=$\", $key_id, \"import\").One(\"id\")\r\n        if !$import_id {\r\n            DBInsert(\"buffer_data\", \"member_id,key,value\", $key_id, \"import\", $input_file)\r\n        } else {\r\n            DBUpdate(\"buffer_data\", Int($import_id), \"value\", $input_file)\r\n        }\r\n\r\n        $info_id = DBFind(\"buffer_data\").Where(\"member_id=$ and key=$\", $key_id, \"import_info\").One(\"id\")\r\n        if !$info_id {\r\n            DBInsert(\"buffer_data\", \"member_id,key,value\", $key_id, \"import_info\", info_map)\r\n        } else {\r\n            DBUpdate(\"buffer_data\", Int($info_id), \"value\", info_map)\r\n        }\r\n\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewAppParam",
            "Value": "contract NewAppParam {\r\n\tdata {\r\n\t\tApplicationId int \"optional\"\r\n\t\tName string\r\n\t\tValue string\r\n\t\tConditions string\r\n\t}\r\n\t\r\n\tconditions {\r\n\t\tValidateCondition($Conditions, $ecosystem_id)\r\n\t\t\r\n\t\tif $ApplicationId == 0 {\r\n\t\t\twarning \"Application id cannot equal 0\"\r\n\t\t}\r\n\t\t\r\n\t\tvar param_id int\r\n\t\tparam_id = DBFind(\"app_params\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\")\r\n\t\tif param_id {\r\n\t\t\twarning Sprintf( \"Application parameter %s already exists\", $Name)\r\n\t\t}\r\n\t}\r\n\t\r\n\taction {\r\n\t\tDBInsert(\"app_params\", \"app_id,name,value,conditions\", $ApplicationId, $Name, $Value, $Conditions )\r\n\t}\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewApplication",
            "Value": "contract NewApplication {\r\n    data {\r\n        Name string\r\n        Conditions string\r\n    }\r\n\r\n    conditions {\r\n        ValidateCondition($Conditions, $ecosystem_id)\r\n    }\r\n\r\n    action {\r\n        $new_app_id = DBInsert(\"applications\", \"name,conditions\", $Name, $Conditions)\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewBlock",
            "Value": "contract NewBlock {\r\n\tdata {\r\n\t\tApplicationId int \"optional\"\r\n\t\tName string\r\n\t\tValue string\r\n\t\tConditions string\r\n\t}\r\n\t\r\n\tconditions {\r\n\t\tValidateCondition($Conditions, $ecosystem_id)\r\n\r\n\t\tif $ApplicationId == 0 {\r\n\t\t\twarning \"Application id cannot equal 0\"\r\n\t\t}\r\n\t\t\r\n\t\tvar block_id int\r\n\t\tblock_id = DBFind(\"blocks\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\")\r\n\t\tif block_id {\r\n\t\t\twarning Sprintf( \"Block %s already exists\", $Name)\r\n\t\t}\r\n\t}\r\n\t\r\n\taction {\r\n\t\tDBInsert(\"blocks\", \"name,value,conditions,app_id\", $Name, $Value, $Conditions, $ApplicationId )\r\n\t}\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewColumn",
            "Value": "contract NewColumn {\r\n\tdata {\r\n\t\tTableName string\r\n\t\tName string\r\n\t\tType string\r\n\t\tPermissions string\r\n\t}\r\n\tconditions {\r\n\t\tColumnCondition($TableName, $Name, $Type, $Permissions)\r\n\t}\r\n\taction {\r\n\t\tCreateColumn($TableName, $Name, $Type, $Permissions)\r\n\t}\r\n\tfunc rollback() {\r\n\t\tRollbackColumn($TableName, $Name)\r\n\t}\r\n\tfunc price() int {\r\n\t\treturn SysParamInt(\"column_price\")\r\n\t}\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewContract",
            "Value": "contract NewContract {\r\n\tdata {\r\n\t\tApplicationId int \"optional\"\r\n\t\tValue string\r\n\t\tConditions string\r\n\t\tWallet string \"optional\"\r\n\t\tTokenEcosystem int \"optional\"\r\n\t}\r\n\t\r\n\tconditions {\r\n\t\tValidateCondition($Conditions,$ecosystem_id)\r\n\t\t$walletContract = $key_id\r\n\t\t   if $Wallet {\r\n\t\t\t$walletContract = AddressToId($Wallet)\r\n\t\t\tif $walletContract == 0 {\r\n\t\t\t   error Sprintf(\"wrong wallet %s\", $Wallet)\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar list array\r\n\t\tlist = ContractsList($Value)\r\n\t\t\r\n\t\tif Len(list) == 0 {\r\n\t\t\terror \"must be the name\"\r\n\t\t}\r\n\r\n\t\tvar i int\r\n\t\twhile i < Len(list) {\r\n\t\t\tif IsObject(list[i], $ecosystem_id) {\r\n\t\t\t\twarning Sprintf(\"Contract or function %s exists\", list[i] )\r\n\t\t\t}\r\n\t\t\ti = i + 1\r\n\t\t}\r\n\r\n\t\t$contract_name = list[0]\r\n\t\tif !$TokenEcosystem {\r\n\t\t\t$TokenEcosystem = 1\r\n\t\t} else {\r\n\t\t\tif !SysFuel($TokenEcosystem) {\r\n\t\t\t\twarning Sprintf(\"Ecosystem %d is not system\", $TokenEcosystem )\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\taction {\r\n\t\tvar root, id int\r\n\t\troot = CompileContract($Value, $ecosystem_id, $walletContract, $TokenEcosystem)\r\n\t\tid = DBInsert(\"contracts\", \"name,value,conditions, wallet_id, token_id,app_id\", \r\n\t\t\t   $contract_name, $Value, $Conditions, $walletContract, $TokenEcosystem, $ApplicationId)\r\n\t\tFlushContract(root, id, false)\r\n\t\t$result = id\r\n\t}\r\n\tfunc rollback() {\r\n\t\tvar list array\r\n\t\tlist = ContractsList($Value)\r\n\t\tvar i int\r\n\t\twhile i < Len(list) {\r\n\t\t\tRollbackContract(list[i])\r\n\t\t\ti = i + 1\r\n\t\t}\r\n\t}\r\n\tfunc price() int {\r\n\t\treturn SysParamInt(\"contract_price\")\r\n\t}\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewLang",
            "Value": "contract NewLang {\r\n  data {\r\n\t\tApplicationId int \"optional\"\r\n\t\tName  string\r\n\t\tTrans string \"optional\"\r\n\t\tValue array \"optional\"\r\n\t\tIdLanguage array \"optional\"\r\n\t}\r\n\t\r\n\tconditions {\r\n    \tif (Len($IdLanguage) > 0){\r\n\t\t\tvar j,len int\r\n\t\t\tlen = Len($IdLanguage)\r\n\t\t\twhile j < len {\r\n\t\t\t\tif ($IdLanguage[j] == \"\"){\r\n\t\t\t\t\tinfo(\"Locale empty\")\r\n\t\t\t\t}\r\n\t\t\t\tif ($Value[j] == \"\"){\r\n\t\t\t\t\tinfo(\"Value empty\")\r\n\t\t\t\t}\r\n\t\t\t\tj = j + 1\r\n\t\t\t}\r\n    \t}\r\n\t\tEvalCondition(\"parameters\", \"changing_language\", \"value\")\r\n\r\n\t\tvar lan_id int\r\n\t\tlan_id = DBFind(\"languages\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\")\r\n\t\tif lan_id {\r\n\t\t\terror Sprintf(\"The language resource %s already exists\", $Name)\r\n\t\t}\t\r\n\t}\r\n\r\n\taction {\r\n\t\tif (Len($IdLanguage) > 0){\r\n\t\t\tvar i,len,lenshar int\r\n\t\t\tvar res,langarr string\r\n\t\t\tlen = Len($IdLanguage)\r\n\t\t\tlenshar = Len($Value)\r\n\t\t\twhile i < len {\r\n\t\t\t\tif (i + 1 == len){\r\n\t\t\t\t\tres = res + Sprintf(`%q: %q`,$IdLanguage[i],$Value[i])\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tres = res + Sprintf(`%q: %q, `,$IdLanguage[i],$Value[i])\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlangarr = Sprintf(\"{\"+\"%v\"+\"}\", res)\r\n\t\t\t$Trans = langarr\r\n\t\t\tDBInsert(\"languages\", \"name,res,app_id\", $Name, $Trans, $ApplicationId )\r\n\t\t\tUpdateLang($Name, $Trans)\r\n\t\t} \r\n\t\telse {\r\n\t\t\tDBInsert(\"languages\", \"name,res,app_id\", $Name, $Trans, $ApplicationId )\r\n\t\t\tUpdateLang($Name, $Trans)\r\n\t\t}\r\n  \t}\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewMenu",
            "Value": "contract NewMenu {\r\n\tdata {\r\n\t\tName string\r\n\t\tValue string\r\n\t\tTitle string \"optional\"\r\n\t\tConditions string\r\n\t}\r\n\t\r\n\tconditions {\r\n\t\tValidateCondition($Conditions,$ecosystem_id)\r\n\r\n\t\tvar menu_id int\r\n\t\tmenu_id = DBFind(\"menu\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\")\r\n\t\tif menu_id {\r\n\t\t\twarning Sprintf( \"Menu %s already exists\", $Name)\r\n\t\t}\r\n\t}\r\n\t\r\n\taction {\r\n\t\tDBInsert(\"menu\", \"name,value,title,conditions,app_id\", $Name, $Value, $Title, $Conditions)\r\n\t}\r\n\tfunc price() int {\r\n\t\treturn SysParamInt(\"menu_price\")\r\n\t}\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewPage",
            "Value": "contract NewPage {\r\n\tdata {\r\n\t\tApplicationId int \"optional\"\r\n\t\tName string\r\n\t\tValue string\r\n\t\tMenu string\r\n\t\tConditions string\r\n\t\tValidateCount int \"optional\"\r\n\t}\r\n\tfunc preparePageValidateCount(count int) int {\r\n\t\tvar min, max int\r\n\t\tmin = Int(EcosysParam(\"min_page_validate_count\"))\r\n\t\tmax = Int(EcosysParam(\"max_page_validate_count\"))\r\n\r\n\t\tif count < min {\r\n\t\t\tcount = min\r\n\t\t} else {\r\n\t\t\tif count > max {\r\n\t\t\t\tcount = max\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn count\r\n\t}\r\n\t\r\n\tconditions {\r\n\t\tValidateCondition($Conditions,$ecosystem_id)\r\n\r\n\t\tvar page_id int\r\n\t\tpage_id = DBFind(\"pages\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\")\r\n\t\tif page_id {\r\n\t\t\twarning Sprintf( \"Page %s already exists\", $Name)\r\n\t\t}\r\n\r\n\t\t$ValidateCount = preparePageValidateCount($ValidateCount)\r\n\t}\r\n\t\r\n\taction {\r\n\t\tDBInsert(\"pages\", \"name,value,menu,validate_count,conditions,app_id\", $Name, $Value, $Menu, $ValidateCount, $Conditions, $ApplicationId)\r\n\t}\r\n\tfunc price() int {\r\n\t\treturn  SysParamInt(\"page_price\")\r\n\t}\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewParameter",
            "Value": "contract NewParameter {\r\n\tdata {\r\n\t\tName string\r\n\t\tValue string\r\n\t\tConditions string\r\n\t}\r\n\t\r\n\tconditions {\r\n\t\tValidateCondition($Conditions, $ecosystem_id)\r\n\r\n\t\tvar param_id int\r\n\t\tparam_id = DBFind(\"parameters\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\")\r\n\t\tif param_id {\r\n\t\t\twarning Sprintf(\"Parameter %s already exists\", $Name)\r\n\t\t}\r\n\t}\r\n\t\r\n\taction {\r\n\t\tDBInsert(\"parameters\", \"name,value,conditions\", $Name, $Value, $Conditions )\r\n\t}\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Import_New",
            "Value": "contract Import_New {\r\n\tdata {\r\n        Type string \r\n        Name string \"optional\" \r\n        Value string \"optional\" \r\n        Conditions string \"optional\" \r\n        Menu string \"optional\" \r\n        Trans string \"optional\" \r\n        Columns string \"optional\" \r\n        Permissions string \"optional\"\r\n        Title string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n\t\tPrintln(\"Import: \" + $Name)\r\n        $ApplicationId = 0\r\n\r\n        var app_map map\r\n        app_map = DBFind(\"buffer_data\").Columns(\"value->app_name\").Where(\"key='import_info' and member_id=$\", $key_id).Row()\r\n        if app_map{\r\n            var app_id int\r\n            app_id = DBFind(\"applications\").Columns(\"id\").Where(\"name=$\", Str(app_map[\"value.app_name\"])).One(\"id\")\r\n\r\n            if app_id {\r\n                $ApplicationId = Int(app_id)\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var idata map\r\n\r\n        if $Type == \"page\" {\r\n            $page_id = DBFind(\"pages\").Where(\"name=?\", $Name).One(\"id\")\r\n            if $page_id {\r\n                idata[\"Id\"] = Int($page_id)\r\n                idata[\"Value\"] = $Value\r\n                idata[\"Menu\"] = $Menu\r\n                idata[\"Conditions\"] = $Conditions\r\n                CallContract(\"EditPage\", idata)\r\n            } else {\r\n                idata[\"ApplicationId\"] = $ApplicationId\r\n                idata[\"Name\"] = $Name\r\n                idata[\"Value\"] = $Value\r\n                idata[\"Menu\"] = $Menu\r\n                idata[\"Conditions\"] = $Conditions\r\n                CallContract(\"NewPage\", idata)\r\n            }\r\n        }\r\n        if $Type == \"block\" {\r\n            $block_id = DBFind(\"blocks\").Where(\"name=?\", $Name).One(\"id\")\r\n            if $block_id {\r\n                idata[\"Id\"] = Int($block_id)\r\n                idata[\"Value\"] = $Value\r\n                idata[\"Conditions\"] = $Conditions\r\n                CallContract(\"EditBlock\", idata)\r\n            } else {\r\n                idata[\"ApplicationId\"] = $ApplicationId\r\n                idata[\"Name\"] = $Name\r\n                idata[\"Value\"] = $Value\r\n                idata[\"Conditions\"] = $Conditions\r\n                CallContract(\"NewBlock\", idata)\r\n            }\r\n        }\r\n        if $Type == \"menu\" {\r\n            $menu = DBFind(\"menu\").Where(\"name=?\", $Name).Row()\r\n            if $menu {\r\n                idata[\"Id\"] = Int($menu[\"id\"])\r\n                idata[\"Value\"] = $menu[\"value\"] + \"\\n\" + $Value\r\n                idata[\"Title\"] = $Title\r\n                idata[\"Conditions\"] = $Conditions\r\n                CallContract(\"EditMenu\", idata)\r\n            } else {\r\n                idata[\"Name\"] = $Name\r\n                idata[\"Value\"] = $Value\r\n                idata[\"Title\"] = $Title\r\n                idata[\"Conditions\"] = $Conditions\r\n                CallContract(\"NewMenu\", idata)\r\n            }\r\n        }\r\n        if $Type == \"parameter\" {\r\n            $param_id = DBFind(\"app_params\").Where(\"name=?\", $Name).One(\"id\")\r\n            if $param_id {\r\n                idata[\"Id\"] = Int($param_id)\r\n                idata[\"Value\"] = $Value\r\n                idata[\"Conditions\"] = $Conditions\r\n                CallContract(\"EditAppParam\", idata)\r\n            } else {\r\n                idata[\"ApplicationId\"] = $ApplicationId\r\n                idata[\"Name\"] = $Name\r\n                idata[\"Value\"] = $Value\r\n                idata[\"Conditions\"] = $Conditions\r\n                CallContract(\"NewAppParam\", idata)\r\n            }\r\n        }\r\n        if $Type == \"language\" {\r\n            $lang_id = DBFind(\"languages\").Where(\"name=?\", $Name).One(\"id\")\r\n            if $lang_id {\r\n                idata[\"Id\"] = Int($lang_id)\r\n                idata[\"Trans\"] = $Trans\r\n                CallContract(\"EditLang\", idata)\r\n            } else {\r\n                idata[\"ApplicationId\"] = $ApplicationId\r\n                idata[\"Name\"] = $Name\r\n                idata[\"Trans\"] = $Trans\r\n                CallContract(\"NewLang\", idata)\r\n            }\r\n        }\r\n        if $Type == \"contract\" {\r\n            $contract_id = GetContractByName($Name)\r\n            if $contract_id > 0 {\r\n                idata[\"Id\"] = $contract_id\r\n                idata[\"Value\"] = $Value\r\n                idata[\"Conditions\"] = $Conditions\r\n                CallContract(\"EditContract\", idata)\r\n            } else {\r\n                idata[\"ApplicationId\"] = $ApplicationId\r\n                idata[\"Value\"] = $Value\r\n                idata[\"Conditions\"] = $Conditions\r\n                CallContract(\"NewContract\", idata)\r\n            }\r\n        }\r\n        if $Type == \"table\" {\r\n            $table_id = DBFind(\"tables\").Where(\"name=?\", $Name).One(\"id\")\r\n            if $table_id {\r\n                //nothing\r\n            } else {\r\n                idata[\"ApplicationId\"] = $ApplicationId\r\n                idata[\"Name\"] = $Name\r\n                idata[\"Columns\"] = $Columns\r\n                idata[\"Permissions\"] = $Permissions\r\n                CallContract(\"NewTable\", idata)\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Export_NewApp",
            "Value": "contract Export_NewApp {\r\n    data {\r\n        app_id int\r\n    }\r\n\r\n    conditions {\r\n        $app_map = DBFind(\"applications\").Columns(\"id,name\").Where(\"id=$\", $app_id).Row()\r\n        if !$app_map{\r\n            warning \"Application not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n\r\n        //=====================================================================================================\r\n        //------------------------------------Menu search------------------------------------------------------\r\n        var i int\r\n        var pages_array array\r\n        var menu_name_array array\r\n\t\tvar menu_id_array array\r\n\r\n        i = 0\r\n        var pages_ret array\r\n        pages_ret = DBFind(\"pages\").Where(\"app_id=?\", $app_id)\r\n        while i < Len(pages_ret) {\r\n            var page_map map\r\n            page_map = pages_ret[i]\r\n\r\n            pages_array[Len(pages_array)] = Sprintf(\"'%v'\", Str(page_map[\"menu\"]))\r\n            i = i + 1\r\n        }\r\n\r\n\r\n        if (Len(pages_array) > 0) {\r\n            var where_for_menu string\r\n            where_for_menu = Sprintf(\"name in (%v)\", Join(pages_array, \",\"))\r\n\r\n            i = 0\r\n            var menu_ret array\r\n            menu_ret = DBFind(\"menu\").Where(where_for_menu)\r\n            while i < Len(menu_ret) {\r\n                var menu_map map\r\n                menu_map = menu_ret[i]\r\n\r\n                menu_name_array[Len(menu_name_array)] = Str(menu_map[\"name\"])\r\n\t\t\t\tmenu_id_array[Len(menu_id_array)] = Str(menu_map[\"id\"])\r\n                i = i + 1\r\n            }\r\n        }\r\n\r\n        //=====================================================================================================\r\n        //------------------------------------Creating settings------------------------------------------------\r\n    \r\n        var value map\r\n        value[\"app_id\"] = Str($app_id)\r\n        value[\"app_name\"] = Str($app_map[\"name\"])\r\n\t\t\r\n\t\tif (Len(menu_name_array) > 0){\r\n\t\t\tvalue[\"menu_id\"] = Str(Join(menu_id_array, \", \"))\r\n\t\t\tvalue[\"menu_name\"] = Str(Join(menu_name_array, \", \"))\r\n\t\t\tvalue[\"count_menu\"] = Str(Len(menu_name_array))\r\n\t\t} else {\r\n\t\t\tvalue[\"menu_id\"] = \"0\"\r\n\t\t\tvalue[\"menu_name\"] = \"\"\r\n\t\t\tvalue[\"count_menu\"] = \"0\"\r\n\t\t}\r\n\r\n        $buffer_id = DBFind(\"buffer_data\").Where(\"member_id=$ and key=$\", $key_id, \"export\").One(\"id\")\r\n        if !$buffer_id {\r\n            DBInsert(\"buffer_data\", \"member_id,key,value\", $key_id, \"export\", value)\r\n        } else {\r\n            DBUpdate(\"buffer_data\", Int($buffer_id), \"value\", value)\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "data": [],
    "languages": [
        {
            "Name": "app_params",
            "Conditions": "",
            "Trans": "{\"ru\": \"Параметры Приложения\", \"en\": \"Application Params\"}"
        },
        {
            "Name": "application",
            "Conditions": "",
            "Trans": "{\"ru\":\"Приложение\",\"en\":\"Application\"}"
        },
        {
            "Name": "applications",
            "Conditions": "",
            "Trans": "{\"ru\":\"Приложения\",\"en\":\"Applications\"}"
        },
        {
            "Name": "binary",
            "Conditions": "",
            "Trans": "{\"ru\":\"Двоичные данные\",\"en\":\"Binary Data\"}"
        },
        {
            "Name": "blocks",
            "Conditions": "",
            "Trans": "{\"ru\":\"Блоки\",\"en\":\"Blocks\"}"
        },
        {
            "Name": "create",
            "Conditions": "",
            "Trans": "{\"en\": \"Create\", \"ru\": \"Создать\"}"
        },
        {
            "Name": "deleted",
            "Conditions": "",
            "Trans": "{\"en\": \"Deleted\", \"ru\": \"Удалено\"}"
        },
        {
            "Name": "deleted_applications",
            "Conditions": "",
            "Trans": "{\"ru\":\"Удалённые приложения\",\"en\":\"Deleted Applications\"}"
        },
        {
            "Name": "download_link",
            "Conditions": "",
            "Trans": "{\"ru\": \"Ссылка для скачивания\", \"en\": \"Download link\r\n\"}"
        },
        {
            "Name": "ecosystem_params",
            "Conditions": "",
            "Trans": "{\"en\":\"Ecosystem parameters\",\"ru\":\"Параметры экосистемы\"}"
        },
        {
            "Name": "id",
            "Conditions": "",
            "Trans": "{\"en\": \"ID\", \"ru\": \"ID\"}"
        },
        {
            "Name": "langres",
            "Conditions": "",
            "Trans": "{\"ru\": \"Языковые Ресурсы\", \"en\": \"Language Resources\"}"
        },
        {
            "Name": "manage_stylesheet",
            "Conditions": "",
            "Trans": "{\"en\":\"Manage stylesheet\",\"ru\":\"Управление стилями\"}"
        },
        {
            "Name": "menus",
            "Conditions": "",
            "Trans": "{\"ru\":\"Меню\",\"en\":\"Menus\"}"
        },
        {
            "Name": "name",
            "Conditions": "",
            "Trans": "{\"ru\":\"Название\",\"en\":\"Name\"}"
        },
        {
            "Name": "pages",
            "Conditions": "",
            "Trans": "{\"ru\":\"Страницы\",\"en\":\"Pages\"}"
        },
        {
            "Name": "params",
            "Conditions": "",
            "Trans": "{\"ru\":\"Параметры\",\"en\":\"Params\", \"en\": \"App Params\", \"ru\": \"Параметры Приложения\", \"en\": \"Params\", \"ru\": \"Параметры\"}"
        },
        {
            "Name": "resources",
            "Conditions": "",
            "Trans": "{\"en\":\"Resources\",\"ru\":\"Ресурсы\"}"
        },
        {
            "Name": "smart_contracts",
            "Conditions": "",
            "Trans": "{\"ru\":\"Смарт-Контракты\",\"en\":\"Smart Contracts\"}"
        },
        {
            "Name": "tables",
            "Conditions": "",
            "Trans": "{\"ru\": \"Таблицы\", \"en\": \"Tables\"}"
        }
    ],
    "menus": [
        {
            "Name": "admin_menu",
            "Value": "MenuItem(Title:$application$, Page:apps_list, Icon:\"icon-folder\")\r\nMenuItem(Title:$ecosystem_params$, Page:params_list, Icon:\"icon-settings\")\r\nMenuItem(Title:$menus$, Page:menus_list, Icon:\"icon-list\")\r\nMenuItem(Title:Import, Page:import_upload, Icon:\"icon-cloud-upload\")\r\nMenuItem(Title:Export, Page:export_resources, Icon:\"icon-cloud-download\")\r\nMenuGroup(Title:$resources$, Icon:\"icon-share\"){\r\n    MenuItem(Title:$pages$, Page:app_pages, Icon:\"icon-screen-desktop\")\r\n    MenuItem(Title:$blocks$, Page:app_blocks, Icon:\"icon-grid\")\r\n    MenuItem(Title:$tables$, Page:app_tables, Icon:\"icon-docs\")\r\n    MenuItem(Title:$smart_contracts$, Page:app_contracts, Icon:\"icon-briefcase\")\r\n    MenuItem(Title:$app_params$, Page:app_params, Icon:\"icon-wrench\")\r\n    MenuItem(Title:$langres$, Page:app_langres, Icon:\"icon-globe\")\r\n    MenuItem(Title:$binary$, Page:app_binary, Icon:\"icon-layers\")\r\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "pages": [
        {
            "Name": "app_binary",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\r\n\r\nIf(#buffer_value_app_id# > 0){\r\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Limit(1).Vars(\"app\")\r\n\r\n    Div(content-wrapper){\r\n        SetTitle($binary$: #app_name#)\r\n        AddToolButton(Title: Upload Binary, Page: app_upload_binary, Icon: icon-plus, PageParams: \"app_id=#app_id#\")\r\n\r\n        SetVar(pager_table, binaries)\r\n        SetVar(pager_where, \"app_id=#buffer_value_app_id#\")\r\n        SetVar(pager_page, app_binary)\r\n        SetVar(pager_limit, 50)\r\n        Include(pager_header)\r\n\r\n        SetVar(admin_page, app_binary)\r\n        Include(admin_link)\r\n\r\n        DBFind(binaries, src_binparameters).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\r\n\r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                Div(row){\r\n                    ForList(src_binparameters){\r\n                        Div(col-md-#width# col-sm-12){\r\n                            Div(list-group-item){\r\n                                Div(row){\r\n                                    Div(col-md-4){\r\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\r\n                                        If(#member_id# == #key_id#){\r\n                                            LinkPage(Class: text-primary h5, Body: #name#, Page: app_upload_binary, PageParams: \"id=#id#,app_id=#buffer_value_app_id#\")\r\n                                        }.Else{\r\n                                            Span(Class: h5, Body: #name#)\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-8){\r\n                                        Div(pull-right){\r\n                                            Span(#hash#)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: panel-footer){\r\n                Div(Class: clearfix){\r\n                    Include(pager)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    SetTitle($binary$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "app_blocks",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\r\n\r\nIf(#buffer_value_app_id# > 0){\r\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Limit(1).Vars(\"app\")\r\n\r\n    Div(content-wrapper){\r\n        SetTitle($blocks$: #app_name#)\r\n        AddToolButton(Title: $create$, Page: editor, Icon: icon-plus, PageParams: \"create=block,appId=#buffer_value_app_id#\")\r\n\r\n        SetVar(pager_table, blocks)\r\n        SetVar(pager_where, \"app_id=#buffer_value_app_id#\")\r\n        SetVar(pager_page, app_blocks)\r\n        SetVar(pager_limit, 50)\r\n        Include(pager_header)\r\n\r\n        SetVar(admin_page, app_blocks)\r\n        Include(admin_link)\r\n\r\n        DBFind(blocks, src_blocks).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\r\n\r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                Div(row){\r\n                    ForList(src_blocks){\r\n                        Div(col-md-#width# col-sm-12){\r\n                            Div(list-group-item){\r\n                                Div(row){\r\n                                    Div(col-md-4){\r\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\r\n                                        Span(Class: h5, Body: \"#name#\")\r\n                                    }\r\n                                    Div(col-md-8){\r\n                                        Div(pull-right){\r\n                                            SetVar(type,\"block\")\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=#type#\")).Style(margin-right: 15px;)\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=block,name=#name#\"))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: panel-footer){\r\n                Div(Class: clearfix){\r\n                    Include(pager)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    SetTitle($blocks$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "app_contracts",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\r\n\r\nIf(#buffer_value_app_id# > 0){\r\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Limit(1).Vars(\"app\")\r\n\r\n    Div(content-wrapper){\r\n        SetTitle($smart_contracts$: #app_name#)\r\n        AddToolButton(Title: $create$, Page: editor, Icon: icon-plus, PageParams: \"create=contract,appId=#buffer_value_app_id#\")\r\n\r\n        SetVar(pager_table, contracts)\r\n        SetVar(pager_where, \"app_id=#buffer_value_app_id#\")\r\n        SetVar(pager_page, app_contracts)\r\n        SetVar(pager_limit, 50)\r\n        Include(pager_header)\r\n\r\n        SetVar(admin_page, app_contracts)\r\n        Include(admin_link)\r\n\r\n        DBFind(contracts, src_contracts).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\r\n\r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                Div(row){\r\n                    ForList(src_contracts){\r\n                        Div(col-md-#width# col-sm-12){\r\n                            Div(list-group-item){\r\n                                Div(row){\r\n                                    Div(col-md-4){\r\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\r\n                                        Span(Class: h5, Body: \"#name#\")\r\n                                    }\r\n                                    Div(col-md-8){\r\n                                        Div(pull-right){\r\n                                            SetVar(type,\"contract\")\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=#type#\")).Style(margin-right: 15px;)\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=contract,name=#name#\"))\r\n                                        }\r\n                                        Div(pull-right){\r\n                                            If(#active#==1){\r\n                                                Span(Class: h5, Body: Em(Class: fa fa-check)).Style(margin-right: 50px;)\r\n                                            }.Else{\r\n                                                Span(Class: h5 text-muted, Body: Em(Class: fa fa-minus)).Style(margin-right: 50px;)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: panel-footer){\r\n                Div(Class: clearfix){\r\n                    Include(pager)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    SetTitle($smart_contracts$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "app_edit",
            "Value": "Div(Class: content-wrapper){\r\n\r\n\tIf(#id# > 0){\r\n\t\tSetVar(action, Edit)\r\n\t}.Else{\r\n\t\tSetVar(action, Create)\r\n\t}\r\n\r\n    SetTitle(#action# Application)\r\n    Div(breadcrumb){\r\n\t\tDiv(){\r\n            LinkPage(Applications, apps_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(#action# Application, text-muted)\r\n        }\r\n    }\r\n\r\n    Div(Class: row){\r\n        Div(Class: col-md-12){\r\n\t\t\tForm(){\r\n\t\t\t\tIf(#id# > 0){\r\n\t\t\t\t\tDBFind(applications, src_apps).Columns(\"id,name,conditions,deleted\").Where(\"id=#id#\").Limit(1).Vars(\"app\")\r\n\t\t\t\t\tDiv(Class: col-md-12){\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tLabel(LangRes(name))\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tInput(Class: form-control, Type: text, Name: name, Disabled: \"true\", Value: #app_name#)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tLabel(Change Conditions)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tInput(Class: form-control, Type: text, Name: conditions, Value: #app_conditions#)\r\n\t\t\t\t\t\t}\r\n                        Div(Class: row){\r\n                            Div(Class: form-group){\r\n                                Div(Class: text-left col-md-6){\r\n                                    Button(Body: Save, Class: btn btn-primary, Page: apps_list, Contract: EditApplication, Params: \"ApplicationId=#id#,Conditions=Val(conditions)\")\r\n                                }\r\n                                Div(Class: text-right col-md-6){\r\n                                    If(#app_deleted# == 0){\r\n                                        Button(Body: Delete, Class: btn btn-danger, Page: apps_list, Contract: DelApplication, Params: \"ApplicationId=#app_id#,Value=1\")\r\n                                    }\r\n                                }\r\n                            }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}.Else{\r\n\t\t\t\t\tDBFind(\"menu\",Source: src_menu).WhereId(#edit_property_id#).Vars(menu)\r\n\t\t\t\t\tDiv(Class: col-md-12){\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tLabel(LangRes(name))\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tInput(Class: form-control, Type: text, Name: name)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tLabel(Change Conditions)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tInput(Class: form-control, Type: text, Name: conditions)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tButton(Body: Save, Class: btn btn-primary, Page: apps_list, Contract: NewApplication, Params: \"Name=Val(name),Conditions=Val(conditions)\")\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "app_langres",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\r\n\r\nIf(#buffer_value_app_id# > 0){\r\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Limit(1).Vars(\"app\")\r\n\r\n    Div(content-wrapper){\r\n        SetTitle($langres$: #app_name#)\r\n        AddToolButton(Title: $create$, Page: langres_res_add, Icon: icon-plus, PageParams: \"app_id=#app_id#\")\r\n        \r\n        SetVar(pager_table, languages)\r\n        SetVar(pager_where, \"app_id=#buffer_value_app_id#\")\r\n        SetVar(pager_page, app_langres)\r\n        SetVar(pager_limit, 50)\r\n        Include(pager_header)\r\n\r\n        SetVar(admin_page, app_langres)\r\n        Include(admin_link)\r\n\r\n        DBFind(languages, src_languages).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\r\n        \r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                Div(row){\r\n                    ForList(src_languages){\r\n                        Div(col-md-#width# col-sm-12){\r\n                            Div(list-group-item){\r\n                                Div(row){\r\n                                    Div(col-md-4){\r\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\r\n                                        Span(Class: h5, Body: \"#name#\")\r\n                                    }\r\n                                    Div(col-md-8){\r\n                                        Div(pull-right){\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: langres_edit, PageParams: \"lang_id=#id#\"))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: panel-footer){\r\n                Div(Class: clearfix){\r\n                    Include(pager)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    SetTitle($langres$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "app_pages",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\r\n\r\nIf(#buffer_value_app_id# > 0){\r\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Limit(1).Vars(\"app\")\r\n\r\n    Div(content-wrapper){\r\n        SetTitle($pages$: #app_name#)\r\n        AddToolButton(Title: $create$, Page: editor, Icon: icon-plus, PageParams: \"create=page,appId=#buffer_value_app_id#\")\r\n\r\n        SetVar(pager_table, pages)\r\n        SetVar(pager_where, \"app_id=#buffer_value_app_id#\")\r\n        SetVar(pager_page, app_pages)\r\n        SetVar(pager_limit, 50)\r\n        Include(pager_header)\r\n\r\n        SetVar(admin_page, app_pages)\r\n        Include(admin_link)\r\n\r\n        DBFind(pages, src_pages).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\r\n                                \r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                Div(row){\r\n                    ForList(src_pages){\r\n                        Div(col-md-#width# col-sm-12){\r\n                            Div(list-group-item){\r\n                                Div(row){\r\n                                    Div(col-md-4){\r\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\r\n                                        LinkPage(Page: #name#, Class: text-primary h5, Body: \"#name#\")\r\n                                    }\r\n                                    Div(col-md-8){\r\n                                        Div(pull-right){\r\n                                            SetVar(type,\"page\")\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=#type#\")).Style(margin-right: 15px;)\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=page,name=#name#\"))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: panel-footer){\r\n                Div(Class: clearfix){\r\n                    Include(pager)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    SetTitle($pages$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "app_params",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\r\n\r\nIf(#buffer_value_app_id# > 0){\r\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Limit(1).Vars(\"app\")\r\n\r\n    Div(content-wrapper){\r\n        SetTitle($app_params$: #app_name#)\r\n        AddToolButton(Title: $create$, Page: app_params_edit, Icon: icon-plus, PageParams: \"app_id=#app_id#,create=create\")\r\n\r\n        SetVar(pager_table, app_params)\r\n        SetVar(pager_where, \"app_id=#buffer_value_app_id#\")\r\n        SetVar(pager_page, app_params)\r\n        SetVar(pager_limit, 50)\r\n        Include(pager_header)\r\n\r\n        SetVar(admin_page, app_params)\r\n        Include(admin_link)\r\n\r\n        DBFind(app_params, src_appparameters).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\r\n\r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                Div(row){\r\n                    ForList(src_appparameters){\r\n                        Div(col-md-#width# col-sm-12){\r\n                            Div(list-group-item){\r\n                                Div(row){\r\n                                    Div(col-md-4){\r\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\r\n                                        Span(Class: h5, Body: \"#name#\")\r\n                                    }\r\n                                    Div(col-md-8){\r\n                                        Div(pull-right){\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: app_params_edit, PageParams: \"id=#id#\"))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: panel-footer){\r\n                Div(Class: clearfix){\r\n                    Include(pager)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    SetTitle($app_params$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "app_params_edit",
            "Value": "Div(Class: fullscreen){\r\n    If(#create# == create){\r\n        SetTitle(New Application Parameter)\r\n        Div(Class: breadcrumb){\r\n            LinkPage(Application Parameters, app_params)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: New Application Parameter)\r\n        }\r\n    }.Else{\r\n        DBFind(app_params, src_params).Where(\"id = #id#\").Limit(1).Vars(\"param\")\r\n        SetTitle(Edit Application Parameter)\r\n        Div(Class: breadcrumb){\r\n            LinkPage(Application Parameters, app_params)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: #param_name#)\r\n        }\r\n    }\r\n    Div(Class: fullscreen-wrapper){\r\n        Form(){\r\n            Div(Class: form-group){\r\n                Label(For: name){\r\n                    Span(Body: Name)\r\n                }\r\n                If(#create# == create){\r\n                    Input(Name: name, Class: form-control)\r\n                }.Else{\r\n                    Input(Name: name, Class: form-control, Value: #param_name#, Disabled: \"true\")\r\n                }\r\n            }\r\n            Div(Class: form-group){\r\n                If(#create# == create){\r\n                    Input(Type: textarea, Name: value).Style(height: 500px !important;)\r\n                }.Else{\r\n                    Input(Type: textarea, Name: value, Value: \"#param_value#\" ).Style(height: 500px !important;)\r\n                }\r\n            }\r\n            Div(Class: mb0 form-group){\r\n                Label(For: conditions){\r\n                    Span(Body: Change Conditions)\r\n                }\r\n                If(#create# == create){\r\n                    Input(Name: conditions, Class: form-control)\r\n                }.Else{\r\n                    Input(Name: conditions, Class: form-control, Value: #param_conditions#)\r\n                }\r\n            }\r\n            Div(Class: mt-lg){\r\n                If(#create# == create){\r\n                    Button(Class: btn btn-primary, Body: Save, Contract: NewAppParam, Params: \"Name=Val(name),Value=Val(value),Conditions=Val(conditions),ApplicationId=#app_id#\",Page: app_params)\r\n                }.Else{\r\n                    Button(Class: btn btn-primary, Body: Save, Contract:EditAppParam, Params: \"Id=#id#,Value=Val(value),Conditions=Val(conditions)\", Page: app_params)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "app_tables",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\r\n\r\nIf(#buffer_value_app_id# > 0){\r\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Limit(1).Vars(\"app\")\r\n\r\n    Div(content-wrapper){\r\n        SetTitle($tables$: #app_name#)\r\n        AddToolButton(Title: $create$, Page: table_create, Icon: icon-plus, PageParams: \"app_id=#app_id#\")\r\n\r\n        SetVar(pager_table, tables)\r\n        SetVar(pager_where, \"app_id=#buffer_value_app_id#\")\r\n        SetVar(pager_page, app_tables)\r\n        SetVar(pager_limit, 50)\r\n        Include(pager_header)\r\n\r\n        SetVar(admin_page, app_tables)\r\n        Include(admin_link)\r\n\r\n        DBFind(tables, src_tables).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\r\n\r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                Div(row){\r\n                    ForList(src_tables){\r\n                        Div(col-md-#width# col-sm-12){\r\n                            Div(list-group-item){\r\n                                Div(row){\r\n                                    Div(col-md-4){\r\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\r\n                                        LinkPage(Page: table_view, Class: text-primary h5, Body: \"#name#\", PageParams: \"table_name=#name#\")\r\n                                    }\r\n                                    Div(col-md-8){\r\n                                        Div(pull-right){\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: table_edit, PageParams: \"tabl_id=#id#\"))\r\n                                        }\r\n                                        Div(pull-right){\r\n                                            DBFind(#name#).Columns(\"id\").Count(countvar)\r\n                                            Span(Class: h5 text-muted, Body: #countvar#).Style(margin-right: 50px;)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: panel-footer){\r\n                Div(Class: clearfix){\r\n                    Include(pager)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    SetTitle($tables$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "app_upload_binary",
            "Value": "If(#id# > 0){\r\n    SetVar(Action, \"Edit\")\r\n\tDBFind(binaries).Columns(name).Where(id = #id#).Vars(binary)\r\n}.Else{\r\n    SetVar(Action, \"Upload\")\r\n}\r\nDiv(Class: content-wrapper){\r\n    SetTitle(#Action# Binary data)\r\n    Div(breadcrumb){\r\n        LinkPage(Binary data, app_binary)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(#Action# Binary data, text-muted)\r\n    }\r\n    Div(Class: row){\r\n        Div(col-md-12){\r\n            Form(){\r\n                Div(Class: form-group){\r\n\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\tLabel(Name)\r\n\t\t\t\t\t}\r\n                    If(#id# > 0){\r\n\t\t\t\t\t\tInput(Name: name, Disabled: disabled, Value: #binary_name#)\r\n                    }.Else{\r\n                        Input(Name: name, Placeholder: name)\r\n                    }\r\n                    \r\n\t\t\t\t}\r\n                Div(Class: form-group){\r\n\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\tLabel(Binary data file)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tInput(Name: databin, Type:file)\r\n\t\t\t\t}\r\n                Div(Class: form-group){\r\n\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t Button(Upload, Contract: UploadBinary, Class: btn btn-primary, Params: \"Name=Val(name),AppID=#app_id#,Data=Val(databin),MemberID=#key_id#\", Page: app_binary )\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n            }       \r\n        } \r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "apps_list",
            "Value": "Div(Class: fullscreen){\r\n    If(#deleted# == deleted){\r\n        SetTitle(Deleted Applications)\r\n    }.Else{\r\n        SetTitle($applications$)\r\n        AddToolButton(Title: $deleted$, Page: apps_list, Icon: icon-close, PageParams:\"deleted=deleted\")\r\n        AddToolButton(Title: $create$, Page: app_edit, Icon: icon-plus)\r\n    }\r\n\tDiv(breadcrumb){\r\n        If(#deleted# == deleted){\r\n            LinkPage(Applications list , apps_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: Deleted applications)\r\n        }.Else{\r\n\t\t    Span(Class: text-muted, Body: \"This section is used to select installed applications\")\r\n        }\r\n\t}\r\n    If(#deleted# == deleted){\r\n        DBFind(applications, src_applications).Where(\"deleted=1\").Order(\"id\").Count(countvar).Custom(restore_btn){\r\n             Button(Class: btn btn-link, Page: apps_list, Contract: DelApplication, Params: \"ApplicationId=#id#\",Body: \"restore application\")\r\n        }\r\n        If(#countvar# > 0) {\r\n        Table(Source: src_applications, Columns: \"$id$=id,$name$=name,Conditions=conditions,=restore_btn\").Style(\r\n        tbody > tr:nth-of-type(odd) {\r\n            background-color: #fafbfc; \r\n        }\r\n        tbody > tr > td {\r\n            word-break: break-all;\r\n\r\n            font-weight: 400;\r\n            font-size: 13px;\r\n            color: #666;\r\n            border-top: 1px solid #eee;\r\n            vertical-align: middle;\r\n        }\r\n        tr  > *:first-child {\r\n            padding-left:20px;\r\n            width: 80px;\r\n        }\r\n        tr  > *:last-child {\r\n            padding-right:80px;\r\n            text-align:right; \r\n            width: 200px;\r\n        }\r\n        thead {\r\n            background-color: #eee;\r\n        })\r\n        }.Else{\r\n            Div(Class: content-wrapper){\r\n                Span(Class: text-muted, Body: \"You don't have any deleted applications\")\r\n            }\r\n        }\r\n    }.Else{\r\n        DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\r\n        DBFind(applications, src_applications).Where(\"deleted=0\").Order(\"id\").Custom(custom_check){\r\n            If(#id#==#buffer_value_app_id#){\r\n                Span(Em(Class: fa fa-check)).Style(margin-left:30px;)\r\n            }.Else{\r\n                Button(Class: btn btn-link, Contract: Export_NewApp, Params: \"app_id=#id#\", Page: apps_list, Body: \"select\")\r\n            }\r\n        }.Custom(custom_actions){\r\n            Button(Class: btn btn-link, Body: Em(Class: fa fa-edit), Page: app_edit, PageParams: \"id=#id#\")\r\n        }\r\n\r\n        Table(Source: src_applications, Columns: \"$id$=id,$name$=name,Conditions=conditions,Selected=custom_check,=custom_actions\").Style(\r\n        tbody > tr:nth-of-type(odd) {\r\n            background-color: #fafbfc; \r\n        }\r\n        tbody > tr > td {\r\n            word-break: break-all;\r\n\r\n            font-weight: 400;\r\n            font-size: 13px;\r\n            color: #666;\r\n            border-top: 1px solid #eee;\r\n            vertical-align: middle;\r\n        }\r\n        tr  > *:first-child {\r\n            padding-left:20px;\r\n            width: 80px;\r\n        }\r\n        tr  > *:last-child {\r\n            padding-right:15px;\r\n            text-align:right; \r\n            width: 200px;\r\n        }\r\n        thead {\r\n            background-color: #eee;\r\n        })\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "column_add",
            "Value": "SetTitle(Tables)\r\nDiv(breadcrumb){\r\n    Div(){\r\n        LinkPage(Tables, app_tables)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        LinkPage(Edit table, table_edit, PageParams:\"tabl_id=#tabl_id#\")\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Add column, text-muted)\r\n    }\r\n}\r\nDiv(Class: content-wrapper){\r\n    Div(Class: row){\r\n        Form(){\r\n            Div(Class: col-md-12){\r\n                Div(Class: panel panel-default){\r\n                    Div(Class: panel-body){\r\n                        Div(Class: col-md-12){\r\n                            Div(Class: form-group){\r\n                                Label(Column)\r\n                                Input(ColumnName,Type: text,Class: form-control)\r\n                            }\r\n                            Div(Class: form-group){\r\n                                Data(src_type,\"type,name\"){\r\n                                    text,\"Text\"\r\n                                    number,\"Number\"\r\n                                    varchar,\"Varchar\"\r\n                                    datetime,\"Date/Time\"\r\n                                    money,\"Money\"\r\n                                    double,\"Double\"\r\n                                    character,\"Character\"\r\n                                    json,\"JSON\"\r\n                                }\r\n                                Label(Type)\r\n                                Select(Name: Coltype, Source: src_type, NameColumn: name, ValueColumn: type,Value:\"text\")\r\n                            }\r\n                            Div(Class: form-group){\r\n                                Label(Update)\r\n                                Input(ColumnUp,Type: text,Class: form-control)\r\n                            }\r\n                        }   \r\n                    }\r\n                    Div(Class: panel-footer){\r\n                        Div(Class: clearfix){\r\n                            Div(Class: pull-left){\r\n                                Button(Add Column,Contract:NewColumn,Class:btn btn-primary,Page: table_edit, PageParams:\"tabl_id=#tabl_id#\",Params: \"TableName=#next_table_name#,Name=Val(ColumnName),Type=Val(Coltype),Permissions=Val(ColumnUp)\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "column_edit",
            "Value": "SetTitle(Edit column)\r\nDiv(breadcrumb){\r\n    Div(){\r\n        LinkPage(Tables, app_tables)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        LinkPage(Edit table, table_edit, PageParams:\"tabl_id=#tabl_id#\")\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Edit column, text-muted)\r\n    }\r\n}\r\nDiv(Class: content-wrapper){\r\n    Div(Class: row){\r\n        Form(){\r\n            DBFind(\"tables\",Source: src_mem).Columns(\"id,name,columns,conditions\").Vars(pre).WhereId(#tabl_id#)\r\n            JsonToSource(src_columns, #pre_columns#)\r\n            Div(Class: col-md-12){\r\n                Div(Class: panel panel-default){\r\n                    Div(Class: panel-body){\r\n                        Div(Class: col-md-12){\r\n                            ForList(src_columns){\r\n                                If(#key# == #name_column#){\r\n                                    Div(Class: form-group){\r\n                                        Label(Column)\r\n                                        Input(ColumnName,Type: text,Class: form-control,Disabled: \"true\",Value: #name_column#)\r\n                                    }\r\n\t\t\t\t\t                Div(Class: form-group){\r\n                                        Label(Type)\r\n                                        SetVar(col_type,GetColumnType(#pre_name#, #key#))\r\n                                        If(#col_type# == character){\r\n                                            SetVar(input_type, \"Character\")\r\n                                        }\r\n                                        If(#col_type# == text){\r\n                                            SetVar(input_type, \"Text\")\r\n                                        }\r\n                                        If(#col_type# == number){\r\n                                            SetVar(input_type, \"Number\")\r\n                                        }\r\n                                        If(#col_type# == money){\r\n                                            SetVar(input_type, \"Money\")\r\n                                        }\r\n                                        If(#col_type# == varchar){\r\n                                            SetVar(input_type, \"Varchar\")\r\n                                        }\r\n                                        If(#col_type# == datetime){\r\n                                            SetVar(input_type, \"Date/Time\")\r\n                                        }\r\n                                        If(#col_type# == double){\r\n                                            SetVar(input_type, \"Double\")\r\n                                        }\r\n                                        If(#col_type# == character){\r\n                                            SetVar(input_type, \"Character\")\r\n                                        }\r\n                                        If(#col_type# == json){\r\n                                            SetVar(input_type, \"JSON\")\r\n                                        }\r\n                                        If(#col_type# == bytea){\r\n                                            SetVar(input_type, \"Binary Data\")\r\n                                        }\r\n                                        If(#col_type# == uuid){\r\n                                            SetVar(input_type, \"UUID\")\r\n                                        }\r\n                                        Input(Coltype,Type: text,Class: form-control,Disabled: \"true\", Value: #input_type#)\r\n                                    }\r\n                                    Div(Class: form-group){\r\n                                        Label(Update)\r\n                                        Input(ColumnUp,Type: text,Class: form-control,Value: #value#)\r\n                                    }\r\n                                }   \r\n                            }\r\n                        }\r\n                    }\r\n                    Div(Class: panel-footer){\r\n                        Div(Class: clearfix){\r\n                            Div(Class: pull-left){\r\n                                Button(Save,Contract:EditColumn,Class:btn btn-primary pull-right,Page: table_edit, PageParams:\"tabl_id=#tabl_id#\",Params: \"TableName=#pre_name#,Name=Val(ColumnName),Type=Val(Coltype),Permissions=Val(ColumnUp)\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "export_download",
            "Value": "Div(Class: fullscreen){\r\n    SetTitle(Export)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: \"Payload was formed. You can download it now\")\r\n    }\r\n\r\n    DBFind(Name: binaries, Source: src_binaries).Where(\"name='export' and member_id=#key_id# and app_id=1\").Custom(app_name){\r\n        DBFind(Name: applications, Source: src_app).Where(\"id=#app_id#\").Vars(prefix)\r\n        Span(#prefix_name#)\r\n    }\r\n\r\n    Table(Source: src_binaries, \"$applications$=app_name,$download_link$=data\").Style(\r\n        tbody > tr:nth-of-type(odd) {\r\n            background-color: #fafbfc; \r\n        }\r\n        tbody > tr > td {\r\n            word-break: break-all;\r\n            font-weight: 400;\r\n            font-size: 13px;\r\n            color: #666;\r\n            border-top: 1px solid #eee;\r\n            vertical-align: middle;\r\n        }\r\n        tr  > *:first-child {\r\n            padding-left:20px;\r\n            width: 200px;\r\n        }\r\n        tr  > *:last-child {\r\n            padding-right:20px;\r\n            text-align:right;\r\n        }\r\n        thead {\r\n            background-color: #eee;\r\n        })\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "export_resources",
            "Value": "Div(content-wrapper){\r\n \r\n\tSetTitle(Export)\r\n\tDiv(Class: breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: \"Select the application which do you want to export and proceed to the payload generation process.\")\r\n\t}\r\n\r\n\tInclude(export_link)\r\n\r\n    DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\r\n\r\n    If(#buffer_value_app_id# > 0){\r\n        If(#res_type#==\"pages\"){\r\n            DBFind(pages, src).Custom(cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\r\n        }\r\n        If(#res_type#==\"blocks\"){\r\n            DBFind(blocks, src).Custom(cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\r\n        }\r\n        If(#res_type#==\"menu\"){\r\n            DBFind(menu, src).Custom(cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Where(\"id in (#buffer_value_menu_id#)\").Order(\"id\")\r\n        }\r\n        If(#res_type#==\"parameters\"){\r\n            DBFind(app_params, src).Custom(cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\r\n        }\r\n        If(#res_type#==\"languages\"){\r\n            DBFind(languages, src).Custom(cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\r\n        }\r\n        If(#res_type#==\"contracts\"){\r\n            DBFind(contracts, src).Custom(cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\r\n        }\r\n        If(#res_type#==\"tables\"){\r\n            DBFind(tables, src).Custom(cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\r\n        }\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-9 col-md-offset-0){\r\n            Table(src, \"Key=id,Name=name,=cbox\").Style(\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #fafbfc; \r\n            } \r\n            tbody > tr > td {\r\n                word-break: break-all;\r\n                padding: 8px 20px !important;\r\n                font-weight: 400;\r\n                font-size: 13px;\r\n                color: #666;\r\n                border-top: 1px solid #eee;\r\n                vertical-align: middle;\r\n            } \r\n            tr  > *:first-child {\r\n                padding-left:20px;\r\n                width: 100px;\r\n            } \r\n            tr  > *:last-child {\r\n                text-align:right; \r\n                padding-right:20px;\r\n                width: 50px;\r\n            }\r\n            thead {\r\n                background-color: #eee;\r\n            })\r\n        }\r\n        Div(col-md-3 col-md-offset-0){\r\n\t\t\tInclude(export_info)\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "import_app",
            "Value": "Div(content-wrapper){\r\n\r\n    DBFind(Name: buffer_data, Source: src_buffer).Columns(\"id,value->name,value->data\").Where(\"key='import' and member_id=#key_id#\").Vars(prefix)\r\n    DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_name,value->pages,value->pages_count,value->blocks,value->blocks_count,value->menu,value->menu_count,value->parameters,value->parameters_count,value->languages,value->languages_count,value->contracts,value->contracts_count,value->tables,value->tables_count\").Where(\"key='import_info' and member_id=#key_id#\").Vars(info)\r\n\r\n\tSetTitle(\"Import - #info_value_app_name#\")  \r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: \"Select payload that you want to import\")\r\n\t}\r\n\r\n    Div(panel panel-primary){\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-10 mc-sm text-left){\r\n                    Span(Class: text-bold, Body: \"Pages\")\r\n                }\r\n                Div(col-md-2 mc-sm text-right){\r\n                    If(#info_value_pages_count# > 0){\r\n                        Span(Class: text-bold, Body: \"(#info_value_pages_count#)\")\r\n                    }.Else{\r\n                        Span(Class: text-muted, Body: \"(0)\")   \r\n                    }\r\n                } \r\n            }\r\n            Div(row){\r\n                Div(col-md-12 mc-sm text-left){\r\n                    If(#info_value_pages_count# > 0){\r\n                        Span(Class: h6, Body: \"#info_value_pages#\")\r\n                    }.Else{\r\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-10 mc-sm text-left){\r\n                    Span(Class: text-bold, Body: \"Blocks\")\r\n                }\r\n                Div(col-md-2 mc-sm text-right){\r\n                    If(#info_value_blocks_count# > 0){\r\n                        Span(Class: text-bold, Body: \"(#info_value_blocks_count#)\")\r\n                    }.Else{\r\n                        Span(Class: text-muted, Body: \"(0)\")  \r\n                    }\r\n                } \r\n            }\r\n            Div(row){\r\n                Div(col-md-12 mc-sm text-left){\r\n                    If(#info_value_blocks_count# > 0){\r\n                        Span(Class: h6, Body: \"#info_value_blocks#\")\r\n                    }.Else{\r\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row df f-valign){\r\n                Div(col-md-10 mc-sm text-left){\r\n                    Span(Class: text-bold, Body: \"Menu\")\r\n                }\r\n                Div(col-md-2 mc-sm text-right){\r\n                    If(#info_value_menu_count# > 0){\r\n                        Span(Class: text-bold, Body: \"(#info_value_menu_count#)\")\r\n                    }.Else{\r\n                        Span(Class: text-muted, Body: \"(0)\") \r\n                    }\r\n                } \r\n            }\r\n            Div(row df f-valign){\r\n                Div(col-md-12 mc-sm text-left){\r\n                    If(#info_value_menu_count# > 0){\r\n                        Span(Class: h6, Body:\"#info_value_menu#\")\r\n                    }.Else{\r\n                        Span(Class: text-muted h6, Body:\"Nothing selected\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-10 mc-sm text-left){\r\n                    Span(Class: text-bold, Body: \"Parameters\")\r\n                }\r\n                Div(col-md-2 mc-sm text-right){\r\n                    If(#info_value_parameters_count# > 0){\r\n                        Span(Class: text-bold, Body: \"(#info_value_parameters_count#)\")\r\n                    }.Else{\r\n                        Span(Class: text-muted, Body: \"(0)\")  \r\n                    }\r\n                } \r\n            }\r\n            Div(row){\r\n                Div(col-md-12 mc-sm text-left){\r\n                    If(#info_value_parameters_count# > 0){\r\n                        Span(Class: h6, Body: \"#info_value_parameters#\")\r\n                    }.Else{\r\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-10 mc-sm text-left){\r\n                    Span(Class: text-bold, Body: \"Language resources\")\r\n                }\r\n                Div(col-md-2 mc-sm text-right){\r\n                    If(#info_value_languages_count# > 0){\r\n                        Span(Class: text-bold, Body: \"(#info_value_languages_count#)\")\r\n                    }.Else{\r\n                        Span(Class: text-muted, Body: \"(0)\")  \r\n                    }\r\n                } \r\n            }\r\n            Div(row){\r\n                Div(col-md-12 mc-sm text-left){\r\n                    If(#info_value_languages_count# > 0){\r\n                        Span(Class: h6, Body: \"#info_value_languages#\")\r\n                    }.Else{\r\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-10 mc-sm text-left){\r\n                    Span(Class: text-bold, Body: \"Contracts\")\r\n                }\r\n                Div(col-md-2 mc-sm text-right){\r\n                    If(#info_value_contracts_count# > 0){\r\n                        Span(Class: text-bold, Body: \"(#info_value_contracts_count#)\")\r\n                    }.Else{\r\n                        Span(Class: text-muted, Body: \"(0)\")  \r\n                    }\r\n                } \r\n            }\r\n            Div(row){\r\n                Div(col-md-12 mc-sm text-left){\r\n                    If(#info_value_contracts_count# > 0){\r\n                        Span(Class: h6, Body: \"#info_value_contracts#\")\r\n                    }.Else{\r\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-10 mc-sm text-left){\r\n                    Span(Class: text-bold, Body: \"Tables\")\r\n                }\r\n                Div(col-md-2 mc-sm text-right){\r\n                    If(#info_value_tables_count# > 0){\r\n                        Span(Class: text-bold, Body: \"(#info_value_tables_count#)\")\r\n                    }.Else{\r\n                        Span(Class: text-muted, Body: \"(0)\")  \r\n                    }\r\n                } \r\n            }\r\n            Div(row){\r\n                Div(col-md-12 mc-sm text-left){\r\n                    If(#info_value_tables_count# > 0){\r\n                        Span(Class: h6, Body: \"#info_value_tables#\")\r\n                    }.Else{\r\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(#prefix_id# > 0){\r\n            Div(list-group-item text-right){\r\n                Button(Body: \"Import\", Class: btn btn-primary).CompositeContract(\"Import_CreateApp\", `[{}]`).CompositeContract(\"Import_New\", `#prefix_value_data#`)\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "import_upload",
            "Value": "Div(content-wrapper){\r\n\tSetTitle(Import)  \r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: \"Select payload that you want to import\")\r\n\t}\r\n\tDiv(panel panel-primary){\r\n\t\tForm(){ \r\n\t\t\tDiv(list-group-item){\r\n                Input(Name: input_file, Type: textarea)\r\n\t\t\t}\r\n\t\t\tDiv(list-group-item text-right){\r\n\t\t\t\tButton(Body: Load, Class: btn btn-primary, Contract: Import_Upload, Page: import_app)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "langres_edit",
            "Value": "SetTitle(Edit Language Resource)\r\nDiv(Class: breadcrumb){\r\n        LinkPage(Language Resources, app_langres)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: Edit localization)\r\n}\r\nDiv(Class: content-wrapper){\r\n    Div(Class: row){\r\n        Form(){\r\n            Div(Class: col-md-12){\r\n                Div(Class: panel panel-default){\r\n                    Div(Class: panel-body){\r\n                        DBFind(languages,Source: src_leng).Vars(pre).WhereId(#lang_id#)\r\n                        Div(Class: col-md-12){\r\n                            Div(Class: form-group  col-md-12){\r\n                                Label(Name)\r\n                                Input(LangName,Type: text,Class: form-control,Disabled: \"true\",Value:#pre_name#)\r\n                            }\r\n                            Div(Class: form-group col-md-1){\r\n                                Label(Class: text-muted,Body: Locale)\r\n                            }\r\n                            Div(Class: form-group col-md-10){\r\n                                Label(Class: text-muted,Body: Value)\r\n                            }\r\n                            Div(Class: form-group col-md-1){\r\n                                Label(Class: text-muted,Body: Action)     \r\n                            }\r\n                        }\r\n                        SetVar(json,#pre_res#) \r\n                        JsonToSource(pv, #json#)\r\n                        ForList(Source: pv){\r\n                            Div(Class: col-md-12){\r\n                                Div(Class: form-group col-md-1){\r\n                                    Input(Name:idshare, Class: \"form-control\",Value:#key#)\r\n                                }\r\n                                Div(Class: form-group col-md-10){\r\n                                    Input(Name:share,Class: \"form-control\",Value: #value#)\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#del# == 1){\r\n                            SetVar(next_count, Calculate( Exp: #count_sec# - 1, Type: int))\r\n                        }.Else{\r\n                            If(GetVar(count)==\"\"){\r\n                            SetVar(count, 0)\r\n                            SetVar(next_count, Calculate( Exp: #count#, Type: int))\r\n                            }.Else{\r\n                                SetVar(next_count, Calculate( Exp: #count_sec# + 1, Type: int))\r\n                            }\r\n                        }\r\n                        Range(params_range, 0, #next_count#)\r\n                        ForList(Source: params_range){\r\n                            Div(Class: col-md-12){\r\n                                Div(Class: form-group col-md-1){\r\n                                    Input(Name:idshare, Class: \"form-control\")\r\n                                    \r\n                                }\r\n                                Div(Class: form-group col-md-10){\r\n                                    Input(Name:share, Class: \"form-control\")\r\n                                }\r\n                                Div(Class: form-group col-md-1){\r\n                                    If(And(#next_count# == #params_range_index#, #next_count# > 0)){\r\n                                    Button(Em(Class: fa fa-trash),Class: btn btn-default,PageParams:\"lang_id=#lang_id#,count_sec=#next_count#,count=#count#,del=1\",Page:langres_edit)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        LinkPage(Add localization,Page:langres_edit,PageParams:\"lang_id=#lang_id#,count_sec=#next_count#,count=#count#\")\r\n                    }\r\n                    Div(Class: panel-footer){\r\n                        Div(Class: clearfix){\r\n                            Div(Class: pull-left){\r\n                                Button(Save,Class: btn btn-primary,Contract:@1EditLang,Params: \"Value=Val(share),IdLanguage=Val(idshare),Id=#lang_id#,ApplicationId=#pre_app_id#\",Page: app_langres) \r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\t\t}\r\n\t}\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "langres_list",
            "Value": "Div(Class: fullscreen){\r\n    SetTitle(Language Resources)\r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: Language Resources)\r\n\t}\r\n    Div(Class: pull-right){\r\n        LinkPage(Body: Em(Class: icon icon-plus) Create localization, Page:langres_res_add, Class: ml btn-tool, PageParams: \"app_id=#app_id#\")\r\n    }.Style(\r\n        height: 45px;\r\n        padding-top: 10px;\r\n        a {\r\n            float: right;\r\n        }\r\n    )\r\n    Include(pager_header)\r\n    SetVar(pager_table, languages)\r\n    SetVar(pager_page, langres_list)\r\n    Div(Class: fullscreen){\r\n        DBFind(languages, src_languages).Order(id desc).Custom(custom_actions){\r\n            Span(){\r\n                Button(Class: btn btn-default, Body: Em(Class: fa fa-edit), PageParams: \"lang_name=#name#,lang_id=#id#,app_id=#app_id#\", Page: langres_edit)\r\n            }\r\n        }\r\n\r\n        Table(src_languages, \"Name=name,Resource=res,=custom_actions\").Style(\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #fafbfc; \r\n            } \r\n            tbody > tr > td {\r\n                word-break: break-all;\r\n                padding: 8px 20px !important;\r\n                font-weight: 400;\r\n                font-size: 13px;\r\n                color: #666;\r\n                border-top: 1px solid #eee;\r\n                vertical-align: middle;\r\n            } \r\n            tr  > *:first-child {\r\n                padding-left:20px;\r\n            } \r\n            tr  > *:last-child {\r\n                text-align:right; \r\n                padding-right:20px;\r\n                width: 300px;\r\n            }\r\n            thead {\r\n                background-color: #eee;\r\n            }\r\n        )\r\n        Include(pager)\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "langres_res_add",
            "Value": "SetTitle(Create Language Resource)\r\nDiv(Class: breadcrumb){\r\n        LinkPage(Language Resources, app_langres, PageParams: \"app_id=#app_id#\")\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: Create localization)\r\n}\r\n    \r\nDiv(Class: content-wrapper){\r\n    Div(Class: row){\r\n        Form(){\r\n            Div(Class: col-md-12){\r\n                Div(Class: panel panel-default){\r\n                    Div(Class: panel-body){\r\n                        Div(Class: col-md-12){\r\n                            Div(Class: form-group  col-md-12){\r\n                                Label(Name)\r\n                                Input(LangName,Type: text,Class: form-control)\r\n                            }\r\n                            Div(Class: form-group col-md-1){\r\n                                Label(Class: text-muted,Body: Locale)\r\n                            }\r\n                            Div(Class: form-group col-md-10){\r\n                                Label(Class: text-muted,Body: Value)\r\n                            }\r\n                            Div(Class: form-group col-md-1){\r\n                                Label(Class: text-muted,Body: Action)     \r\n                            }\r\n                        }\r\n                        If(#del# == 1){\r\n                            SetVar(next_count, Calculate( Exp: #count_sec# - 1, Type: int))\r\n                        }.Else{\r\n                            If(GetVar(count)==\"\"){\r\n                            SetVar(count, 0)\r\n                            SetVar(next_count, Calculate( Exp: #count# + 1, Type: int))\r\n                            }.Else{\r\n                                SetVar(next_count, Calculate( Exp: #count_sec# + 1, Type: int))\r\n                            }\r\n                        }\r\n                        Range(params_range, 0, #next_count#)\r\n                        ForList(Source: params_range){\r\n                            Div(Class: col-md-12){\r\n                                Div(Class: form-group col-md-1){\r\n                                    Input(Name:idshare, Class: \"form-control\")\r\n                                    \r\n                                }\r\n                                Div(Class: form-group col-md-10){\r\n                                    Input(Name:share,Class: \"form-control\")\r\n                                }\r\n                                Div(Class: form-group col-md-1){\r\n                                    If(And(#next_count# == #params_range_index#, #next_count# > 1)){\r\n                                        Button(Body: Em(Class: fa fa-trash),Class: btn btn-default,PageParams:\"count_sec=#next_count#,count=#count#,del=1,app_id=#app_id#\",Page:langres_res_add)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        LinkPage(Add localization,Page:langres_res_add,PageParams:\"count_sec=#next_count#,count=#count#,app_id=#app_id#\")\r\n                    }\r\n                    Div(Class: panel-footer){\r\n                        Div(Class: clearfix){\r\n                            Div(Class: pull-left){\r\n                                Button(Body: Save, Class: btn btn-primary, Contract:@1NewLang, Page: app_langres,Params: \"ApplicationId=#app_id#,Name=Val(LangName),Value=Val(share),IdLanguage=Val(idshare)\") \r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\t\t}\r\n\t}\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "menus_list",
            "Value": "Div(Class: fullscreen){\r\n    SetTitle($menus$)\r\n    AddToolButton(Title: $create$, Page: editor, Icon: icon-plus, PageParams: \"create=menu,appId=0\")\r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: \"This section is used to manage the menu\")\r\n\t}\r\n\r\n    DBFind(menu, src_menus).Limit(250).Order(\"id\").Custom(action){\r\n        Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=menu\")).Style(margin-right: 20px;)\r\n        Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=menu,name=#name#\"))\r\n    }\r\n\r\n    Table(src_menus, \"$id$=id,$name$=name,Title=title,Conditions=conditions,=action\").Style(\r\n    tbody > tr:nth-of-type(odd) {\r\n        background-color: #fafbfc; \r\n    }\r\n    tbody > tr > td {\r\n        word-break: break-all;\r\n        font-weight: 400;\r\n        font-size: 13px;\r\n        color: #666;\r\n        border-top: 1px solid #eee;\r\n        vertical-align: middle;\r\n    }\r\n    tr  > *:first-child {\r\n        padding-left:20px;\r\n        width: 80px;\r\n    }\r\n    tr  > *:last-child {\r\n        padding-right:30px;\r\n        text-align:right; \r\n        width: 200px;\r\n    }\r\n    thead {\r\n        background-color: #eee;\r\n    })\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "params_edit",
            "Value": "If(#stylesheet# == stylesheet){\r\n    DBFind(parameters, src_params).Where(name='#stylesheet#').Vars(\"param\")\r\n}.Else{\r\n    If(#id#>0){\r\n        DBFind(parameters, src_params).WhereId(#id#).Vars(\"param\")\r\n    }.Else{\r\n        SetVar(param_name, New Ecosystem Parameter)\r\n    }\r\n}\r\nSetTitle(Ecosystem parameters)\r\n\r\nDiv(Class: fullscreen){\r\n    Div(Class: breadcrumb){\r\n        LinkPage(Ecosystem parameters, params_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: #param_name#)\r\n    }\r\n    Div(Class: fullscreen-wrapper){\r\n        Form(){\r\n            If(#param_id#>0){\r\n                Div(Class: form-group){\r\n                    Label(For: name){\r\n                        Span(Body: Name)\r\n                    }\r\n                    Input(Name: name, Class: form-control, Value: #param_name#, Disabled: \"true\")\r\n                }\r\n                Div(Class: form-group){\r\n                    Input(Type: textarea, Name: value, Value: \"#param_value#\").Style(height: 500px !important;)\r\n                }\r\n                Div(Class: mb0 form-group){\r\n                    Label(For: conditions){\r\n                        Span(Body: Change Conditions)\r\n                    }\r\n                    Input(Name: conditions, Class: form-control, Value: #param_conditions#)\r\n                }\r\n                Div(Class: mt-lg){\r\n                    Button(Class: btn btn-primary, Body: Save, Contract:EditParameter, Params: \"Id=#param_id#,Value=Val(value),Conditions=Val(conditions)\",Page:params_list)\r\n                }\r\n            }.Else{\r\n                Div(Class: form-group){\r\n                    Label(For: name){\r\n                        Span(Body: Name)\r\n                    }\r\n                    Input(Name: name, Class: form-control)\r\n                }\r\n                Div(Class: form-group){\r\n                    Input(Type: textarea, Name: value).Style(height: 500px !important;)\r\n                }\r\n                Div(Class: mb0 form-group){\r\n                    Label(For: conditions){\r\n                        Span(Body: Change Conditions)\r\n                    }\r\n                    Input(Name: conditions, Class: form-control)\r\n                }\r\n                Div(Class: mt-lg){\r\n                    Button(Class: btn btn-primary, Body: Save, Contract:NewParameter, Params: \"Name=Val(name),Value=Val(value),Conditions=Val(conditions)\",Page:params_list)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "params_list",
            "Value": "Div(Class: fullscreen){\r\n    SetTitle(Ecosystem parameters)\r\n    AddToolButton(Title: Manage stylesheet, Page: params_edit, Icon: icon-picture, PageParams:\"stylesheet=stylesheet\")\r\n    AddToolButton(Title: $create$, Page: params_edit, Icon: icon-plus)\r\n\tDiv(breadcrumb){\r\n        Span(Class: text-muted, Body: \"This section is used to configure stored reusable parameters\")\r\n    }\r\n\r\n    DBFind(parameters, src_appparameters).Order(\"id\").Custom(custom_actions){\r\n        LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: params_edit, PageParams: \"id=#id#\")\r\n    }\r\n    \r\n    Table(src_appparameters, \"$id$=id,Name=name,Application=app_id,Value=value,Conditions=conditions,=custom_actions\").Style(\r\n    tbody > tr:nth-of-type(odd) {\r\n        background-color: #fafbfc; \r\n    }\r\n    tbody > tr > td {\r\n        word-break: break-all;\r\n        font-weight: 400;\r\n        font-size: 13px;\r\n        color: #666;\r\n        border-top: 1px solid #eee;\r\n        vertical-align: middle;\r\n    }\r\n    tr  > *:first-child {\r\n        padding-left:20px;\r\n        width: 80px;\r\n    }\r\n    tr  > *:last-child {\r\n        padding-right:30px;\r\n        text-align:right; \r\n        width: 200px;\r\n    }\r\n    thead {\r\n        background-color: #eee;\r\n    })\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "properties_edit",
            "Value": "Div(Class: content-wrapper){\r\n\tSetTitle(Edit Properties)\r\n\tDiv(breadcrumb){\r\n\t\tDiv(){\r\n\t\t\tIf(#type# == page){\r\n\t\t\t\tLinkPage(Pages, app_pages)\r\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\t\t\tSpan(Edit page properties, text-muted)\r\n\t\t\t}\r\n\t\t\tIf(#type# == contract){\r\n\t\t\t\tLinkPage(Contracts, app_contracts)\r\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\t\t\tSpan(Edit contract properties, text-muted)\r\n\t\t\t}\r\n            If(#type# == block){\r\n\t\t\t\tLinkPage(Blocks, app_blocks)\r\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\t\t\tSpan(Edit block properties, text-muted)\r\n\t\t\t}\r\n\t\t\tIf(#type# == menu){\r\n\t\t\t\tLinkPage(Menu, menus_list)\r\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\t\t\tSpan(Edit menu properties, text-muted)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    Div(Class: row){\r\n        Div(col-md-12){\r\n\t\t\tIf(#type# == page){\r\n\t\t\t\tForm(){\r\n\t\t\t\t\tDBFind(\"pages\",Source: src_page).WhereId(#edit_property_id#).Vars(page)\r\n\t\t\t\t\tDiv(Class: col-md-12){\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tLabel(Name)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tInput(Name: Name,Value: #page_name#,Disabled: \"true\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tLabel(Menu)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDBFind(menu, src_menus)\r\n\t\t\t\t\t\t\tSelect(Name: Menu, Source: src_menus, NameColumn: name, ValueColumn: name, Value: #page_menu#)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tLabel(Change conditions)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tInput(Name: Conditions,Class: form-control, Type: text,Value: #page_conditions#)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tButton(Body: Save, Class: btn btn-primary, Page: app_pages, Contract: EditPage, Params: \"Menu=Val(Menu),Conditions=Val(Conditions),Id=#edit_property_id#\")\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n            If(#type# == contract){\r\n\t\t\t\tForm(){\r\n\t\t\t\t\tDBFind(\"contracts\",Source: src_contract).WhereId(#edit_property_id#).Vars(contract)\r\n\t\t\t\t\tDiv(Class: col-md-12){\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tLabel(Name)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tInput(Name: Name,Value: #contract_name#,Disabled: \"true\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tLabel(Change conditions)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tInput(Name: Conditions,Class: form-control, Type: text,Value: #contract_conditions#)\r\n\t\t\t\t\t\t}\r\n                        Div(Class: form-group){\r\n\t\t\t\t\t\t \tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tLabel(Wallet)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(Class: row){\r\n                            \tDiv(Class: col-md-10){\r\n                                \tInput(Name: Wallet,Value: Address(#contract_wallet_id#))\r\n                            \t}\r\n                            \tDiv(Class: col-md-2){\r\n\t\t\t\t\t\t\t\t\tIf(#contract_active# == 0){\r\n                                \t\tButton(Body: Bind,Class: btn btn-primary btn-block,Contract: ActivateContract, Params: \"Id=#edit_property_id#\", Page:properties_edit, PageParams: \"edit_property_id=#edit_property_id#,type=#type#\")\r\n\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\tButton(Body: Unbind,Class: btn btn-primary btn-block,Contract: DeactivateContract, Params: \"Id=#edit_property_id#\", Page:properties_edit, PageParams: \"edit_property_id=#edit_property_id#,type=#type#\")\r\n\t\t\t\t\t\t\t\t\t}\r\n                            \t}\r\n\t\t\t\t\t\t\t}\r\n                        }\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tButton(Body: Save, Class: btn btn-primary, Page: app_contracts, Contract: EditContract, Params: \",Conditions=Val(Conditions),WalletId=Val(Wallet),Id=#edit_property_id#\")\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t            }\r\n            }\r\n\t\t\tIf(#type# == block){\r\n\t\t\t\tForm(){\r\n\t\t\t\t\tDBFind(\"blocks\",Source: src_block).WhereId(#edit_property_id#).Vars(block)\r\n\t\t\t\t\tDiv(Class: col-md-12){\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tLabel(Name)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tInput(Name: Name,Value: #block_name#,Disabled: \"true\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tLabel(Change conditions)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tInput(Name: Conditions,Class: form-control, Type: text,Value: #block_conditions#)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tButton(Body: Save, Class: btn btn-primary, Page: app_blocks, Contract: EditBlock, Params: \"Conditions=Val(Conditions),Id=#edit_property_id#\")\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tIf(#type# == menu){\r\n\t\t\t\tForm(){\r\n\t\t\t\t\tDBFind(\"menu\",Source: src_menu).WhereId(#edit_property_id#).Vars(menu)\r\n\t\t\t\t\tDiv(Class: col-md-12){\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tLabel(Name)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tInput(Name: Name,Value: #menu_name#,Disabled: \"true\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tLabel(Menu title)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tInput(Name: Title,Class: form-control, Type: text,Value: #menu_title#)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tLabel(Change conditions)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tInput(Name: Conditions,Class: form-control, Type: text,Value: #menu_conditions#)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(Class: form-group){\r\n\t\t\t\t\t\t\tDiv(Class: text-left){\r\n\t\t\t\t\t\t\t\tButton(Body: Save, Class: btn btn-primary, Page: menus_list, Contract: EditMenu, Params: \"Conditions=Val(Conditions),Id=#edit_property_id#,NameTitle=Val(Title)\")\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "table_create",
            "Value": "SetTitle(Create table)\r\nDiv(breadcrumb){\r\n    Div(){\r\n        LinkPage(Tables, app_tables)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Create, text-muted)\r\n    }\r\n}\r\nDiv(Class: content-wrapper){\r\n    Div(Class: row){\r\n        Form(){\r\n            Div(Class: col-md-12){\r\n                Div(Class: panel panel-default){\r\n                    Div(Class: panel-body){\r\n                        Div(Class: col-md-12){\r\n                            Div(Class: form-group  col-md-12){\r\n                                Label(Name)\r\n                                Input(TableName,Type: text,Class: form-control)\r\n                            }\r\n                            Div(Class: form-group col-md-4){\r\n                                Label(Class: text-muted,Body: Columns)\r\n                                Input(Name:disinp, Class: \"form-control\",Disabled:\"true\",Value:\"id\")\r\n                            }\r\n                            Div(Class: form-group col-md-7){\r\n                                Label(Class: text-muted,Body: Type)\r\n                                Input(Name:disinp, Class: \"form-control\",Disabled:\"true\",Value:\"Number\")\r\n                            }\r\n                            Div(Class: form-group col-md-1){\r\n                                Label(Class: text-muted,Body: Action)     \r\n                            }\r\n                        }\r\n                        Data(src_type,\"type,name\"){\r\n                            text,\"Text\"\r\n                            number,\"Number\"\r\n                            varchar,\"Varchar\"\r\n                            datetime,\"Date/Time\"\r\n                            money,\"Money\"\r\n                            double,\"Double\"\r\n                            character,\"Character\"\r\n                            json,\"JSON\"\r\n                        }\r\n                        If(#del# == 1){\r\n                            SetVar(next_count, Calculate( Exp: #count_sec# - 1, Type: int))\r\n                        }.Else{\r\n                            If(GetVar(count)==\"\"){\r\n                            SetVar(count, 0)\r\n                            SetVar(next_count, Calculate( Exp: #count# + 1, Type: int))\r\n                            }.Else{\r\n                                SetVar(next_count, Calculate( Exp: #count_sec# + 1, Type: int))\r\n                            }\r\n                        }\r\n                        Range(params_range, 0, #next_count#)\r\n                        ForList(Source: params_range){\r\n                            Div(Class: col-md-12){\r\n                                Div(Class: form-group col-md-4){\r\n                                    Input(Name:idshare, Class: \"form-control\")\r\n                                }\r\n                                Div(Class: form-group col-md-7){\r\n                                    Select(Name: share, Source: src_type, NameColumn: name, ValueColumn: type,Value:\"text\")\r\n                                }\r\n                                Div(Class: form-group col-md-1){\r\n                                    If(And(#next_count# == #params_range_index#, #next_count# > 1)){\r\n                                    Button(Body: Em(Class: fa fa-trash),Class: btn btn-default,PageParams:\"count_sec=#next_count#,count=#count#,del=1,app_id=#app_id#\",Page:table_create)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(Class: panel-footer){\r\n                        Div(Class: clearfix){\r\n                            Div(Class: pull-left){\r\n                                Button(Add Column,Contract:,Class:btn btn-primary,Page:table_create,PageParams:\"count_sec=#next_count#,count=#count#,app_id=#app_id#\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: col-md-6){\r\n                Div(Class: panel panel-default){\r\n                    Div(Class: panel-heading,Body: Write permissions)\r\n                    Div(Class: panel-body){\r\n                        Div(Class: form-group){\r\n                            Label(Insert)\r\n                            Input(Name: Insert_con,Type: text, Value: ContractConditions(\"MainCondition\"))\r\n                        }\r\n                        Div(Class: form-group){\r\n                            Label(Update)\r\n                            Input(Name: Update_con,Type: text, Value: ContractConditions(\"MainCondition\"))\r\n                        }\r\n                        Div(Class: form-group){\r\n                            Label(New column)\r\n                            Input(Name: New_column_con,Type: text, Value: ContractConditions(\"MainCondition\"))\r\n                        }\r\n                    }\r\n                    Div(Class: panel-footer){\r\n                        Div(Class: text-right){\r\n                            Button(Save,Class: btn btn-primary,Contract:@1NewTable,Page:app_tables,Params: \"Shareholding=Val(share),Id=Val(idshare),ApplicationId=#app_id#\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "table_edit",
            "Value": "SetTitle(Tables)\r\nDiv(breadcrumb){\r\n    Div(){\r\n        LinkPage(Tables, app_tables)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Edit, text-muted)\r\n    }\r\n}\r\nDiv(Class: content-wrapper){\r\n    Div(Class: row){\r\n        Form(){\r\n            Div(Class: col-md-12){\r\n                Div(Class: panel panel-default){\r\n                    Div(Class: panel-body){\r\n                        Div(Class: table-responsive){\r\n                            Div(Class: col-md-12){  \r\n                                DBFind(\"tables\",Source: src_mem).Columns(\"id,name,columns,conditions,permissions->insert,permissions->update,permissions->new_column\").Vars(pre).WhereId(#tabl_id#)\r\n                                JsonToSource(src_columns, #pre_columns#)\r\n                                Div(Class: table){\r\n                                    Div(Class: row){\r\n                                        Div(Class: col-md-3 h4){\r\n                                            Label(Name)\r\n                                        }\r\n                                        Div(Class: col-md-3 h4){\r\n                                            Label(Type)\r\n                                        }\r\n                                        Div(Class: col-md-5 h4){\r\n                                            Label(Conditions)\r\n                                        }\r\n                                        Div(Class: col-md-1 h4){\r\n                                            Label(Action)\r\n                                        }\r\n                                    }\r\n                                    ForList(src_columns){\r\n                                        Div(list-group-item){\r\n                                            Div(Class: row){\r\n                                                Div(Class: col-md-3 h5){\r\n                                                    Span(#key#)\r\n                                                }\r\n                                                Div(Class: col-md-3 h5){\r\n                                                    SetVar(col_type,GetColumnType(#pre_name#, #key#))\r\n                                                    If(#col_type# == character){\r\n                                                        Span(Character)\r\n                                                    }\r\n                                                    If(#col_type# == text){\r\n                                                        Span(\"Text\")\r\n                                                    }\r\n                                                    If(#col_type# == number){\r\n                                                        Span(\"Number\")\r\n                                                    }\r\n                                                    If(#col_type# == money){\r\n                                                        Span(\"Money\")\r\n                                                    }\r\n                                                    If(#col_type# == varchar){\r\n                                                        Span(\"Varchar\")\r\n                                                    }\r\n                                                    If(#col_type# == datetime){\r\n                                                        Span(\"Date/Time\")\r\n                                                    }\r\n                                                    If(#col_type# == double){\r\n                                                        Span(\"Double\")\r\n                                                    }\r\n                                                    If(#col_type# == character){\r\n                                                        Span(\"Character\")\r\n                                                    }\r\n                                                    If(#col_type# == json){\r\n                                                        Span(\"JSON\")\r\n                                                    }\r\n                                                    If(#col_type# == bytea){\r\n                                                        Span(\"Binary Data\")\r\n                                                    }\r\n                                                    If(#col_type# == uuid){\r\n                                                        Span(\"UUID\")\r\n                                                    }\r\n                                                }\r\n                                                Div(Class: col-md-5 h5){\r\n                                                    Span(#value#)\r\n                                                }\r\n                                                Div(Class: col-md-1){\r\n                                                    Button(Body: Edit, Class: btn btn-primary,Page: column_edit, PageParams: \"name_column=#key#,tabl_id=#tabl_id#\")\r\n                                                }\r\n                                            }  \r\n                                        }\r\n                                    }\r\n                                }                           \r\n                            }\r\n                        }\r\n                    }\r\n                    Div(Class: panel-footer){\r\n                        Div(Class: clearfix){\r\n                            Div(Class: pull-left){\r\n                                Button(Add Column,Class:btn btn-primary pull-right,Page:column_add,PageParams:\"next_table_name=#pre_name#,tabl_id=#tabl_id#\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: col-md-6){\r\n                Div(Class: panel panel-default){\r\n                    Div(Class: panel-heading,Body: Write permissions)\r\n                    Div(Class: panel-body){\r\n                        Div(Class: form-group){\r\n                            Label(Insert)\r\n                            Input(Name: Insert_con,Type: text, Value: #pre_permissions_insert#)\r\n                        }\r\n                        Div(Class: form-group){\r\n                            Label(Update)\r\n                            Input(Name: Update_con,Type: text, Value: #pre_permissions_update#)\r\n                        }\r\n                        Div(Class: form-group){\r\n                            Label(New column)\r\n                            Input(Name: New_column_con,Type: text, Value: #pre_permissions_new_column#)\r\n                        }\r\n                    }\r\n                    Div(Class: panel-footer){\r\n                        Div(Class: text-right){\r\n                            Button(Save,Class: btn btn-primary,Contract:@1EditTable,Page: app_tables,Params: \"Name=#pre_name#\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: col-md-6){\r\n                Div(Class: panel panel-default){\r\n                    Div(Class: panel-heading,Body: Conditions for changing permissions)\r\n                    Div(Class: panel-body){\r\n                        Div(Class: form-group){\r\n                            Input(Name: Insert_condition,Disabled:\"true\",Type: text, Value: #pre_conditions#)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        },
        {
            "Name": "table_view",
            "Value": "Div(Class: content-wrapper){\r\n    SetTitle(Tables)\r\n\tDiv(breadcrumb){\r\n\t\tLinkPage(Tables, app_tables)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(#table_name#, text-muted)\r\n\t}\r\n    Div(Class: col-md-12){\r\n        Div(Class: panel panel-default){\r\n            Div(Class: panel-body){\r\n                Div(Class: table-responsive){\r\n                    Div(Class: col-md-12){\r\n                        DBFind(Name:#table_name#,Source: src_mem)\r\n                        Table(Source: src_mem)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu"
        }
    ],
    "parameters": [],
    "tables": [
        {
            "Name": "buffer_data",
            "Columns": "[{\"name\":\"key\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"value\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}