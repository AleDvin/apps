{
    "blocks": [
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "    If(#sort#==1){\n        SetVar(sort_name, \"id asc\")\n    }.ElseIf(#sort#==2){\n        SetVar(sort_name, \"id desc\")\n    }.ElseIf(#sort#==3){\n        SetVar(sort_name, \"name asc\")\n    }.ElseIf(#sort#==4){\n        SetVar(sort_name, \"name desc\")\n    }.Else{\n        SetVar(sort, \"1\")\n        SetVar(sort_name, \"id asc\") \n    }\n\n    If(Or(#width#==12,#width#==6,#width#==4)){\n    }.Else{\n        SetVar(width, \"12\")\n    }\n\n    Div(clearfix){\n        Div(pull-left){\n            If(#width#==12){\n                Span(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=12,current_page=#current_page#\")).Style(margin-left:10px;)\n            }.Else{\n                Span(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=12,current_page=#current_page#\")).Style(margin-left:10px;)\n            }\n            If(#width#==6){\n                Span(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=6,current_page=#current_page#\")).Style(margin-left:5px;)\n            }.Else{\n                Span(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=6,current_page=#current_page#\")).Style(margin-left:5px;)\n            }\n            If(#width#==4){\n                Span(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=4,current_page=#current_page#\")).Style(margin-left:5px;)\n            }.Else{\n                Span(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=4,current_page=#current_page#\")).Style(margin-left:5px;)\n            }\n        }\n        Div(pull-right){\n            If(#sort#==1){\n                Span(Button(Body: Em(Class: fa fa-long-arrow-down) Sort by ID, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=2,width=#width#,current_page=#current_page#\")).Style(margin-right:5px;)\n            }.ElseIf(#sort#==2){\n                Span(Button(Body: Em(Class: fa fa-long-arrow-up) Sort by ID, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=1,width=#width#,current_page=#current_page#\")).Style(margin-right:5px;)\n            }.Else{\n                Span(Button(Body: Sort by ID, Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=1,width=#width#,current_page=#current_page#\")).Style(margin-right:5px;)\n            }\n\n            If(#sort#==3){\n                Span(Button(Body: Em(Class: fa fa-long-arrow-down) Sort by Name, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=4,width=#width#,current_page=#current_page#\")).Style(margin-right:10px;)\n            }.ElseIf(#sort#==4){\n                Span(Button(Body: Em(Class: fa fa-long-arrow-up) Sort by Name, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=3,width=#width#,current_page=#current_page#\")).Style(margin-right:10px;)\n            }.Else{\n                Span(Button(Body: Sort by Name, Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=3,width=#width#,current_page=#current_page#\")).Style(margin-right:10px;)\n            }\n        }\n    }",
            "Name": "admin_link"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\n\nIf(#buffer_value_app_id# > 0){\n    DBFind(pages, src_pages).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_pages)\n    DBFind(blocks, src_blocks).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_blocks)\n    DBFind(app_params, src_parameters).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_parameters)\n    DBFind(languages, src_languages).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_languages)\n    DBFind(contracts, src_contracts).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_contracts)\n    DBFind(tables, src_tables).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_tables)\n}\n\nDiv(panel panel-primary){\n    If(#buffer_value_app_id# > 0){\n\t    Div(panel-heading, \"Export - #buffer_value_app_name#\")\n    }.Else{\n        Div(panel-heading, \"Export\") \n    }\n\tForm(){\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Pages\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_pages# > 0){\n                        Span(\"(#count_pages#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_pages# > 0){\n                        ForList(src_pages){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Blocks\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_blocks# > 0){\n                        Span(\"(#count_blocks#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_blocks# > 0){\n                        ForList(src_blocks){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row df f-valign){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n\t\t\t\t\tSpan(\"Menu\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#buffer_value_app_id# > 0){\n                        Span(\"(#buffer_value_count_menu#)\")\n                    }.Else{\n                        Span(\"(0)\")\n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row df f-valign){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(And(#buffer_value_app_id#>0,#buffer_value_count_menu#>0)){\n                        Span(Class: text-muted h6, Body:\"#buffer_value_menu_name#\")\n                    }.Else{\n                        Span(Class: text-muted h6, Body:\"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Parameters\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_parameters# > 0){\n                        Span(\"(#count_parameters#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_parameters# > 0){\n                        ForList(src_parameters){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Language resources\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_languages# > 0){\n                        Span(\"(#count_languages#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_languages# > 0){\n                        ForList(src_languages){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Contracts\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_contracts# > 0){\n                        Span(\"(#count_contracts#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_contracts# > 0){\n                        ForList(src_contracts){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Tables\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_tables# > 0){\n                        Span(\"(#count_tables#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_tables# > 0){\n                        ForList(src_tables){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n        If(#buffer_value_app_id# > 0){\n            Div(Class: panel-footer clearfix){\n                Div(Class: pull-right){\n                    Button(Body: Export, Class: btn btn-primary, Page: export_download, Contract: Export)\n                }\n            }\n        }\n\t}\n}",
            "Name": "export_info"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(And(#res_type#!=\"pages\",#res_type#!=\"blocks\",#res_type#!=\"menu\",#res_type#!=\"parameters\",#res_type#!=\"languages\",#res_type#!=\"contracts\",#res_type#!=\"tables\")){\n    SetVar(res_type, \"pages\")\n}\n\nDiv(Class: breadcrumb){\n    If(#res_type#==\"pages\"){\n        Span(Class: text-muted, Body: Pages)\n    }.Else{\n        LinkPage(Body: Pages, Page: export_resources,, \"res_type=pages\")\n    }\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"blocks\"){\n        Span(Class: text-muted, Body: Blocks)\n    }.Else{\n        LinkPage(Body: Blocks, Page: export_resources,, \"res_type=blocks\")\n    }\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"menu\"){\n        Span(Class: text-muted, Body: Menu)\n    }.Else{\n       LinkPage(Body: Menu, Page: export_resources,, \"res_type=menu\")\n    }\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"parameters\"){\n        Span(Class: text-muted, Body: Parameters)\n    }.Else{\n       LinkPage(Body: Parameters, Page: export_resources,, \"res_type=parameters\")\n    }\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"languages\"){\n        Span(Class: text-muted, Body: Language resources)\n    }.Else{\n       LinkPage(Body: Language resources, Page: export_resources,, \"res_type=languages\")\n    }\n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"contracts\"){\n        Span(Class: text-muted, Body: Contracts)\n    }.Else{\n       LinkPage(Body: Contracts, Page: export_resources,, \"res_type=contracts\")\n    } \n    Span(|).Style(margin-right: 10px; margin-left: 10px;)\n    If(#res_type#==\"tables\"){\n        Span(Class: text-muted, Body: Tables)\n    }.Else{\n       LinkPage(Body: Tables, Page: export_resources,, \"res_type=tables\")\n    }\n}",
            "Name": "export_link"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(#pager_table#, src_records).Where(#pager_where#).Count(records_count)\n\t\nSetVar(previous_page, Calculate(Exp: #current_page# - 1, Type: int))\nSetVar(next_page, Calculate(Exp: #current_page# + 1, Type: int))\nSetVar(last_page, Calculate(Exp: (#records_count# / 10) + 1, Type: int))\nSetVar(last_page_plus_one, Calculate(Exp: #last_page# + 1, Type: int))\n\n\nSetVar(delta_last_page, Calculate(Exp: #last_page# - #current_page#))\t\n    \nSetVar(range_l, Calculate(Exp: #current_page# - 4, Type: int))\nSetVar(range_r, Calculate(Exp: #current_page# + 6, Type: int))\nSetVar(range_l_max, Calculate(Exp: #last_page_plus_one# - 10, Type: int))\n\nIf(#current_page# < 5){\n    If(#last_page# >= 10){\n        Range(src_pages, 1, 11)\n    }.Else{\n        Range(src_pages, 1, #last_page_plus_one#) \n    }\n}.ElseIf(#delta_last_page# < 6){\n    If(#range_l_max# > 0){\n        Range(src_pages, #range_l_max#, #last_page_plus_one#)\n    }.Else{\n        Range(src_pages, 1, #last_page_plus_one#)\n    }\n}.Else{\n    Range(src_pages, #range_l#, #range_r#)\n}\n\n\nDiv(){\n    Div(){\n        If(#current_page# == 1){\n            Button(Body: Em(Class: fa fa-angle-double-left), Class: btn btn-default disabled)\n        }.Else{\n            Button(Body: Em(Class: fa fa-angle-double-left), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=1,sort=#sort#,width=#width#\")\n        }\n    }\n\n\n\n    Div(){\n        If(#current_page# == 1){\n            Button(Body: Em(Class: fa fa-angle-left), Class: btn btn-default disabled)\n        }.Else{\n            Button(Body: Em(Class: fa fa-angle-left), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#previous_page#,sort=#sort#,width=#width#\")\n        }\n    }\n\n    ForList(src_pages){\n        Div(){\n            If(#id# == #current_page#){\n                Button(Class: btn btn-primary float-left, Page: #pager_page#, PageParams: \"current_page=#id#,sort=#sort#,width=#width#\", Body: #id#)\n            }.Else{\n                Button(Class: btn btn-default float-left, Page: #pager_page#, PageParams: \"current_page=#id#,sort=#sort#,width=#width#\", Body: #id#)\n            }\n        }\n    }\n\n    Div(){\n        If(#current_page# == #last_page#){\n            Button(Body: Em(Class: fa fa-angle-right), Class: btn btn-default disabled)\n        }.Else{\n            Button(Body: Em(Class: fa fa-angle-right), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#next_page#,sort=#sort#,width=#width#\")\n        }\n    }\n\n    Div(){\n        If(#current_page# == #last_page#){\n            Button(Body: Em(Class: fa fa-angle-double-right), Class: btn btn-default disabled)\n        }.Else{\n            Button(Body: Em(Class: fa fa-angle-double-right), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#last_page#,sort=#sort#,width=#width#\")\n        }\n    }\n}.Style(\"div { float: left; }\")",
            "Name": "pager"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "\nIf(#current_page# > 0){}.Else{\n    SetVar(current_page, 1)\n}\n\nSetVar(pager_offset, Calculate(Exp: (#current_page# - 1) * 10, Type: int))\nSetVar(pager_limit, 10)\nSetVar(current_page, #current_page#)\n",
            "Name": "pager_header"
        }
    ],
    "contracts": [
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract DelApplication {\n    data {\n        ApplicationId int\n        Value int \"optional\"\n    }\n\n    conditions {\n        RowConditions(\"applications\", $ApplicationId, false)\n    }\n\n    action {\n        if ($Value == 1){\n            DBUpdate(\"applications\", $ApplicationId, \"deleted\", 1)\n        }\n        else {\n            DBUpdate(\"applications\", $ApplicationId, \"deleted\", 0)\n        } \n    }\n}",
            "Name": "DelApplication"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditAppParam {\r\n\tdata {\r\n\t\tId int\r\n\t\tValue string\r\n\t\tConditions string\r\n\t}\r\n\tfunc onlyConditions() bool {\r\n\t\treturn $Conditions && !$Value\r\n\t}\r\n\t\r\n\tconditions {\r\n\t\tRowConditions(\"app_params\", $Id, onlyConditions())\r\n\t\tValidateCondition($Conditions, $ecosystem_id)\r\n\t}\r\n\t\r\n\taction {\r\n\t\tDBUpdate(\"app_params\", $Id, \"value,conditions\", $Value, $Conditions )\r\n\t}\r\n}",
            "Name": "EditAppParam"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditApplication {\n    data {\n        ApplicationId int\n        Conditions string\n    }\n\n    conditions {\n\t\tValidateCondition($Conditions, $ecosystem_id)\n\t\tRowConditions(\"applications\", $ApplicationId, false)\n    }\n\n    action {\n        DBUpdate(\"applications\", $ApplicationId, \"conditions\", $Conditions)\n    }\n}",
            "Name": "EditApplication"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditColumn {\n\tdata {\n\t\tTableName string\n\t\tName string\n\t\tPermissions string\n\t}\n\t\n\tconditions {\n\t\tColumnCondition($TableName, $Name, \"\", $Permissions)\n\t}\n\t\n\taction {\n\t\tPermColumn($TableName, $Name, $Permissions)\n\t}\n}",
            "Name": "EditColumn"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditLang {\r\n\tdata {\r\n\t\tName string\r\n\t\tTrans string \"optional\"\r\n\t\tValue array \"optional\"\r\n\t\tIdLanguage array \"optional\"\r\n\t}\r\n\t\r\n\tconditions {\r\n\t\tif (Len($IdLanguage) > 0){\r\n\t\t\tvar j,len int\r\n\t\t\tlen = Len($IdLanguage)\r\n\t\t\twhile j < len {\r\n\t\t\t\tif ($IdLanguage[j] == \"\"){\r\n\t\t\t\t\tinfo(\"Locale empty\")\r\n\t\t\t\t}\r\n\t\t\t\tif ($Value[j] == \"\"){\r\n\t\t\t\t\tinfo(\"Value empty\")\r\n\t\t\t\t}\r\n\t\t\t\tj = j + 1\r\n\t\t\t}\r\n\t\t}\r\n\t\tEvalCondition(\"parameters\", \"changing_language\", \"value\")\r\n\t}\r\n\t\r\n\taction {\r\n\t\tif (Len($IdLanguage) > 0){\r\n\t\t\tvar i,len,lenshar int\r\n\t\t\tvar res,langarr string\r\n\t\t\tlen = Len($IdLanguage)\r\n\t\t\tlenshar = Len($Value)\r\n\t\t\twhile i < len {\r\n\t\t\t\tif (i + 1 == len){\r\n\t\t\t\t\tres = res + Sprintf(`%q: %q`,$IdLanguage[i],$Value[i])\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tres = res + Sprintf(`%q: %q, `,$IdLanguage[i],$Value[i])\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlangarr = Sprintf(\"{\"+\"%v\"+\"}\", res)\r\n\t\t\t$Trans = langarr\r\n\t\t\tDBUpdateExt(\"languages\", \"name\", $Name, \"res\", $Trans)\r\n\t\t\tUpdateLang($Name, $Trans)\r\n\t\t}\r\n\t\telse {\r\n\t\t\tDBUpdateExt(\"languages\", \"name\", $Name, \"res\", $Trans)\r\n\t\t\tUpdateLang($Name, $Trans)\r\n\t\t}\r\n\t}\r\n}",
            "Name": "EditLang"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditParameter {\r\n\tdata {\r\n\t\tId int\r\n\t\tValue string\r\n\t\tConditions string\r\n\t}\r\n\tfunc onlyConditions() bool {\r\n\t\treturn $Conditions && !$Value\r\n\t}\r\n\r\n\tconditions {\r\n\t\tRowConditions(\"parameters\", $Id, onlyConditions())\r\n\t\tValidateCondition($Conditions, $ecosystem_id)\r\n\t}\r\n\t\r\n\taction {\r\n\t\tDBUpdate(\"parameters\", $Id, \"value,conditions\", $Value, $Conditions )\r\n\t}\r\n}",
            "Name": "EditParameter"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditTable {\r\n\tdata {\r\n\t\tName string\r\n\t\tPermissions string \"optional\"\r\n        Insert_con string \"optional\"\r\n    \tUpdate_con string \"optional\"\r\n    \tNew_column_con string \"optional\"\r\n\t}\r\n\t\r\n\tconditions {\r\n        var permissions string\r\n        permissions = Sprintf(`{\"insert\":%q,\"update\":%q,\"new_column\":%q}`,$Insert_con,$Update_con,$New_column_con)\r\n        $Permissions = permissions\r\n\t\tTableConditions($Name, \"\", $Permissions)\r\n\t}\r\n\t\r\n\taction {\r\n\t\tPermTable($Name, $Permissions )\r\n\t}\r\n}",
            "Name": "EditTable"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract UploadBinary {\n    data {\n        Name  string\n        Data  bytes \"file\"\n        AppID int\n        DataMimeType string \"optional\"\n    }\n\n    conditions {\n        $Id = Int(DBFind(\"binaries\").Columns(\"id\").Where(\"app_id = ? AND member_id = ? AND name = ?\", $AppID, $key_id, $Name).One(\"id\"))\n    }\n    action {\n        var hash string\n        hash = MD5($Data)\n\n        if $DataMimeType == \"\" {\n            $DataMimeType = \"application/octet-stream\"\n        }\n\n        if $Id != 0 {\n            DBUpdate(\"binaries\", $Id, \"data,hash,mime_type\", $Data, hash, $DataMimeType)\n        } else {\n            $Id = DBInsert(\"binaries\", \"app_id,member_id,name,data,hash,mime_type\", $AppID, $key_id, $Name, $Data, hash, $DataMimeType)\n        }\n\n        $result = $Id\n    }\n}",
            "Name": "UploadBinary"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Export {\n\n    func ReplaceValue(s string) string {\n\t\ts = Replace(s, `\\`, `\\\\`)\n        s = Replace(s, `\t`, `\\t`)\n        s = Replace(s, \"\\n\", `\\n`)\n        s = Replace(s, \"\\r\", `\\r`)\n        s = Replace(s, `\"`, `\\\"`)\n        return s\n    }\n\n    func AssignAll(app_name string, all_blocks string, all_contracts string, all_data string, all_languages string, all_menus string, all_pages string, all_parameters string, all_tables string) string {\n\n        var res_str string\n        res_str = res_str + all_blocks\n\n        if ( Size(res_str)>0 && Size(all_contracts)>0 ){\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_contracts\n\n        if ( Size(res_str)>0 && Size(all_data)>0 ){\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_data\n\n        if ( Size(res_str)>0 && Size(all_languages)>0 ){\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_languages\n\n        if ( Size(res_str)>0 && Size(all_menus)>0 ){\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_menus\n\n        if ( Size(res_str)>0 && Size(all_pages)>0 ){\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_pages\n\n        if ( Size(res_str)>0 && Size(all_parameters)>0 ){\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_parameters\n\n        if ( Size(res_str)>0 && Size(all_tables)>0 ){\n            res_str = res_str + \",\"\n        }\n        res_str = res_str + all_tables\n\n        res_str = Sprintf(`{\n    \"name\": \"%v\",\n    \"data\": [%v\n    ]\n}`, app_name, res_str)\n\n        return res_str\n    }\n\n    func AddPage(page_name string, page_value string, page_conditions string, page_menu string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"page\",\n            \"Name\": \"%v\",\n            \"Value\": \"%v\",\n            \"Conditions\": \"%v\",\n            \"Menu\": \"%v\"\n        }`, page_name, page_value, page_conditions, page_menu)\n        return s\n    }\n\n    func AddMenu(menu_name string, menu_value string, menu_title string, menu_conditions string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"menu\",\n            \"Name\": \"%v\",\n            \"Value\": \"%v\",\n            \"Title\": \"%v\",\n            \"Conditions\": \"%v\"\n        }`, menu_name, menu_value, menu_title, menu_conditions)\n        return s\n    }\n\n    func AddContract(contract_name string, contract_value string, contract_conditions string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"contract\",\n            \"Name\": \"%v\",\n            \"Value\": \"%v\",\n            \"Conditions\": \"%v\"\n        }`, contract_name, contract_value, contract_conditions)\n        return s\n    }\n\n    func AddBlock(block_name string, block_value string, block_conditions string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"block\",\n            \"Name\": \"%v\",\n            \"Value\": \"%v\",\n            \"Conditions\": \"%v\"\n        }`, block_name, block_value, block_conditions)\n        return s\n    }\n\n    func AddLanguage(language_name string, language_conditions string, language_trans string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"language\",\n            \"Name\": \"%v\",\n            \"Conditions\": \"%v\",\n            \"Trans\": \"%v\"\n        }`, language_name, language_conditions, language_trans)\n        return s\n    }\n\n    func AddParameter(parameter_name string, parameter_value string, parameter_conditions string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"parameter\",\n            \"Name\": \"%v\",\n            \"Value\": \"%v\",\n            \"Conditions\": \"%v\"\n        }`, parameter_name, parameter_value, parameter_conditions)\n        return s\n    }\n\n    func AddTable(table_name string, table_columns string, table_permissions string) string {\n        var s string\n        s = Sprintf(`        {\n            \"Type\": \"table\",\n            \"Name\": \"%v\",\n            \"Columns\": \"%v\",\n            \"Permissions\": \"%v\"\n        }`, table_name, table_columns, table_permissions)\n        return s\n    }\n\n    func AddTypeForColumns(table_name string, table_columns string) string {\n\t\tvar result string\n\n\t\ttable_columns = Replace(table_columns, \"{\", \"\")\n\t\ttable_columns = Replace(table_columns, \"}\", \"\")\n\t\ttable_columns = Replace(table_columns, \" \", \"\")\n\n\t\tvar columns_arr array\n\t\tcolumns_arr = Split(table_columns, \",\")\n\n\t\tvar i int\n\t\twhile (i < Len(columns_arr)){\n\t\t\tvar s_split string\n\t\t\ts_split = Str(columns_arr[i])\n\n\t\t\tif Size(s_split) > 0 {\n\t\t\t\tvar clm array\n\t\t\t\tclm = Split(s_split, \":\")\n\n\t\t\t\tvar s string\n\n\t\t\t\tif (Len(clm) == 2){\n\t\t\t\t\tvar col_name string\n\t\t\t\t\tvar col_cond string\n\t\t\t\t\tvar col_type string\n\n\t\t\t\t\tcol_name = Replace(Str(clm[0]), `\"`, \"\")\n\t\t\t\t\tcol_cond = Str(clm[1])\n\t\t\t\t\tcol_type = GetColumnType(table_name, col_name)\n\n\t\t\t\t\ts = Sprintf(`{\"name\":\"%v\",\"type\":\"%v\",\"conditions\":%v}`, col_name, col_type, col_cond)\n\t\t\t\t}\n\n                if (Size(result) > 0) {\n                    result = result + \",\"\n\t\t\t\t}\n\t\t\t\tresult = result + s\n\t\t\t}\n\t\t\ti = i + 1\n\t\t}\n\n\t\tresult = Sprintf(\"[%v]\", result)\n\t\treturn result\n    }\n\n\n    data {}\n\n    conditions {\n        var buffer_map map\n        buffer_map = DBFind(\"buffer_data\").Columns(\"id,value->app_id,value->app_name\").Where(\"member_id=$ and key=$\", $key_id, \"export\").Row()\n        if !buffer_map{\n            warning \"Application not found\"\n        }\n        $ApplicationID = Int(buffer_map[\"value.app_id\"])\n        $ApplicationName = Str(buffer_map[\"value.app_name\"])\n    }\n\n    action {\n        //warning $ApplicationID\n\n        var full_result string\n        var i int\n\n        var all_blocks string\n        var all_contracts string\n        var all_data string\n        var all_languages string\n        var all_menus string\n        var all_pages string\n        var all_parameters string\n        var all_tables string\n\n        //=====================================================================================================\n        //------------------------------------Export pages-----------------------------------------------------\n        var string_for_menu string\n\n        i = 0\n        var pages_array array\n        pages_array = DBFind(\"pages\").Limit(250).Where(\"app_id=?\", $ApplicationID)\n        while i < Len(pages_array) {\n            var page_map map\n            page_map = pages_array[i]\n\n            var page_name string\n            var page_value string\n            var page_conditions string\n            var page_menu string\n\n            page_name = ReplaceValue(Str(page_map[\"name\"]))\n            page_value = ReplaceValue(Str(page_map[\"value\"]))\n            page_conditions = ReplaceValue(Str(page_map[\"conditions\"]))\n            page_menu = ReplaceValue(Str(page_map[\"menu\"]))\n\n            if (Size(all_pages) > 0) {\n                all_pages = all_pages + \",\\r\\n\"\n            } else {\n                all_pages = all_pages + \"\\r\\n\"\n            }\n\n            if (Size(string_for_menu) > 0) {\n                string_for_menu = string_for_menu + \",\"\n            }\n            string_for_menu = string_for_menu + Sprintf(\"'%v'\", page_menu)           \n\n            all_pages = all_pages + AddPage(page_name, page_value, page_conditions, page_menu)\n            i = i + 1\n        }\n\n        //=====================================================================================================\n        //------------------------------------Export menus-----------------------------------------------------\n        if (Size(string_for_menu) > 0) {\n\n            var where_for_menu string\n            where_for_menu = Sprintf(\"name in (%v)\", string_for_menu)\n            //warning where_for_menu \n\n            i = 0\n            var menus_array array\n            menus_array = DBFind(\"menu\").Limit(250).Where(where_for_menu)\n            while i < Len(menus_array) {\n                var menu_map map\n                menu_map = menus_array[i]\n\n                var menu_name string\n                var menu_value string\n                var menu_title string\n                var menu_conditions string\n\n                menu_name = ReplaceValue(Str(menu_map[\"name\"]))\n                menu_value = ReplaceValue(Str(menu_map[\"value\"]))\n                menu_title = ReplaceValue(Str(menu_map[\"title\"]))\n                menu_conditions = ReplaceValue(Str(menu_map[\"conditions\"]))\n\n                if (Size(all_menus) > 0) {\n                    all_menus = all_menus + \",\\r\\n\"\n                } else {\n                    all_menus = all_menus + \"\\r\\n\"\n                }\n\n                all_menus = all_menus + AddMenu(menu_name, menu_value, menu_title, menu_conditions)\n                i = i + 1\n            }\n\n        }\n\n        //=====================================================================================================\n        //------------------------------------Export contracts-------------------------------------------------\n\n        i = 0\n        var contracts_array array\n        contracts_array = DBFind(\"contracts\").Limit(250).Where(\"app_id=?\", $ApplicationID)\n        while i < Len(contracts_array) {\n            var contract_map map\n            contract_map = contracts_array[i]\n\n            var contract_name string\n            var contract_value string\n            var contract_conditions string\n\n            contract_name = ReplaceValue(Str(contract_map[\"name\"]))\n            contract_value = ReplaceValue(Str(contract_map[\"value\"]))\n            contract_conditions = ReplaceValue(Str(contract_map[\"conditions\"]))\n\n            if (Size(all_contracts) > 0) {\n                all_contracts = all_contracts + \",\\r\\n\"\n            } else {\n                all_contracts = all_contracts + \"\\r\\n\"\n            }\n\n            all_contracts = all_contracts + AddContract(contract_name, contract_value, contract_conditions)\n            i = i + 1\n        }\n\n        //=====================================================================================================\n        //------------------------------------Export blocks----------------------------------------------------\n\n        i = 0\n        var blocks_array array\n        blocks_array = DBFind(\"blocks\").Limit(250).Where(\"app_id=?\", $ApplicationID)\n        while i < Len(blocks_array) {\n            var block_map map\n            block_map = blocks_array[i]\n\n            var block_name string\n            var block_value string\n            var block_conditions string\n\n            block_name = ReplaceValue(Str(block_map[\"name\"]))\n            block_value = ReplaceValue(Str(block_map[\"value\"]))\n            block_conditions = ReplaceValue(Str(block_map[\"conditions\"]))\n\n            if (Size(all_blocks) > 0) {\n                all_blocks = all_blocks + \",\\r\\n\"\n            } else {\n                all_blocks = all_blocks + \"\\r\\n\"\n            }\n\n            all_blocks = all_blocks + AddBlock(block_name, block_value, block_conditions)\n            i = i + 1\n        }\n\n        //=====================================================================================================\n        //------------------------------------Export languages-------------------------------------------------\n\n        i = 0\n        var languages_array array\n        languages_array = DBFind(\"languages\").Limit(250).Where(\"app_id=?\", $ApplicationID)\n        while i < Len(languages_array) {\n            var language_map map\n            language_map = languages_array[i]\n\n            var language_name string\n            var language_conditions string\n            var language_trans string\n\n            language_name = ReplaceValue(Str(language_map[\"name\"]))\n            language_conditions = ReplaceValue(Str(language_map[\"conditions\"]))\n            language_trans = ReplaceValue(Str(language_map[\"res\"]))\n\n            if (Size(all_languages) > 0) {\n                all_languages = all_languages + \",\\r\\n\"\n            } else {\n                all_languages = all_languages + \"\\r\\n\"\n            }\n\n            all_languages = all_languages + AddLanguage(language_name, language_conditions, language_trans)\n            i = i + 1\n        }\n\n        //=====================================================================================================\n        //------------------------------------Export params----------------------------------------------------\n\n        i = 0\n        var parameters_array array\n        parameters_array = DBFind(\"app_params\").Limit(250).Where(\"app_id=?\", $ApplicationID)\n        while i < Len(parameters_array) {\n            var parameter_map map\n            parameter_map = parameters_array[i]\n\n            var parameter_name string\n            var parameter_value string\n            var parameter_conditions string\n\n            parameter_name = ReplaceValue(Str(parameter_map[\"name\"]))\n            parameter_value = ReplaceValue(Str(parameter_map[\"value\"]))\n            parameter_conditions = ReplaceValue(Str(parameter_map[\"conditions\"]))\n\n            if (Size(all_parameters) > 0) {\n                all_parameters = all_parameters + \",\\r\\n\"\n            } else {\n                all_parameters = all_parameters + \"\\r\\n\"\n            }\n\n            all_parameters = all_parameters + AddParameter(parameter_name, parameter_value, parameter_conditions)\n            i = i + 1\n        }\n\n        //=====================================================================================================\n        //------------------------------------Export tables----------------------------------------------------\n\n        i = 0\n        var tables_array array\n        tables_array = DBFind(\"tables\").Limit(250).Where(\"app_id=?\", $ApplicationID)\n        while i < Len(tables_array) {\n            var table_map map\n            table_map = tables_array[i]\n\n            var table_name string\n            var table_columns string\n            var table_permissions string\n\n            table_name = Str(table_map[\"name\"])\n            table_columns = Str(table_map[\"columns\"])\n\t\t\ttable_permissions = Str(table_map[\"permissions\"])\n\n\t\t\ttable_columns = AddTypeForColumns(table_name, table_columns)\n            \n\t\t\ttable_name = ReplaceValue(table_name)\n\t\t\ttable_columns = ReplaceValue(table_columns)\n\t\t\ttable_permissions = ReplaceValue(table_permissions)\n\n            if (Size(all_tables) > 0) {\n                all_tables = all_tables + \",\\r\\n\"\n            } else {\n                all_tables = all_tables + \"\\r\\n\"\n            }\n\n            all_tables = all_tables + AddTable(table_name, table_columns, table_permissions)\n            i = i + 1\n        }\n\n        //=====================================================================================================\n\n        full_result = AssignAll($ApplicationName, all_blocks, all_contracts, all_data, all_languages, all_menus, all_pages, all_parameters, all_tables)\n        UploadBinary(\"Name,Data,AppID,DataMimeType\", \"export\", full_result, 1, \"application/json\")\n    }\n}",
            "Name": "Export"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Import_CreateApp {\n    data {}\n\n    conditions {\n        var app_map map\n        app_map = DBFind(\"buffer_data\").Columns(\"value->app_name\").Where(\"key='import_info' and member_id=$\", $key_id).Row()\n        if !app_map{\n           warning \"Application not found\"\n        }\n        $app_name = Str(app_map[\"value.app_name\"])\n    }\n\n    action {\n        var app_id int\n        app_id = DBFind(\"applications\").Columns(\"id\").Where(\"name=$\", $app_name).One(\"id\")\n\n        if !app_id {\n            DBInsert(\"applications\", \"name\", $app_name)\n        }        \n    }\n}",
            "Name": "Import_CreateApp"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewTable {\r\n\tdata {\r\n\t\tApplicationId int \"optional\"\r\n\t\tName string \"optional\"\r\n\t\tColumns string \"optional\"\r\n\t\tPermissions string \"optional\"\r\n\t\tTableName string \"optional\"\r\n    \tId array \"optional\"\r\n    \tShareholding array \"optional\"\r\n    \tInsert_con string \"optional\"\r\n    \tUpdate_con string \"optional\"\r\n    \tNew_column_con string \"optional\"\r\n\t}\r\n\tconditions {}\r\n\t\r\n\taction {\r\n\t\tif (Size($Name) > 0   &&   Size($Columns) > 0  &&  Size($Permissions) > 0){\r\n\t\t\tCreateTable($Name, $Columns, $Permissions, $ApplicationId)\r\n\t\t} else {\r\n\t\t\tvar i,len,lenshar int\r\n        \tvar res,columns string\r\n        \tlen = Len($Id)\r\n        \tlenshar = Len($Shareholding)\r\n\t\t\twhile i < len {\r\n            \tif (i + 1 == len){\r\n                \tres = res + Sprintf(`{\"name\":%q,\"type\":%q,\"conditions\":\"true\"}`,$Id[i],$Shareholding[i])\r\n                \ti = i + 1\r\n            \t}\r\n            \telse {\r\n            \t\tres = res + Sprintf(`{\"name\":%q,\"type\":%q,\"conditions\":\"true\"},`,$Id[i],$Shareholding[i])\r\n            \t\ti = i + 1\r\n            \t}\r\n\t\t\t}\r\n    \t\tcolumns = Sprintf(\"[\"+\"%v\"+\"]\", res)\r\n        \r\n        \tvar permissions string\r\n        \tpermissions = Sprintf(`{\"insert\":%q,\"update\":%q,\"new_column\":%q}`,$Insert_con,$Update_con,$New_column_con)\r\n\r\n\t\t\t$Name = $TableName\r\n\t\t\t$Columns = columns\r\n\t\t\t$Permissions = permissions\r\n\t\t\t\r\n\t\t\tCreateTable($Name, $Columns, $Permissions, $ApplicationId)\r\n\t\t}\r\n\t}\r\n\tfunc rollback() {\r\n\t\t\tRollbackTable($Name)\r\n\t}\r\n\tfunc price() int {\r\n\t\treturn  SysParamInt(\"table_price\")\r\n\t}\r\n}",
            "Name": "NewTable"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Import_Upload {\n\tdata {\n        input_file string\n    }\n\n    conditions {\n    }\n\n    action {\n        var json map\n        json = JSONToMap($input_file)\n        var arr_data array\n        arr_data = json[\"data\"]\n\n        var pages_arr, blocks_arr, menu_arr, parameters_arr, languages_arr, contracts_arr, tables_arr array\n\n        var i int\n        while i<Len(arr_data){\n            var tmp_object map\n            tmp_object = arr_data[i]\n\n            if (tmp_object[\"Type\"] == \"page\"){\n                pages_arr[Len(pages_arr)] = Str(tmp_object[\"Name\"])\n            }\n            if (tmp_object[\"Type\"] == \"block\"){\n                blocks_arr[Len(blocks_arr)] = Str(tmp_object[\"Name\"])\n            }\n            if (tmp_object[\"Type\"] == \"menu\"){\n                menu_arr[Len(menu_arr)] = Str(tmp_object[\"Name\"])\n            }\n            if (tmp_object[\"Type\"] == \"parameter\"){\n                parameters_arr[Len(parameters_arr)] = Str(tmp_object[\"Name\"])\n            }\n            if (tmp_object[\"Type\"] == \"language\"){\n                languages_arr[Len(languages_arr)] = Str(tmp_object[\"Name\"])\n            }\n            if (tmp_object[\"Type\"] == \"contract\"){\n                contracts_arr[Len(contracts_arr)] = Str(tmp_object[\"Name\"])\n            }\n            if (tmp_object[\"Type\"] == \"table\"){\n                tables_arr[Len(tables_arr)] = Str(tmp_object[\"Name\"])\n            }\n\n            i = i + 1\n        }\n\n        var info_map map\n\t\tinfo_map[\"app_name\"] = json[\"name\"]\n        info_map[\"pages\"] = Join(pages_arr, \", \")\n        info_map[\"pages_count\"] = Len(pages_arr)\n        info_map[\"blocks\"] = Join(blocks_arr, \", \")\n        info_map[\"blocks_count\"] = Len(blocks_arr)\n        info_map[\"menu\"] = Join(menu_arr, \", \")\n        info_map[\"menu_count\"] = Len(menu_arr)\n        info_map[\"parameters\"] = Join(parameters_arr, \", \")\n        info_map[\"parameters_count\"] = Len(parameters_arr)\n        info_map[\"languages\"] = Join(languages_arr, \", \")\n        info_map[\"languages_count\"] = Len(languages_arr)\n        info_map[\"contracts\"] = Join(contracts_arr, \", \")\n        info_map[\"contracts_count\"] = Len(contracts_arr)\n        info_map[\"tables\"] = Join(tables_arr, \", \")\n        info_map[\"tables_count\"] = Len(tables_arr)\n\n        $import_id = DBFind(\"buffer_data\").Where(\"member_id=$ and key=$\", $key_id, \"import\").One(\"id\")\n        if !$import_id {\n            DBInsert(\"buffer_data\", \"member_id,key,value\", $key_id, \"import\", $input_file)\n        } else {\n            DBUpdate(\"buffer_data\", Int($import_id), \"value\", $input_file)\n        }\n\n        $info_id = DBFind(\"buffer_data\").Where(\"member_id=$ and key=$\", $key_id, \"import_info\").One(\"id\")\n        if !$info_id {\n            DBInsert(\"buffer_data\", \"member_id,key,value\", $key_id, \"import_info\", info_map)\n        } else {\n            DBUpdate(\"buffer_data\", Int($info_id), \"value\", info_map)\n        }\n\n    }\n}",
            "Name": "Import_Upload"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewAppParam {\r\n\tdata {\r\n\t\tApplicationId int \"optional\"\r\n\t\tName string\r\n\t\tValue string\r\n\t\tConditions string\r\n\t}\r\n\t\r\n\tconditions {\r\n\t\tValidateCondition($Conditions, $ecosystem_id)\r\n\t\t\r\n\t\tif $ApplicationId == 0 {\r\n\t\t\twarning \"Application id cannot equal 0\"\r\n\t\t}\r\n\t\t\r\n\t\tvar param_id int\r\n\t\tparam_id = DBFind(\"app_params\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\")\r\n\t\tif param_id {\r\n\t\t\twarning Sprintf( \"Application parameter %s already exists\", $Name)\r\n\t\t}\r\n\t}\r\n\t\r\n\taction {\r\n\t\tDBInsert(\"app_params\", \"app_id,name,value,conditions\", $ApplicationId, $Name, $Value, $Conditions )\r\n\t}\r\n}",
            "Name": "NewAppParam"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewApplication {\n    data {\n        Name string\n        Conditions string\n    }\n\n    conditions {\n        ValidateCondition($Conditions, $ecosystem_id)\n    }\n\n    action {\n        $new_app_id = DBInsert(\"applications\", \"name,conditions\", $Name, $Conditions)\n    }\n}",
            "Name": "NewApplication"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewBlock {\n\tdata {\n\t\tApplicationId int \"optional\"\n\t\tName string\n\t\tValue string\n\t\tConditions string\n\t}\n\t\n\tconditions {\n\t\tValidateCondition($Conditions, $ecosystem_id)\n\n\t\tif $ApplicationId == 0 {\n\t\t\twarning \"Application id cannot equal 0\"\n\t\t}\n\t\t\n\t\tvar block_id int\n\t\tblock_id = DBFind(\"blocks\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\")\n\t\tif block_id {\n\t\t\twarning Sprintf( \"Block %s already exists\", $Name)\n\t\t}\n\t}\n\t\n\taction {\n\t\tDBInsert(\"blocks\", \"name,value,conditions,app_id\", $Name, $Value, $Conditions, $ApplicationId )\n\t}\n}",
            "Name": "NewBlock"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewColumn {\n\tdata {\n\t\tTableName string\n\t\tName string\n\t\tType string\n\t\tPermissions string\n\t}\n\tconditions {\n\t\tColumnCondition($TableName, $Name, $Type, $Permissions)\n\t}\n\taction {\n\t\tCreateColumn($TableName, $Name, $Type, $Permissions)\n\t}\n\tfunc rollback() {\n\t\tRollbackColumn($TableName, $Name)\n\t}\n\tfunc price() int {\n\t\treturn SysParamInt(\"column_price\")\n\t}\n}",
            "Name": "NewColumn"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewContract {\n\tdata {\n\t\tApplicationId int \"optional\"\n\t\tValue string\n\t\tConditions string\n\t\tWallet string \"optional\"\n\t\tTokenEcosystem int \"optional\"\n\t}\n\t\n\tconditions {\n\t\tValidateCondition($Conditions,$ecosystem_id)\n\t\t$walletContract = $key_id\n\t\t   if $Wallet {\n\t\t\t$walletContract = AddressToId($Wallet)\n\t\t\tif $walletContract == 0 {\n\t\t\t   error Sprintf(\"wrong wallet %s\", $Wallet)\n\t\t\t}\n\t\t}\n\t\tvar list array\n\t\tlist = ContractsList($Value)\n\t\t\n\t\tif Len(list) == 0 {\n\t\t\terror \"must be the name\"\n\t\t}\n\n\t\tvar i int\n\t\twhile i < Len(list) {\n\t\t\tif IsObject(list[i], $ecosystem_id) {\n\t\t\t\twarning Sprintf(\"Contract or function %s exists\", list[i] )\n\t\t\t}\n\t\t\ti = i + 1\n\t\t}\n\n\t\t$contract_name = list[0]\n\t\tif !$TokenEcosystem {\n\t\t\t$TokenEcosystem = 1\n\t\t} else {\n\t\t\tif !SysFuel($TokenEcosystem) {\n\t\t\t\twarning Sprintf(\"Ecosystem %d is not system\", $TokenEcosystem )\n\t\t\t}\n\t\t}\n\t}\n\t\n\taction {\n\t\tvar root, id int\n\t\troot = CompileContract($Value, $ecosystem_id, $walletContract, $TokenEcosystem)\n\t\tid = DBInsert(\"contracts\", \"name,value,conditions, wallet_id, token_id,app_id\", \n\t\t\t   $contract_name, $Value, $Conditions, $walletContract, $TokenEcosystem, $ApplicationId)\n\t\tFlushContract(root, id, false)\n\t\t$result = id\n\t}\n\tfunc rollback() {\n\t\tvar list array\n\t\tlist = ContractsList($Value)\n\t\tvar i int\n\t\twhile i < Len(list) {\n\t\t\tRollbackContract(list[i])\n\t\t\ti = i + 1\n\t\t}\n\t}\n\tfunc price() int {\n\t\treturn SysParamInt(\"contract_price\")\n\t}\n}",
            "Name": "NewContract"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewLang {\r\n  data {\r\n\t\tApplicationId int \"optional\"\r\n\t\tName  string\r\n\t\tTrans string \"optional\"\r\n\t\tValue array \"optional\"\r\n\t\tIdLanguage array \"optional\"\r\n\t}\r\n\t\r\n\tconditions {\r\n    \tif (Len($IdLanguage) > 0){\r\n\t\t\tvar j,len int\r\n\t\t\tlen = Len($IdLanguage)\r\n\t\t\twhile j < len {\r\n\t\t\t\tif ($IdLanguage[j] == \"\"){\r\n\t\t\t\t\tinfo(\"Locale empty\")\r\n\t\t\t\t}\r\n\t\t\t\tif ($Value[j] == \"\"){\r\n\t\t\t\t\tinfo(\"Value empty\")\r\n\t\t\t\t}\r\n\t\t\t\tj = j + 1\r\n\t\t\t}\r\n    \t}\r\n\t\tEvalCondition(\"parameters\", \"changing_language\", \"value\")\r\n\r\n\t\tvar lan_id int\r\n\t\tlan_id = DBFind(\"languages\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\")\r\n\t\tif lan_id {\r\n\t\t\terror Sprintf(\"The language resource %s already exists\", $Name)\r\n\t\t}\t\r\n\t}\r\n\r\n\taction {\r\n\t\tif (Len($IdLanguage) > 0){\r\n\t\t\tvar i,len,lenshar int\r\n\t\t\tvar res,langarr string\r\n\t\t\tlen = Len($IdLanguage)\r\n\t\t\tlenshar = Len($Value)\r\n\t\t\twhile i < len {\r\n\t\t\t\tif (i + 1 == len){\r\n\t\t\t\t\tres = res + Sprintf(`%q: %q`,$IdLanguage[i],$Value[i])\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tres = res + Sprintf(`%q: %q, `,$IdLanguage[i],$Value[i])\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlangarr = Sprintf(\"{\"+\"%v\"+\"}\", res)\r\n\t\t\t$Trans = langarr\r\n\t\t\tDBInsert(\"languages\", \"name,res,app_id\", $Name, $Trans, $ApplicationId )\r\n\t\t\tUpdateLang($Name, $Trans)\r\n\t\t} \r\n\t\telse {\r\n\t\t\tDBInsert(\"languages\", \"name,res,app_id\", $Name, $Trans, $ApplicationId )\r\n\t\t\tUpdateLang($Name, $Trans)\r\n\t\t}\r\n  \t}\r\n}",
            "Name": "NewLang"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewMenu {\n\tdata {\n\t\tName string\n\t\tValue string\n\t\tTitle string \"optional\"\n\t\tConditions string\n\t}\n\t\n\tconditions {\n\t\tValidateCondition($Conditions,$ecosystem_id)\n\n\t\tvar menu_id int\n\t\tmenu_id = DBFind(\"menu\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\")\n\t\tif menu_id {\n\t\t\twarning Sprintf( \"Menu %s already exists\", $Name)\n\t\t}\n\t}\n\t\n\taction {\n\t\tDBInsert(\"menu\", \"name,value,title,conditions,app_id\", $Name, $Value, $Title, $Conditions)\n\t}\n\tfunc price() int {\n\t\treturn SysParamInt(\"menu_price\")\n\t}\n}",
            "Name": "NewMenu"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewPage {\n\tdata {\n\t\tApplicationId int \"optional\"\n\t\tName string\n\t\tValue string\n\t\tMenu string\n\t\tConditions string\n\t\tValidateCount int \"optional\"\n\t}\n\tfunc preparePageValidateCount(count int) int {\n\t\tvar min, max int\n\t\tmin = Int(EcosysParam(\"min_page_validate_count\"))\n\t\tmax = Int(EcosysParam(\"max_page_validate_count\"))\n\n\t\tif count < min {\n\t\t\tcount = min\n\t\t} else {\n\t\t\tif count > max {\n\t\t\t\tcount = max\n\t\t\t}\n\t\t}\n\t\treturn count\n\t}\n\t\n\tconditions {\n\t\tValidateCondition($Conditions,$ecosystem_id)\n\n\t\tvar page_id int\n\t\tpage_id = DBFind(\"pages\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\")\n\t\tif page_id {\n\t\t\twarning Sprintf( \"Page %s already exists\", $Name)\n\t\t}\n\n\t\t$ValidateCount = preparePageValidateCount($ValidateCount)\n\t}\n\t\n\taction {\n\t\tDBInsert(\"pages\", \"name,value,menu,validate_count,conditions,app_id\", $Name, $Value, $Menu, $ValidateCount, $Conditions, $ApplicationId)\n\t}\n\tfunc price() int {\n\t\treturn  SysParamInt(\"page_price\")\n\t}\n}",
            "Name": "NewPage"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewParameter {\r\n\tdata {\r\n\t\tName string\r\n\t\tValue string\r\n\t\tConditions string\r\n\t}\r\n\t\r\n\tconditions {\r\n\t\tValidateCondition($Conditions, $ecosystem_id)\r\n\r\n\t\tvar param_id int\r\n\t\tparam_id = DBFind(\"parameters\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\")\r\n\t\tif param_id {\r\n\t\t\twarning Sprintf(\"Parameter %s already exists\", $Name)\r\n\t\t}\r\n\t}\r\n\t\r\n\taction {\r\n\t\tDBInsert(\"parameters\", \"name,value,conditions\", $Name, $Value, $Conditions )\r\n\t}\r\n}",
            "Name": "NewParameter"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Import_New {\n\tdata {\n        Type string \n        Name string \"optional\" \n        Value string \"optional\" \n        Conditions string \"optional\" \n        Menu string \"optional\" \n        Trans string \"optional\" \n        Columns string \"optional\" \n        Permissions string \"optional\"\n        Title string \"optional\"\n    }\n\n    conditions {\n\t\tPrintln(\"Import: \" + $Name)\n        $ApplicationId = 0\n\n        var app_map map\n        app_map = DBFind(\"buffer_data\").Columns(\"value->app_name\").Where(\"key='import_info' and member_id=$\", $key_id).Row()\n        if app_map{\n            var app_id int\n            app_id = DBFind(\"applications\").Columns(\"id\").Where(\"name=$\", Str(app_map[\"value.app_name\"])).One(\"id\")\n\n            if app_id {\n                $ApplicationId = app_id\n            }\n        }\n    }\n\n    action {\n        var idata map\n\n        if $Type == \"page\" {\n            $page_id = DBFind(\"pages\").Where(\"name=?\", $Name).One(\"id\")\n            if $page_id {\n                idata[\"Id\"] = Int($page_id)\n                idata[\"Value\"] = $Value\n                idata[\"Menu\"] = $Menu\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"EditPage\", idata)\n            } else {\n                idata[\"ApplicationId\"] = $ApplicationId\n                idata[\"Name\"] = $Name\n                idata[\"Value\"] = $Value\n                idata[\"Menu\"] = $Menu\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"NewPage\", idata)\n            }\n        }\n        if $Type == \"block\" {\n            $block_id = DBFind(\"blocks\").Where(\"name=?\", $Name).One(\"id\")\n            if $block_id {\n                idata[\"Id\"] = Int($block_id)\n                idata[\"Value\"] = $Value\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"EditBlock\", idata)\n            } else {\n                idata[\"ApplicationId\"] = $ApplicationId\n                idata[\"Name\"] = $Name\n                idata[\"Value\"] = $Value\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"NewBlock\", idata)\n            }\n        }\n        if $Type == \"menu\" {\n            $menu = DBFind(\"menu\").Where(\"name=?\", $Name).Row()\n            if $menu {\n                idata[\"Id\"] = Int($menu[\"id\"])\n                idata[\"Value\"] = $menu[\"value\"] + \"\\n\" + $Value\n                idata[\"Title\"] = $Title\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"EditMenu\", idata)\n            } else {\n                idata[\"Name\"] = $Name\n                idata[\"Value\"] = $Value\n                idata[\"Title\"] = $Title\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"NewMenu\", idata)\n            }\n        }\n        if $Type == \"parameter\" {\n            $param_id = DBFind(\"app_params\").Where(\"name=?\", $Name).One(\"id\")\n            if $param_id {\n                idata[\"Id\"] = Int($param_id)\n                idata[\"Value\"] = $Value\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"EditAppParam\", idata)\n            } else {\n                idata[\"ApplicationId\"] = $ApplicationId\n                idata[\"Name\"] = $Name\n                idata[\"Value\"] = $Value\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"NewAppParam\", idata)\n            }\n        }\n        if $Type == \"language\" {\n            $lang_id = DBFind(\"languages\").Where(\"name=?\", $Name).One(\"id\")\n            if $lang_id {\n                idata[\"Name\"] = $Name\n                idata[\"Trans\"] = $Trans\n                CallContract(\"EditLang\", idata)\n            } else {\n                idata[\"ApplicationId\"] = $ApplicationId\n                idata[\"Name\"] = $Name\n                idata[\"Trans\"] = $Trans\n                CallContract(\"NewLang\", idata)\n            }\n        }\n        if $Type == \"contract\" {\n            $contract_id = GetContractByName($Name)\n            if $contract_id > 0 {\n                idata[\"Id\"] = $contract_id\n                idata[\"Value\"] = $Value\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"EditContract\", idata)\n            } else {\n                idata[\"ApplicationId\"] = $ApplicationId\n                idata[\"Value\"] = $Value\n                idata[\"Conditions\"] = $Conditions\n                CallContract(\"NewContract\", idata)\n            }\n        }\n        if $Type == \"table\" {\n            $table_id = DBFind(\"tables\").Where(\"name=?\", $Name).One(\"id\")\n            if $table_id {\n                //nothing\n            } else {\n                idata[\"ApplicationId\"] = $ApplicationId\n                idata[\"Name\"] = $Name\n                idata[\"Columns\"] = $Columns\n                idata[\"Permissions\"] = $Permissions\n                CallContract(\"NewTable\", idata)\n            }\n        }\n    }\n}",
            "Name": "Import_New"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Export_NewApp {\n    data {\n        app_id int\n    }\n\n    conditions {\n        $app_map = DBFind(\"applications\").Columns(\"id,name\").Where(\"id=$\", $app_id).Row()\n        if !$app_map{\n            warning \"Application not found\"\n        }\n    }\n\n    action {\n\n        //=====================================================================================================\n        //------------------------------------Menu search------------------------------------------------------\n        var i int\n        var pages_array array\n        var menu_name_array array\n\t\tvar menu_id_array array\n\n        i = 0\n        var pages_ret array\n        pages_ret = DBFind(\"pages\").Where(\"app_id=?\", $app_id)\n        while i < Len(pages_ret) {\n            var page_map map\n            page_map = pages_ret[i]\n\n            pages_array[Len(pages_array)] = Sprintf(\"'%v'\", Str(page_map[\"menu\"]))\n            i = i + 1\n        }\n\n\n        if (Len(pages_array) > 0) {\n            var where_for_menu string\n            where_for_menu = Sprintf(\"name in (%v)\", Join(pages_array, \",\"))\n\n            i = 0\n            var menu_ret array\n            menu_ret = DBFind(\"menu\").Where(where_for_menu)\n            while i < Len(menu_ret) {\n                var menu_map map\n                menu_map = menu_ret[i]\n\n                menu_name_array[Len(menu_name_array)] = Str(menu_map[\"name\"])\n\t\t\t\tmenu_id_array[Len(menu_id_array)] = Str(menu_map[\"id\"])\n                i = i + 1\n            }\n        }\n\n        //=====================================================================================================\n        //------------------------------------Creating settings------------------------------------------------\n    \n        var value map\n        value[\"app_id\"] = Str($app_id)\n        value[\"app_name\"] = Str($app_map[\"name\"])\n\t\t\n\t\tif (Len(menu_name_array) > 0){\n\t\t\tvalue[\"menu_id\"] = Str(Join(menu_id_array, \", \"))\n\t\t\tvalue[\"menu_name\"] = Str(Join(menu_name_array, \", \"))\n\t\t\tvalue[\"count_menu\"] = Str(Len(menu_name_array))\n\t\t} else {\n\t\t\tvalue[\"menu_id\"] = \"0\"\n\t\t\tvalue[\"menu_name\"] = \"\"\n\t\t\tvalue[\"count_menu\"] = \"0\"\n\t\t}\n\n        $buffer_id = DBFind(\"buffer_data\").Where(\"member_id=$ and key=$\", $key_id, \"export\").One(\"id\")\n        if !$buffer_id {\n            DBInsert(\"buffer_data\", \"member_id,key,value\", $key_id, \"export\", value)\n        } else {\n            DBUpdate(\"buffer_data\", Int($buffer_id), \"value\", value)\n        }\n    }\n}",
            "Name": "Export_NewApp"
        }
    ],
    "data": [],
    "languages": [
        {
            "Name": "app_params",
            "Trans": "{\"ru\": \"Параметры Приложения\", \"en\": \"Application Params\"}"
        },
        {
            "Name": "application",
            "Trans": "{\"ru\":\"Приложение\",\"en\":\"Application\"}"
        },
        {
            "Name": "applications",
            "Trans": "{\"ru\":\"Приложения\",\"en\":\"Applications\"}"
        },
        {
            "Name": "binary",
            "Trans": "{\"ru\":\"Двоичные данные\",\"en\":\"Binary Data\"}"
        },
        {
            "Name": "blocks",
            "Trans": "{\"ru\":\"Блоки\",\"en\":\"Blocks\"}"
        },
        {
            "Name": "create",
            "Trans": "{\"en\": \"Create\", \"ru\": \"Создать\"}"
        },
        {
            "Name": "deleted",
            "Trans": "{\"en\": \"Deleted\", \"ru\": \"Удалено\"}"
        },
        {
            "Name": "deleted_applications",
            "Trans": "{\"ru\":\"Удалённые приложения\",\"en\":\"Deleted Applications\"}"
        },
        {
            "Name": "download_link",
            "Trans": "{\"ru\": \"Ссылка для скачивания\", \"en\": \"Download link\n\"}"
        },
        {
            "Name": "ecosystem_params",
            "Trans": "{\"en\":\"Ecosystem parameters\",\"ru\":\"Параметры экосистемы\"}"
        },
        {
            "Name": "id",
            "Trans": "{\"en\": \"ID\", \"ru\": \"ID\"}"
        },
        {
            "Name": "langres",
            "Trans": "{\"ru\": \"Языковые Ресурсы\", \"en\": \"Language Resources\"}"
        },
        {
            "Name": "manage_stylesheet",
            "Trans": "{\"en\":\"Manage stylesheet\",\"ru\":\"Управление стилями\"}"
        },
        {
            "Name": "menus",
            "Trans": "{\"ru\":\"Меню\",\"en\":\"Menus\"}"
        },
        {
            "Name": "name",
            "Trans": "{\"ru\":\"Название\",\"en\":\"Name\"}"
        },
        {
            "Name": "pages",
            "Trans": "{\"ru\":\"Страницы\",\"en\":\"Pages\"}"
        },
        {
            "Name": "params",
            "Trans": "{\"ru\":\"Параметры\",\"en\":\"Params\", \"en\": \"App Params\", \"ru\": \"Параметры Приложения\", \"en\": \"Params\", \"ru\": \"Параметры\"}"
        },
        {
            "Name": "resources",
            "Trans": "{\"en\":\"Resources\",\"ru\":\"Ресурсы\"}"
        },
        {
            "Name": "smart_contracts",
            "Trans": "{\"ru\":\"Смарт-Контракты\",\"en\":\"Smart Contracts\"}"
        },
        {
            "Name": "tables",
            "Trans": "{\"ru\": \"Таблицы\", \"en\": \"Tables\"}"
        }
    ],
    "menus": [
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "MenuItem(Title:$application$, Page:apps_list, Icon:\"icon-folder\")\nMenuItem(Title:$ecosystem_params$, Page:params_list, Icon:\"icon-settings\")\nMenuItem(Title:$menus$, Page:menus_list, Icon:\"icon-list\")\nMenuItem(Title:Import, Page:import_upload, Icon:\"icon-cloud-upload\")\nMenuItem(Title:Export, Page:export_resources, Icon:\"icon-cloud-download\")\nMenuGroup(Title:$resources$, Icon:\"icon-share\"){\n    MenuItem(Title:$pages$, Page:app_pages, Icon:\"icon-screen-desktop\")\n    MenuItem(Title:$blocks$, Page:app_blocks, Icon:\"icon-grid\")\n    MenuItem(Title:$tables$, Page:app_tables, Icon:\"icon-docs\")\n    MenuItem(Title:$smart_contracts$, Page:app_contracts, Icon:\"icon-briefcase\")\n    MenuItem(Title:$app_params$, Page:app_params, Icon:\"icon-wrench\")\n    MenuItem(Title:$langres$, Page:app_langres, Icon:\"icon-globe\")\n    MenuItem(Title:$binary$, Page:app_binary, Icon:\"icon-layers\")\n}",
            "Name": "admin_menu"
        }
    ],
    "pages": [
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\n\nIf(#buffer_value_app_id# > 0){\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Limit(1).Vars(\"app\")\n\n    Div(content-wrapper){\n        SetTitle($binary$: #app_name#)\n        AddToolButton(Title: Upload Binary, Page: app_upload_binary, Icon: icon-plus, PageParams: \"app_id=#app_id#\")\n\n        If(#current_page# > 0){\n        }.Else{\n            SetVar(current_page, 1)\n        }\n        SetVar(admin_page, app_binary)\n        Include(admin_link)\n\n        Include(pager_header)\n        SetVar(pager_table, binaries)\n        SetVar(pager_where, \"app_id=#buffer_value_app_id#\")\n        SetVar(pager_page, app_binary)\n        SetVar(pager_limit, 50)\n\n        DBFind(binaries, src_binparameters).Limit(50).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    ForList(src_binparameters){\n                        Div(col-md-#width# col-sm-12){\n                            Div(list-group-item){\n                                Div(row){\n                                    Div(col-md-4){\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n                                        Span(Class: h5, Body: #name#)\n                                    }\n                                    Div(col-md-8){\n                                        Div(pull-right){\n                                            Span(#hash#)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Div(Class: panel-footer){\n                Div(Class: clearfix){\n                    Include(pager)\n                }\n            }\n        }\n    }\n}.Else{\n    SetTitle($binary$)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n    }\n}",
            "Name": "app_binary",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\n\nIf(#buffer_value_app_id# > 0){\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Limit(1).Vars(\"app\")\n\n    Div(content-wrapper){\n        SetTitle($blocks$: #app_name#)\n        AddToolButton(Title: $create$, Page: editor, Icon: icon-plus, PageParams: \"create=block,appId=#buffer_value_app_id#\")\n\n        If(#current_page# > 0){\n        }.Else{\n            SetVar(current_page, 1)\n        }\n        SetVar(admin_page, app_blocks)\n        Include(admin_link)\n\n        Include(pager_header)\n        SetVar(pager_table, blocks)\n        SetVar(pager_where, \"app_id=#buffer_value_app_id#\")\n        SetVar(pager_page, app_blocks)\n        SetVar(pager_limit, 50)\n\n        DBFind(blocks, src_blocks).Limit(50).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    ForList(src_blocks){\n                        Div(col-md-#width# col-sm-12){\n                            Div(list-group-item){\n                                Div(row){\n                                    Div(col-md-4){\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n                                        Span(Class: h5, Body: \"#name#\")\n                                    }\n                                    Div(col-md-8){\n                                        Div(pull-right){\n                                            SetVar(type,\"block\")\n                                            Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=#type#\")).Style(margin-right: 15px;)\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=block,name=#name#\"))\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Div(Class: panel-footer){\n                Div(Class: clearfix){\n                    Include(pager)\n                }\n            }\n        }\n    }\n}.Else{\n    SetTitle($blocks$)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n    }\n}",
            "Name": "app_blocks",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\n\nIf(#buffer_value_app_id# > 0){\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Limit(1).Vars(\"app\")\n\n    Div(content-wrapper){\n        SetTitle($smart_contracts$: #app_name#)\n        AddToolButton(Title: $create$, Page: editor, Icon: icon-plus, PageParams: \"create=contract,appId=#buffer_value_app_id#\")\n\n        If(#current_page# > 0){\n        }.Else{\n            SetVar(current_page, 1)\n        }\n        SetVar(admin_page, app_contracts)\n        Include(admin_link)\n\n        Include(pager_header)\n        SetVar(pager_table, contracts)\n        SetVar(pager_where, \"app_id=#buffer_value_app_id#\")\n        SetVar(pager_page, app_contracts)\n        SetVar(pager_limit, 50)\n\n        DBFind(contracts, src_contracts).Limit(50).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    ForList(src_contracts){\n                        Div(col-md-#width# col-sm-12){\n                            Div(list-group-item){\n                                Div(row){\n                                    Div(col-md-4){\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n                                        Span(Class: h5, Body: \"#name#\")\n                                    }\n                                    Div(col-md-8){\n                                        Div(pull-right){\n                                            SetVar(type,\"contract\")\n                                            Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=#type#\")).Style(margin-right: 15px;)\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=contract,name=#name#\"))\n                                        }\n                                        Div(pull-right){\n                                            If(#active#==1){\n                                                Span(Class: h5, Body: Em(Class: fa fa-check)).Style(margin-right: 50px;)\n                                            }.Else{\n                                                Span(Class: h5 text-muted, Body: Em(Class: fa fa-minus)).Style(margin-right: 50px;)\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Div(Class: panel-footer){\n                Div(Class: clearfix){\n                    Include(pager)\n                }\n            }\n        }\n    }\n}.Else{\n    SetTitle($smart_contracts$)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n    }\n}",
            "Name": "app_contracts",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(Class: content-wrapper){\n\n\tIf(#id# > 0){\n\t\tSetVar(action, Edit)\n\t}.Else{\n\t\tSetVar(action, Create)\n\t}\n\n    SetTitle(#action# Application)\n    Div(breadcrumb){\n\t\tDiv(){\n            LinkPage(Applications, apps_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(#action# Application, text-muted)\n        }\n    }\n\n    Div(Class: row){\n        Div(Class: col-md-12){\n\t\t\tForm(){\n\t\t\t\tIf(#id# > 0){\n\t\t\t\t\tDBFind(applications, src_apps).Columns(\"id,name,conditions,deleted\").Where(\"id=#id#\").Limit(1).Vars(\"app\")\n\t\t\t\t\tDiv(Class: col-md-12){\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tLabel(LangRes(name))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tInput(Class: form-control, Type: text, Name: name, Disabled: \"true\", Value: #app_name#)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tLabel(Change Conditions)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tInput(Class: form-control, Type: text, Name: conditions, Value: #app_conditions#)\n\t\t\t\t\t\t}\n                        Div(Class: row){\n                            Div(Class: form-group){\n                                Div(Class: text-left col-md-6){\n                                    Button(Body: Save, Class: btn btn-primary, Page: apps_list, Contract: EditApplication, Params: \"ApplicationId=#id#,Conditions=Val(conditions)\")\n                                }\n                                Div(Class: text-right col-md-6){\n                                    If(#app_deleted# == 0){\n                                        Button(Body: Delete, Class: btn btn-danger, Page: apps_list, Contract: DelApplication, Params: \"ApplicationId=#app_id#,Value=1\")\n                                    }\n                                }\n                            }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}.Else{\n\t\t\t\t\tDBFind(\"menu\",Source: src_menu).WhereId(#edit_property_id#).Vars(menu)\n\t\t\t\t\tDiv(Class: col-md-12){\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tLabel(LangRes(name))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tInput(Class: form-control, Type: text, Name: name)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tLabel(Change Conditions)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tInput(Class: form-control, Type: text, Name: conditions)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tButton(Body: Save, Class: btn btn-primary, Page: apps_list, Contract: NewApplication, Params: \"Name=Val(name),Conditions=Val(conditions)\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n}",
            "Name": "app_edit",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\n\nIf(#buffer_value_app_id# > 0){\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Limit(1).Vars(\"app\")\n\n    Div(content-wrapper){\n        SetTitle($langres$: #app_name#)\n        AddToolButton(Title: $create$, Page: langres_res_add, Icon: icon-plus, PageParams: \"app_id=#app_id#\")\n        \n        If(#current_page# > 0){\n        }.Else{\n            SetVar(current_page, 1)\n        }\n        SetVar(admin_page, app_langres)\n        Include(admin_link)\n\n        Include(pager_header)\n        SetVar(pager_table, languages)\n        SetVar(pager_where, \"app_id=#buffer_value_app_id#\")\n        SetVar(pager_page, app_langres)\n        SetVar(pager_limit, 50)\n\n        DBFind(languages, src_languages).Limit(50).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n        \n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    ForList(src_languages){\n                        Div(col-md-#width# col-sm-12){\n                            Div(list-group-item){\n                                Div(row){\n                                    Div(col-md-4){\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n                                        Span(Class: h5, Body: \"#name#\")\n                                    }\n                                    Div(col-md-8){\n                                        Div(pull-right){\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: langres_edit, PageParams: \"lang_id=#id#\"))\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Div(Class: panel-footer){\n                Div(Class: clearfix){\n                    Include(pager)\n                }\n            }\n        }\n    }\n}.Else{\n    SetTitle($langres$)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n    }\n}",
            "Name": "app_langres",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\n\nIf(#buffer_value_app_id# > 0){\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Limit(1).Vars(\"app\")\n\n    Div(content-wrapper){\n        SetTitle($pages$: #app_name#)\n        AddToolButton(Title: $create$, Page: editor, Icon: icon-plus, PageParams: \"create=page,appId=#buffer_value_app_id#\")\n\n        If(#current_page# > 0){\n        }.Else{\n            SetVar(current_page, 1)\n        }\n        SetVar(admin_page, app_pages)\n        Include(admin_link)\n\n        Include(pager_header)\n        SetVar(pager_table, pages)\n        SetVar(pager_where, \"app_id=#buffer_value_app_id#\")\n        SetVar(pager_page, app_pages)\n        SetVar(pager_limit, 50)\n\n        DBFind(pages, src_pages).Limit(50).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    ForList(src_pages){\n                        Div(col-md-#width# col-sm-12){\n                            Div(list-group-item){\n                                Div(row){\n                                    Div(col-md-4){\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n                                        LinkPage(Page: #name#, Class: text-primary h5, Body: \"#name#\")\n                                    }\n                                    Div(col-md-8){\n                                        Div(pull-right){\n                                            SetVar(type,\"page\")\n                                            Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=#type#\")).Style(margin-right: 15px;)\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=page,name=#name#\"))\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Div(Class: panel-footer){\n                Div(Class: clearfix){\n                    Include(pager)\n                }\n            }\n        }\n    }\n}.Else{\n    SetTitle($pages$)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n    }\n}",
            "Name": "app_pages",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\r\n\r\nIf(#buffer_value_app_id# > 0){\r\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Limit(1).Vars(\"app\")\r\n\r\n    Div(content-wrapper){\r\n        SetTitle($app_params$: #app_name#)\r\n        AddToolButton(Title: $create$, Page: app_params_edit, Icon: icon-plus, PageParams: \"app_id=#app_id#,create=create\")\r\n\r\n        If(#current_page# > 0){\r\n        }.Else{\r\n            SetVar(current_page, 1)\r\n        }\r\n        SetVar(admin_page, app_params)\r\n        Include(admin_link)\r\n\r\n        Include(pager_header)\r\n        SetVar(pager_table, app_params)\r\n        SetVar(pager_where, \"app_id=#buffer_value_app_id#\")\r\n        SetVar(pager_page, app_params)\r\n        SetVar(pager_limit, 50)\r\n\r\n        DBFind(app_params, src_appparameters).Limit(50).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\r\n\r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                Div(row){\r\n                    ForList(src_appparameters){\r\n                        Div(col-md-#width# col-sm-12){\r\n                            Div(list-group-item){\r\n                                Div(row){\r\n                                    Div(col-md-4){\r\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\r\n                                        Span(Class: h5, Body: \"#name#\")\r\n                                    }\r\n                                    Div(col-md-8){\r\n                                        Div(pull-right){\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: app_params_edit, PageParams: \"id=#id#\"))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: panel-footer){\r\n                Div(Class: clearfix){\r\n                    Include(pager)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    SetTitle($app_params$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\r\n    }\r\n}",
            "Name": "app_params",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(Class: fullscreen){\r\n    If(#create# == create){\r\n        SetTitle(New Application Parameter)\r\n        Div(Class: breadcrumb){\r\n            LinkPage(Application Parameters, app_params)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: New Application Parameter)\r\n        }\r\n    }.Else{\r\n        DBFind(app_params, src_params).Where(\"id = #id#\").Limit(1).Vars(\"param\")\r\n        SetTitle(Edit Application Parameter)\r\n        Div(Class: breadcrumb){\r\n            LinkPage(Application Parameters, app_params)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: #param_name#)\r\n        }\r\n    }\r\n    Div(Class: fullscreen-wrapper){\r\n        Form(){\r\n            Div(Class: form-group){\r\n                Label(For: name){\r\n                    Span(Body: Name)\r\n                }\r\n                If(#create# == create){\r\n                    Input(Name: name, Class: form-control)\r\n                }.Else{\r\n                    Input(Name: name, Class: form-control, Value: #param_name#, Disabled: \"true\")\r\n                }\r\n            }\r\n            Div(Class: form-group){\r\n                If(#create# == create){\r\n                    Input(Type: textarea, Name: value).Style(height: 500px !important;)\r\n                }.Else{\r\n                    Input(Type: textarea, Name: value, Value: \"#param_value#\" ).Style(height: 500px !important;)\r\n                }\r\n            }\r\n            Div(Class: mb0 form-group){\r\n                Label(For: conditions){\r\n                    Span(Body: Change Conditions)\r\n                }\r\n                If(#create# == create){\r\n                    Input(Name: conditions, Class: form-control)\r\n                }.Else{\r\n                    Input(Name: conditions, Class: form-control, Value: #param_conditions#)\r\n                }\r\n            }\r\n            Div(Class: mt-lg){\r\n                If(#create# == create){\r\n                    Button(Class: btn btn-primary, Body: Save, Contract: NewAppParam, Params: \"Name=Val(name),Value=Val(value),Conditions=Val(conditions),ApplicationId=#app_id#\",Page: app_params)\r\n                }.Else{\r\n                    Button(Class: btn btn-primary, Body: Save, Contract:EditAppParam, Params: \"Id=#id#,Value=Val(value),Conditions=Val(conditions)\", Page: app_params)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "app_params_edit",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\n\nIf(#buffer_value_app_id# > 0){\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Limit(1).Vars(\"app\")\n\n    Div(content-wrapper){\n        SetTitle($tables$: #app_name#)\n        AddToolButton(Title: $create$, Page: table_create, Icon: icon-plus, PageParams: \"app_id=#app_id#\")\n\n        If(#current_page# > 0){\n        }.Else{\n            SetVar(current_page, 1)\n        }\n        SetVar(admin_page, app_tables)\n        Include(admin_link)\n\n        Include(pager_header)\n        SetVar(pager_table, tables)\n        SetVar(pager_where, \"app_id=#buffer_value_app_id#\")\n        SetVar(pager_page, app_tables)\n        SetVar(pager_limit, 50)\n\n        DBFind(tables, src_tables).Limit(50).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    ForList(src_tables){\n                        Div(col-md-#width# col-sm-12){\n                            Div(list-group-item){\n                                Div(row){\n                                    Div(col-md-4){\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n                                        LinkPage(Page: table_view, Class: text-primary h5, Body: \"#name#\", PageParams: \"table_name=#name#\")\n                                    }\n                                    Div(col-md-8){\n                                        Div(pull-right){\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: table_edit, PageParams: \"tabl_id=#id#\"))\n                                        }\n                                        Div(pull-right){\n                                            DBFind(#name#).Columns(\"id\").Count(countvar)\n                                            Span(Class: h5 text-muted, Body: #countvar#).Style(margin-right: 50px;)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Div(Class: panel-footer){\n                Div(Class: clearfix){\n                    Include(pager)\n                }\n            }\n        }\n    }\n}.Else{\n    SetTitle($tables$)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n    }\n}",
            "Name": "app_tables",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(Class: content-wrapper){\n    SetTitle(Upload Binary data)\n    Div(breadcrumb){\n        LinkPage(Binary data, app_binary)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Upload Binary data, text-muted)\n    }\n    Div(Class: row){\n        Div(col-md-12){\n            Form(){\n                Div(Class: form-group){\n\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\tLabel(Name)\n\t\t\t\t\t}\n\t\t\t\t\tInput(Name: name, Placeholder: name)\n\t\t\t\t}\n                Div(Class: form-group){\n\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\tLabel(Binary data file)\n\t\t\t\t\t}\n\t\t\t\t\tInput(Name: databin, Type:file)\n\t\t\t\t}\n                Div(Class: form-group){\n\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t Button(Upload, Contract: UploadBinary, Class: btn btn-primary, Params: \"Name=Val(name),AppID=#app_id#,Data=Val(databin)\", Page: app_binary )\n\t\t\t\t\t}\n\t\t\t\t}\n            }       \n        } \n    }\n}",
            "Name": "app_upload_binary",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(Class: fullscreen){\n    If(#deleted# == deleted){\n        SetTitle(Deleted Applications)\n    }.Else{\n        SetTitle($applications$)\n        AddToolButton(Title: $deleted$, Page: apps_list, Icon: icon-close, PageParams:\"deleted=deleted\")\n        AddToolButton(Title: $create$, Page: app_edit, Icon: icon-plus)\n    }\n\tDiv(breadcrumb){\n        If(#deleted# == deleted){\n            LinkPage(Applications list , apps_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: Deleted applications)\n        }.Else{\n\t\t    Span(Class: text-muted, Body: \"This section is used to select installed applications\")\n        }\n\t}\n    If(#deleted# == deleted){\n        DBFind(applications, src_applications).Where(\"deleted=1\").Order(\"id\").Count(countvar).Custom(restore_btn){\n             Button(Class: btn btn-link, Page: apps_list, Contract: DelApplication, Params: \"ApplicationId=#id#\",Body: \"restore application\")\n        }\n        If(#countvar# > 0) {\n        Table(Source: src_applications, Columns: \"$id$=id,$name$=name,Conditions=conditions,=restore_btn\").Style(\n        tbody > tr:nth-of-type(odd) {\n            background-color: #fafbfc; \n        }\n        tbody > tr > td {\n            word-break: break-all;\n\n            font-weight: 400;\n            font-size: 13px;\n            color: #666;\n            border-top: 1px solid #eee;\n            vertical-align: middle;\n        }\n        tr  > *:first-child {\n            padding-left:20px;\n            width: 80px;\n        }\n        tr  > *:last-child {\n            padding-right:80px;\n            text-align:right; \n            width: 200px;\n        }\n        thead {\n            background-color: #eee;\n        })\n        }.Else{\n            Div(Class: content-wrapper){\n                Span(Class: text-muted, Body: \"You don't have any deleted applications\")\n            }\n        }\n    }.Else{\n        DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\n        DBFind(applications, src_applications).Where(\"deleted=0\").Order(\"id\").Custom(custom_check){\n            If(#id#==#buffer_value_app_id#){\n                Span(Em(Class: fa fa-check)).Style(margin-left:30px;)\n            }.Else{\n                Button(Class: btn btn-link, Contract: Export_NewApp, Params: \"app_id=#id#\", Page: apps_list, Body: \"select\")\n            }\n        }.Custom(custom_actions){\n            Button(Class: btn btn-link, Body: Em(Class: fa fa-edit), Page: app_edit, PageParams: \"id=#id#\")\n        }\n\n        Table(Source: src_applications, Columns: \"$id$=id,$name$=name,Conditions=conditions,Selected=custom_check,=custom_actions\").Style(\n        tbody > tr:nth-of-type(odd) {\n            background-color: #fafbfc; \n        }\n        tbody > tr > td {\n            word-break: break-all;\n\n            font-weight: 400;\n            font-size: 13px;\n            color: #666;\n            border-top: 1px solid #eee;\n            vertical-align: middle;\n        }\n        tr  > *:first-child {\n            padding-left:20px;\n            width: 80px;\n        }\n        tr  > *:last-child {\n            padding-right:15px;\n            text-align:right; \n            width: 200px;\n        }\n        thead {\n            background-color: #eee;\n        })\n    }\n}",
            "Name": "apps_list",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetTitle(Tables)\nDiv(breadcrumb){\n    Div(){\n        LinkPage(Tables, app_tables)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        LinkPage(Edit table, table_edit, PageParams:\"tabl_id=#tabl_id#\")\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Add column, text-muted)\n    }\n}\nDiv(Class: content-wrapper){\n    Div(Class: row){\n        Form(){\n            Div(Class: col-md-12){\n                Div(Class: panel panel-default){\n                    Div(Class: panel-body){\n                        Div(Class: col-md-12){\n                            Div(Class: form-group){\n                                Label(Column)\n                                Input(ColumnName,Type: text,Class: form-control)\n                            }\n                            Div(Class: form-group){\n                                Data(src_type,\"type,name\"){\n                                    text,\"Text\"\n                                    number,\"Number\"\n                                    varchar,\"Varchar\"\n                                    datetime,\"Date/Time\"\n                                    money,\"Money\"\n                                    double,\"Double\"\n                                    character,\"Character\"\n                                    json,\"JSON\"\n                                }\n                                Label(Type)\n                                Select(Name: Coltype, Source: src_type, NameColumn: name, ValueColumn: type,Value:\"text\")\n                            }\n                            Div(Class: form-group){\n                                Label(Update)\n                                Input(ColumnUp,Type: text,Class: form-control)\n                            }\n                        }   \n                    }\n                    Div(Class: panel-footer){\n                        Div(Class: clearfix){\n                            Div(Class: pull-left){\n                                Button(Add Column,Contract:NewColumn,Class:btn btn-primary,Page: table_edit, PageParams:\"tabl_id=#tabl_id#\",Params: \"TableName=#next_table_name#,Name=Val(ColumnName),Type=Val(Coltype),Permissions=Val(ColumnUp)\")\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "column_add",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetTitle(Edit column)\r\nDiv(breadcrumb){\r\n    Div(){\r\n        LinkPage(Tables, app_tables)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        LinkPage(Edit table, table_edit, PageParams:\"tabl_id=#tabl_id#\")\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Edit column, text-muted)\r\n    }\r\n}\r\nDiv(Class: content-wrapper){\r\n    Div(Class: row){\r\n        Form(){\r\n            DBFind(\"tables\",Source: src_mem).Columns(\"id,name,columns,conditions\").Vars(pre).WhereId(#tabl_id#)\r\n            JsonToSource(src_columns, #pre_columns#)\r\n            Div(Class: col-md-12){\r\n                Div(Class: panel panel-default){\r\n                    Div(Class: panel-body){\r\n                        Div(Class: col-md-12){\r\n                            ForList(src_columns){\r\n                                If(#key# == #name_column#){\r\n                                    Div(Class: form-group){\r\n                                        Label(Column)\r\n                                        Input(ColumnName,Type: text,Class: form-control,Disabled: \"true\",Value: #name_column#)\r\n                                    }\r\n                                    Div(Class: form-group){\r\n                                        Label(Type)\r\n                                        SetVar(col_type,GetColumnType(#pre_name#, #key#))\r\n                                        Input(Coltype,Type: text,Class: form-control,Disabled: \"true\",Value: #col_type#)\r\n                                    }\r\n                                    Div(Class: form-group){\r\n                                        Label(Update)\r\n                                        Input(ColumnUp,Type: text,Class: form-control,Value: #value#)\r\n                                    }\r\n                                }   \r\n                            }\r\n                        }\r\n                    }\r\n                    Div(Class: panel-footer){\r\n                        Div(Class: clearfix){\r\n                            Div(Class: pull-left){\r\n                                Button(Save,Contract:EditColumn,Class:btn btn-primary pull-right,Page: table_edit, PageParams:\"tabl_id=#tabl_id#\",Params: \"TableName=#pre_name#,Name=Val(ColumnName),Type=Val(Coltype),Permissions=Val(ColumnUp)\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "column_edit",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(Class: fullscreen){\n    SetTitle(Export)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"Payload was formed. You can download it now\")\n    }\n\n    DBFind(Name: binaries, Source: src_binaries).Where(\"name='export' and member_id=#key_id# and app_id=1\").Custom(app_name){\n        DBFind(Name: applications, Source: src_app).Where(\"id=#app_id#\").Vars(prefix)\n        Span(#prefix_name#)\n    }\n\n    Table(Source: src_binaries, \"$applications$=app_name,$download_link$=data\").Style(\n        tbody > tr:nth-of-type(odd) {\n            background-color: #fafbfc; \n        }\n        tbody > tr > td {\n            word-break: break-all;\n            font-weight: 400;\n            font-size: 13px;\n            color: #666;\n            border-top: 1px solid #eee;\n            vertical-align: middle;\n        }\n        tr  > *:first-child {\n            padding-left:20px;\n            width: 200px;\n        }\n        tr  > *:last-child {\n            padding-right:20px;\n            text-align:right;\n        }\n        thead {\n            background-color: #eee;\n        })\n}",
            "Name": "export_download",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n \n\tSetTitle(Export)\n\tDiv(Class: breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"Select the application which do you want to export and proceed to the payload generation process.\")\n\t}\n\n\tInclude(export_link)\n\n    DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export'and member_id=#key_id#\").Vars(buffer)\n\n    If(#buffer_value_app_id# > 0){\n        If(#res_type#==\"pages\"){\n            DBFind(pages, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\n        }\n        If(#res_type#==\"blocks\"){\n            DBFind(blocks, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\n        }\n        If(#res_type#==\"menu\"){\n            DBFind(menu, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"id in (#buffer_value_menu_id#)\").Order(\"id\")\n        }\n        If(#res_type#==\"parameters\"){\n            DBFind(app_params, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\n        }\n        If(#res_type#==\"languages\"){\n            DBFind(languages, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\n        }\n        If(#res_type#==\"contracts\"){\n            DBFind(contracts, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\n        }\n        If(#res_type#==\"tables\"){\n            DBFind(tables, src).Custom(cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Where(\"app_id = #buffer_value_app_id#\").Order(\"id\")\n        }\n    }\n\n    Div(row){\n        Div(col-md-9 col-md-offset-0){\n            Table(src, \"Key=id,Name=name,=cbox\").Style(\n            tbody > tr:nth-of-type(odd) {\n                background-color: #fafbfc; \n            } \n            tbody > tr > td {\n                word-break: break-all;\n                padding: 8px 20px !important;\n                font-weight: 400;\n                font-size: 13px;\n                color: #666;\n                border-top: 1px solid #eee;\n                vertical-align: middle;\n            } \n            tr  > *:first-child {\n                padding-left:20px;\n                width: 100px;\n            } \n            tr  > *:last-child {\n                text-align:right; \n                padding-right:20px;\n                width: 50px;\n            }\n            thead {\n                background-color: #eee;\n            })\n        }\n        Div(col-md-3 col-md-offset-0){\n\t\t\tInclude(export_info)\n        }\n    }\n}",
            "Name": "export_resources",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\n    DBFind(Name: buffer_data, Source: src_buffer).Columns(\"id,value->name,value->data\").Where(\"key='import' and member_id=#key_id#\").Vars(prefix)\n    DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_name,value->pages,value->pages_count,value->blocks,value->blocks_count,value->menu,value->menu_count,value->parameters,value->parameters_count,value->languages,value->languages_count,value->contracts,value->contracts_count,value->tables,value->tables_count\").Where(\"key='import_info' and member_id=#key_id#\").Vars(info)\n\n\tSetTitle(\"Import - #info_value_app_name#\")  \n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"Select payload that you want to import\")\n\t}\n\n    Div(panel panel-primary){\n        Div(list-group-item){\n            Div(row){\n                Div(col-md-10 mc-sm text-left){\n                    Span(Class: text-bold, Body: \"Pages\")\n                }\n                Div(col-md-2 mc-sm text-right){\n                    If(#info_value_pages_count# > 0){\n                        Span(Class: text-bold, Body: \"(#info_value_pages_count#)\")\n                    }.Else{\n                        Span(Class: text-muted, Body: \"(0)\")   \n                    }\n                } \n            }\n            Div(row){\n                Div(col-md-12 mc-sm text-left){\n                    If(#info_value_pages_count# > 0){\n                        Span(Class: h6, Body: \"#info_value_pages#\")\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(row){\n                Div(col-md-10 mc-sm text-left){\n                    Span(Class: text-bold, Body: \"Blocks\")\n                }\n                Div(col-md-2 mc-sm text-right){\n                    If(#info_value_blocks_count# > 0){\n                        Span(Class: text-bold, Body: \"(#info_value_blocks_count#)\")\n                    }.Else{\n                        Span(Class: text-muted, Body: \"(0)\")  \n                    }\n                } \n            }\n            Div(row){\n                Div(col-md-12 mc-sm text-left){\n                    If(#info_value_blocks_count# > 0){\n                        Span(Class: h6, Body: \"#info_value_blocks#\")\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(row df f-valign){\n                Div(col-md-10 mc-sm text-left){\n                    Span(Class: text-bold, Body: \"Menu\")\n                }\n                Div(col-md-2 mc-sm text-right){\n                    If(#info_value_menu_count# > 0){\n                        Span(Class: text-bold, Body: \"(#info_value_menu_count#)\")\n                    }.Else{\n                        Span(Class: text-muted, Body: \"(0)\") \n                    }\n                } \n            }\n            Div(row df f-valign){\n                Div(col-md-12 mc-sm text-left){\n                    If(#info_value_menu_count# > 0){\n                        Span(Class: h6, Body:\"#info_value_menu#\")\n                    }.Else{\n                        Span(Class: text-muted h6, Body:\"Nothing selected\")\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(row){\n                Div(col-md-10 mc-sm text-left){\n                    Span(Class: text-bold, Body: \"Parameters\")\n                }\n                Div(col-md-2 mc-sm text-right){\n                    If(#info_value_parameters_count# > 0){\n                        Span(Class: text-bold, Body: \"(#info_value_parameters_count#)\")\n                    }.Else{\n                        Span(Class: text-muted, Body: \"(0)\")  \n                    }\n                } \n            }\n            Div(row){\n                Div(col-md-12 mc-sm text-left){\n                    If(#info_value_parameters_count# > 0){\n                        Span(Class: h6, Body: \"#info_value_parameters#\")\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(row){\n                Div(col-md-10 mc-sm text-left){\n                    Span(Class: text-bold, Body: \"Language resources\")\n                }\n                Div(col-md-2 mc-sm text-right){\n                    If(#info_value_languages_count# > 0){\n                        Span(Class: text-bold, Body: \"(#info_value_languages_count#)\")\n                    }.Else{\n                        Span(Class: text-muted, Body: \"(0)\")  \n                    }\n                } \n            }\n            Div(row){\n                Div(col-md-12 mc-sm text-left){\n                    If(#info_value_languages_count# > 0){\n                        Span(Class: h6, Body: \"#info_value_languages#\")\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(row){\n                Div(col-md-10 mc-sm text-left){\n                    Span(Class: text-bold, Body: \"Contracts\")\n                }\n                Div(col-md-2 mc-sm text-right){\n                    If(#info_value_contracts_count# > 0){\n                        Span(Class: text-bold, Body: \"(#info_value_contracts_count#)\")\n                    }.Else{\n                        Span(Class: text-muted, Body: \"(0)\")  \n                    }\n                } \n            }\n            Div(row){\n                Div(col-md-12 mc-sm text-left){\n                    If(#info_value_contracts_count# > 0){\n                        Span(Class: h6, Body: \"#info_value_contracts#\")\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(row){\n                Div(col-md-10 mc-sm text-left){\n                    Span(Class: text-bold, Body: \"Tables\")\n                }\n                Div(col-md-2 mc-sm text-right){\n                    If(#info_value_tables_count# > 0){\n                        Span(Class: text-bold, Body: \"(#info_value_tables_count#)\")\n                    }.Else{\n                        Span(Class: text-muted, Body: \"(0)\")  \n                    }\n                } \n            }\n            Div(row){\n                Div(col-md-12 mc-sm text-left){\n                    If(#info_value_tables_count# > 0){\n                        Span(Class: h6, Body: \"#info_value_tables#\")\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n                }\n            }\n        }\n        If(#prefix_id# > 0){\n            Div(list-group-item text-right){\n                Button(Body: \"Import\", Class: btn btn-primary).CompositeContract(\"Import_CreateApp\", `[{}]`).CompositeContract(\"Import_New\", `#prefix_value_data#`)\n            }\n        }\n    }\n}",
            "Name": "import_app",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(Import)  \n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"Select payload that you want to import\")\n\t}\n\tDiv(panel panel-primary){\n\t\tForm(){ \n\t\t\tDiv(list-group-item){\n                Input(Name: input_file, Type: textarea)\n\t\t\t}\n\t\t\tDiv(list-group-item text-right){\n\t\t\t\tButton(Body: Load, Class: btn btn-primary, Contract: Import_Upload, Page: import_app)\n\t\t\t}\n\t\t}\n\t}\n}",
            "Name": "import_upload",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetTitle(Edit Language Resource)\r\nDiv(Class: breadcrumb){\r\n        LinkPage(Language Resources, app_langres)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: Edit localization)\r\n}\r\nDiv(Class: content-wrapper){\r\n    Div(Class: row){\r\n        Form(){\r\n            Div(Class: col-md-12){\r\n                Div(Class: panel panel-default){\r\n                    Div(Class: panel-body){\r\n                        DBFind(languages,Source: src_leng).Vars(pre).WhereId(#lang_id#)\r\n                        Div(Class: col-md-12){\r\n                            Div(Class: form-group  col-md-12){\r\n                                Label(Name)\r\n                                Input(LangName,Type: text,Class: form-control,Disabled: \"true\",Value:#pre_name#)\r\n                            }\r\n                            Div(Class: form-group col-md-1){\r\n                                Label(Class: text-muted,Body: Locale)\r\n                            }\r\n                            Div(Class: form-group col-md-10){\r\n                                Label(Class: text-muted,Body: Value)\r\n                            }\r\n                            Div(Class: form-group col-md-1){\r\n                                Label(Class: text-muted,Body: Action)     \r\n                            }\r\n                        }\r\n                        SetVar(json,#pre_res#) \r\n                        JsonToSource(pv, #json#)\r\n                        ForList(Source: pv){\r\n                            Div(Class: col-md-12){\r\n                                Div(Class: form-group col-md-1){\r\n                                    Input(Name:idshare, Class: \"form-control\",Value:#key#)\r\n                                }\r\n                                Div(Class: form-group col-md-10){\r\n                                    Input(Name:share,Class: \"form-control\",Value: #value#)\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#del# == 1){\r\n                            SetVar(next_count, Calculate( Exp: #count_sec# - 1, Type: int))\r\n                        }.Else{\r\n                            If(GetVar(count)==\"\"){\r\n                            SetVar(count, 0)\r\n                            SetVar(next_count, Calculate( Exp: #count#, Type: int))\r\n                            }.Else{\r\n                                SetVar(next_count, Calculate( Exp: #count_sec# + 1, Type: int))\r\n                            }\r\n                        }\r\n                        Range(params_range, 0, #next_count#)\r\n                        ForList(Source: params_range){\r\n                            Div(Class: col-md-12){\r\n                                Div(Class: form-group col-md-1){\r\n                                    Input(Name:idshare, Class: \"form-control\")\r\n                                    \r\n                                }\r\n                                Div(Class: form-group col-md-10){\r\n                                    Input(Name:share, Class: \"form-control\")\r\n                                }\r\n                                Div(Class: form-group col-md-1){\r\n                                    If(And(#next_count# == #params_range_index#, #next_count# > 0)){\r\n                                    Button(Em(Class: fa fa-trash),Class: btn btn-default,PageParams:\"lang_id=#lang_id#,count_sec=#next_count#,count=#count#,del=1\",Page:langres_edit)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        LinkPage(Add localization,Page:langres_edit,PageParams:\"lang_id=#lang_id#,count_sec=#next_count#,count=#count#\")\r\n                    }\r\n                    Div(Class: panel-footer){\r\n                        Div(Class: clearfix){\r\n                            Div(Class: pull-left){\r\n                                Button(Save,Class: btn btn-primary,Contract:@1EditLang,Params: \"Name=Val(LangName),Value=Val(share),IdLanguage=Val(idshare)\",Page: app_langres) \r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\t\t}\r\n\t}\r\n}",
            "Name": "langres_edit",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(Class: fullscreen){\n    SetTitle(Language Resources)\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: Language Resources)\n\t}\n    Div(Class: pull-right){\n        LinkPage(Body: Em(Class: icon icon-plus) Create localization, Page:langres_res_add, Class: ml btn-tool, PageParams: \"app_id=#app_id#\")\n    }.Style(\n        height: 45px;\n        padding-top: 10px;\n        a {\n            float: right;\n        }\n    )\n    Include(pager_header)\n    SetVar(pager_table, languages)\n    SetVar(pager_page, langres_list)\n    Div(Class: fullscreen){\n        DBFind(languages, src_languages).Order(id desc).Custom(custom_actions){\n            Span(){\n                Button(Class: btn btn-default, Body: Em(Class: fa fa-edit), PageParams: \"lang_name=#name#,lang_id=#id#,app_id=#app_id#\", Page: langres_edit)\n            }\n        }\n\n        Table(src_languages, \"Name=name,Resource=res,=custom_actions\").Style(\n            tbody > tr:nth-of-type(odd) {\n                background-color: #fafbfc; \n            } \n            tbody > tr > td {\n                word-break: break-all;\n                padding: 8px 20px !important;\n                font-weight: 400;\n                font-size: 13px;\n                color: #666;\n                border-top: 1px solid #eee;\n                vertical-align: middle;\n            } \n            tr  > *:first-child {\n                padding-left:20px;\n            } \n            tr  > *:last-child {\n                text-align:right; \n                padding-right:20px;\n                width: 300px;\n            }\n            thead {\n                background-color: #eee;\n            }\n        )\n        Include(pager)\n    }\n}",
            "Name": "langres_list",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetTitle(Create Language Resource)\r\nDiv(Class: breadcrumb){\r\n        LinkPage(Language Resources, app_langres, PageParams: \"app_id=#app_id#\")\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: Create localization)\r\n}\r\n    \r\nDiv(Class: content-wrapper){\r\n    Div(Class: row){\r\n        Form(){\r\n            Div(Class: col-md-12){\r\n                Div(Class: panel panel-default){\r\n                    Div(Class: panel-body){\r\n                        Div(Class: col-md-12){\r\n                            Div(Class: form-group  col-md-12){\r\n                                Label(Name)\r\n                                Input(LangName,Type: text,Class: form-control)\r\n                            }\r\n                            Div(Class: form-group col-md-1){\r\n                                Label(Class: text-muted,Body: Locale)\r\n                            }\r\n                            Div(Class: form-group col-md-10){\r\n                                Label(Class: text-muted,Body: Value)\r\n                            }\r\n                            Div(Class: form-group col-md-1){\r\n                                Label(Class: text-muted,Body: Action)     \r\n                            }\r\n                        }\r\n                        If(#del# == 1){\r\n                            SetVar(next_count, Calculate( Exp: #count_sec# - 1, Type: int))\r\n                        }.Else{\r\n                            If(GetVar(count)==\"\"){\r\n                            SetVar(count, 0)\r\n                            SetVar(next_count, Calculate( Exp: #count# + 1, Type: int))\r\n                            }.Else{\r\n                                SetVar(next_count, Calculate( Exp: #count_sec# + 1, Type: int))\r\n                            }\r\n                        }\r\n                        Range(params_range, 0, #next_count#)\r\n                        ForList(Source: params_range){\r\n                            Div(Class: col-md-12){\r\n                                Div(Class: form-group col-md-1){\r\n                                    Input(Name:idshare, Class: \"form-control\")\r\n                                    \r\n                                }\r\n                                Div(Class: form-group col-md-10){\r\n                                    Input(Name:share,Class: \"form-control\")\r\n                                }\r\n                                Div(Class: form-group col-md-1){\r\n                                    If(And(#next_count# == #params_range_index#, #next_count# > 1)){\r\n                                        Button(Body: Em(Class: fa fa-trash),Class: btn btn-default,PageParams:\"count_sec=#next_count#,count=#count#,del=1,app_id=#app_id#\",Page:langres_res_add)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        LinkPage(Add localization,Page:langres_res_add,PageParams:\"count_sec=#next_count#,count=#count#,app_id=#app_id#\")\r\n                    }\r\n                    Div(Class: panel-footer){\r\n                        Div(Class: clearfix){\r\n                            Div(Class: pull-left){\r\n                                Button(Body: Save, Class: btn btn-primary, Contract:@1NewLang, Page: app_langres,Params: \"ApplicationId=#app_id#,Name=Val(LangName),Value=Val(share),IdLanguage=Val(idshare)\") \r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\t\t}\r\n\t}\r\n}",
            "Name": "langres_res_add",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(Class: fullscreen){\n    SetTitle($menus$)\n    AddToolButton(Title: $create$, Page: editor, Icon: icon-plus, PageParams: \"create=menu,appId=0\")\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"This section is used to manage the menu\")\n\t}\n\n    DBFind(menu, src_menus).Limit(250).Order(\"id\").Custom(action){\n        Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=menu\")).Style(margin-right: 20px;)\n        Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=menu,name=#name#\"))\n    }\n\n    Table(src_menus, \"$id$=id,$name$=name,Title=title,Conditions=conditions,=action\").Style(\n    tbody > tr:nth-of-type(odd) {\n        background-color: #fafbfc; \n    }\n    tbody > tr > td {\n        word-break: break-all;\n        font-weight: 400;\n        font-size: 13px;\n        color: #666;\n        border-top: 1px solid #eee;\n        vertical-align: middle;\n    }\n    tr  > *:first-child {\n        padding-left:20px;\n        width: 80px;\n    }\n    tr  > *:last-child {\n        padding-right:30px;\n        text-align:right; \n        width: 200px;\n    }\n    thead {\n        background-color: #eee;\n    })\n}",
            "Name": "menus_list",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(#stylesheet# == stylesheet){\n    DBFind(parameters, src_params).Where(name='#stylesheet#').Vars(\"param\")\n}.Else{\n    If(#id#>0){\n        DBFind(parameters, src_params).WhereId(#id#).Vars(\"param\")\n    }.Else{\n        SetVar(param_name, New Ecosystem Parameter)\n    }\n}\nSetTitle(Ecosystem parameters)\n\nDiv(Class: fullscreen){\n    Div(Class: breadcrumb){\n        LinkPage(Ecosystem parameters, params_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: #param_name#)\n    }\n    Div(Class: fullscreen-wrapper){\n        Form(){\n            If(#param_id#>0){\n                Div(Class: form-group){\n                    Label(For: name){\n                        Span(Body: Name)\n                    }\n                    Input(Name: name, Class: form-control, Value: #param_name#, Disabled: \"true\")\n                }\n                Div(Class: form-group){\n                    Input(Type: textarea, Name: value, Value: \"#param_value#\").Style(height: 500px !important;)\n                }\n                Div(Class: mb0 form-group){\n                    Label(For: conditions){\n                        Span(Body: Change Conditions)\n                    }\n                    Input(Name: conditions, Class: form-control, Value: #param_conditions#)\n                }\n                Div(Class: mt-lg){\n                    Button(Class: btn btn-primary, Body: Save, Contract:EditParameter, Params: \"Id=#param_id#,Value=Val(value),Conditions=Val(conditions)\",Page:params_list)\n                }\n            }.Else{\n                Div(Class: form-group){\n                    Label(For: name){\n                        Span(Body: Name)\n                    }\n                    Input(Name: name, Class: form-control)\n                }\n                Div(Class: form-group){\n                    Input(Type: textarea, Name: value).Style(height: 500px !important;)\n                }\n                Div(Class: mb0 form-group){\n                    Label(For: conditions){\n                        Span(Body: Change Conditions)\n                    }\n                    Input(Name: conditions, Class: form-control)\n                }\n                Div(Class: mt-lg){\n                    Button(Class: btn btn-primary, Body: Save, Contract:NewParameter, Params: \"Name=Val(name),Value=Val(value),Conditions=Val(conditions)\",Page:params_list)\n                }\n            }\n        }\n    }\n}",
            "Name": "params_edit",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(Class: fullscreen){\r\n    SetTitle(Ecosystem parameters)\r\n    AddToolButton(Title: Manage stylesheet, Page: params_edit, Icon: icon-picture, PageParams:\"stylesheet=stylesheet\")\r\n    AddToolButton(Title: $create$, Page: params_edit, Icon: icon-plus)\r\n\tDiv(breadcrumb){\r\n        Span(Class: text-muted, Body: \"This section is used to configure stored reusable parameters\")\r\n    }\r\n\r\n    DBFind(parameters, src_appparameters).Order(\"id\").Custom(custom_actions){\r\n        LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: params_edit, PageParams: \"id=#id#\")\r\n    }\r\n    \r\n    Table(src_appparameters, \"$id$=id,Name=name,Application=app_id,Value=value,Conditions=conditions,=custom_actions\").Style(\r\n    tbody > tr:nth-of-type(odd) {\r\n        background-color: #fafbfc; \r\n    }\r\n    tbody > tr > td {\r\n        word-break: break-all;\r\n        font-weight: 400;\r\n        font-size: 13px;\r\n        color: #666;\r\n        border-top: 1px solid #eee;\r\n        vertical-align: middle;\r\n    }\r\n    tr  > *:first-child {\r\n        padding-left:20px;\r\n        width: 80px;\r\n    }\r\n    tr  > *:last-child {\r\n        padding-right:30px;\r\n        text-align:right; \r\n        width: 200px;\r\n    }\r\n    thead {\r\n        background-color: #eee;\r\n    })\r\n}",
            "Name": "params_list",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(Class: content-wrapper){\n\tSetTitle(Edit Properties)\n\tDiv(breadcrumb){\n\t\tDiv(){\n\t\t\tIf(#type# == page){\n\t\t\t\tLinkPage(Pages, app_pages)\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\t\tSpan(Edit page properties, text-muted)\n\t\t\t}\n\t\t\tIf(#type# == contract){\n\t\t\t\tLinkPage(Contracts, app_contracts)\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\t\tSpan(Edit contract properties, text-muted)\n\t\t\t}\n            If(#type# == block){\n\t\t\t\tLinkPage(Blocks, app_blocks)\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\t\tSpan(Edit block properties, text-muted)\n\t\t\t}\n\t\t\tIf(#type# == menu){\n\t\t\t\tLinkPage(Menu, menus_list)\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\t\tSpan(Edit menu properties, text-muted)\n\t\t\t}\n\t\t}\n\t}\n    Div(Class: row){\n        Div(col-md-12){\n\t\t\tIf(#type# == page){\n\t\t\t\tForm(){\n\t\t\t\t\tDBFind(\"pages\",Source: src_page).WhereId(#edit_property_id#).Vars(page)\n\t\t\t\t\tDiv(Class: col-md-12){\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tLabel(Name)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tInput(Name: Name,Value: #page_name#,Disabled: \"true\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tLabel(Menu)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDBFind(menu, src_menus)\n\t\t\t\t\t\t\tSelect(Name: Menu, Source: src_menus, NameColumn: name, ValueColumn: name, Value: #page_menu#)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tLabel(Change conditions)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tInput(Name: Conditions,Class: form-control, Type: text,Value: #page_conditions#)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tButton(Body: Save, Class: btn btn-primary, Page: app_pages, Contract: EditPage, Params: \"Menu=Val(Menu),Conditions=Val(Conditions),Id=#edit_property_id#\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n            If(#type# == contract){\n\t\t\t\tForm(){\n\t\t\t\t\tDBFind(\"contracts\",Source: src_contract).WhereId(#edit_property_id#).Vars(contract)\n\t\t\t\t\tDiv(Class: col-md-12){\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tLabel(Name)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tInput(Name: Name,Value: #contract_name#,Disabled: \"true\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tLabel(Change conditions)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tInput(Name: Conditions,Class: form-control, Type: text,Value: #contract_conditions#)\n\t\t\t\t\t\t}\n                        Div(Class: form-group){\n\t\t\t\t\t\t \tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tLabel(Wallet)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(Class: row){\n                            \tDiv(Class: col-md-10){\n                                \tInput(Name: Wallet,Value: Address(#contract_wallet_id#))\n                            \t}\n                            \tDiv(Class: col-md-2){\n\t\t\t\t\t\t\t\t\tIf(#contract_active# == 0){\n                                \t\tButton(Body: Bind,Class: btn btn-primary btn-block,Contract: ActivateContract, Params: \"Id=#edit_property_id#\", Page:properties_edit, PageParams: \"edit_property_id=#edit_property_id#,type=#type#\")\n\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\tButton(Body: Unbind,Class: btn btn-primary btn-block,Contract: DeactivateContract, Params: \"Id=#edit_property_id#\", Page:properties_edit, PageParams: \"edit_property_id=#edit_property_id#,type=#type#\")\n\t\t\t\t\t\t\t\t\t}\n                            \t}\n\t\t\t\t\t\t\t}\n                        }\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tButton(Body: Save, Class: btn btn-primary, Page: app_contracts, Contract: EditContract, Params: \",Conditions=Val(Conditions),WalletId=Val(Wallet),Id=#edit_property_id#\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t            }\n            }\n\t\t\tIf(#type# == block){\n\t\t\t\tForm(){\n\t\t\t\t\tDBFind(\"blocks\",Source: src_block).WhereId(#edit_property_id#).Vars(block)\n\t\t\t\t\tDiv(Class: col-md-12){\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tLabel(Name)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tInput(Name: Name,Value: #block_name#,Disabled: \"true\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tLabel(Change conditions)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tInput(Name: Conditions,Class: form-control, Type: text,Value: #block_conditions#)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tButton(Body: Save, Class: btn btn-primary, Page: app_blocks, Contract: EditBlock, Params: \"Conditions=Val(Conditions),Id=#edit_property_id#\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tIf(#type# == menu){\n\t\t\t\tForm(){\n\t\t\t\t\tDBFind(\"menu\",Source: src_menu).WhereId(#edit_property_id#).Vars(menu)\n\t\t\t\t\tDiv(Class: col-md-12){\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tLabel(Name)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tInput(Name: Name,Value: #menu_name#,Disabled: \"true\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tLabel(Menu title)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tInput(Name: Title,Class: form-control, Type: text,Value: #menu_title#)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tLabel(Change conditions)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tInput(Name: Conditions,Class: form-control, Type: text,Value: #menu_conditions#)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(Class: form-group){\n\t\t\t\t\t\t\tDiv(Class: text-left){\n\t\t\t\t\t\t\t\tButton(Body: Save, Class: btn btn-primary, Page: menus_list, Contract: EditMenu, Params: \"Conditions=Val(Conditions),Id=#edit_property_id#,NameTitle=Val(Title)\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        }\n    }\n}",
            "Name": "properties_edit",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetTitle(Create table)\r\nDiv(breadcrumb){\r\n    Div(){\r\n        LinkPage(Tables, app_tables)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Create, text-muted)\r\n    }\r\n}\r\nDiv(Class: content-wrapper){\r\n    Div(Class: row){\r\n        Form(){\r\n            Div(Class: col-md-12){\r\n                Div(Class: panel panel-default){\r\n                    Div(Class: panel-body){\r\n                        Div(Class: col-md-12){\r\n                            Div(Class: form-group  col-md-12){\r\n                                Label(Name)\r\n                                Input(TableName,Type: text,Class: form-control)\r\n                            }\r\n                            Div(Class: form-group col-md-4){\r\n                                Label(Class: text-muted,Body: Columns)\r\n                                Input(Name:disinp, Class: \"form-control\",Disabled:\"true\",Value:\"id\")\r\n                            }\r\n                            Div(Class: form-group col-md-7){\r\n                                Label(Class: text-muted,Body: Type)\r\n                                Input(Name:disinp, Class: \"form-control\",Disabled:\"true\",Value:\"Number\")\r\n                            }\r\n                            Div(Class: form-group col-md-1){\r\n                                Label(Class: text-muted,Body: Action)     \r\n                            }\r\n                        }\r\n                        Data(src_type,\"type,name\"){\r\n                            text,\"Text\"\r\n                            number,\"Number\"\r\n                            varchar,\"Varchar\"\r\n                            datetime,\"Date/Time\"\r\n                            money,\"Money\"\r\n                            double,\"Double\"\r\n                            character,\"Character\"\r\n                            json,\"JSON\"\r\n                        }\r\n                        If(#del# == 1){\r\n                            SetVar(next_count, Calculate( Exp: #count_sec# - 1, Type: int))\r\n                        }.Else{\r\n                            If(GetVar(count)==\"\"){\r\n                            SetVar(count, 0)\r\n                            SetVar(next_count, Calculate( Exp: #count# + 1, Type: int))\r\n                            }.Else{\r\n                                SetVar(next_count, Calculate( Exp: #count_sec# + 1, Type: int))\r\n                            }\r\n                        }\r\n                        Range(params_range, 0, #next_count#)\r\n                        ForList(Source: params_range){\r\n                            Div(Class: col-md-12){\r\n                                Div(Class: form-group col-md-4){\r\n                                    Input(Name:idshare, Class: \"form-control\")\r\n                                }\r\n                                Div(Class: form-group col-md-7){\r\n                                    Select(Name: share, Source: src_type, NameColumn: name, ValueColumn: type,Value:\"text\")\r\n                                }\r\n                                Div(Class: form-group col-md-1){\r\n                                    If(And(#next_count# == #params_range_index#, #next_count# > 1)){\r\n                                    Button(Body: Em(Class: fa fa-trash),Class: btn btn-default,PageParams:\"count_sec=#next_count#,count=#count#,del=1,app_id=#app_id#\",Page:table_create)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(Class: panel-footer){\r\n                        Div(Class: clearfix){\r\n                            Div(Class: pull-left){\r\n                                Button(Add Column,Contract:,Class:btn btn-primary,Page:table_create,PageParams:\"count_sec=#next_count#,count=#count#,app_id=#app_id#\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: col-md-6){\r\n                Div(Class: panel panel-default){\r\n                    Div(Class: panel-heading,Body: Write permissions)\r\n                    Div(Class: panel-body){\r\n                        Div(Class: form-group){\r\n                            Label(Insert)\r\n                            Input(Name: Insert_con,Type: text, Value: ContractConditions(\"MainCondition\"))\r\n                        }\r\n                        Div(Class: form-group){\r\n                            Label(Update)\r\n                            Input(Name: Update_con,Type: text, Value: ContractConditions(\"MainCondition\"))\r\n                        }\r\n                        Div(Class: form-group){\r\n                            Label(New column)\r\n                            Input(Name: New_column_con,Type: text, Value: ContractConditions(\"MainCondition\"))\r\n                        }\r\n                    }\r\n                    Div(Class: panel-footer){\r\n                        Div(Class: text-right){\r\n                            Button(Save,Class: btn btn-primary,Contract:@1NewTable,Page:app_tables,Params: \"Shareholding=Val(share),Id=Val(idshare),ApplicationId=#app_id#\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "table_create",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetTitle(Tables)\r\nDiv(breadcrumb){\r\n    Div(){\r\n        LinkPage(Tables, app_tables)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Edit, text-muted)\r\n    }\r\n}\r\nDiv(Class: content-wrapper){\r\n    Div(Class: row){\r\n        Form(){\r\n            Div(Class: col-md-12){\r\n                Div(Class: panel panel-default){\r\n                    Div(Class: panel-body){\r\n                        Div(Class: table-responsive){\r\n                            Div(Class: col-md-12){  \r\n                                DBFind(\"tables\",Source: src_mem).Columns(\"id,name,columns,conditions,permissions->insert,permissions->update,permissions->new_column\").Vars(pre).WhereId(#tabl_id#)\r\n                                JsonToSource(src_columns, #pre_columns#)\r\n                                Div(Class: table){\r\n                                    Div(Class: row){\r\n                                        Div(Class: col-md-3 h4){\r\n                                            Label(Name)\r\n                                        }\r\n                                        Div(Class: col-md-3 h4){\r\n                                            Label(Type)\r\n                                        }\r\n                                        Div(Class: col-md-5 h4){\r\n                                            Label(Conditions)\r\n                                        }\r\n                                        Div(Class: col-md-1 h4){\r\n                                            Label(Action)\r\n                                        }\r\n                                    }\r\n                                    ForList(src_columns){\r\n                                        Div(list-group-item){\r\n                                            Div(Class: row){\r\n                                                Div(Class: col-md-3 h5){\r\n                                                    Span(#key#)\r\n                                                }\r\n                                                Div(Class: col-md-3 h5){\r\n                                                    SetVar(col_type,GetColumnType(#pre_name#, #key#))\r\n                                                    Span(Body: #col_type#)\r\n                                                }\r\n                                                Div(Class: col-md-5 h5){\r\n                                                    Span(#value#)\r\n                                                }\r\n                                                Div(Class: col-md-1){\r\n                                                    Button(Body: Edit, Class: btn btn-primary,Page: column_edit, PageParams: \"name_column=#key#,tabl_id=#tabl_id#\")\r\n                                                }\r\n                                            }  \r\n                                        }\r\n                                    }\r\n                                }                           \r\n                            }\r\n                        }\r\n                    }\r\n                    Div(Class: panel-footer){\r\n                        Div(Class: clearfix){\r\n                            Div(Class: pull-left){\r\n                                Button(Add Column,Class:btn btn-primary pull-right,Page:column_add,PageParams:\"next_table_name=#pre_name#,tabl_id=#tabl_id#\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: col-md-6){\r\n                Div(Class: panel panel-default){\r\n                    Div(Class: panel-heading,Body: Write permissions)\r\n                    Div(Class: panel-body){\r\n                        Div(Class: form-group){\r\n                            Label(Insert)\r\n                            Input(Name: Insert_con,Type: text, Value: #pre_permissions_insert#)\r\n                        }\r\n                        Div(Class: form-group){\r\n                            Label(Update)\r\n                            Input(Name: Update_con,Type: text, Value: #pre_permissions_update#)\r\n                        }\r\n                        Div(Class: form-group){\r\n                            Label(New column)\r\n                            Input(Name: New_column_con,Type: text, Value: #pre_permissions_new_column#)\r\n                        }\r\n                    }\r\n                    Div(Class: panel-footer){\r\n                        Div(Class: text-right){\r\n                            Button(Save,Class: btn btn-primary,Contract:@1EditTable,Page: app_tables,Params: \"Name=#pre_name#\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(Class: col-md-6){\r\n                Div(Class: panel panel-default){\r\n                    Div(Class: panel-heading,Body: Conditions for changing permissions)\r\n                    Div(Class: panel-body){\r\n                        Div(Class: form-group){\r\n                            Input(Name: Insert_condition,Disabled:\"true\",Type: text, Value: #pre_conditions#)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "table_edit",
            "Menu": "admin_menu"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(Class: content-wrapper){\r\n    SetTitle(Tables)\r\n\tDiv(breadcrumb){\r\n\t\tLinkPage(Tables, app_tables)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(#table_name#, text-muted)\r\n\t}\r\n    Div(Class: col-md-12){\r\n        Div(Class: panel panel-default){\r\n            Div(Class: panel-body){\r\n                Div(Class: table-responsive){\r\n                    Div(Class: col-md-12){\r\n                        DBFind(Name:#table_name#,Source: src_mem)\r\n                        Table(Source: src_mem)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "table_view",
            "Menu": "admin_menu"
        }
    ],
    "parameters": [],
    "tables": [
        {
            "Name": "buffer_data",
            "Columns": "[{\"name\":\"key\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"value\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}