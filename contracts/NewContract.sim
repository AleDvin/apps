contract NewContract {
    data {
        Value string
        Conditions string
        Wallet string "optional"
        TokenEcosystem int "optional"
    }
    conditions {
        ValidateCondition($Conditions, $ecosystem_id)
        $walletContract = $key_id
        if $Wallet {
            $walletContract = AddressToId($Wallet)
            if $walletContract == 0 {
                error Sprintf("wrong wallet %s", $Wallet)
            }
        }
        if !$TokenEcosystem {
            $TokenEcosystem = 1
        } else {
            if !SysFuel($TokenEcosystem) {
                warning Sprintf("Ecosystem %d is not system", $TokenEcosystem)
            }
        }
    }
    action {
        var root, id, i int
        var list array
        var name string
        list = ContractsList($Value)
        while i < Len(list) {
            if IsObject(list[i], $ecosystem_id) {
                name = list[i]
                i = Len(list)
            }
            i = i + 1
        }
        if Size(name) == 0 {
            root = CompileContract($Value, $ecosystem_id, $walletContract, $TokenEcosystem)
            id = DBInsert("contracts", "value,conditions, wallet_id, token_id", $Value, $Conditions, $walletContract, $TokenEcosystem)
            FlushContract(root, id, false)
            $result = id
        }
    }
    func price() int {
        return SysParamInt("contract_price")
    }
}