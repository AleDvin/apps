contract voting_CheckDecision {
    data {
        votingID int
    }

    conditions {
		$voting_map = DBFind("voting_instances").Where("id=$ and enddate < now()", $votingID).Row()
		if ($voting_map["id"] == nil){
			warning "Voting has not expired. Try again later, please"
		}
		if ( Int($voting_map["creator_id"]) != $key_id ){
			warning "Only creator the voting can check decision"
		}	
	
		$type_voting			 = Int($voting_map["type_voting"])					// type of voting - system or custom
		$number_voters           = Int($voting_map["number_voters"])                // number of participants who have already voted
		$optional_role_vacancies = Int($voting_map["optional_role_vacancies"])      // number of vacancies for the role
		$voting_name             = string($voting_map["name"])                      // voting name
		$quorum                  = Int($voting_map["quorum"])                       // quorum value
		$optional_role_id        = Int($voting_map["optional_role_id"])             // role id
		$contract_accept         = string($voting_map["optional_contract_accept"])  // contract accept 
		$contract_reject         = string($voting_map["optional_contract_reject"])  // contract reject 
		$flag_success			 = Int($voting_map["flag_success"])             	// flag of success
		$typedecision			 = Int($voting_map["typedecision"])       			// type of decision
		
		$chech_id = DBFind("voting_subject").Where("voting_id=$", $votingID).One("id")
		if ($chech_id == nil){
			warning "Subject of voting is not found"
		}
    }

    action {
		// if notifications have been sent, then close it
		var params string
		params = "notific_param=" + Str($votingID)	
		$ret_notifics = DBFind("notifications").Where("page_name=$ and page_params=$ and closed=$", "voting_view", params, 0)
		$i1 = 0
		while($i1 < Len($ret_notifics)){
			$vals_notifics = $ret_notifics[$i1] 
			Notifications_Single_Close("notific_id", Int($vals_notifics["id"]))
			$i1 = $i1 + 1
		} 

		//if the flag of success = true (enough participants to make a decision)
		if ($flag_success == 1){
			if ( ($typedecision == 1) || ($typedecision == 2) ){
				$number_inserts = 0     // number of candidates who have already been added (for comparison with the number of vacancies)
				$flag_decision = -1     // none of the candidates has been added yet
				
				$ret_subject = DBFind("voting_subject").Where("voting_id=$", $votingID).Order("number_accept DESC")
				$i2 = 0
				while($i2 < Len($ret_subject)){
					$vals_subject = $ret_subject[$i2]
										
					// if there are still vacancies
					if ($number_inserts < $optional_role_vacancies)
					{
						// calculate the percentage to compare it with the quorum
						$v_percent =  Int($vals_subject["number_accept"]) * 100 / $number_voters
						// if percentage >= quorum values, then this candidate must be added to the role
						if ($v_percent >= $quorum)
						{
							// get role name
							$role_name = DBFind(`roles_list`).Where("id=$", $optional_role_id).One("role_name")
							if ($role_name != nil){
								// add a candidate to the role
								DBInsert(`roles_assign`, `role_id,role_name,member_id,member_name,member_avatar,timestamp date_start,appointed_by_id,appointed_by_name`, 
									$optional_role_id, string($role_name), Int($vals_subject["member_id"]), string($vals_subject["member_name"]), string($vals_subject["member_avatar"]), $block_time, $votingID, $voting_name) 
								
								// increment of the counter of candidates
								$number_inserts = $number_inserts + 1
								// if at least one of the candidates was added to the role, then the voting decision is considered successful
								$flag_decision = 1
							}
						}
					}
					$i2 = $i2 + 1
				}
				
				DBUpdate(`voting_instances`, $votingID, `flag_decision`, $flag_decision)
			
				// starting optional contract
				if ($flag_decision == 1){
					if ($contract_accept != ""){
						var par map
						CallContract($contract_accept, par) 
					}
				}
				else{
					if ($contract_reject != ""){
						var par map
						CallContract($contract_reject, par) 
					}
				}
			}
			
			if ($typedecision == 3){
				$number_accept = DBFind(`voting_subject`).Where("voting_id=$", $votingID).One("number_accept")
				if ($number_accept != nil){
					// calculate the percentage to compare it with the quorum
					$v_percent =  Int($number_accept)  * 100 / $number_voters
					
					// if percentage >= quorum values, then this document will be approved
					if ($v_percent >= $quorum){
						$flag_decision = 1
					}
					// otherwise the document will be rejected
					else{
						$flag_decision = -1    
					}
					
					DBUpdate(`voting_instances`, $votingID, `flag_decision`, $flag_decision)
				
					// starting optional contract
					if ($flag_decision == 1){
						if ($contract_accept != ""){
							var par map
							CallContract($contract_accept, par) 
						}
					}
					else{
						if ($contract_reject != ""){
							var par map
							CallContract($contract_reject, par) 
						}
					}
				}
			}
			
			if ($typedecision == 4){
				$subject_map = DBFind("voting_subject").Where("voting_id=$", $votingID).Row()
				if ($subject_map["id"] != nil){
					$number_accept = Int($subject_map["number_accept"])
					
					// calculate the percentage to compare it with the quorum
					$v_percent =  $number_accept  * 100 / $number_voters
					
					// if percentage >= quorum values, then this document will be approved
					if ($v_percent >= $quorum){
						$flag_decision = 1
						
						$decisionTable  = string($subject_map["formal_decision_table"])
						$decisionId     = Int($subject_map["formal_decision_tableid"])
						$decisionColumn = string($subject_map["formal_decision_column"])
						$decisionValue  = string($subject_map["formal_decision_colvalue"])
						
						// type of voting - custom
						if ($type_voting == 1){
							// ALWAYS CHECK THE PERMISSION
							DBUpdate($decisionTable, $decisionId, $decisionColumn, $decisionValue)
						}

						// type of voting - system
						if ($type_voting == 2){
							DBUpdateSysParam($decisionColumn, $decisionValue, ``)
						}
					}
					// otherwise the document will be rejected
					else{
						$flag_decision = -1    
					}
					
					DBUpdate(`voting_instances`, $votingID, `flag_decision`, $flag_decision)
				
					// starting optional contract
					if ($flag_decision == 1){
						if ($contract_accept != ""){
							var par map
							CallContract($contract_accept, par) 
						}
					}
					else{
						if ($contract_reject != ""){
							var par map
							CallContract($contract_reject, par) 
						}
					}
				}
			}
			
			if ($typedecision == 5){
				$subject_map = DBFind("voting_subject").Where("voting_id=$", $votingID).Row()
				if ($subject_map["id"] != nil){
					$number_accept = Int($subject_map["number_accept"])
					
					// calculate the percentage to compare it with the quorum
					$v_percent =  $number_accept  * 100 / $number_voters
					
					$con_accept  = string($subject_map["contract_accept"])
					$con_reject  = string($subject_map["contract_reject"])    
					
					// if percentage >= quorum values, then this document will be approved
					if ($v_percent >= $quorum){
						$flag_decision = 1
						
						var par map
						CallContract($con_accept, par)
					}
					// otherwise the document will be rejected
					else{
						$flag_decision = -1  

						var par map
						CallContract($con_reject, par)  						
					}
				}
				
				DBUpdate(`voting_instances`, $votingID, `flag_decision`, $flag_decision)
			}
		}
		// decision can not be made (not enough participants to make a decision)
		else {
			DBUpdate(`voting_instances`, $votingID, `flag_decision`, -2)   
		}
    }
}