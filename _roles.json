{
    "name": "Basic application",
    "data": [
        {
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:$roles$, Page:roles_list, Icon:\"fa fa-list-ul\")",
            "Name": "default_menu",
            "Type": "menu"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "assigned_role,elective_role,system_role,company_role",
            "Name": "roles_types",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div()",
            "Name": "default_ecosystem_page",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(applications,src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\n    If(#v_role_id#>0){\n        DBFind(roles,src_roles).Columns(\"id,role_name,role_type,roles_access->rids,creator->member_id\").Where(\"id=#v_role_id#\").Vars(prefix)\n\n        If(#prefix_creator_member_id#==#key_id#){\n            SetVar(manager_id,1)\n        }.ElseIf(#prefix_roles_access_rids#!=\"\"){\n            DBFind(roles).Columns(\"id\").Where(\"id in (#prefix_roles_access_rids#) and id=#role_id#\").Vars(manager)\n        }.Else{\n            SetVar(manager_id,0)\n        }\n        SetTitle($assign$)\n        Div(breadcrumb){\n            LinkPage($roles$, roles_list)\n            Span(/,mh-sm)\n            LinkPage(#prefix_role_name#, roles_view,, \"v_role_id=#v_role_id#\")\n            Span(/,mh-sm).($assign$,text-muted)\n        }\n\n        Div(row){\n            Div(col-md-6 col-md-offset-3){\n                Form(panel panel-primary){\n                    Div(panel-heading){LangRes(assign)}\n                    Div(panel-body){\n                        Div(list-group-item){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(role))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Type: hidden, Name: rid, Value: #prefix_id#)\n                                    SetVar(Name: var_prefix_role_name, Value: LangRes(#prefix_role_name#))\n                                    Input(Name: input_prefix_role_name, Value: #var_prefix_role_name#, Disabled: true)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        LangRes(type) Span(*,text-danger)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    SetVar(Name: var_prefix_role_type, Value: AppParam(App:#application_id#, Name: roles_types, Index: #prefix_role_type#))\n                                    Input(Name: input_prefix_role_type, Value: #var_prefix_role_type#, Disabled: true)\n                                    If(#manager_id#==0){\n                                        P(Class: m0 text-danger h6, Body: LangRes(appointment_impossible))\n                                    }\n                                }\n                            }\n                            If(#manager_id#>0){\n                                Div(row){\n                                    Div(col-md-3 mt-sm text-right){\n                                        Label(){\n                                            Span(Body: LangRes(member)).(Class: text-danger, Body:*)\n                                        }\n                                    }\n                                    Div(col-md-9 text-left){\n                                        DBFind(members,source_members).Columns(\"id,member_name\").Custom(custom_username){\n                                            #member_name# (Address(#id#) )\n                                        }\n                                        Select(Name: member_id, Source: source_members, NameColumn: custom_username, ValueColumn: id)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: roles_view, PageParams: \"v_role_id=#v_role_id#\")\n                        If(#manager_id#>0){\n                            Button(Body: LangRes(assign), Class: btn btn-primary, Page: roles_view, PageParams: \"v_role_id=#v_role_id#\", Contract: Roles_Assign, Params: \"member_id=Val(member_id)\").Alert(Text: $want_assign_member_to_role$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Name": "roles_assign",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\nDBFind(roles, src_roles).Columns(\"role_name,id\").Where(\"deleted=0\").Order(id)\n\nIf(GetVar(role_name)){}.Else{SetVar(role_name,)}\nIf(GetVar(role_type)){}.Else{SetVar(role_type,1)}\n\nIf(GetVar(rid)){\n    DBFind(roles).Where(\"id=#rid#\").Columns(\"roles_access->rids,id,role_type,role_name\").Vars(rid)\n    SetVar(title,$edit_role$).(role_type,\"AppParam(App:#application_id#, Name: roles_types, Index: #rid_role_type#)\")\n\n    If(#rid_roles_access_rids#!=\"\"){\n        DBFind(roles,src_roles_access).Columns(\"id,role_name\").Where(\"id in (#rid_roles_access_rids#)\").Order(role_name)\n    }\n    DBFind(roles,src_roles).Columns(\"id,role_name\").Where(\"deleted=0\").Order(id)\n    Data(form, \"Name,Res,Type,Src,Val\"){\n        role_name,name,text,,#role_name#\n        roles_types,type,app_param,,#rid_role_type#\n        roles_managers,roles_managers,rids,src_roles,\n    }\n}.Else{\n    AppParam(App:#application_id#, Name: roles_types, Source: app_roles_types)\n    SetVar(rid,0).(title,$new_role$)\n    Data(form, \"Name,Res,Type,Req,Src,Val\"){\n        role_name,name,input,*,\"\",#role_name#\n        role_type,type,select,*,app_roles_types,#role_type#\n    }\n}\nSetTitle(#title#)\nIf(And(#role_name#==\"\",#rid_id#>0)){\n    SetVar(role_name,#rid_role_name#).(role_type,#rid_role_type#)\n}\n\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage($roles$, roles_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: #title#)\n    }\n    Div(container){\n        Div(row){\n            Div(col-md-8 col-md-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-heading){#title#}\n                    Div(panel-body){\n                        ForList(form){\n                            Div(row form-group){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(For:#Name#){\n                                        LangRes(#Res#)\n                                        If(#Req#==\"*\"){\n                                            Span(*,text-danger)\n                                        }\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    If(#Type#==input){\n                                        Input(Name: #Name#, Value:#Val#).Validate(minLength:3, maxLength:30)\n                                        InputErr(Name: #Name#, minLength: $validate_role_name$, maxLength: $validate_role_name$)\n                                    }.ElseIf(#Type#==text){\n                                        Div(text-muted mt-sm){#Val#}\n                                    }.ElseIf(#Type#==app_param){\n                                        Div(text-muted mt-sm){\n                                            AppParam(App:#application_id#, Name: #Name#, Index: #Val#)\n                                        }\n                                    }.ElseIf(#Type#==select){\n                                        Select(Name: #Name#, Source: #Src#, NameColumn: name, ValueColumn: id, Value:#Val#)\n                                    }.ElseIf(#Type#==rids){\n                                        Div(input-group mb-sm){\n                                            Select(Name:#Name#, Source:#Src#, NameColumn:role_name, ValueColumn: id)\n                                            Div(input-group-btn){\n                                                Button(Class: btn btn-primary fa fa-plus, Page: roles_create, PageParams:\"role_name=Val(role_name),role_type=Val(role_type),rid=#rid#\", Contract:Roles_AccessManager, Params:\"Rid=#rid#,ManagerRid=Val(#Name#),Action=add\")\n                                            }\n                                        }\n                                        ForList(src_roles_access){\n                                            If(#id#==#role_id#){\n                                                Button(Class: btn btn-info mr-sm mb-sm, Page: roles_create, PageParams:\"role_name=Val(role_name),role_type=Val(role_type),rid=#rid#\", Contract:Roles_AccessManager, Params:\"Rid=#rid#,ManagerRid=#id#,Action=remove\", Body: Span(Class: fa fa-remove) #role_name#).Alert(Text: $want_delete_your_role_from_manager$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                                            }.Else{\n                                                Button(Class: btn btn-default mr-sm mb-sm, Page: roles_create, PageParams:\"role_name=Val(role_name),role_type=Val(role_type),rid=#rid#\", Contract:Roles_AccessManager, Params:\"Rid=#rid#,ManagerRid=#id#,Action=remove\"){\n                                                    Span(Class: fa fa-remove)\n                                                    #role_name#\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right clearfix){\n                        Div(pull-left){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: roles_list)\n                        }\n                        If(#rid_id#>0){}.Else{\n                            Button(Body: LangRes(create), Class: btn btn-primary, Page: roles_list, Contract: Roles_Create)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "roles_create",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\n    SetTitle($roles$)\n    AddToolButton(Title: $create$, Page: roles_create, Icon: icon-plus)\n\n    If(GetVar(search)){\n        SetVar(where,\"role_name='#search#'\")\n    }.Else{\n        SetVar(where,\"id>0\").(search,)\n    }\n\n    DBFind(Name: roles, Source: src_roles).Custom(_id){\n        JsonToSource(rids,#roles_access#)\n        If(#deleted# == 0){\n            SetVar(style_text,).(style_link,\"text-primary\")\n        }.Else{\n            SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\n        }\n        Span(Class: #style_text#, Body: #id#)\n    }.Custom(_creator){\n        If(#role_type#==3){\n        }.ElseIf(And(#creator.member_name#!=NULL,#creator.member_name#!=\"\")){\n            LinkPage(Class: #style_link# text-bold, Page: profile_view, PageParams: \"v_member_id=#creator.member_id#\"){\n                #creator.member_name#\n            }\n        }\n    }.Custom(_name){\n        LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#id#\"){\n            If(#image_id#>0){\n                Image(Src: Binary().ById(#image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\n                #role_name#\n            }.Else{\n                Div(){\n                    Span(Class: fa icon-settings fa-2x mr-sm).(#role_name#)\n                }.Style(display:flex; align-items:center;)\n            }\n        }\n    }.Custom(_date){\n        Div(#style_text# small){\n            Div(text-nowrap){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\n            Div(text-nowrap){DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\")}\n        }\n    }.Custom(_type){\n        Span(Class: #style_text#, Body: AppParam(App:#app_id#, Name: roles_types, Index: #role_type#))\n    }.Custom(_status){\n        Span(Class:#style_text#){\n            If(#deleted# == 0){\n                LangRes(active)\n            }.Else{\n                LangRes(deleted)\n            }\n        }\n    }.Custom(_access){\n        If(#creator.member_id#==#key_id#){\n            SetVar(access,done)\n        }.Else{\n            SetVar(access,)\n        }\n        If(#roles_access.rids#!=\"\"){\n            DBFind(roles, src_roles_list).Where(\"id in (#roles_access.rids#)\").Columns(\"id,role_name\").Count(access_count).Order(role_name)\n            Div(#style_text# breaker){\n                ForList(src_roles_list){\n                    If(And(#role_id#==#id#)){\n                        SetVar(access,done)\n                    }\n\n                    If(#access_count#!=#src_roles_list_index#){\n                        Span(\"#role_name#,\",mr-sm)\n                    }.Else{\n                        #role_name#\n                    }\n                }\n            }\n        }\n    }.Custom(_actions){\n        Div(text-right button-group text-nowrap){\n            If(#access#==\"done\"){\n                Button(Class: fa fa-edit btn btn-default, PageParams: \"rid=#id#\", Page: roles_create)\n                If(And(#deleted#==0,#role_type#!=3)){\n                    Button(Class: fa fa-trash btn btn-danger, Contract: Roles_Del, Params: \"rid=#id#\", Page: roles_list).Alert(Text: $sure_want_delete$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }.ElseIf(#deleted#==1){\n                    Button(Class: fa fa-recycle btn btn-info, Contract: Roles_Restore, Params: \"rid=#id#\", Page: roles_list)\n                }\n            }\n        }\n    }.Where(#where#).Order(\"deleted ASC, id ASC\").Columns(\"id,role_name,role_type,image_id,creator->member_id,creator->member_name,date_created,date_deleted,deleted,roles_access->rids\")\n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-12){\n                    Div(input-group){\n                        Div(input-group-addon mt-sm){\n                            LangRes(name)\n                        }\n                        Input(Name: search, Value: #search#)\n                        Div(input-group-btn){\n                            Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: roles_list, PageParams: \"search=Val(search)\")\n                        }\n                    }\n                }\n            }\n            Div(table-responsive){\n                Table(Source: src_roles, Columns: \"$id$=_id,$name$=_name,$type$=_type,$creator$=_creator,$created$ / $deleted$=_date,$status$=_status,$roles_access$=_access,=_actions\")\n            }\n            If(GetVar(search)){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: roles_list)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}.Style(\n    .inline {display:inline-block;}\n    .breaker {word-break: break-all;}\n)",
            "Name": "roles_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    \n    If(#v_role_id# > 0){\n        DBFind(Name: roles, Source: src_roles).Columns(\"role_name,role_type,deleted\").Where(\"id=#v_role_id#\").Vars(prefix)\n        \n        SetTitle($role$: #prefix_role_name#)\n        Div(breadcrumb){\n            LinkPage($roles$, roles_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: #prefix_role_name#)\n        }\n        \n        DBFind(Name: roles_participants, Source: src_participants).Columns(\"id,member->member_id,member->member_name,member->image_id,appointed->member_id,appointed->member_name,appointed->voting_id,appointed->voting_name,date_created,date_deleted,deleted\").Custom(custom_id){\n            If(#deleted# == 0){\n                SetVar(Name: style_text, Value: \"text-normal\")\n                SetVar(Name: style_link, Value: \"text-primary\")\n            }.Else{\n                SetVar(Name: style_text, Value: \"text-muted\")\n                SetVar(Name: style_link, Value: \"text-muted\")\n            }\n            Span(Class: #style_text#, Body: #id#)\n        }.Custom(custom_appointed){\n            If(Or(#appointed.member_id#>0,#appointed.member_id#<0)){\n                LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#appointed.member_id#\"){\n                    Span(Body: #appointed.member_name#)\n                }\n            }\n            If(#appointed.voting_id#>0){\n                LinkPage(Page: voting_view, PageParams: \"vID=#appointed.voting_id#\"){\n                    Span(Class: h5 text-bold, Body: #appointed.voting_name#)\n                }\n            }\n        }.Custom(custom_member){\n            LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#member.member_id#\"){\n                If(#member.image_id#>0){\n                    Image(Src: Binary().ById(#member.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                    Span(#member.member_name#)\n                }.Else{\n                    Div(){\n                        Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                        Span(#member.member_name#)\n                    }.Style(display:flex; align-items:center;)\n                }\n            }\n        }.Custom(custom_address){\n            Span(Class: #style_text#, Body: Address(#member.member_id#))\n        }.Custom(custom_date){\n            Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\n            Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\"))\n        }.Custom(custom_status){\n            If(#deleted# == 0){\n                Span(Class: #style_text#, Body: LangRes(active))\n            }.Else{\n                Span(Class: #style_text#, Body: LangRes(deleted))\n            }\n        }.Custom(actions){\n            Div(pull-right){\n                If(And(#deleted#==0,#prefix_role_type#!=3)){\n                    Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: Roles_Unassign, Params: \"row_id=#id#\", Page: roles_view, PageParams: \"v_role_id=#v_role_id#\").Alert(Text: $sure_want_delete$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }\n            }\n        }.Where(\"role->id='#v_role_id#'\").Order(\"deleted ASC, id ASC\")\n        \n        Form(panel panel-primary){\n            Div(panel-body){\n                Table(Source: src_participants, Columns: \"$id$=custom_id,$member$=custom_member,$address$=custom_address,$appointed$=custom_appointed,$appointed$ / $deleted$=custom_date,$status$=custom_status,=actions\")\n            }\n            Div(panel-footer text-right){\n                Button(Body: LangRes(back), Class: btn btn-default, Page: roles_list)\n                If(#prefix_deleted#==0){\n                    Button(Body: LangRes(assign), Class: btn btn-primary, Page: roles_assign, PageParams: \"v_role_id=#v_role_id#\")\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Name": "roles_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RoleConditions {\n    data{\n        role string\n    }\n    conditions {\n        if !DBFind(\"roles_participants\").Where(\"role->name=? and member->member_id=? and deleted=0\", $role, $key_id).Row() {\n            warning Sprintf(\"This action allowed only for role: %v\", $role)\n        }\n    }\n}",
            "Name": "RoleConditions",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_CheckAccess {\n    data {\n        rid int\n    }\n    conditions {\n        var role map\n        role = DBFind(\"roles\").Columns(\"id,role_name,deleted,roles_access->rids,role_type,creator->member_id,company_id\").Where(\"id=?\", $rid).Row()\n        if !role {\n            warning Sprintf(\"%v: Role not found\", $this_contract)\n        }\n        \n        if role[\"creator.member_id\"] == $key_id {\n            return\n        }\n\n        var rids rawRids array, i int\n        rawRids = Split(role[\"roles_access.rids\"], \",\")\n        while i < Len(rawRids){\n            if rawRids[i] > 0 {\n                rids = Append(rids, rawRids[i])\n            }\n            i=i+1\n        }\n        i=0\n        while i<Len(rids){\n            if rids[i] == $role_id {\n                return\n            }\n            i=i+1\n        }\n\n        if role[\"role_type\"] == 4 {\n            // company role\n            if role[\"company_id\"] == $key_id {\n                return\n            }else{\n                warning \"Sorry, you are not the creator of this company\"\n            }\n        }\n        warning Sprintf(\"Sorry, you don't have permission to change this role (%q)\", role[\"role_name\"])\n    }\n}",
            "Name": "Roles_CheckAccess",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_AccessManager {\n    data {\n        Action string\n        Rid int\n        ManagerRid string \"optional\"\n    }\n    func updateAccess(ra string){\n        var roles_access map\n        roles_access[\"rids\"] = ra\n        DBUpdate(\"roles\", $Rid, \"roles_access\", roles_access)\n    }\n    conditions {\n        Roles_CheckAccess(\"rid\", $Rid)\n\n        $ManagerRid = Int($ManagerRid)\n        $role = DBFind(\"roles\").Columns(\"id,roles_access->rids\").Where(\"id=?\", $Rid).Row()\n        if !$role {\n            warning \"Role not found\"\n        }\n        if $ManagerRid > 0{\n            if !DBFind(\"roles\").Where(\"id=?\", $ManagerRid).One(\"id\") {\n                warning \"Role not found\"\n            }\n        }\n        var ids array, i int\n        $ids = ids\n        ids = Split($role[\"roles_access.rids\"],\",\")\n        while i < Len(ids){\n            if ids[i] > 0 {\n                $ids = Append($ids, ids[i])\n            }\n            i=i+1\n        }\n    }\n\n    action {\n        if $Action == \"clean\"{\n            updateAccess(\"\")\n        }\n        if $ManagerRid > 0{\n            var i int, idsNew array\n            if $Action == \"remove\"{\n                while i<Len($ids){\n                    if $ids[i] != $ManagerRid{\n                        idsNew = Append(idsNew, $ids[i])\n                    }\n                    i=i+1\n                }\n                updateAccess(Join(idsNew, \",\"))\n            }\n            if $Action == \"add\"{\n                var double bool\n                while i<Len($ids){\n                    if $ids[i] == $ManagerRid{\n                        double = true\n                    }\n                    i=i+1\n                }\n                if !double {\n                    $ids = Append($ids, $ManagerRid)\n                }\n                updateAccess(Join($ids, \",\"))\n            }\n        }\n    }\n}",
            "Name": "Roles_AccessManager",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Assign {\n    data {\n        rid int\n        member_id int\n    }\n\n    conditions {\n        $role_map = DBFind(\"roles\").Columns(\"id,deleted,role_type,role_name,image_id,creator->member_id\").Where(\"id=?\", $rid).Row()\n        if !$role_map {\n            warning \"Role not found\"\n        }\n\n        $member_map = DBFind(\"members\").Where(\"id=?\", $member_id).Row()\n        if !$member_map {\n            warning \"Member not found\"\n        }\n\n        $appointer_map = DBFind(\"members\").Where(\"id=?\", $key_id).Row()\n        if !$appointer_map {\n            warning \"Appointer not found\"\n        }\n\n        if $role_map[\"deleted\"] == 1 {\n            warning \"This role has been deleted. The appointment of members is impossible\"\n        }\n\n        var specialRules map prev_contract string stack array\n        stack = JSONDecode(JSONEncode($stack))\n        prev_contract = stack[0]\n        if Len(stack)>2{\n            prev_contract = stack[Len(stack)-2]\n        }\n        specialRules[\"@1sysparams_AcceptValidator\"] = \"Validator\"\n        specialRules[\"@1sysparams_DelegateRefresh\"] = \"Delegate\"\n        specialRules[\"@1sysparams_CandidateValidatorRequest\"] = \"Candidate for validators\"\n        specialRules[\"@1voting_TemplateRun\"] = \"Investor with voting rights\"\n        specialRules[\"@1tokenrefund_Start\"] = \"Investor with voting rights\"\n        if specialRules[prev_contract] != $role_map[\"role_name\"] {\n            Roles_CheckAccess(\"rid\", $rid)\n        }\n\n        $assigned = DBFind(\"roles_participants\").Where(\"role->id=? and member->member_id=? and deleted=0\", $rid, $member_id).One(\"id\")\n    }\n\n    action {\n        if $assigned {\n            // do not re-assign and do not warning because this contract may be called for other\n            return\n        }\n        var role member appointed map\n        role[\"id\"] = $role_map[\"id\"]\n        role[\"type\"] = $role_map[\"role_type\"]\n        role[\"name\"] = $role_map[\"role_name\"]\n        role[\"image_id\"] = $role_map[\"image_id\"]\n\n        member[\"member_id\"] = $member_map[\"id\"]\n        member[\"member_name\"] = $member_map[\"member_name\"]\n        member[\"image_id\"] = $member_map[\"image_id\"]\n\n        appointed[\"member_id\"] = $appointer_map[\"id\"]\n        appointed[\"member_name\"] = $appointer_map[\"member_name\"]\n        appointed[\"image_id\"] = $appointer_map[\"image_id\"]\n\n        DBInsert(\"roles_participants\", \"role,member,appointed,timestamp date_created\", role, member, appointed, $block_time)\n    }\n}",
            "Name": "Roles_Assign",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Create {\n    data {\n        role_name string\n        role_type int\n        company_id string \"optional\"\n    }\n\n    conditions {\n        $company_id = Int($company_id)\n        // system role\n        if $role_type == 3 {\n            warning \"System role can not be created\"\n        }\n\n        // company role\n        if $role_type == 4 {\n            // check param\n            if $company_id == 0 {\n                warning \"On this page you can not create a role for the company. Go to the company's view page to create a role\"\n            }\n\n            // check creator of the company\n            if $company_id != $key_id {\n                warning \"Sorry, you are not the creator of this company\"\n            }\n        }\n\n        $member_map = DBFind(\"members\").Where(\"id=?\", $key_id).Row()\n        if !$member_map {\n            warning \"You are not a member of the ecosystem\"\n        }\n    }\n\n    action {\n        var creator map\n        creator[\"member_id\"] = $member_map[\"id\"]\n        creator[\"member_name\"] = $member_map[\"member_name\"]\n        creator[\"image_id\"] = $member_map[\"image_id\"]\n\n        if $role_type != 4 {\n            $company_id = 0\n        }\n        $result = DBInsert(\"roles\", \"role_name,role_type,creator,timestamp date_created,company_id\", $role_name, $role_type, creator, $block_time, $company_id)\n    }\n}",
            "Name": "Roles_Create",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Unassign {\n    data {\n        row_id int\n    }\n\n    conditions {\n        // check record\n        var assigned role map\n        assigned = DBFind(\"roles_participants\").Columns(\"id,role->id\").Where(\"id=$\", $row_id).Row()\n        if !assigned {\n            warning \"Participant not found\"\n        }\n\n        role = DBFind(\"roles\").Columns(\"id,creator->member_id,role_name\").Where(\"id=?\", assigned[\"role.id\"]).Row()\n        if !role {\n            warning \"Role not found in the roles registry\"\n        }\n\n        var specialRules map prev_contract string stack array\n        stack = JSONDecode(JSONEncode($stack))\n        prev_contract = stack[0]\n        if Len(stack)>2{\n            prev_contract = stack[Len(stack)-2]\n        }\n        specialRules[\"@1sysparams_AcceptValidator\"] = \"Candidate for validators\"\n        specialRules[\"@1sysparams_DelegateRefresh\"] = \"Delegate\"\n        specialRules[\"@1sysparams_CandidateValidatorRequest\"] = \"Candidate for validators\"\n        specialRules[\"@1sysparams_InvestorRefresh\"] = \"Investor with voting rights\"\n        specialRules[\"@1tokenrefund_Start\"] = \"Investor with voting rights\"\n        specialRules[\"@1sysparams_ValidatorResign\"] = \"Validator\"\n\n        if specialRules[prev_contract] != role[\"role_name\"] {\n            Roles_CheckAccess(\"rid\", Int(role[\"id\"]))\n        }\n    }\n\n    action {\n        // delete the member\n        DBUpdate(\"roles_participants\", $row_id, \"deleted,timestamp date_deleted\", 1, $block_time)\n    }\n}",
            "Name": "Roles_Unassign",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Restore {\n    data {\n        rid int\n    }\n    \n    conditions {        \n        Roles_CheckAccess(\"rid\", $rid)\n    }\n    \n    action {\n        DBUpdate(\"roles\", $rid, \"deleted\", 0)\n    }\n}",
            "Name": "Roles_Restore",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Del {\n    data {\n        rid int\n    }\n\n    conditions {\n        Roles_CheckAccess(\"rid\", $rid)\n    }\n\n    action {\n        var participants array\n        participants = DBFind(\"roles_participants\").Columns(\"id\").Where(\"role->id=? and deleted=0\", $rid)\n\n        // delete all participants\n        var i int\n        while i < Len(participants) {\n            var p map\n            p = participants[i]\n            Roles_Unassign(\"row_id\", Int(p[\"id\"]))\n            i = i + 1\n        }\n\n        DBUpdate(\"roles\", $rid, \"deleted,timestamp date_deleted\", 1, $block_time)\n    }\n}",
            "Name": "Roles_Del",
            "Type": "contracts"
        }
    ]
}