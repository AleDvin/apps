{
    "name": "Rope accounting",
    "data": [
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetVar(r1,AppParam(App:#application_id#, Name: rope_manufacturer_role_id))\nSetVar(r2,AppParam(App:#application_id#, Name: rope_producer_role_id))\nSetVar(r3,AppParam(App:#application_id#, Name: rope_servicer_role_id))\nDBFind(roles).Where(\"id=#r1#\").Columns(\"role_name\").Vars(rid1)\nDBFind(roles).Where(\"id=#r2#\").Columns(\"role_name\").Vars(rid2)\nDBFind(roles).Where(\"id=#r3#\").Columns(\"role_name\").Vars(rid3)\nDBFind(rope_uploads).Where(\"rid=#r1# and deleted_at=0 and finaled_at=0\").Columns(\"id\").Vars(count1)\nDBFind(rope_uploads).Where(\"rid=#r2# and deleted_at=0 and finaled_at=0\").Columns(\"id\").Vars(count2)\nDBFind(rope_uploads).Where(\"rid=#r3# and deleted_at=0 and finaled_at=0\").Columns(\"id\").Vars(count3)\nDBFind(rope_uploads).Where(\"deleted_at=0 and finaled_at=0 and uploaded_at>0 and imported_at>0 and (rid=#r1# or rid=#r2# or rid=#r3#)\").Count(import_count)\nDBFind(rope_uploads).Where(\"deleted_at=0 and finaled_at=0 and uploaded_at>0 and (rid=#r1# or rid=#r2# or rid=#r3#)\").Count(load_count)\nDBFind(rope_uploads).Where(\"deleted_at=0 and finaled_at>0 and (rid=#r1# or rid=#r2# or rid=#r3#)\").Count(finaled_count)\n\nSetVar(missed_r1,\"'#rid1_role_name#'\").(missed_r2,\"'#rid2_role_name#'\").(missed_r3,\"'#rid3_role_name#'\")\n\nIf(#count1_id#>0){SetVar(missed_r1,)}\nIf(#count2_id#>0){SetVar(missed_r2,)}\nIf(#count3_id#>0){SetVar(missed_r3,)}\nIf(#rus_comment#==1){\n    отсутствующие в системе файл импорта у роли: missed_r1, missed_r2, missed_r3\n    количество загруженных  файлов: load_count\n    количество импортированных файлов: import_count\n    количество успешно обсчитанных файлов: finaled_count\n}",
            "Name": "rope_common",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(panel panel-default){\n    Div(panel-body){\n        Div(text-muted text-center){\n            отсутствуют необходимые для нормальной работы параметры приложения\n        }\n        If(#r1#==0){\n            Div(text-center){\n                DBFind(\"app_params\").Where(\"app_id=#application_id# and name='rope_manufacturer_role_id'\").Vars(man)\n                Div(text-muted text-center){\n                    LinkPage(Page: app_params_edit, PageParams: \"id=#man_id#\"){\n                        не установлен параметр 'rope_manufacturer_role_id'\n                    }\n                }\n            }\n        }\n        If(#r2#==0){\n            DBFind(\"app_params\").Where(\"app_id=#application_id# and name='rope_producer_role_id'\").Vars(pro)\n            Div(text-center){\n                LinkPage(Page: app_params_edit, PageParams: \"id=#pro_id#\"){\n                    не установлен параметр 'rope_producer_role_id'\n                }\n            }\n        }\n        If(#r3#==0){\n            Div(text-center){\n                DBFind(\"app_params\").Where(\"app_id=#application_id# and name='rope_servicer_role_id'\").Vars(ser)\n                LinkPage(Page: app_params_edit, PageParams: \"id=#ser_id#\"){\n                    не установлен параметр 'rope_servicer_role_id'\n                }\n            }\n        }\n    }\n}",
            "Name": "rope_params_helper",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\nSetVar(r1,AppParam(App:#application_id#, Name: rope_manufacturer_role_id))\nSetVar(r2,AppParam(App:#application_id#, Name: rope_producer_role_id))\nSetVar(r3,AppParam(App:#application_id#, Name: rope_servicer_role_id))\n\nIf(And(#role_id#>0,Or(#role_id#==1,#role_id#==#r1#,#role_id#==#r2#,#role_id#==#r3#))){\n    MenuItem(Title: \"Загрузка файла импорта\", Page: rope_imports, Icon:\"fa fa-upload\")\n    MenuItem(Title: \"Учет наработки\", Page: rope_works, Icon:\"icon-list\")\n    MenuItem(Title: \"Рассогласования показаний датчиков\", Page:rope_depths, Icon:\"icon-list\")\n    MenuItem(Title: \"Буровые\", Page: rope_drillings, Icon:\"icon-list\")\n    MenuItem(Title: \"Бухты\", Page: rope_coils, Icon:\"icon-list\")\n}",
            "Name": "default_menu",
            "Type": "menu"
        },
        {
            "Name": "rope_all_depths_ok",
            "Trans": "{\n    \"ru\": \"Рассогласования показаний датчиков глубины не найдено\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_back",
            "Trans": "{\n    \"ru\": \"Назад\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_block_weight",
            "Trans": "{\n    \"ru\": \"Вес блока\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_block_weight_full",
            "Trans": "{\n    \"ru\": \"Вес талевого блока + вертлюга или ВСП\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_brigade",
            "Trans": "{\n    \"ru\": \"Бригада\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_bypass_bracing",
            "Trans": "{\n    \"ru\": \"Перепуск-Перетяжка. м\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_candle_length",
            "Trans": "{\n    \"ru\": \"Длина свечи\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_certificate",
            "Trans": "{\n    \"ru\": \"Сертификат\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_coil_id",
            "Trans": "{\n    \"ru\": \"Номер бухты\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_coils",
            "Trans": "{\n    \"ru\": \"Бухты\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_create",
            "Trans": "{\n    \"ru\": \"Создать\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_data_confirmed",
            "Trans": "{\n    \"ru\": \"данные подтверждены\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_data_conflict",
            "Trans": "{\n    \"ru\": \"конфликт данных\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_data_input",
            "Trans": "{\n    \"ru\": \"Ввод данных\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_data_view",
            "Trans": "{\n    \"ru\": \"Просмотр данных\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_deleted",
            "Trans": "{\n    \"ru\": \"Удалено\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_depth_final",
            "Trans": "{\n    \"ru\": \"Глубина в конце операции\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_depth_started",
            "Trans": "{\n    \"ru\": \"Глубина начала операции\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_depths",
            "Trans": "{\n    \"ru\": \"Таблица голосования за глубину при рассогласовании показаний датчиков\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_diameter",
            "Trans": "{\n    \"ru\": \"Диаметр\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_drilling_create",
            "Trans": "{\n    \"ru\": \"Новая буровая\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_drilling_edit",
            "Trans": "{\n    \"ru\": \"Изменить буровую\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_drilling_id",
            "Trans": "{\n    \"ru\": \"Номер буровой\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_drillings",
            "Trans": "{\n    \"ru\": \"Буровые\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_drillings_not_found",
            "Trans": "{\n    \"ru\": \"Буровых не найдено\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_edit",
            "Trans": "{\n    \"ru\": \"Редактировать\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_expedition",
            "Trans": "{\n    \"ru\": \"Экспедиция\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_filial",
            "Trans": "{\n    \"ru\": \"Филиал\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_id",
            "Trans": "{\n    \"ru\": \"ID\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_import",
            "Trans": "{\n    \"ru\": \"Импортировать\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_import_again",
            "Trans": "{\n    \"ru\": \"Импортировать еще раз\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_imports",
            "Trans": "{\n    \"ru\": \"Импортирование загрузки\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_length_full",
            "Trans": "{\n    \"ru\": \"Каната в бухте\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_length_rigging",
            "Trans": "{\n    \"ru\": \"Каната в остатке\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_manufacturer",
            "Trans": "{\n    \"ru\": \"производитель\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_master",
            "Trans": "{\n    \"ru\": \"Мастер\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_name",
            "Trans": "{\n    \"ru\": \"Название\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_operation",
            "Trans": "{\n    \"ru\": \"Номер операции\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_operation_date",
            "Trans": "{\n    \"ru\": \"Дата операции\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_operation_type",
            "Trans": "{\n    \"ru\": \"Вид работ рейса\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_previous_workout",
            "Trans": "{\n    \"ru\": \"Предыдущая наработка\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_producer",
            "Trans": "{\n    \"ru\": \"добытчик\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_recalculate",
            "Trans": "{\n    \"ru\": \"Пересчитать\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_rigging",
            "Trans": "{\n    \"ru\": \"Остаток\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_save",
            "Trans": "{\n    \"ru\": \"Сохранить\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_servicer",
            "Trans": "{\n    \"ru\": \"наладчик\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_tkm",
            "Trans": "{\n    \"ru\": \"т.км\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_ton",
            "Trans": "{\n    \"ru\": \"тонны\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_upload",
            "Trans": "{\n    \"ru\": \"Загрузка данных\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_view",
            "Trans": "{\n    \"ru\": \"Просмотр бухты\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_weight_final",
            "Trans": "{\n    \"ru\": \"Вес на крюке макс. в конце операции. т\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_weight_started",
            "Trans": "{\n    \"ru\": \"Вес на крюке макс. в начале операции. т\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_work_bypass",
            "Trans": "{\n    \"ru\": \"Наработка нарастающая до перепуска\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_work_coil",
            "Trans": "{\n    \"ru\": \"Наработка нарастающая на бухту\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_work_final",
            "Trans": "{\n    \"ru\": \"Наработка Lк. т.км\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_work_operation",
            "Trans": "{\n    \"ru\": \"Наработка за операцию. т.км\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_work_started",
            "Trans": "{\n    \"ru\": \"Наработка Lн. тк.м\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_works",
            "Trans": "{\n    \"ru\": \"Учет наработки\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_coils",
            "Columns": "[\n    {\n        \"conditions\": \"true\",\n        \"name\": \"certificate\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"deleted\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"diameter\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"length_full\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"length_rigging\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"previous_workout\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "rope_depths",
            "Columns": "[\n    {\n        \"conditions\": \"true\",\n        \"name\": \"deleted\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"operation\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"drilling_id\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"coil_id\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"manufacturer_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"manufacturer_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"servicer_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"servicer_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"producer_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"producer_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"status_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"status_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"depth_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"depth_started\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "rope_drillings",
            "Columns": "[\n    {\n        \"conditions\": \"true\",\n        \"name\": \"filial\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"deleted\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"expedition\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"brigade\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"master\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"block_weight\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"candle_length\",\n        \"type\": \"double\"\n    }\n    \n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "rope_uploads",
            "Columns": "[\n    {\n        \"conditions\": \"true\",\n        \"name\": \"deleted_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"finaled_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"uploaded_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"imported_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"kid\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"rid\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"file_name\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"drilling_id\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"coil_id\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"binary_id\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "rope_works",
            "Columns": "[\n    {\n        \"conditions\": \"true\",\n        \"name\": \"deleted\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"depth_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"depth_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"weight_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"weight_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"bypass_bracing\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"operation_date\",\n        \"type\": \"datetime\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"operation\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"drilling_id\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"coil_id\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"operation_type\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"work_started\",\n        \"type\": \"double\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"work_final\",\n        \"type\": \"double\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"work_operation\",\n        \"type\": \"double\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"work_bypass\",\n        \"type\": \"double\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"work_coil\",\n        \"type\": \"double\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0.01",
            "Name": "rope_depth_error_rate",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "rope_manufacturer_role_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "rope_producer_role_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "rope_servicer_role_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div()",
            "Name": "default_page",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\r\nSetVar(title,$rope_create$).(btn_title,$rope_create$)\r\nSetVar(item_certificate,)\r\nSetVar(item_length_full,)\r\nSetVar(item_length_rigging,)\r\nSetVar(item_previous_workout,)\r\nSetVar(item_deleted,)\r\nSetVar(item_diameter,)\r\nDiv(content-wrapper){\r\n    If(GetVar(id)){\r\n        DBFind(rope_coils).Where(\"id=#id#\").Vars(item)\r\n        SetVar(title,$rope_edit$)\r\n        SetVar(btn_title,$rope_save$)\r\n    }\r\n    SetTitle(#title#)\r\n    Div(breadcrumb){\r\n        LinkPage(Body: $rope_coils$, Page: rope_coils)\r\n        Span(/, mh)\r\n        Span(#title#, text-muted)\r\n    }\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading){\r\n                    LangRes(rope_data_input)\r\n                }\r\n                Div(panel-body){\r\n                    If(GetVar(id)){\r\n                        Input(Name: id, Type:hidden, Value: #id#)\r\n                    }\r\n                    Div(row mt-sm){\r\n                        Div(col-sm-4 mt-sm text-right){\r\n                            LangRes(rope_certificate)\r\n                        }\r\n                        Div(col-sm-8 text-left){\r\n                            Input(Name: certificate, Type:text, Value: #item_certificate#)\r\n                        }\r\n                    }\r\n                    Div(row mt-sm){\r\n                        Div(col-sm-4 mt-sm text-right){\r\n                            LangRes(rope_length_full)\r\n                        }\r\n                        Div(col-sm-8 text-left){\r\n                            Input(Name: lengthFull, Type:number, Value: #item_length_full#)\r\n                        }\r\n                    }\r\n                    Div(row mt-sm){\r\n                        Div(col-sm-4 mt-sm text-right){\r\n                            LangRes(rope_length_rigging)\r\n                        }\r\n                        Div(col-sm-8 text-left){\r\n                            Input(Name: lengthRigging, Type:number, Value: #item_length_rigging#)\r\n                        }\r\n                    }\r\n                    Div(row mt-sm){\r\n                        Div(col-sm-4 mt-sm text-right){\r\n                            LangRes(rope_previous_workout)\r\n                            (LangRes(rope_tkm))\r\n                        }\r\n                        Div(col-sm-8 text-left){\r\n                            Input(Name: previousWorkout, Type:number, Value: #item_previous_workout#)\r\n                        }\r\n                    }\r\n                    Div(row mt-sm){\r\n                        Div(col-sm-4 mt-sm text-right){\r\n                            LangRes(rope_diameter)\r\n                        }\r\n                        Div(col-sm-8 text-left){\r\n                            Input(Name: diameter, Type:number, Value: #item_diameter#)\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: $rope_back$, Page: rope_coils, Class: btn btn-default pull-left)\r\n                    Button(Body: #btn_title#, Page: rope_coils, Class: btn btn-primary, Contract: RopeCoilEdit)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "rope_coil_edit",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "\r\nDBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\r\nIf(GetVar(id)){\r\n    DBFind(rope_coils).Where(\"id=#id#\").Vars(item)\r\n}\r\nSetTitle($rope_view$ ##id#)\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage(Body: $rope_coils$, Page: rope_coils)\r\n        Span(/, mh)\r\n        Span($rope_view$, text-muted)\r\n    }\r\n    If(GetVar(id)){\r\n        Div(row){\r\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n                Div(panel panel-primary){\r\n                    Div(panel-heading){\r\n                        LangRes(rope_data_view)\r\n                    }\r\n                    Div(panel-body){\r\n                        Div(row mt-sm){\r\n                            Div(col-sm-4 text-right text-bold){\r\n                                LangRes(rope_certificate)\r\n                            }\r\n                            Div(col-sm-8 text-left){\r\n                                #item_certificate#\r\n                            }\r\n                        }\r\n\r\n                        Div(row mt-sm){\r\n                            Div(col-sm-4 text-right text-bold){\r\n                                LangRes(rope_length_full)\r\n                            }\r\n                            Div(col-sm-8 text-left){\r\n                                #item_length_full#\r\n                            }\r\n                        }\r\n\r\n                        Div(row mt-sm){\r\n                            Div(col-sm-4 text-right text-bold){\r\n                                LangRes(rope_length_rigging)\r\n                            }\r\n                            Div(col-sm-8 text-left){\r\n                                #item_length_rigging#\r\n                            }\r\n                        }\r\n\r\n                        Div(row mt-sm){\r\n                            Div(col-sm-4 text-right text-bold){\r\n                                LangRes(rope_previous_workout)\r\n                            }\r\n                            Div(col-sm-8 text-left){\r\n                                #item_previous_workout#\r\n                            }\r\n                        }\r\n\r\n                        Div(row mt-sm){\r\n                            Div(col-sm-4 text-right text-bold){\r\n                                LangRes(rope_deleted)\r\n                            }\r\n                            Div(col-sm-8 text-left){\r\n                                #item_deleted#\r\n                            }\r\n                        }\r\n\r\n                        Div(row mt-sm){\r\n                            Div(col-sm-4 text-right text-bold){\r\n                                LangRes(rope_diameter)\r\n                            }\r\n                            Div(col-sm-8 text-left){\r\n                                #item_diameter#\r\n                            }\r\n                        }\r\n\r\n                        Div(row mt-sm){\r\n                            Div(col-sm-4 text-right text-bold){\r\n                                LangRes(rope_id)\r\n                            }\r\n                            Div(col-sm-8 text-left){\r\n                                #item_id#\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-left){\r\n                        Button(Body: $rope_back$, Page: rope_coils, Class: btn btn-default)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(h3 text-center){\r\n            LangRes(rope_item_not_found)\r\n        }\r\n    }\r\n}",
            "Name": "rope_coil_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\r\nInclude(rope_common)\r\nSetVar(page_name,rope_coils)\r\nDiv(content-wrapper){\r\n    SetTitle($rope_coils$)\r\n    If(And(#r1#>0,#r2#>0,#r3#>0)){\r\n        AddToolButton(Title: $rope_create$, Page: rope_coil_edit, Icon: icon-plus)\r\n\r\n        DBFind(rope_coils).Count(count)\r\n        If(#page#>0){\r\n            SetVar(prev_page,Calculate(#page#-1)\r\n        }.Else{\r\n            SetVar(page,0).(prev_page,0)\r\n        }\r\n        SetVar(per_page,25).(off,Calculate(#page#*#per_page#)).(last_page,Calculate(#count#/#per_page#)).(next_page,#last_page#)\r\n        If(#count#>Calculate(#off#+#per_page#)){\r\n            SetVar(next_page,Calculate(#page#+1)\r\n        }\r\n        Div(button-group){\r\n            If(#page#>0){\r\n                Button(Body:\"1\", Class:btn btn-default, Page:#page_name#, PageParams: \"page=0\")\r\n            }.Else{\r\n                Button(Body:\"1\", Class:btn btn-default disabled)\r\n            }\r\n            If(#page#>1){\r\n                Button(Body:Calculate(#prev_page#+1),Class:btn btn-default, Page:#page_name#, PageParams:\"page=#prev_page#\")\r\n            }\r\n            If(And(#page#>0,#page#<#last_page#)){\r\n                Button(Body:Calculate(#page#+1), Class:btn btn-default disabled)\r\n            }\r\n            If(#next_page#<#last_page#){\r\n                Button(Body:Calculate(#next_page#+1),Class:btn btn-default,Page:#page_name#, PageParams:\"page=#next_page#\")\r\n            }\r\n            If(#page#<#last_page#){\r\n                Button(Body:Calculate(#last_page#+1), Class:btn btn-default, Page:#page_name#, PageParams:\"page=#last_page#\")\r\n            }.ElseIf(#last_page#>0){\r\n                Button(Body:Calculate(#last_page#+1), Class:btn btn-default disabled)\r\n            }\r\n        }\r\n        Div(panel panel-primary){\r\n            Div(panel-body){\r\n                Div(table-responsive){\r\n                    DBFind(rope_coils,src_rope_coils).Offset(#off#).Order(id).Custom(_actions){\r\n                        Div(text-right text-nowrap){\r\n                            Button(Class: btn btn-info fa fa-eye mr-sm, Page: rope_coil_view, PageParams: \"id=#id#\")\r\n                            Button(Class: btn btn-default fa fa-edit mr-sm, Page: rope_coil_edit, PageParams: \"id=#id#\")\r\n                            Button(Class: btn btn-danger fa fa-trash, Page: rope_coils, Contract: RopeCoilDelete, Params: \"id=#id#\").Alert($delete_alert$, $yes$, $no$)\r\n                        }\r\n                    }\r\n                    Table(src_rope_coils,\"$rope_certificate$=certificate,$rope_length_full$=length_full,$rope_length_rigging$=length_rigging,$rope_previous_workout$=previous_workout,$rope_deleted$=deleted,$rope_diameter$=diameter,=_actions\")\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Include(rope_params_helper)\r\n    }\r\n}",
            "Name": "rope_coils",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\nSetTitle($rope_depths$)\nDBFind(rope_depths).Where(\"deleted=0 and (status_final=0 or status_started=0)\").Count(count)\n\nInclude(rope_common)\n\nSetVar(page_name,rope_depths)\nIf(#page#>0){\n    SetVar(prev_page,Calculate(#page#-1)\n}.Else{\n    SetVar(page,0).(prev_page,0)\n}\nSetVar(per_page,25).(off,Calculate(#page#*#per_page#)).(last_page,Calculate(#count#/#per_page#)).(next_page,#last_page#)\nIf(#count#>Calculate(#off#+#per_page#)){\n    SetVar(next_page,Calculate(#page#+1)\n}\n\nDiv(content-wrapper){\n    If(And(#r1#>0,#r2#>0,#r3#>0)){\n        Div(text-right){\n            DBFind(buffer_data,data).Where(\"key='rope_import' and member_id=#key_id#\").Vars(buf)\n            If(And(#buf_id#>0,#count#>0)){\n                Button(Body: \"Сверить данные\", Class: btn btn-default, Page: rope_works).CompositeContract(Name:RopeDepthsUpdateWrapper, Data: #buf_value#)\n            }\n        }\n        If(And(#count#>0,#import_count#>=3)){\n            Div(button-group){\n                If(#page#>0){\n                    Button(Body:\"1\", Class:btn btn-default, Page:#page_name#, PageParams: \"page=0\")\n                }.Else{\n                    Button(Body:\"1\", Class:btn btn-default disabled)\n                }\n                If(#page#>1){\n                    Button(Body:Calculate(#prev_page#+1), Class:btn btn-default, Page:#page_name#, PageParams: \"page=#prev_page#\")\n                }\n                If(And(#page#>0,#page#<#last_page#)){\n                    Button(Body:Calculate(#page#+1), Class:btn btn-default disabled)\n                }\n                If(#next_page#<#last_page#){\n                    Button(Body:Calculate(#next_page#+1), Class:btn btn-default, Page:#page_name#, PageParams: \"page=#next_page#\")\n                }\n                If(#page#<#last_page#){\n                    Button(Body:Calculate(#last_page#+1), Class:btn btn-default, Page:#page_name#, PageParams: \"page=#last_page#\")\n                }.ElseIf(#last_page#>0){\n                    Button(Body:Calculate(#last_page#+1), Class:btn btn-default disabled)\n                }\n            }\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(row){\n                        Div(col-md-12){\n                            Div(table-responsive){\n\n                                DBFind(rope_depths, src_depths).Custom(_started){\n                                    If(#status_started#==0){\n                                        ArrayToSource(src_started#id#, [#manufacturer_started#,#producer_started#,#servicer_started#])\n                                        Select(Name: StartedValues, Source: src_started#id#,NameColumn: value, ValueColumn: value)\n                                        Input(Name: StartedIds, Type:hidden, Value: #id#)\n                                    }.Else{\n                                        Div(text-success){LangRes(rope_data_confirmed)}\n                                        #depth_started#\n                                        Input(Name: StartedValues, Type:hidden, Value: 0)\n                                        Input(Name: StartedIds, Type:hidden, Value: 0)\n                                    }\n                                }.Custom(_final){\n                                    If(#status_final#==0){\n                                        ArrayToSource(src_final#id#, [#manufacturer_final#,#producer_final#,#servicer_final#])\n                                        Select(Name: FinalValues, Source: src_final#id#,NameColumn: value, ValueColumn: value)\n                                        Input(Name: FinalIds, Type:hidden, Value: #id#)\n                                    }.Else{\n                                        Div(text-success){LangRes(rope_data_confirmed)}\n                                        #depth_final#\n                                        Input(Name: FinalValues, Type:hidden, Value: 0)\n                                        Input(Name: FinalIds, Type:hidden, Value: 0)\n                                    }\n                                }.Where(\"deleted=0 and (status_final=0 or status_started=0)\").Order(\"id\").Offset(#off#)\n                                Table(src_depths,\"id,$rope_drilling_id$=drilling_id,$rope_coil_id$=coil_id,$rope_operation$=operation,$rope_depth_started$=_started,$rope_depth_final$=_final\")\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Class: btn btn-primary, Body: Отправить, Page: rope_depths, Contract: RopeDepthsUpdate, Params: \"Id=#id#,Value=#servicer_final#,Type=final\")\n                }\n            }\n        }.ElseIf(And(#count#>0,#import_count#<2)){\n            Недостаточно данных для рассчета правильных значений глубины\n            Не получено загрузки от: #missed_r1# #missed_r2# #missed_r3#\n        }.Else{\n            Div(row){\n                Div(text-center h3){\n                    LangRes(rope_all_depths_ok)\n                }\n            }\n        }\n    }.Else{\n        Include(rope_params_helper)\n    }\n}.Style(\n    th,td {text-align:center;}\n    .radio {display:inline-block;margin-right:10px;}\n)",
            "Name": "rope_depths",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\nSetVar(left_col,\"col-sm-4 mt-sm text-right\").(right_col,\"col-sm-8 text-left\")\n\nSetVar(title,$rope_drilling_create$)\nSetVar(btn_title,$rope_create$)\nSetVar(drilling_filial,).(drilling_expedition,).(drilling_brigade,).(drilling_master,).(drilling_block_weight,).(drilling_candle_length,)\nIf(GetVar(Id)){\n    DBFind(rope_drillings).Where(\"id=#Id#\").Vars(drilling)\n    SetVar(title,$rope_drilling_edit$)\n    SetVar(btn_title,$rope_save$)\n}\nSetTitle(#title#)\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage(Body: $rope_drillings$, Page: rope_drillings)\n        Span(/, mh-sm)\n        Span(#title#, text-muted)\n    }\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading){\n                    LangRes($rope_data_input$)\n                }\n                Div(panel-body){\n                    If(GetVar(Id)){\n                        Input(Name: Id, Type:hidden, Value: #Id#)\n                    }\n                    Div(row mt-sm){\n                        Div(#left_col#){\n                            LangRes(rope_filial)\n                        }\n                        Div(#right_col#){\n                            Input(Name: Filial, Value: #drilling_filial#)\n                        }\n                    }\n                    Div(row mt-sm){\n                        Div(#left_col#){\n                            LangRes(rope_expedition)\n                        }\n                        Div(#right_col#){\n                            Input(Name: Expedition, Value: #drilling_expedition#)\n                        }\n                    }\n                    Div(row mt-sm){\n                        Div(#left_col#){\n                            LangRes(rope_brigade)\n                        }\n                        Div(#right_col#){\n                            Input(Name: Brigade, Value: #drilling_brigade#)\n                        }\n                    }\n                    Div(row mt-sm){\n                        Div(#left_col#){\n                            LangRes(rope_master)\n                        }\n                        Div(#right_col#){\n                            Input(Name: Master, Value: #drilling_master#)\n                        }\n                    }\n                    Div(row mt-sm){\n                        Div(#left_col#){\n                            $rope_block_weight_full$, $rope_ton$\n                        }\n                        Div(#right_col#){\n                            Input(Name: BlockWeight, Type: number, Value: #drilling_block_weight#)\n                        }\n                    }\n                    Div(row mt-sm){\n                        Div(#left_col#){\n                            LangRes(rope_candle_length)\n                        }\n                        Div(#right_col#){\n                            Input(Name: CandleLength, Type:number, Value: #drilling_candle_length#)\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: #btn_title#, Page: rope_drillings, Class: btn btn-primary, Contract: RopeDrillingEdit)\n                }\n            }\n        }\n    }\n}",
            "Name": "rope_drilling_edit",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\nInclude(rope_common)\nDBFind(rope_drillings,drillings).Count(count_drillings).Custom(_actions){\n    Div(text-right){\n        Button(Page: rope_drilling_edit, Class: btn btn-default fa fa-pencil mr-sm, PageParams: \"Id=#id#\")\n        Button(Page: rope_drilling_edit, Class: btn btn-danger fa fa-trash, Contract: RopeDrillingDelete, Params: \"Id=#id#\")\n    }\n}\nSetTitle($rope_drillings$)\nDiv(content-wrapper){\n    If(And(#r1#>0,#r2#>0,#r3#>0)){\n        AddToolButton(Title: $rope_create$, Icon: icon-plus, Page: rope_drilling_edit)\n        Div(panel panel-primary){\n            If(#count_drillings#>0){\n                Div(panel-body){\n                    Div(table-responsive){\n                        Table(drillings,\"$rope_filial$=filial,$rope_expedition$=expedition,$rope_brigade$=brigade,$rope_master$=master,$rope_block_weight$=block_weight,$rope_candle_length$=candle_length,=_actions\")\n                    }\n                }\n            }.Else{\n                Div(row){\n                    Div(text-center h3){\n                        LangRes(rope_drillings_not_found)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Include(rope_params_helper)\n    }\n}",
            "Name": "rope_drillings",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\nDBFind(roles).Columns(\"role_name\").Where(\"id=#role_id#\").Vars(role)\n\nInclude(rope_common)\n\nIf(#import_count#==3){\n    SetVar(next_page,rope_depths)\n}.Else{\n    SetVar(next_page,rope_imports)\n}\n\nDBFind(rope_uploads,uploads).Custom(_actions){\n    Div(text-right){\n        If(And(#role_id#==#rid#,#key_id#==#kid#)){\n            If(#imported_at#>0){\n                Button(Body: $rope_import_again$, Page: #next_page#, Class: btn btn-default, Contract: RopeBinaryParse, Params: \"Id=#id#\")\n            }.Else{\n                Button(Body: $rope_import$, Page: #next_page#, Class: btn btn-primary, Contract: RopeBinaryParse, Params: \"Id=#id#\")\n            }\n        }\n    }\n}.Custom(_name){\n    DBFind(roles).Columns(\"role_name\").Where(\"id=#rid#\").Vars(rid)\n    Span(файл импорта от роли \"#rid_role_name#\")\n    If(#imported_at#>0){\n        Div(text-muted){\n            импортированно\n        }\n    }\n}.Custom(_data){\n    DBFind(binaries,bin).Where(\"id=#binary_id#\")\n    Table(bin,\"=data\")\n}.Where(\"deleted_at=0 and finaled_at=0\").Order(\"id desc\").Count(import_count)\n\n\nSetTitle(\"#role_role_name#: загрузка файла импорта\")\nDiv(content-wrapper){\n    Div(row){\n        Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n            Div(content-wrapper){\n                If(And(#r1#>0,#r2#>0,#r3#>0)){\n                    Div(panel panel-primary){\n                        Div(panel-heading){Список загрузок}\n                        Div(panel-body){\n                            If(#import_count#<3){\n                                Div(text-muted text-center){\n                                    для расчета 'Учета наработки' необходимо загрузить 3 файла. По одному файлу от каждой роли: '#rid1_role_name#', '#rid2_role_name#', '#rid3_role_name#'\n                                }\n                                Div(text-muted text-center){\n                                    Не получено загрузки от: #missed_r1# #missed_r2# #missed_r3#\n                                }\n                            }\n                            Div(table-responsive){\n                                Table(uploads, \"=_name,=_data,=_actions\")\n                            }\n                        }\n                        Div(panel-footer text-right){\n                            If(#import_count#<3){\n                                Button(Body: Span(Class:fa fa-upload) Добавить файл, Class: btn btn-primary, Page: rope_upload).Popup(40, \"Выбор файла\")\n                            }.Else{\n                                Button(Body: Span(Class:fa fa-upload) Добавить файл, Class: btn btn-default, Page: rope_upload).Popup(40, \"Выбор файла\")\n                                DBFind(rope_depths).Where(\"deleted=0 and (status_final=0 or status_started=0)\").Count(count)\n                                DBFind(buffer_data,data).Where(\"key='rope_import' and member_id=#key_id#\").Vars(buf)\n                                If(#buf_id#>0){\n                                    Button(Body: \"Проверить конфликты\", Class: btn btn-primary, Page: rope_works).CompositeContract(Name:RopeDepthsUpdateWrapper, Data: #buf_value#)\n                                }\n                            }\n                        }\n                    }\n                }.Else{\n                    Include(rope_params_helper)\n                }\n            }\n        }\n    }.Style(\n        thead {display:none}\n    )\n}",
            "Name": "rope_imports",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Form(){\n    Div(form-group){\n        Input(Name: Data, Type: file)\n    }\n    Div(text-left){\n        Button(Body: \"Отмена\", Page: rope_imports, Class: btn btn-default)\n        Button(Body: \"Загрузить\", Page: rope_imports, Class: pull-right btn btn-primary, Contract: RopeUpload)\n    }\n}",
            "Name": "rope_upload",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\nSetTitle($rope_works$)\nSetVar(page_name,rope_works)\n\nInclude(rope_common)\nDiv(content-wrapper){\n    If(And(#r1#>0,#r2#>0,#r3#>0)){\n        SetVar(where,\"deleted=0\")\n        If(GetVar(CoilId)!=\"\"){\n            SetVar(where,\"#where# and coil_id=#CoilId#\")\n        }.Else{\n            SetVar(CoilId,)\n        }\n        If(GetVar(DrillingId)!=\"\"){\n            SetVar(where,\"#where# and drilling_id=#DrillingId#\")\n        }.Else{\n            SetVar(DrillingId,)\n        }\n        DBFind(rope_works).Count(count).Where(#where#)\n\n        DBFind(rope_drillings,drillings).Columns(\"id,filial\").Where(\"deleted=0\").Count(d_count).Custom(_name){#filial#}\n        DBFind(rope_coils,coils).Columns(\"id,certificate\").Where(\"deleted=0\").Count(c_count).Custom(_name){#certificate#}\n        Div(text-right){\n            If(Or(#import_count#>=3,#finaled_count#>=3)){\n                Button(Body: Рассчитать наработку, Class: btn btn-default, Page: #page_name#, Contract: RopeWorksCalculate, PageParams: \"CoilId=#CoilId#,DrillingId=#DrillingId#\")\n            }\n            Div(text-muted text-center){\n                If(And(#finaled_count#>=3,#import_count#<3)){\n                    Span(Начата новая сессия импорта файлов., mr-sm)\n                }\n                If(#import_count#<3){\n                    If(Or(#missed_r1#!=\"\",#missed_r2#!=\"\",#missed_r3#!=\"\")){\n                        Span(Не получено загрузки от: #missed_r1# #missed_r2# #missed_r3#)\n                    }\n                }\n            }\n        }\n\n        If(#page#>0){\n            SetVar(prev_page,Calculate(#page#-1)\n        }.Else{\n            SetVar(page,0).(prev_page,0)\n        }\n        SetVar(per_page,25).(off,Calculate(#page#*#per_page#)).(last_page,Calculate(#count#/#per_page#)).(next_page,#last_page#)\n        If(#count#>Calculate(#off#+#per_page#)){\n            SetVar(next_page,Calculate(#page#+1)\n        }\n        If(Or(#c_count#>0,#d_count#>1)){\n            Form(form-group mt){\n                Div(row){\n                    Div(col-sm-5){\n                        Label(For: CoilId){Выбрать бухту}\n                        Select(Name: DrillingId, Source: drillings, NameColumn: _name, ValueColumn: id, Value: #DrillingId#)\n                    }\n                    Div(col-sm-7){\n                        Label(For: CoilId){Выбрать буровую}\n                        Div(input-group){\n                            Select(Name: CoilId, Source: coils, NameColumn: _name, ValueColumn: id, Value: #CoilId#)\n                            Div(input-group-btn){\n                                Button(Body: Span(Class:fa fa-search), Class: btn btn-default, Page: #page_name#, PageParams: \"CoilId=Val(CoilId),DrillingId=Val(DrillingId)\")\n                                If(Or(GetVar(DrillingId),GetVar(CoilId))){\n                                    Button(Body: Span(Class: fa fa-remove), Class: btn btn-default, Page: #page_name#)\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }.Style(max-width:600px;)\n        }\n        If(#count#>0){\n            Div(button-group){\n                If(#page#>0){\n                    Button(Body:\"1\", Class:btn btn-default, Page:#page_name#, PageParams: \"page=0,CoilId=#CoilId#,DrillingId=#DrillingId#\")\n                }.Else{\n                    Button(Body:\"1\", Class:btn btn-default disabled)\n                }\n                If(#page#>1){\n                    Button(Body:Calculate(#prev_page#+1), Class:btn btn-default, Page:#page_name#, PageParams: \"page=#prev_page#,CoilId=#CoilId#,DrillingId=#DrillingId#\")\n                }\n                If(And(#page#>0,#page#<#last_page#)){\n                    Button(Body:Calculate(#page#+1), Class:btn btn-default disabled)\n                }\n                If(#next_page#<#last_page#){\n                    Button(Body:Calculate(#next_page#+1), Class:btn btn-default, Page:#page_name#, PageParams: \"page=#next_page#,CoilId=#CoilId#,DrillingId=#DrillingId#\")\n                }\n                If(#page#<#last_page#){\n                    Button(Body:Calculate(#last_page#+1), Class:btn btn-default, Page:#page_name#, PageParams: \"page=#last_page#,CoilId=#CoilId#,DrillingId=#DrillingId#\")\n                }.ElseIf(#last_page#>0){\n                    Button(Body:Calculate(#last_page#+1), Class:btn btn-default disabled)\n                }\n            }\n            Div(panel panel-primary){\n                Div(panel-body){\n                    Div(table-responsive){\n                        DBFind(rope_works,works).Where(#where#).Offset(#off#).Order(id).Custom(_date){\n                            Div(text-nowrap){\n                                DateTime(#operation_date#, DD-MM-YYYY)\n                            }\n                        }.Custom(_type){\n                            Div(text-nowrap){\n                                #operation_type#\n                            }\n                        }.Custom(_wb){\n                            SetVar(wb,Calculate(#work_bypass#, Prec:0))\n                            If(#wb#!=\"wrong expression\"){\n                                #wb#\n                            }\n                        }.Custom(_ws){\n                            SetVar(ws,Calculate(#work_started#, Prec:0))\n                            If(#ws#!=\"wrong expression\"){\n                                #ws#\n                            }\n                        }.Custom(_wf){\n                            SetVar(wf,Calculate(#work_final#, Prec:0))\n                            If(#wf#!=\"wrong expression\"){\n                                #wf#\n                            }\n                        }.Custom(_wo){\n                            SetVar(wo,Calculate(#work_operation#, Prec:0))\n                            If(#wo#!=\"wrong expression\"){\n                                #wo#\n                            }\n                        }.Custom(_wc){\n                            SetVar(wc,Calculate(#work_coil#, Prec:0))\n                            If(#wc#!=\"wrong expression\"){\n                                #wc#\n                            }\n                        }\n                        Table(works,\"$rope_drilling_id$=drilling_id,$rope_coil_id$=coil_id,$rope_operation$=operation,$rope_operation_date$=_date,$rope_operation_type$=_type,$rope_depth_started$=depth_started,$rope_depth_final$=depth_final,$rope_weight_started$=weight_started,$rope_weight_final$=weight_final,$rope_work_started$=_ws, $rope_work_final$=_wf, $rope_work_operation$=_wo, $rope_work_bypass$=_wb, $rope_work_coil$=_wc,$rope_bypass_bracing$=bypass_bracing\")\n                    }\n                }\n            }\n        }.Else{\n            Div(panel panel-primary){\n                Div(panel-body){\n                    Div(h3 text-center){\n                        Данные не загружены\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: Span(Class:fa fa-upload) Загрузить, Page: rope_imports, Class: btn btn-primary)\n                }\n            }\n        }\n    }.Else{\n        Include(rope_params_helper)\n    }\n}",
            "Name": "rope_works",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeRolesCondition {\r\n    data {}\r\n\r\n    conditions {\r\n        var appId int rid1 rid2 rid3 string\r\n        appId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name='Rope accounting'\").One(\"id\"))\r\n        rid1 = Int(AppParam(appId, \"rope_manufacturer_role_id\"))\r\n        rid2 = Int(AppParam(appId, \"rope_producer_role_id\"))\r\n        rid3 = Int(AppParam(appId, \"rope_servicer_role_id\"))\r\n        if rid1 == 0 {\r\n            warning \"'rope_manufacturer_role_id' not set\"\r\n        }\r\n        if rid2 == 0 {\r\n            warning \"'rope_producer_role_id' not set\"\r\n        }\r\n        if rid3 == 0 {\r\n            warning \"'rope_servicer_role_id' not set\"\r\n        }\r\n        if rid1 == rid2 || rid1 == rid3 || rid2 == rid3 {\r\n            warning \"Invalid set roles\"\r\n        }\r\n        if !($role_id == rid1 || $role_id == rid2 || $role_id == rid3){\r\n            warning \"Your role not allowed for this action\"\r\n        }\r\n    }\r\n}",
            "Name": "RopeRolesCondition",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeCoilDelete {\r\n    data {\r\n        id int\r\n    }\r\n    conditions {\r\n        if !DBFind(\"rope_coils\").Where(\"id=? and deleted=0\", $id).One(\"id\") {\r\n            warning \"Record not found\"\r\n        }\r\n    }\r\n    action {\r\n        DBUpdate(\"rope_coils\", $id, \"deleted\", 1)\r\n    }\r\n}",
            "Name": "RopeCoilDelete",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeCoilEdit {\r\n    data {\r\n        id string \"optional\"\r\n        certificate string\r\n        lengthFull int\r\n        lengthRigging int\r\n        previousWorkout int\r\n        deleted int\r\n        diameter int\r\n    }\r\n    conditions {\r\n        $id = Int($id)\r\n        if $id > 0{\r\n            if !DBFind(\"rope_coils\").Where(\"id=?\", $id).One(\"id\") {\r\n                warning \"Record not found\"\r\n            }\r\n        }\r\n    }\r\n    action {\r\n        if $id > 0{\r\n            DBUpdate(\"rope_coils\", $id, \"certificate,length_full,length_rigging,previous_workout,deleted,diameter\",$certificate,$lengthFull,$lengthRigging,$previousWorkout,$deleted,$diameter)\r\n        }else{\r\n            DBInsert(\"rope_coils\", \"certificate,length_full,length_rigging,previous_workout,deleted,diameter\",$certificate,$lengthFull,$lengthRigging,$previousWorkout,$deleted,$diameter)\r\n        }\r\n    }\r\n}",
            "Name": "RopeCoilEdit",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeBinaryParse {\r\n    data {\r\n        Id string \"optional\"\r\n    }\r\n\r\n    func appendAll(a array, b ...)array{\r\n        var i lena lenb int\r\n        lena = Len(a)\r\n        lenb = Len(b)\r\n        while i<lenb{\r\n            a = Append(a, b[i])\r\n            i=i+1\r\n        }\r\n        return a\r\n    }\r\n    func findAll(table, where, columns string) array {\r\n        var full parts array limit offset int\r\n        limit = 250\r\n        while true {\r\n            parts = DBFind(table).Where(where).Columns(columns).Offset(offset).Limit(limit)\r\n            if Len(parts) > 0 {\r\n                if Len(full) == 0 {\r\n                    full = parts\r\n                }else{\r\n                    full = appendAll(full, parts...)\r\n                }\r\n            }else{\r\n                break\r\n            }\r\n            offset = offset+limit\r\n        }\r\n        return full\r\n    }\r\n    func parseIdx(cells array) map{\r\n        var idx map i cellsLen int s string\r\n        // default idx\r\n        idx[\"operation_date\"] = 3\r\n        idx[\"operation\"] = 4\r\n        idx[\"operation_type\"] = 5\r\n        idx[\"depth_started\"] = 6\r\n        idx[\"depth_final\"] = 7\r\n        idx[\"weight_started\"] = 9\r\n        idx[\"weight_final\"] = 10\r\n        idx[\"bypass_bracing\"] = 17\r\n        cellsLen = Len(cells)\r\n        while i < cellsLen{\r\n            // correction idx\r\n            s = ToLower(TrimSpace(cells[i]))\r\n            if HasPrefix(s, \"дата\") && Contains(s,\"операции\"){\r\n                idx[\"operation_date\"] = i\r\n            }elif HasPrefix(s, \"№\") && Contains(s,\"операции\"){\r\n                idx[\"operation\"] = i\r\n            }elif HasPrefix(s, \"вид\") && Contains(s,\"работ\") && Contains(s,\"рейса\"){\r\n                idx[\"operation_type\"] = i\r\n            }elif HasPrefix(s, \"глубина\") && Contains(s,\"начала\"){\r\n                idx[\"depth_started\"] = i\r\n            }elif HasPrefix(s, \"глубина\") && Contains(s,\"конце\") {\r\n                idx[\"depth_final\"] = i\r\n            }elif HasPrefix(s, \"вес\") && Contains(s,\"крюке\") && Contains(s,\"начале\"){\r\n                idx[\"weight_started\"] = i\r\n            }elif HasPrefix(s, \"вес\") && Contains(s,\"крюке\") && Contains(s,\"конце\"){\r\n                idx[\"weight_final\"] = i\r\n            }elif HasPrefix(s, \"перепуск\") && Contains(s,\"перетяжка\"){\r\n                idx[\"bypass_bracing\"] = i\r\n            }elif s == \"примечание\" {\r\n                break\r\n            }\r\n            i=i+1\r\n        }\r\n        return idx\r\n    }\r\n    func parseWorks(anchor string, rows array) array {\r\n        var i lenRows lenRow c int row resultRows selectedRows array canCopy bool\r\n        lenRows = Len(rows)\r\n        lenRow = 18 //idx[\"bypass_bracing\"] = 17\r\n        while i < lenRows {\r\n            var notEmptyCellCount int\r\n            row = rows[i]\r\n            c = 0\r\n            while c < lenRow {\r\n                if Size(row[c]) > 0{\r\n                    notEmptyCellCount = notEmptyCellCount+1\r\n                }\r\n                if anchor == row[c] {\r\n                    canCopy = true\r\n                }\r\n                c = c+1\r\n            }\r\n            if canCopy && notEmptyCellCount > 0 {\r\n                selectedRows = Append(selectedRows, rows[i])\r\n            }\r\n            if canCopy && notEmptyCellCount == 0 {\r\n                break\r\n            }\r\n            i = i+1\r\n        }\r\n        var idx map date string\r\n        idx = parseIdx(selectedRows[0])\r\n        lenRows = Len(selectedRows)\r\n        i = 1\r\n        while i < lenRows {\r\n            var work map\r\n            row = selectedRows[i]\r\n            work[\"depth_final\"] = Int(row[idx[\"depth_final\"]])\r\n            work[\"depth_started\"] = Int(row[idx[\"depth_started\"]])\r\n            work[\"weight_final\"] = Int(row[idx[\"weight_final\"]])\r\n            work[\"weight_started\"] = Int(row[idx[\"weight_started\"]])\r\n            work[\"bypass_bracing\"] = Int(row[idx[\"bypass_bracing\"]])\r\n            work[\"operation_type\"] = row[idx[\"operation_type\"]]\r\n            date = row[idx[\"operation_date\"]]\r\n            if $asTimestamp {\r\n                if Contains(date, \"-\"){\r\n                    $asTimestamp = false\r\n                }\r\n            }\r\n            if $asTimestamp{\r\n                work[\"operation_date\"] = Int(date)\r\n                if work[\"operation_date\"] != 0{\r\n                    // https://stackoverflow.com/a/6154953\r\n                    work[\"operation_date\"] = (work[\"operation_date\"] - 25569) * 86400\r\n                }\r\n            }else{\r\n                if date != \"\"{\r\n                    work[\"operation_date\"] = date\r\n                }else{\r\n                    work[\"operation_date\"] = \"NULL\"\r\n                }\r\n            }\r\n            work[\"operation\"] = Int(row[idx[\"operation\"]])\r\n            if work[\"operation\"] {\r\n                // stored data row only if has operation\r\n                resultRows = Append(resultRows, work)\r\n            }\r\n            i=i+1\r\n        }\r\n        return resultRows\r\n    }\r\n    func parseCoil(rows array) map {\r\n        var coil map i int row array\r\n        i = 7 // start coil info\r\n        while i < 9 { // end coil info\r\n            row = rows[i]\r\n            if i == 7 {\r\n                coil[\"certificate\"] = row[6]\r\n                coil[\"diameter\"] = Int(row[9])\r\n            }elif i == 8 {\r\n                coil[\"length_full\"] = Int(row[6])\r\n                coil[\"length_rigging\"] = Int(row[7])\r\n                coil[\"previous_workout\"] = Int(row[17])\r\n            }\r\n            i = i+1\r\n        }\r\n        return coil\r\n    }\r\n    func parseDrilling(rows array) map {\r\n        var drilling map i int row array\r\n        i = 3 // start drilling info\r\n        while i < 9 { // end drilling info\r\n            row = rows[i]\r\n            if i == 3 {\r\n                drilling[\"filial\"] = row[6]\r\n            }elif i == 4 {\r\n                drilling[\"expedition\"] = row[6]\r\n            }elif i == 5 {\r\n                drilling[\"brigade\"] = row[6]\r\n            }elif i == 6 {\r\n                drilling[\"master\"] = row[6]\r\n                drilling[\"block_weight\"] = Int(row[17])\r\n            }elif i == 7 {\r\n                if row[17] == \"\"{\r\n                    drilling[\"candle_length\"] = 0.0\r\n                }else{\r\n                    drilling[\"candle_length\"] = Float(row[17])\r\n                }\r\n            }\r\n            i = i+1\r\n        }\r\n        return drilling\r\n    }\r\n    func getMapValues(m map, keys array) array {\r\n        var values array i keysLen int key string\r\n        keysLen = Len(keys)\r\n        while i < keysLen {\r\n            key = keys[i]\r\n            if Contains(key, \" \"){\r\n                var splittedKey array\r\n                splittedKey = Split(key, \" \")\r\n                key = splittedKey[1]\r\n            }\r\n            values = Append(values, m[key])\r\n            i=i+1\r\n        }\r\n        return values\r\n    }\r\n    func storeCoil(coil map) int {\r\n        var id int\r\n        id = Int(DBFind(\"rope_coils\").Where(\"certificate=? and diameter=?\", coil[\"certificate\"], coil[\"diameter\"]).One(\"id\"))\r\n        if id == 0{\r\n            var keys values array\r\n            keys = GetMapKeys(coil)\r\n            values = getMapValues(coil, keys)\r\n            id = DBInsert(\"rope_coils\", Join(keys, \",\"), values...)\r\n        }\r\n        return id\r\n    }\r\n    func storeDrilling(drilling map) int {\r\n        var id int\r\n        id = Int(DBFind(\"rope_drillings\").Where(\"filial=? and expedition=? and brigade=?\", drilling[\"filial\"], drilling[\"expedition\"], drilling[\"brigade\"]).One(\"id\"))\r\n        if id == 0{\r\n            var keys values array\r\n            keys = GetMapKeys(drilling)\r\n            values = getMapValues(drilling, keys)\r\n            id = DBInsert(\"rope_drillings\", Join(keys, \",\"), values...)\r\n        }\r\n        return id\r\n    }\r\n    func storeWorksDepths(coilId, drillingId int, works array) {\r\n        var i worksLen int workId depthId fieldsWork fieldsDepth depthWorkKeys fields string values array work map\r\n        worksLen = Len(works)\r\n        if $asTimestamp{\r\n            fieldsWork = \"operation_type,weight_final,weight_started,bypass_bracing,timestamp operation_date,operation\"\r\n        }else{\r\n            fieldsWork = \"operation_type,weight_final,weight_started,bypass_bracing,operation_date,operation\"\r\n        }\r\n\r\n        fieldsDepth = Sprintf(\"%v,%v\", $startedField, $finalField)\r\n        while i < worksLen {\r\n            work = works[i]\r\n            workId = DBFind(\"rope_works\").Columns(\"id\").Where(\"coil_id=? and drilling_id=? and operation=?\", coilId, drillingId, work[\"operation\"]).One(\"id\")\r\n            if !workId {\r\n                values = getMapValues(work, Split(fieldsWork, \",\"))\r\n                values = appendAll(values,drillingId,coilId)\r\n                fields = fieldsWork + \",drilling_id,coil_id\"\r\n                DBInsert(\"rope_works\", fields, values...)\r\n            }\r\n            depthId = DBFind(\"rope_depths\").Columns(\"id\").Where(\"coil_id=? and drilling_id=? and operation=?\", coilId, drillingId, work[\"operation\"]).One(\"id\")\r\n            if !depthId {\r\n                depthId = DBInsert(\"rope_depths\", \"coil_id,drilling_id,operation,manufacturer_final,manufacturer_started,producer_final,producer_started,servicer_final,servicer_started\", coilId, drillingId, work[\"operation\"],-1,-1,-1,-1,-1,-1)\r\n            }\r\n\r\n            values = getMapValues(work, Split(\"depth_started,depth_final\", \",\"))\r\n            DBUpdate(\"rope_depths\", Int(depthId), fieldsDepth, values...)\r\n\r\n            i=i+1\r\n        }\r\n    }\r\n    func updateDepths(coilId, drillingId int) {\r\n        var startedIds startedValues finalIds finalValues depths array i depthsLen int depth map columns string\r\n        columns = Sprintf(\"id,%v,%v\", $startedField, $finalField)\r\n        depths = findAll(\"rope_depths\", Sprintf(\"coil_id=%v and drilling_id=%v and operation>0\", coilId, drillingId), columns)\r\n        depthsLen = Len(depths)\r\n        var buf array m map\r\n        while i < depthsLen {\r\n            depth = depths[i]\r\n            startedIds = Append(startedIds, depth[\"id\"])\r\n            finalIds = Append(finalIds, depth[\"id\"])\r\n            startedValues = Append(startedValues, depth[$startedField])\r\n            finalValues = Append(finalValues, depth[$finalField])\r\n            i=i+1\r\n        }\r\n        m[\"StartedIds\"] = JSONEncode(startedIds)\r\n        m[\"StartedValues\"] = JSONEncode(startedValues)\r\n        m[\"FinalIds\"] = JSONEncode(finalIds)\r\n        m[\"FinalValues\"] = JSONEncode(finalValues)\r\n        buf = Append(buf, m)\r\n\r\n        buffer_Manager(\"Action,Key,Val\", \"set\", \"rope_import\", JSONEncode(buf))\r\n        // RopeDepthsUpdate(\"StartedIds,StartedValues,FinalIds,FinalValues\", startedIds, startedValues, finalIds, finalValues)\r\n    }\r\n    func updateUpload(coilId, drillingId int){\r\n        var fields values array\r\n        $inf[\"coil_id\"] = coilId\r\n        $inf[\"drilling_id\"] = drillingId\r\n        $inf[\"imported_at\"] = $time\r\n        fields = GetMapKeys($inf)\r\n        values = getMapValues($inf, fields)\r\n        DBUpdate(\"rope_uploads\", Int($inf[\"id\"]), Join(fields, \",\"), values...)\r\n    }\r\n\r\n    conditions {\r\n        $Id = Int($Id)\r\n        if $Id == 0 {\r\n            $Id = Int(DBFind(\"buffer_data\").Where(\"key='rope_upload' and member_id=?\", $key_id).One(\"value\"))\r\n        }\r\n        $inf = DBFind(\"rope_uploads\").Where(\"id=?\",$Id).Row()\r\n        if !$inf {\r\n            warning \"Uploaded file not found\"\r\n        }\r\n        $asTimestamp = true\r\n        $binId = Int(DBFind(\"binaries\").Where(\"id=?\", $inf[\"binary_id\"]).One(\"id\"))\r\n        if $binId == 0 {\r\n            warning \"Binary file not found\"\r\n        }\r\n        RopeRolesCondition()\r\n        var appId mid sid pid int\r\n        appId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name='Rope accounting'\").One(\"id\"))\r\n        mid = Int(AppParam(appId, \"rope_manufacturer_role_id\"))\r\n        sid = Int(AppParam(appId, \"rope_servicer_role_id\"))\r\n        pid = Int(AppParam(appId, \"rope_producer_role_id\"))\r\n\r\n        if $role_id == mid {\r\n            $startedField = \"manufacturer_started\"\r\n            $finalField = \"manufacturer_final\"\r\n\r\n        }elif $role_id == sid {\r\n            $startedField = \"servicer_started\"\r\n            $finalField = \"servicer_final\"\r\n\r\n        }elif $role_id == pid {\r\n            $startedField = \"producer_started\"\r\n            $finalField = \"producer_final\"\r\n        }\r\n    }\r\n    action {\r\n        var line count sheet drillingId coilId int rows works array coil drilling map\r\n        sheet = 1\r\n        count = Int(Str(GetRowsCountXLSX($binId, sheet)))\r\n        rows = GetDataFromXLSX($binId, line, count, sheet)\r\n\r\n        coil = parseCoil(rows)\r\n        drilling = parseDrilling(rows)\r\n        works = parseWorks(\"Месторождение\", rows)\r\n\r\n        coilId = storeCoil(coil)\r\n        drillingId = storeDrilling(drilling)\r\n\r\n        storeWorksDepths(coilId, drillingId, works)\r\n        updateDepths(coilId, drillingId)\r\n        updateUpload(coilId, drillingId)\r\n    }\r\n}",
            "Name": "RopeBinaryParse",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeDepthsUpdate {\r\n    data {\r\n        StartedIds array\r\n        StartedValues array\r\n        FinalIds array\r\n        FinalValues array\r\n    }\r\n\r\n    func absF(n float) float{\r\n        if n < 0{\r\n            return -1 * n\r\n        }\r\n        return n\r\n    }\r\n    func isEqual(a, b int) bool {\r\n        var res bool avg float\r\n        res = true\r\n        if $errorRate == 0 {\r\n            if a != b{\r\n                res = false\r\n                break\r\n            }\r\n        }else{\r\n            avg = Float(a+b) / 2\r\n            if avg != 0{\r\n                res = absF(a-avg)/avg <= $errorRate && absF(b-avg)/avg <= $errorRate\r\n            }\r\n        }\r\n        return res\r\n    }\r\n    func isSameDepth(m map, depthType string) bool{\r\n        var a b c int\r\n        if depthType == \"started\" {\r\n            a = Int(m[\"manufacturer_started\"])\r\n            b = Int(m[\"servicer_started\"])\r\n            c = Int(m[\"producer_started\"])\r\n        }else{\r\n            a = Int(m[\"manufacturer_final\"])\r\n            b = Int(m[\"servicer_final\"])\r\n            c = Int(m[\"producer_final\"])\r\n        }\r\n        if a < 0 || b < 0 || c < 0 {\r\n            return false\r\n        }\r\n        if 0 == a && a == b && b == c && c == a {\r\n            return true\r\n        }\r\n        return isEqual(a,b) || isEqual(a,c) || isEqual(b,c)\r\n    }\r\n    func notesRefresh(did, cid string){\r\n        var depthsLen i notesLen int notes array note map\r\n        depthsLen = Len(DBFind(\"rope_depths\").Where(\"deleted=0 and drilling_id=? and coil_id=? and (status_started=0 or status_final=0) and operation>0\", did, cid))\r\n        notes = DBFind(\"notifications\").Where(\"page_params->drilling_id=? and page_params->coil_id=?\", did, cid)\r\n        notesLen = Len(notes)\r\n\r\n        if depthsLen == 0 && notesLen > 0{\r\n            // closing notes\r\n            while i < notesLen {\r\n                note = notes[i]\r\n                notifications_Close(\"notific_id\", Int(note[\"id\"]))\r\n                i = i + 1\r\n            }\r\n        }else{\r\n            if depthsLen > 0 && notesLen == 0{\r\n                // sending notes\r\n                var rid closureType sender int textHeader pageName string params map\r\n                closureType = 2\r\n                sender = 1\r\n                textHeader = \"Need your action: correct depths\"\r\n                pageName = \"rope_depths\"\r\n                params[\"drilling_id\"] = did\r\n                params[\"coil_id\"] = cid\r\n                params = JSONEncode(params)\r\n                rid = Int(AppParam($appId, \"rope_manufacturer_role_id\"))\r\n                notifications_Send(\"rid,closure_type,sender,text_header,page_name,params_map\", rid, closureType, sender, textHeader, pageName, params)\r\n\r\n                rid = Int(AppParam($appId, \"rope_servicer_role_id\"))\r\n                notifications_Send(\"rid,closure_type,sender,text_header,page_name,params_map\", rid, closureType, sender, textHeader, pageName, params)\r\n\r\n                rid = Int(AppParam($appId, \"rope_producer_role_id\"))\r\n                notifications_Send(\"rid,closure_type,sender,text_header,page_name,params_map\", rid, closureType, sender, textHeader, pageName, params)\r\n            }\r\n        }\r\n    }\r\n    func finaledImports(did, cid string){\r\n        var uploads array i lenUploads int upload roles map\r\n        uploads = DBFind(\"rope_uploads\").Where(\"drilling_id=? and coil_id=? and deleted_at=0 and imported_at>0 and finaled_at=0\", did, cid)\r\n        lenUploads = Len(uploads)\r\n        while i<lenUploads{\r\n            upload = uploads[i]\r\n            roles[Str(upload[\"rid\"])] = 1\r\n            i=i+1\r\n        }\r\n        var count int\r\n        count = Len(GetMapKeys(roles))\r\n        if count >=3 {\r\n            i=0\r\n            while i<lenUploads{\r\n                upload = uploads[i]\r\n                DBUpdate(\"rope_uploads\", Int(upload[\"id\"]), \"finaled_at\", $time)\r\n                i=i+1\r\n            }\r\n        }\r\n    }\r\n    func calculateValues(type string){\r\n        Println(\"calculateValues\", type)\r\n        var ids values array i lenIds int depthField fields workField string\r\n        depthField = Sprintf(\"%v_%v\", $userRoles[Str($role_id)], type)\r\n\r\n        if type == \"started\"{\r\n            ids = $StartedIds\r\n            values = $StartedValues\r\n            fields = Sprintf(\"status_started,depth_started,%v\", depthField)\r\n            workField = \"depth_started\"\r\n        }\r\n        if type == \"final\"{\r\n            ids = $FinalIds\r\n            values = $FinalValues\r\n            fields = Sprintf(\"status_final,depth_final,%v\", depthField)\r\n            workField = \"depth_final\"\r\n        }\r\n        lenIds = Len(ids)\r\n        var id value int row map did cid where string\r\n        while i < lenIds {\r\n            id = Int(ids[i])\r\n            value = Int(values[i])\r\n            if id > 0{\r\n                row = DBFind(\"rope_depths\").Where(\"id=?\", id).Row()\r\n                if !(did == row[\"drilling_id\"] || cid == row[\"coil_id\"]){\r\n                    did = row[\"drilling_id\"]\r\n                    cid = row[\"coil_id\"]\r\n                }\r\n                row[depthField] = value\r\n                if isSameDepth(row, type) {\r\n                    var workId int\r\n                    workId = Int(DBFind(\"rope_works\").Where(\"coil_id=? and drilling_id=? and operation=?\", cid, did, row[\"operation\"]).One(\"id\"))\r\n                    if workId > 0{\r\n                        DBUpdate(\"rope_works\", workId, workField, value)\r\n                        DBUpdate(\"rope_depths\", id, fields, 1, value, value)\r\n                    }\r\n                }else{\r\n                    DBUpdate(\"rope_depths\", id, depthField, value)\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n        var drillings coils array d c lenDrillings lenCoils int drilling coil map\r\n        drillings = DBFind(\"rope_drillings\").Where(\"deleted=0\").Columns(\"id\")\r\n        coils = DBFind(\"rope_coils\").Where(\"deleted=0\").Columns(\"id\")\r\n        lenCoils = Len(coils)\r\n        lenDrillings = Len(drillings)\r\n        while d < lenDrillings{\r\n            drilling = drillings[d]\r\n            while c < lenCoils{\r\n                coil = coils[c]\r\n                notesRefresh(drilling[\"id\"], coil[\"id\"])\r\n                finaledImports(drilling[\"id\"], coil[\"id\"])\r\n                c=c+1\r\n            }\r\n            d=d+1\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        RopeRolesCondition()\r\n        $appId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name='Rope accounting'\").One(\"id\"))\r\n        var userRoles map\r\n        userRoles[AppParam($appId, \"rope_manufacturer_role_id\")] = \"manufacturer\"\r\n        userRoles[AppParam($appId, \"rope_servicer_role_id\")] = \"servicer\"\r\n        userRoles[AppParam($appId, \"rope_producer_role_id\")] = \"producer\"\r\n        $userRoles = userRoles\r\n        $errorRate = Float(AppParam($appId, \"rope_depth_error_rate\"))\r\n    }\r\n\r\n    action {\r\n        calculateValues(\"started\")\r\n        calculateValues(\"final\")\r\n    }\r\n}",
            "Name": "RopeDepthsUpdate",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeDrillingDelete {\r\n    data {\r\n        Id int\r\n    }\r\n\r\n    conditions {\r\n        if !DBFind(\"rope_drillings\").Where(\"id=?\", $Id).One(\"id\"){\r\n            warning \"The drilling not found\"\r\n        }\r\n    }\r\n    action {\r\n        DBUpdate(\"rope_drillings\", $Id, \"deleted\", 1)\r\n    }\r\n}",
            "Name": "RopeDrillingDelete",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeDrillingEdit {\r\n    data {\r\n        Id string \"optional\"\r\n        Filial string\r\n        Expedition string\r\n        Brigade string\r\n        Master string \"optional\"\r\n        BlockWeight int\r\n        CandleLength float\r\n    }\r\n\r\n    conditions {\r\n        $Id = Int($Id)\r\n        var appId int\r\n        appId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name='Rope accounting'\").One(\"id\"))\r\n        if DBFind(\"rope_drillings\").Where(\"deleted=0 and filial=?\",$Filial).One(\"id\"){\r\n            warning \"The filial name of the drill is already in use, please specify another name\"\r\n        }\r\n        if $Id > 0 {\r\n            if !DBFind(\"rope_drillings\").Where(\"id=?\", $Id).One(\"id\"){\r\n                warning \"The drilling not found\"\r\n            }\r\n        }\r\n    }\r\n    action {\r\n        if $Id > 0 {\r\n            DBUpdate(\"rope_drillings\", $Id, \"filial,expedition,brigade,master,block_weight,candle_length\", $Filial, $Expedition, $Brigade, $Master, $BlockWeight, $CandleLength)\r\n        }else{\r\n            DBInsert(\"rope_drillings\", \"filial,expedition,brigade,master,block_weight,candle_length\", $Filial, $Expedition, $Brigade, $Master, $BlockWeight, $CandleLength)\r\n        }\r\n    }\r\n}",
            "Name": "RopeDrillingEdit",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeDepthsUpdateWrapper {\r\n    data {\r\n        StartedIds string\r\n        StartedValues string\r\n        FinalIds string\r\n        FinalValues string\r\n    }\r\n\r\n    conditions {}\r\n\r\n    action {\r\n        RopeDepthsUpdate(\r\n            \"StartedIds,StartedValues,FinalIds,FinalValues\",\r\n            JSONDecode($StartedIds),\r\n            JSONDecode($StartedValues),\r\n            JSONDecode($FinalIds),\r\n            JSONDecode($FinalValues)\r\n        )\r\n    }\r\n}",
            "Name": "RopeDepthsUpdateWrapper",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeUpload {\r\n    data {\r\n        Data string \"file\"\r\n    }\r\n    func pack(items ...)array{\r\n        return items\r\n    }\r\n    func updateUpload(bid int, name string){\r\n        var inf map fields string values array\r\n        inf = DBFind(\"rope_uploads\").Where(\"binary_id=?\", bid).Row()\r\n        fields = \"kid,rid,file_name,binary_id,uploaded_at\"\r\n        values = pack($key_id, $role_id, name, bid, $time)\r\n        if inf {\r\n            DBUpdate(\"rope_uploads\", bid, fields, values...)\r\n        }else{\r\n            DBInsert(\"rope_uploads\", fields, values...)\r\n        }\r\n    }\r\n    conditions {\r\n        $appId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name='Rope accounting'\").One(\"id\"))\r\n        RopeRolesCondition()\r\n    }\r\n    action {\r\n        var name string bid finaled_count int \r\n        finaled_count = Len(DBFind(\"rope_uploads\").Where(\"finaled_at>0\"))/3\r\n        name = Sprintf(\"rid_%v_%v-import.xlsm\", $role_id, finaled_count)\r\n        bid = @1UploadBinary(\"Name,Data,ApplicationId,DataMimeType\", name, $Data, $appId, $DataMimeType)\r\n\r\n        updateUpload(bid, name)\r\n    }\r\n}",
            "Name": "RopeUpload",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeWorksCalculate {\r\n    data {}\r\n    func extend(a, b array)array{\r\n        var i lena lenb int\r\n        lena = Len(a)\r\n        lenb = Len(b)\r\n        while i<lenb{\r\n            a[lena+i] = b[i]\r\n            i=i+1\r\n        }\r\n        return a\r\n    }\r\n    func findAll(table, where string) array {\r\n        var full parts array limit offset int\r\n        limit = 250\r\n        while true {\r\n            parts = DBFind(table).Where(where).Offset(offset).Limit(limit)\r\n            if Len(parts) > 0 {\r\n                if Len(full) == 0 {\r\n                    full = parts\r\n                }else{\r\n                    full = extend(full, parts)\r\n                }\r\n            }else{\r\n                break\r\n            }\r\n            offset = offset+limit\r\n        }\r\n        return full\r\n    }\r\n    func getAbsFloat(n float) float{\r\n        if n < 0{\r\n            return -1 * n\r\n        }\r\n        return n\r\n    }\r\n    func safeFloat(num ...)float{\r\n        var res float\r\n        if Len(num) != 0{\r\n            if num[0] {\r\n                res = Float(num[0])\r\n            }\r\n        }\r\n        return res\r\n    }\r\n    func getMapValues(m map, keys array) array {\r\n        var values array i keysLen int key string\r\n        keysLen = Len(keys)\r\n        while i < keysLen {\r\n            key = keys[i]\r\n            values = Append(values, m[key])\r\n            i=i+1\r\n        }\r\n        return values\r\n    }\r\n    conditions {\r\n        RopeRolesCondition()\r\n        $appId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name='Rope accounting'\").One(\"id\"))\r\n        var userRoles map\r\n        userRoles[AppParam($appId, \"rope_manufacturer_role_id\")] = \"manufacturer\"\r\n        userRoles[AppParam($appId, \"rope_servicer_role_id\")] = \"servicer\"\r\n        userRoles[AppParam($appId, \"rope_producer_role_id\")] = \"producer\"\r\n        $userRoles = userRoles\r\n        $errorRate = safeFloat(AppParam($appId, \"rope_depth_error_rate\"))\r\n    }\r\n\r\n    action {\r\n        Println($this_contract)\r\n        var works array cols op string i lenWorks int work workPrev coil drilling map\r\n        works = findAll(\"rope_works\", \"id>0\")\r\n        lenWorks = Len(works)\r\n\r\n        var w1 w2 d1 d2 cl bw pw float\r\n        while i<lenWorks {\r\n            if i > 0 {\r\n                workPrev = work\r\n            }\r\n            work = works[i]\r\n            if work[\"coil_id\"] != coil[\"id\"]{\r\n                coil = DBFind(\"rope_coils\").Where(\"id=?\", work[\"coil_id\"]).Row()\r\n            }\r\n            if work[\"drilling_id\"] != drilling[\"id\"]{\r\n                drilling = DBFind(\"rope_drillings\").Where(\"id=?\", work[\"drilling_id\"]).Row()\r\n                cl = safeFloat(drilling[\"candle_length\"])\r\n                bw = safeFloat(drilling[\"block_weight\"])\r\n                pw = safeFloat(drilling[\"previous_workout\"])\r\n            }\r\n            op = work[\"operation_type\"]\r\n            w1 = safeFloat(work[\"weight_started\"])\r\n            w2 = safeFloat(work[\"weight_final\"])\r\n            d1 = safeFloat(work[\"depth_started\"])\r\n            d2 = safeFloat(work[\"depth_final\"])\r\n\r\n            // \"Наработка Lн, тк.м\"\r\n            work[\"work_started\"] = (w1 * (d1 + cl) + (4 * d1 * bw))/1000.0\r\n\r\n            // \"Наработка Lк, т.км\"\r\n            work[\"work_final\"] = (w2 * (d2 + cl) + (4 * d2 * bw))/1000.0\r\n\r\n            // \"Наработка за операцию, т.км\"\r\n            if op == \"Подъем\"{\r\n                work[\"work_operation\"] = getAbsFloat(work[\"work_final\"] - work[\"work_started\"])*0.5\r\n            }elif op == \"Спуск\"{\r\n                work[\"work_operation\"] = getAbsFloat(work[\"work_final\"] - work[\"work_started\"])*0.5\r\n            }elif op == \"СПО\"{\r\n                work[\"work_operation\"] = getAbsFloat(work[\"work_final\"] - work[\"work_started\"])\r\n            }elif op == \"Бурение\"{\r\n                work[\"work_operation\"] = getAbsFloat(work[\"work_final\"] - work[\"work_started\"])*3\r\n            }elif op == \"Отбор керна\"{\r\n                work[\"work_operation\"] = getAbsFloat(work[\"work_final\"] - work[\"work_started\"])*2\r\n            }elif op == \"Проработка\"{\r\n                work[\"work_operation\"] = getAbsFloat(work[\"work_final\"] - work[\"work_started\"])*2\r\n            }elif op == \"Шаблонировка\"{\r\n                work[\"work_operation\"] = getAbsFloat(work[\"work_final\"] - work[\"work_started\"])*2\r\n            }elif op == \"Спуск обсадной колонны\"{\r\n                work[\"work_operation\"] = work[\"work_final\"]*0.5\r\n            }elif op == \"Технологическое СПО\" {\r\n                work[\"work_operation\"] = getAbsFloat(work[\"work_final\"] - work[\"work_started\"])\r\n            }elif op == \"Аварийные работы\"{\r\n                work[\"work_operation\"] = work[\"work_final\"]*2\r\n            }else{\r\n                work[\"work_operation\"] = 0\r\n            }\r\n\r\n\r\n            // \"Наработка нарастающая до перепуска\"\r\n            if work[\"operation\"] == 1 {\r\n                work[\"work_bypass\"] = work[\"work_operation\"]\r\n            }elif work[\"work_operation\"] == 0 {\r\n                work[\"work_bypass\"] = 0\r\n            }else{\r\n                work[\"work_bypass\"] = work[\"work_operation\"] + workPrev[\"work_bypass\"]\r\n            }\r\n            // \"Наработка нарастающая на бухту\"\r\n            if work[\"operation\"] == 1 {\r\n                work[\"work_coil\"] = work[\"work_bypass\"] + pw\r\n            }else{\r\n                work[\"work_coil\"] = work[\"work_operation\"] + safeFloat(workPrev[\"work_coil\"])\r\n            }\r\n\r\n            var keys values array\r\n            if work[\"operation_date\"] == \"\"{\r\n                work[\"operation_date\"] = \"NULL\"\r\n            }\r\n            keys = GetMapKeys(work)\r\n            values = getMapValues(work, keys)\r\n            DBUpdate(\"rope_works\", Int(work[\"id\"]), Join(keys,\",\"), values...)\r\n            i=i+1\r\n        }\r\n\r\n    }\r\n}",
            "Name": "RopeWorksCalculate",
            "Type": "contracts"
        }
    ]
}