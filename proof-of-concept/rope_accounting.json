{
    "name": "Rope accounting",
    "data": [
        {
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:$rope_upload$, Page: rope_upload, Icon:\"icon-list\")\nMenuItem(Title:$rope_works$, Page: rope_works, Icon:\"icon-list\")\nMenuItem(Title:$rope_depths$, Page:rope_depths, Icon:\"icon-list\")",
            "Name": "default_menu",
            "Type": "menu"
        },
        {
            "Name": "rope_upload",
            "Trans": "{\n    \"ru\": \"Загрузка данных\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_works",
            "Trans": "{\n    \"ru\": \"Учет наработки\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_coils",
            "Columns": "[\n    {\n        \"conditions\": \"true\",\n        \"name\": \"certificate\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"deleted\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"diameter\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"length_full\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"length_rigging\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"previous_workout\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "rope_depths",
            "Columns": "[\n    {\n        \"conditions\": \"true\",\n        \"name\": \"deleted\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"operation\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"rope_drilling_id\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"manufacturer_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"manufacturer_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"servicer_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"servicer_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"producer_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"producer_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"status_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"status_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"depth_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"depth_started\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "rope_drillings",
            "Columns": "[\n    {\n        \"conditions\": \"true\",\n        \"name\": \"name\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"deleted\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"expedition\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"brigade\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"master\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"block_weight\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"candle_length\",\n        \"type\": \"number\"\n    }\n    \n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "rope_works",
            "Columns": "[\n    {\n        \"conditions\": \"true\",\n        \"name\": \"deleted\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"depth_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"depth_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"weight_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"weight_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"bypass_bracing\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"operation_date\",\n        \"type\": \"datetime\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"operation\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"rope_drilling_id\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"rope_coil_id\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0.01",
            "Name": "rope_depth_error_rate",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "rope_manufacturer_role_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "rope_producer_role_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "rope_servicer_role_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\nSetTitle($rope_depths$)\nDiv(content-wrapper){\n    Form(panel panel-primary){\n        Div(panel-body){\n            DBFind(rope_depths, src_depths).Custom(_started){\n                If(#status_started#==0){\n                    Button(Class: btn btn-primary, Body: #manufacturer_started#, Page: rope_depths, Contract: rope_DepthCheck, Params: \"Id=#id#,Value=#manufacturer_started#,Type=started\")\n                    Button(Class: btn btn-primary, Body: #producer_started#, Page: rope_depths, Contract: rope_DepthCheck, Params: \"Id=#id#,Value=#producer_started#,Type=started\")\n                    Button(Class: btn btn-primary, Body: #servicer_started#, Page: rope_depths, Contract: rope_DepthCheck, Params: \"Id=#id#,Value=#servicer_started#,Type=started\")\n                }.Else{\n                    #depth_started#\n                }\n            }.Custom(_final){\n                If(#status_final#==0){\n                    Button(Class: btn btn-primary, Body: #manufacturer_final#, Page: rope_depths, Contract: rope_DepthCheck, Params: \"Id=#id#,Value=#manufacturer_final#,Type=final\")\n                    Button(Class: btn btn-primary, Body: #producer_final#, Page: rope_depths, Contract: rope_DepthCheck, Params: \"Id=#id#,Value=#producer_final#,Type=final\")\n                    Button(Class: btn btn-primary, Body: #servicer_final#, Page: rope_depths, Contract: rope_DepthCheck, Params: \"Id=#id#,Value=#servicer_final#,Type=final\")\n                }.Else{\n                    #depth_final#\n                }\n            }.Where(\"deleted=0 and (status_final=0 or status_started=0)\").Count(depths_count).Order(\"id\")\n\n            Div(row){\n                Div(col-md-12){\n                    If(#depths_count#>0){\n                        Div(table-responsive){\n                            Table(src_depths,\"drilling_id=rope_drilling_id,operation=operation,depth_started=_started,status_started=status_started,depth_final=_final,status_final=status_final\")\n                        }\n                    }.Else{\n                        Div(text-center h3){\n                            all depths are correct\n                        }\n                    }\n                }\n            }\n        }.Style(\n            th,td {text-align:center;}\n        )\n    }\n}",
            "Name": "rope_depths",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\n\nDiv(content-wrapper){\n    TODO: upload form for rope_works\n}",
            "Name": "rope_upload",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\nDBFind(rope_works,works)\nSetTitle($rope_works$)\nDiv(content-wrapper){\n    Div(panel panel-primary){\n        Div(panel-body){\n            Div(table-responsive){\n                Table(works)\n            }\n        }\n    }\n}",
            "Name": "rope_works",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract rope_DepthCheck {\r\n    data {\r\n        Id int\r\n        Type string\r\n        Value int\r\n    }\r\n    func getField() string {\r\n        var field string\r\n        if $role_id == $manufacturerRid {\r\n            field = Sprintf(\"manufacturer_%v\", $Type)\r\n        }\r\n        if $role_id == $servicerRid {\r\n            field = Sprintf(\"servicer_%v\", $Type)\r\n        }\r\n        if $role_id == $producerRid {\r\n            field = Sprintf(\"producer_%v\", $Type)\r\n        }\r\n        return field\r\n\r\n    }\r\n    func absFloat(n float) float{\r\n        if n < 0{\r\n            return -1 * n\r\n        }\r\n        return n\r\n    }\r\n    func isCommonValue(m map, depthType string) bool{\r\n        var res bool avgValue absError float values array\r\n        if depthType == \"started\" {\r\n            values[0] = Int(m[\"manufacturer_started\"])\r\n            values[1] = Int(m[\"servicer_started\"])\r\n            values[2] = Int(m[\"producer_started\"])\r\n        }else{\r\n            values[0] = Int(m[\"manufacturer_final\"])\r\n            values[1] = Int(m[\"servicer_final\"])\r\n            values[2] = Int(m[\"producer_final\"])\r\n        }\r\n        Println(\"values\",values)\r\n        res = values[0] == values[1] || values[1] == values[2] || values[0] == values[2]\r\n        // if $errorRate == 0 {\r\n        // Println(\"errorRate is zero\")\r\n        // res = values[0] == values[1] == values[2]\r\n        // }else{\r\n        // avgValue = Float(values[0] + values[1] + values[2])/3\r\n        // Println(\"avgValue\",avgValue)\r\n        // absError = absFloat(Float($Value - avgValue))\r\n        // Println(\"absError\",absError)\r\n        // if avgValue != 0{\r\n        // res = absError/avgValue <= $errorRate\r\n        // Println(\"res\", absError/avgValue, $errorRate)\r\n        // }else{\r\n        // res = true\r\n        // }\r\n        // }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        if !($Type == \"started\" || $Type == \"final\"){\r\n            warning \"Invalid field type\"\r\n        }\r\n        $depth = DBFind(\"rope_depths\").Where(\"id=?\", $Id).Row()\r\n        if !$depth {\r\n            warning \"rope_depths: row not found\"\r\n        }\r\n        $workId = Int(DBFind(\"rope_works\").Where(\"rope_drilling_id=? and operation=?\", $depth[\"rope_drilling_id\"], $depth[\"operation\"]).One(\"id\"))\r\n        if $workId == 0 {\r\n            warning \"rope_works: row not found\"\r\n        }\r\n        var appId int\r\n        appId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name='Rope accounting'\").One(\"id\"))\r\n        $manufacturerRid = Int(AppParam(appId, \"rope_manufacturer_role_id\"))\r\n        $producerRid = Int(AppParam(appId, \"rope_producer_role_id\"))\r\n        $servicerRid = Int(AppParam(appId, \"rope_servicer_role_id\"))\r\n        if $manufacturerRid==$producerRid || $producerRid==$servicerRid || $manufacturerRid==$servicerRid {\r\n            warning \"Invalid set roles\"\r\n        }\r\n        if !($role_id == $servicerRid || $role_id == $producerRid || $role_id == $manufacturerRid){\r\n            warning \"Your role not allowed for this action\"\r\n        }\r\n        // $errorRate = Float(AppParam(appId, \"rope_depth_error_rate\"))\r\n    }\r\n\r\n    action {\r\n        var depthField string depth map\r\n        depthField = getField()\r\n\r\n        // issue: \"interface conversion: interface {} is map[string]string, not map[string]interface {}\"\r\n        depth[\"manufacturer_started\"] = Int($depth[\"manufacturer_started\"])\r\n        depth[\"servicer_started\"] = Int($depth[\"servicer_started\"])\r\n        depth[\"producer_started\"] = Int($depth[\"producer_started\"])\r\n        depth[\"manufacturer_final\"] = Int($depth[\"manufacturer_final\"])\r\n        depth[\"servecer_final\"] = Int($depth[\"servecer_final\"])\r\n        depth[\"producer_final\"] = Int($depth[\"producer_final\"])\r\n        depth[depthField] = $Value\r\n        //\r\n\r\n        if isCommonValue(depth, $Type) {\r\n            Println(\"is Correct Value\")\r\n            var fields workField string\r\n            if $Type == \"started\"{\r\n                fields = Sprintf(\"status_started,depth_started,%v\", depthField)\r\n                workField = \"depth_started\"\r\n            }else{\r\n                fields = Sprintf(\"status_final,depth_final,%v\", depthField)\r\n                workField = \"depth_final\"\r\n            }\r\n            DBUpdate(\"rope_works\", $workId, workField, $Value)\r\n            DBUpdate(\"rope_depths\", $Id, fields, 1, $Value, $Value)\r\n\r\n        }else{\r\n            Println(\"is not Correct Value\")\r\n            DBUpdate(\"rope_depths\", $Id, depthField, $Value)\r\n        }\r\n\r\n        var lenDepths int\r\n        lenDepths = Len(DBFind(\"rope_depths\").Where(\"deleted=0 and rope_drilling_id=? and (status_started=0 or status_final=0)\", $depth[\"rope_drilling_id\"]))\r\n        if lenDepths == 0 {\r\n            var notes array i int\r\n            notes = DBFind(\"notifications\").Where(\"page_params->rope_drilling_id=?\",$depth[\"rope_drilling_id\"])\r\n            while i < Len(notes){\r\n                var note map\r\n                note = notes[i]\r\n                notifications_Close(\"notific_id\", Int(note[\"id\"]))\r\n                i = i + 1\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "rope_DepthCheck",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract rope_Mock {\r\n    data {}\r\n    conditions {}\r\n\r\n    action {\r\n        var d map depths array i count val1 val2 int\r\n        count = 3\r\n        val1 = 1000\r\n        val2 = 100\r\n        while i < count {\r\n            d[\"manufacturer_final\"] = val1 + Random(0,4+i) - 2 - i\r\n            d[\"servicer_final\"] = val1 - 10*i + Random(0,4+i) - 2 - i\r\n            d[\"producer_final\"] = val1 - 20*i + Random(0,4+i) - 2 - i\r\n\r\n            d[\"manufacturer_started\"] = val2 + Random(0,4+i) - 2 - i\r\n            d[\"servicer_started\"] = val2 - 1*i + Random(0,4+i) - 2 - i\r\n            d[\"producer_started\"] = val2 - 2*i + Random(0,4+i) - 2 - i\r\n\r\n            d[\"operation\"] = i + 1\r\n            d[\"rope_drilling_id\"] = 1\r\n            d[\"status_started\"] = 0\r\n            d[\"status_final\"] = 0\r\n            if !DBFind(\"rope_works\").Where(\"operation=? and rope_drilling_id=1\", d[\"operation\"]).One(\"id\"){\r\n                DBInsert(\"rope_works\", \"operation,rope_drilling_id\", d[\"operation\"], d[\"rope_drilling_id\"])\r\n            }\r\n            var depth map\r\n            depth = DBFind(\"rope_depths\").Where(\"operation=? and rope_drilling_id=1\", d[\"operation\"]).Row()\r\n            if depth{\r\n                DBUpdate(\"rope_depths\", Int(depth[\"id\"]), \"manufacturer_final,manufacturer_started,servicer_final,servicer_started,producer_final,producer_started,status_started,status_final\", d[\"manufacturer_final\"], d[\"manufacturer_started\"], d[\"servicer_final\"], d[\"servicer_started\"], d[\"producer_final\"], d[\"producer_started\"], d[\"status_started\"], d[\"status_final\"])\r\n            }else{\r\n                DBInsert(\"rope_depths\", \"operation,rope_drilling_id,manufacturer_final,manufacturer_started,servicer_final,servicer_started,producer_final,producer_started,status_started,status_final\", d[\"operation\"], d[\"rope_drilling_id\"], d[\"manufacturer_final\"], d[\"manufacturer_started\"], d[\"servicer_final\"], d[\"servicer_started\"], d[\"producer_final\"], d[\"producer_started\"], d[\"status_started\"], d[\"status_final\"])\r\n            }\r\n            i=i+1\r\n        }\r\n    }\r\n}",
            "Name": "rope_Mock",
            "Type": "contracts"
        }
    ]
}