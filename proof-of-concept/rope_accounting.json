{
    "name": "Rope accounting",
    "data": [
        {
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:$rope_upload$, Page: rope_upload, Icon:\"fa fa-upload\")\nMenuItem(Title:$rope_works$, Page: rope_works, Icon:\"icon-list\")\nMenuItem(Title:$rope_depths$, Page:rope_depths, Icon:\"icon-list\")\nMenuItem(Title:$rope_drillings$, Page: rope_drillings, Icon:\"icon-list\")",
            "Name": "default_menu",
            "Type": "menu"
        },
        {
            "Name": "rope_all_depths_ok",
            "Trans": "{\n    \"ru\": \"Рассогласования показаний датчиков глубины не найдено\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_block_weight",
            "Trans": "{\n    \"ru\": \"Вес блока\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_block_weight_full",
            "Trans": "{\n    \"ru\": \"Вес талевого блока + вертлюга или ВСП\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_brigade",
            "Trans": "{\n    \"ru\": \"Бригада\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_candle_length",
            "Trans": "{\n    \"ru\": \"Длина свечи\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_create",
            "Trans": "{\n    \"ru\": \"Создать\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_data_confirmed",
            "Trans": "{\n    \"ru\": \"данные подтверждены\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_data_conflict",
            "Trans": "{\n    \"ru\": \"конфликт данных\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_data_input",
            "Trans": "{\n    \"ru\": \"Ввод данных\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_depth_final",
            "Trans": "{\n    \"ru\": \"Глубина в конце операции\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_depth_started",
            "Trans": "{\n    \"ru\": \"Глубина начала операции\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_depths",
            "Trans": "{\n    \"ru\": \"Таблица голосования за глубину при рассогласовании показаний датчиков\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_drilling_create",
            "Trans": "{\n    \"ru\": \"Новая буровая\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_drilling_edit",
            "Trans": "{\n    \"ru\": \"Изменить буровую\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_drilling_id",
            "Trans": "{\n    \"ru\": \"Номер буровой\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_drillings",
            "Trans": "{\n    \"ru\": \"Буровые\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_drillings_not_found",
            "Trans": "{\n    \"ru\": \"Буровых не найдено\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_edit",
            "Trans": "{\n    \"ru\": \"Редактировать\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_expedition",
            "Trans": "{\n    \"ru\": \"Экспедиция\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_filial",
            "Trans": "{\n    \"ru\": \"Филиал\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_manufacturer",
            "Trans": "{\n    \"ru\": \"производитель\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_master",
            "Trans": "{\n    \"ru\": \"Мастер\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_name",
            "Trans": "{\n    \"ru\": \"Название\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_operation",
            "Trans": "{\n    \"ru\": \"Номер операции\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_producer",
            "Trans": "{\n    \"ru\": \"добытчик\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_servicer",
            "Trans": "{\n    \"ru\": \"наладчик\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_ton",
            "Trans": "{\n    \"ru\": \"тонны\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_upload",
            "Trans": "{\n    \"ru\": \"Загрузка данных\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_works",
            "Trans": "{\n    \"ru\": \"Учет наработки\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_coils",
            "Columns": "[\n    {\n        \"conditions\": \"true\",\n        \"name\": \"certificate\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"deleted\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"diameter\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"length_full\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"length_rigging\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"previous_workout\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "rope_depths",
            "Columns": "[\n    {\n        \"conditions\": \"true\",\n        \"name\": \"deleted\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"operation\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"rope_drilling_id\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"manufacturer_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"manufacturer_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"servicer_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"servicer_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"producer_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"producer_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"status_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"status_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"depth_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"depth_started\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "rope_drillings",
            "Columns": "[\n    {\n        \"conditions\": \"true\",\n        \"name\": \"filial\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"deleted\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"expedition\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"brigade\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"master\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"block_weight\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"candle_length\",\n        \"type\": \"double\"\n    }\n    \n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "rope_works",
            "Columns": "[\n    {\n        \"conditions\": \"true\",\n        \"name\": \"deleted\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"depth_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"depth_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"weight_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"weight_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"bypass_bracing\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"operation_date\",\n        \"type\": \"datetime\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"operation\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"rope_drilling_id\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"rope_coil_id\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0.01",
            "Name": "rope_depth_error_rate",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "rope_manufacturer_role_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "rope_producer_role_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "rope_servicer_role_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\nSetTitle($rope_depths$)\nDBFind(rope_depths, src_depths).Custom(_started){\n    If(#status_started#==0){\n        Div(text-warning){LangRes(rope_data_conflict)}\n\n        ArrayToSource(src_started#id#, [#manufacturer_started#,#producer_started#,#servicer_started#])\n        Select(Name: StartedValues, Source: src_started#id#,NameColumn: value, ValueColumn: value)\n        Input(Name: StartedIds, Type:hidden, Value: #id#)\n    }.Else{\n        Div(text-success){LangRes(rope_data_confirmed)}\n        #depth_started#\n        Input(Name: StartedValues, Type:hidden, Value: 0)\n        Input(Name: StartedIds, Type:hidden, Value: 0)\n    }\n}.Custom(_final){\n    If(#status_final#==0){\n        Div(text-warning){LangRes(rope_data_conflict)}\n\n        ArrayToSource(src_final#id#, [#manufacturer_final#,#producer_final#,#servicer_final#])\n        Select(Name: FinalValues, Source: src_final#id#,NameColumn: value, ValueColumn: value)\n        Input(Name: FinalIds, Type:hidden, Value: #id#)\n    }.Else{\n        Div(text-success){LangRes(rope_data_confirmed)}\n        #depth_final#\n        Input(Name: FinalValues, Type:hidden, Value: 0)\n        Input(Name: FinalIds, Type:hidden, Value: 0)\n    }\n}.Where(\"deleted=0 and (status_final=0 or status_started=0)\").Count(depths_count).Order(\"id\")\n\nDiv(content-wrapper){\n    If(#depths_count#>0){\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    Div(col-md-12){\n                        Div(table-responsive){\n                            Table(src_depths,\"$rope_drilling_id$=rope_drilling_id,$rope_operation$=operation,$rope_depth_started$=_started,$rope_depth_final$=_final\")\n                        }\n                    }\n                }\n            }\n            Div(panel-footer text-right){\n                Button(Class: btn btn-primary, Body: send, Page: rope_depths, Contract: RopeDepthSet, Params: \"Id=#id#,Value=#servicer_final#,Type=final\")\n            }\n        }\n    }.Else{\n        Div(row){\n            Div(text-center h3){\n                LangRes(rope_all_depths_ok)\n            }\n        }\n    }\n}.Style(\n    th,td {text-align:center;}\n    .radio {display:inline-block;margin-right:10px;}\n)",
            "Name": "rope_depths",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\nSetVar(left_col,\"col-sm-4 mt-sm text-right\").(right_col,\"col-sm-8 text-left\")\n\nSetVar(title,$rope_drilling_create$)\nSetVar(btn_title,$rope_create$)\nSetVar(drilling_filial,).(drilling_expedition,).(drilling_brigade,).(drilling_master,).(drilling_block_weight,).(drilling_candle_length,)\nIf(GetVar(Id)){\n    DBFind(rope_drillings).Where(\"id=#Id#\").Vars(drilling)\n    SetVar(title,$rope_drilling_edit$)\n    SetVar(btn_title,$rope_edit$)\n}\nSetTitle(#title#)\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage(Body: $rope_drillings$, Page: rope_drillings)\n        Span(/, mh-sm)\n        Span(#title#, text-muted)\n    }\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading){\n                    LangRes($rope_data_input$)\n                }\n                Div(panel-body){\n                    If(GetVar(Id)){\n                        Input(Name: Id, Type:hidden, Value: #Id#)\n                    }\n                    Div(row mt-sm){\n                        Div(#left_col#){\n                            LangRes(rope_filial)\n                        }\n                        Div(#right_col#){\n                            Input(Name: Filial, Value: #drilling_filial#)\n                        }\n                    }\n                    Div(row mt-sm){\n                        Div(#left_col#){\n                            LangRes(rope_expedition)\n                        }\n                        Div(#right_col#){\n                            Input(Name: Expedition, Value: #drilling_expedition#)\n                        }\n                    }\n                    Div(row mt-sm){\n                        Div(#left_col#){\n                            LangRes(rope_brigade)\n                        }\n                        Div(#right_col#){\n                            Input(Name: Brigade, Value: #drilling_brigade#)\n                        }\n                    }\n                    Div(row mt-sm){\n                        Div(#left_col#){\n                            LangRes(rope_master)\n                        }\n                        Div(#right_col#){\n                            Input(Name: Master, Value: #drilling_master#)\n                        }\n                    }\n                    Div(row mt-sm){\n                        Div(#left_col#){\n                            $rope_block_weight_full$, $rope_ton$\n                        }\n                        Div(#right_col#){\n                            Input(Name: BlockWeight, Type: number, Value: #drilling_block_weight#)\n                        }\n                    }\n                    Div(row mt-sm){\n                        Div(#left_col#){\n                            LangRes(rope_candle_length)\n                        }\n                        Div(#right_col#){\n                            Input(Name: CandleLength, Type:number, Value: #drilling_candle_length#)\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: #btn_title#, Page: rope_drillings, Class: btn btn-primary, Contract: RopeDrillingEdit)\n                }\n            }\n        }\n    }\n}",
            "Name": "rope_drilling_edit",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\nDBFind(rope_drillings,drillings).Count(count_drillings).Custom(_actions){\n    Div(text-right){\n        Button(Page: rope_drilling_edit, Class: btn btn-default fa fa-pencil mr-sm, PageParams: \"Id=#id#\")\n        Button(Page: rope_drilling_edit, Class: btn btn-danger fa fa-trash, Contract: RopeDrillingDelete, Params: \"Id=#id#\")\n    }\n}\nSetTitle($rope_drillings$)\nAddToolButton(Title: $rope_create$, Icon: icon-plus, Page: rope_drilling_edit)\nDiv(content-wrapper){\n    Div(panel panel-primary){\n        If(#count_drillings#>0){\n            Div(panel-body){\n                Div(table-responsive){\n                    Table(drillings,\"$rope_filial$=filial,$rope_expedition$=expedition,$rope_brigade$=brigade,$rope_master$=master,$rope_block_weight$=block_weight,$rope_candle_length$=candle_length,=_actions\")\n                }\n            }\n        }.Else{\n            Div(row){\n                Div(text-center h3){\n                    LangRes(rope_drillings_not_found)\n                }\n            }\n        }\n    }\n}",
            "Name": "rope_drillings",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetTitle($rope_upload$)\nDiv(content-wrapper){\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(form-group){\n                        Input(Name: Data, Type: file)\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: $rope_upload$, Page: rope_works, Class: btn btn-primary, Contract: RopeUpload)\n                }\n            }\n        }\n    }\n}",
            "Name": "rope_upload",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\nDBFind(rope_works,works)\nSetTitle($rope_works$)\nAddToolButton(Title: $rope_upload$, Icon: fa fa-upload, Page: rope_upload)\nDiv(content-wrapper){\n    Div(panel panel-primary){\n        Div(panel-body){\n            Div(table-responsive){\n                Table(works)\n            }\n        }\n    }\n}",
            "Name": "rope_works",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeBinaryToWorks {\r\n    data {\r\n        Id string \"optional\"\r\n    }\r\n    func getWorkIndexes(cells array) map{\r\n        var indexes map i cellsLen int s string\r\n        // default indexes\r\n        indexes[\"operation_date\"] = 3\r\n        indexes[\"operation\"] = 4\r\n        indexes[\"depth_started\"] = 6\r\n        indexes[\"depth_final\"] = 7\r\n        indexes[\"weight_started\"] = 8\r\n        indexes[\"weight_final\"] = 9\r\n        indexes[\"bypass_bracing\"] = 13\r\n        cellsLen = Len(cells)\r\n        while i < cellsLen{\r\n            // correction indexes\r\n            s = ToLower(TrimSpace(cells[i]))\r\n            if HasPrefix(s, \"дата\") && Contains(s,\"операции\"){\r\n                indexes[\"operation_date\"] = i\r\n            }\r\n            if HasPrefix(s, \"№\") && Contains(s,\"операции\"){\r\n                indexes[\"operation\"] = i\r\n            }\r\n            if HasPrefix(s, \"глубина\") && Contains(s,\"начала\"){\r\n                indexes[\"depth_started\"] = i\r\n            }\r\n            if HasPrefix(s, \"глубина\") && Contains(s,\"конце\") {\r\n                indexes[\"depth_final\"] = i\r\n            }\r\n            if HasPrefix(s, \"вес\") && Contains(s,\"крюке\") && Contains(s,\"начале\"){\r\n                indexes[\"weight_started\"] = i\r\n            }\r\n            if HasPrefix(s, \"вес\") && Contains(s,\"крюке\") && Contains(s,\"конце\"){\r\n                indexes[\"weight_final\"] = i\r\n            }\r\n            if HasPrefix(s, \"перепуск\") && Contains(s,\"перетяжка\"){\r\n                indexes[\"bypass_bracing\"] = i\r\n            }\r\n            if s == \"примечание\" {\r\n                break\r\n            }\r\n            i=i+1\r\n        }\r\n        return indexes\r\n    }\r\n    func parseRows(rows array) array {\r\n        var i rowsLen int indexes map rowsRes array\r\n        indexes = getWorkIndexes(rows[0])\r\n        Println(indexes)\r\n        i = 1\r\n        rowsLen = Len(rows)\r\n        while i<rowsLen {\r\n            var work map row array\r\n            row = rows[i]\r\n            work[\"depth_final\"] = row[indexes[\"depth_final\"]]\r\n            work[\"depth_started\"] = row[indexes[\"depth_started\"]]\r\n            work[\"weight_final\"] = row[indexes[\"weight_final\"]]\r\n            work[\"weight_started\"] = row[indexes[\"weight_started\"]]\r\n            work[\"bypass_bracing\"] = row[indexes[\"bypass_bracing\"]]\r\n            work[\"operation_date\"] = row[indexes[\"operation_date\"]]\r\n            work[\"operation\"] = row[indexes[\"operation\"]]\r\n\r\n            // \"rope_drilling_id\"\r\n            // \"rope_coil_id\"\r\n            if work[\"operation\"] {\r\n                // stored data row only if has operation\r\n                rowsRes = Append(rowsRes, work)\r\n            }\r\n            i=i+1\r\n        }\r\n        return rowsRes\r\n    }\r\n    func getParsedAfter(search string, rows array) array {\r\n        var i rowsLen int rowsRes array canCopy bool\r\n        rowsLen = Len(rows)\r\n        while i < rowsLen {\r\n            var cells array c cellsLen notEmptyCellCount int\r\n            cells = rows[i]\r\n            cellsLen = Len(cells)\r\n            while c < cellsLen {\r\n                if Size(cells[c]) > 0{\r\n                    notEmptyCellCount = notEmptyCellCount+1\r\n                }\r\n                if search == cells[c] {\r\n                    canCopy = true\r\n                }\r\n                c = c+1\r\n            }\r\n            if canCopy && notEmptyCellCount > 0 {\r\n                rowsRes = Append(rowsRes, rows[i])\r\n            }\r\n            if canCopy && notEmptyCellCount == 0 {\r\n                break\r\n            }\r\n            i = i+1\r\n        }\r\n        return parseRows(rowsRes)\r\n    }\r\n\r\n    conditions {\r\n        $Id = Int($Id)\r\n        $appId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name='Rope accounting'\").One(\"id\"))\r\n        if $Id == 0 {\r\n            $Id = Int(DBFind(\"buffer_data\").Where(\"key='rope_upload' and member_id=?\", $key_id).One(\"value\"))\r\n        }\r\n        $binId = Int(DBFind(\"binaries\").Where(\"id=?\", $Id).One(\"id\"))\r\n        if $binId == 0 {\r\n            warning \"File not found\"\r\n        }\r\n        // RopeRolesCondition()\r\n    }\r\n    action {\r\n        var line count sheet int rows works array\r\n        sheet = 1\r\n        count = Int(Str(GetRowsCountXLSX($binId, sheet)))\r\n        rows = GetDataFromXLSX($binId, line, count, sheet)\r\n        works = getParsedAfter(\"Месторождение\", rows)\r\n\r\n        // TODO: stored works to rope_works and rope_depths\r\n    }\r\n}",
            "Name": "RopeBinaryToWorks",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeDepthSet {\r\n    data {\r\n        StartedIds array\r\n        StartedValues array\r\n        FinalIds array\r\n        FinalValues array\r\n    }\r\n\r\n    func getAbsFloat(n float) float{\r\n        if n < 0{\r\n            return -1 * n\r\n        }\r\n        return n\r\n    }\r\n    func isEqualWithErrorRate(rate float, nums ...) bool {\r\n        var i sum numsLen int res bool avg absError float\r\n        res = true\r\n        numsLen = Len(nums)\r\n        if rate == 0 {\r\n            while i < numsLen{\r\n                if i > 0{\r\n                    if nums[i] != nums[i-1]{\r\n                        res = false\r\n                        break\r\n                    }\r\n                }\r\n                i = i + 1\r\n            }\r\n        }else{\r\n            while i < numsLen{\r\n                sum = sum + nums[i]\r\n                i = i + 1\r\n            }\r\n            avg = Float(sum) / numsLen\r\n            i = 0\r\n            if avg != 0{\r\n                while i < numsLen{\r\n                    absError = getAbsFloat(Float(nums[i] - avg))\r\n                    res = absError/avg <= rate\r\n                    if !res {\r\n                        break\r\n                    }\r\n                    i = i + 1\r\n                }\r\n            }\r\n        }\r\n        return res\r\n    }\r\n    func isSameDepth(m map, depthType string) bool{\r\n        var a b c int\r\n        if depthType == \"started\" {\r\n            a = Int(m[\"manufacturer_started\"])\r\n            b = Int(m[\"servicer_started\"])\r\n            c = Int(m[\"producer_started\"])\r\n        }else{\r\n            a = Int(m[\"manufacturer_final\"])\r\n            b = Int(m[\"servicer_final\"])\r\n            c = Int(m[\"producer_final\"])\r\n        }\r\n        return isEqualWithErrorRate($errorRate, a,b) || isEqualWithErrorRate($errorRate, a,c) || isEqualWithErrorRate($errorRate, b,c)\r\n    }\r\n    func closeNotes(drillingId int){\r\n        var depthsLen int\r\n        depthsLen = Len(DBFind(\"rope_depths\").Where(\"deleted=0 and rope_drilling_id=? and (status_started=0 or status_final=0)\", drillingId))\r\n        if depthsLen == 0 {\r\n            var notes array i notesLen int\r\n            notes = DBFind(\"notifications\").Where(\"page_params->rope_drilling_id=?\", drillingId)\r\n            notesLen = Len(notes)\r\n            while i < notesLen {\r\n                var note map\r\n                note = notes[i]\r\n                notifications_Close(\"notific_id\", Int(note[\"id\"]))\r\n                i = i + 1\r\n            }\r\n        }\r\n    }\r\n    func calculateValues(type string){\r\n        var ids values array i idsLen int depthField fields workField string\r\n        if $role_id == $manufacturerRid {\r\n            depthField = Sprintf(\"manufacturer_%v\", type)\r\n        }\r\n        if $role_id == $servicerRid {\r\n            depthField = Sprintf(\"servicer_%v\", type)\r\n        }\r\n        if $role_id == $producerRid {\r\n            depthField = Sprintf(\"producer_%v\", type)\r\n        }\r\n        if type == \"started\"{\r\n            ids = $StartedIds\r\n            values = $StartedValues\r\n            fields = Sprintf(\"status_started,depth_started,%v\", depthField)\r\n            workField = \"depth_started\"\r\n        }\r\n        if type == \"final\"{\r\n            ids = $FinalIds\r\n            values = $FinalValues\r\n            fields = Sprintf(\"status_final,depth_final,%v\", depthField)\r\n            workField = \"depth_final\"\r\n        }\r\n        idsLen = Len(ids)\r\n        while i < idsLen {\r\n            var id value int depth row map\r\n            id = Int(ids[i])\r\n            value = Int(values[i])\r\n            if id > 0{\r\n                row = DBFind(\"rope_depths\").Where(\"id=?\", id).Row()\r\n                // issue: \"interface conversion: interface {} is map[string]string, not map[string]interface {}\"\r\n                depth[\"manufacturer_started\"] = Int(row[\"manufacturer_started\"])\r\n                depth[\"servicer_started\"] = Int(row[\"servicer_started\"])\r\n                depth[\"producer_started\"] = Int(row[\"producer_started\"])\r\n                depth[\"manufacturer_final\"] = Int(row[\"manufacturer_final\"])\r\n                depth[\"servecer_final\"] = Int(row[\"servecer_final\"])\r\n                depth[\"producer_final\"] = Int(row[\"producer_final\"])\r\n                depth[depthField] = value\r\n                //\r\n                if isSameDepth(depth, type) {\r\n                    var workId int\r\n                    workId = Int(DBFind(\"rope_works\").Where(\"rope_drilling_id=? and operation=?\", row[\"rope_drilling_id\"], row[\"operation\"]).One(\"id\"))\r\n                    if workId > 0{\r\n                        DBUpdate(\"rope_works\", workId, workField, value)\r\n                        DBUpdate(\"rope_depths\", id, fields, 1, value, value)\r\n                    }\r\n                }else{\r\n                    DBUpdate(\"rope_depths\", id, depthField, value)\r\n                }\r\n\r\n                closeNotes(Int(row[\"rope_drilling_id\"]))\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n    conditions {\r\n        var appId int\r\n        appId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name='Rope accounting'\").One(\"id\"))\r\n        // RopeRolesCondition()\r\n        $manufacturerRid = Int(AppParam(appId, \"rope_manufacturer_role_id\"))\r\n        $producerRid = Int(AppParam(appId, \"rope_producer_role_id\"))\r\n        $servicerRid = Int(AppParam(appId, \"rope_servicer_role_id\"))\r\n        $errorRate = Float(AppParam(appId, \"rope_depth_error_rate\"))\r\n    }\r\n\r\n    action {\r\n        calculateValues(\"started\")\r\n        calculateValues(\"final\")\r\n    }\r\n}",
            "Name": "RopeDepthSet",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeDrillingDelete {\r\n    data {\r\n        Id int\r\n    }\r\n\r\n    conditions {\r\n        if !DBFind(\"rope_drillings\").Where(\"id=?\", $Id).One(\"id\"){\r\n            warning \"The drilling not found\"\r\n        }\r\n    }\r\n    action {\r\n        DBUpdate(\"rope_drillings\", $Id, \"deleted\", 1)\r\n    }\r\n}",
            "Name": "RopeDrillingDelete",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeDrillingEdit {\r\n    data {\r\n        Id string \"optional\"\r\n        Filial string\r\n        Expedition string\r\n        Brigade string\r\n        Master string \"optional\"\r\n        BlockWeight int\r\n        CandleLength float\r\n    }\r\n\r\n    conditions {\r\n        $Id = Int($Id)\r\n        var appId int\r\n        appId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name='Rope accounting'\").One(\"id\"))\r\n        if DBFind(\"rope_drillings\").Where(\"deleted=0 and filial=?\",$Filial).One(\"id\"){\r\n            warning \"The filial name of the drill is already in use, please specify another name\"\r\n        }\r\n        if $Id > 0 {\r\n            if !DBFind(\"rope_drillings\").Where(\"id=?\", $Id).One(\"id\"){\r\n                warning \"The drilling not found\"\r\n            }\r\n        }\r\n    }\r\n    action {\r\n        if $Id > 0 {\r\n            DBUpdate(\"rope_drillings\", $Id, \"filial,expedition,brigade,master,block_weight,candle_length\", $Filial, $Expedition, $Brigade, $Master, $BlockWeight, $CandleLength)\r\n        }else{\r\n            DBInsert(\"rope_drillings\", \"filial,expedition,brigade,master,block_weight,candle_length\", $Filial, $Expedition, $Brigade, $Master, $BlockWeight, $CandleLength)\r\n        }\r\n    }\r\n}",
            "Name": "RopeDrillingEdit",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeMock {\r\n    data {}\r\n    conditions {}\r\n\r\n    action {\r\n        var d map depths array i count val1 val2 int\r\n        count = 3\r\n        val1 = 1000\r\n        val2 = 100\r\n        while i < count {\r\n            d[\"manufacturer_final\"] = val1 + Random(0,4+i) - 2 - i\r\n            d[\"servicer_final\"] = val1 - 10*i + Random(0,4+i) - 2 - i\r\n            d[\"producer_final\"] = val1 - 20*i + Random(0,4+i) - 2 - i\r\n\r\n            d[\"manufacturer_started\"] = val2 + Random(0,4+i) - 2 - i\r\n            d[\"servicer_started\"] = val2 - 1*i + Random(0,4+i) - 2 - i\r\n            d[\"producer_started\"] = val2 - 2*i + Random(0,4+i) - 2 - i\r\n\r\n            d[\"operation\"] = i + 1\r\n            d[\"rope_drilling_id\"] = 1\r\n            d[\"status_started\"] = 0\r\n            d[\"status_final\"] = 0\r\n            if !DBFind(\"rope_works\").Where(\"operation=? and rope_drilling_id=1\", d[\"operation\"]).One(\"id\"){\r\n                DBInsert(\"rope_works\", \"operation,rope_drilling_id\", d[\"operation\"], d[\"rope_drilling_id\"])\r\n            }\r\n            var depth map\r\n            depth = DBFind(\"rope_depths\").Where(\"operation=? and rope_drilling_id=1\", d[\"operation\"]).Row()\r\n            if depth{\r\n                DBUpdate(\"rope_depths\", Int(depth[\"id\"]), \"manufacturer_final,manufacturer_started,servicer_final,servicer_started,producer_final,producer_started,status_started,status_final\", d[\"manufacturer_final\"], d[\"manufacturer_started\"], d[\"servicer_final\"], d[\"servicer_started\"], d[\"producer_final\"], d[\"producer_started\"], d[\"status_started\"], d[\"status_final\"])\r\n            }else{\r\n                DBInsert(\"rope_depths\", \"operation,rope_drilling_id,manufacturer_final,manufacturer_started,servicer_final,servicer_started,producer_final,producer_started,status_started,status_final\", d[\"operation\"], d[\"rope_drilling_id\"], d[\"manufacturer_final\"], d[\"manufacturer_started\"], d[\"servicer_final\"], d[\"servicer_started\"], d[\"producer_final\"], d[\"producer_started\"], d[\"status_started\"], d[\"status_final\"])\r\n            }\r\n            i=i+1\r\n        }\r\n    }\r\n}",
            "Name": "RopeMock",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeRolesCondition {\r\n    data {}\r\n\r\n    conditions {\r\n        var appId int rid1 rid2 rid3 string\r\n        appId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name='Rope accounting'\").One(\"id\"))\r\n        rid1 = AppParam(appId, \"rope_manufacturer_role_id\")\r\n        rid2 = AppParam(appId, \"rope_producer_role_id\")\r\n        rid3 = AppParam(appId, \"rope_servicer_role_id\")\r\n        if rid1 == 0 {\r\n            warning \"'rope_manufacturer_role_id' not set\"\r\n        }\r\n        if rid2 == 0 {\r\n            warning \"'rope_producer_role_id' not set\"\r\n        }\r\n        if rid3 == 0 {\r\n            warning \"'rope_servicer_role_id' not set\"\r\n        }\r\n        if rid1 == rid2 || rid1 == rid3 || rid2 == rid3 {\r\n            warning \"Invalid set roles\"\r\n        }\r\n        if !($role_id == rid1 || $role_id == rid2 || $role_id == rid3){\r\n            warning \"Your role not allowed for this action\"\r\n        }\r\n    }\r\n}",
            "Name": "RopeRolesCondition",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeUpload {\r\n    data {\r\n        Data string \"file\"\r\n    }\r\n\r\n    conditions {\r\n        $appId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name='Rope accounting'\").One(\"id\"))\r\n        // RopeRolesCondition()\r\n    }\r\n    action {\r\n        var fileName fileExt string binId int\r\n        fileExt = \"xlsm\"\r\n        fileName = Sprintf(\"%v_%v.%v\", IdToAddress($key_id), $time, fileExt)\r\n        binId = @1UploadBinary(\"Name,Data,ApplicationId,DataMimeType\", fileName, $Data, $appId, $DataMimeType)\r\n        buffer_Manager(\"Action,Key,Val\", \"set\", \"rope_upload\", Str(binId))\r\n    }\r\n}",
            "Name": "RopeUpload",
            "Type": "contracts"
        }
    ]
}