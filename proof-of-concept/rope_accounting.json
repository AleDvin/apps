{
    "name": "Rope accounting",
    "data": [
        {
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:$rope_imports$, Page: rope_imports, Icon:\"fa fa-upload\")\nMenuItem(Title:$rope_works$, Page: rope_works, Icon:\"icon-list\")\nMenuItem(Title:$rope_depths$, Page:rope_depths, Icon:\"icon-list\")\nMenuItem(Title:$rope_drillings$, Page: rope_drillings, Icon:\"icon-list\")",
            "Name": "default_menu",
            "Type": "menu"
        },
        {
            "Name": "rope_all_depths_ok",
            "Trans": "{\n    \"ru\": \"Рассогласования показаний датчиков глубины не найдено\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_block_weight",
            "Trans": "{\n    \"ru\": \"Вес блока\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_block_weight_full",
            "Trans": "{\n    \"ru\": \"Вес талевого блока + вертлюга или ВСП\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_brigade",
            "Trans": "{\n    \"ru\": \"Бригада\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_candle_length",
            "Trans": "{\n    \"ru\": \"Длина свечи\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_create",
            "Trans": "{\n    \"ru\": \"Создать\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_data_confirmed",
            "Trans": "{\n    \"ru\": \"данные подтверждены\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_data_conflict",
            "Trans": "{\n    \"ru\": \"конфликт данных\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_data_input",
            "Trans": "{\n    \"ru\": \"Ввод данных\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_depth_final",
            "Trans": "{\n    \"ru\": \"Глубина в конце операции\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_depth_started",
            "Trans": "{\n    \"ru\": \"Глубина начала операции\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_depths",
            "Trans": "{\n    \"ru\": \"Таблица голосования за глубину при рассогласовании показаний датчиков\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_drilling_create",
            "Trans": "{\n    \"ru\": \"Новая буровая\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_drilling_edit",
            "Trans": "{\n    \"ru\": \"Изменить буровую\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_drilling_id",
            "Trans": "{\n    \"ru\": \"Номер буровой\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_drillings",
            "Trans": "{\n    \"ru\": \"Буровые\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_drillings_not_found",
            "Trans": "{\n    \"ru\": \"Буровых не найдено\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_edit",
            "Trans": "{\n    \"ru\": \"Редактировать\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_expedition",
            "Trans": "{\n    \"ru\": \"Экспедиция\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_filial",
            "Trans": "{\n    \"ru\": \"Филиал\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_import",
            "Trans": "{\n    \"ru\": \"Импортировать\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_imports",
            "Trans": "{\n    \"ru\": \"Импортирование загрузки\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_manufacturer",
            "Trans": "{\n    \"ru\": \"производитель\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_master",
            "Trans": "{\n    \"ru\": \"Мастер\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_name",
            "Trans": "{\n    \"ru\": \"Название\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_operation",
            "Trans": "{\n    \"ru\": \"Номер операции\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_producer",
            "Trans": "{\n    \"ru\": \"добытчик\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_servicer",
            "Trans": "{\n    \"ru\": \"наладчик\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_ton",
            "Trans": "{\n    \"ru\": \"тонны\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_upload",
            "Trans": "{\n    \"ru\": \"Загрузка данных\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_works",
            "Trans": "{\n    \"ru\": \"Учет наработки\"\n}",
            "Type": "languages"
        },
        {
            "Name": "rope_coils",
            "Columns": "[\n    {\n        \"conditions\": \"true\",\n        \"name\": \"certificate\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"deleted\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"diameter\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"length_full\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"length_rigging\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"previous_workout\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "rope_depths",
            "Columns": "[\n    {\n        \"conditions\": \"true\",\n        \"name\": \"deleted\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"operation\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"rope_drilling_id\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"rope_coil_id\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"manufacturer_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"manufacturer_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"servicer_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"servicer_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"producer_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"producer_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"status_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"status_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"depth_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"depth_started\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "rope_drillings",
            "Columns": "[\n    {\n        \"conditions\": \"true\",\n        \"name\": \"filial\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"deleted\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"expedition\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"brigade\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"master\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"block_weight\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"candle_length\",\n        \"type\": \"double\"\n    }\n    \n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "rope_works",
            "Columns": "[\n    {\n        \"conditions\": \"true\",\n        \"name\": \"deleted\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"depth_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"depth_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"weight_final\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"weight_started\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"bypass_bracing\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"operation_date\",\n        \"type\": \"datetime\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"operation\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"rope_drilling_id\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"rope_coil_id\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"operation_type\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"work_started\",\n        \"type\": \"double\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"work_final\",\n        \"type\": \"double\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"work_operation\",\n        \"type\": \"double\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"work_bypass\",\n        \"type\": \"double\"\n    },\n    {\n        \"conditions\": \"true\",\n        \"name\": \"work_coil\",\n        \"type\": \"double\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0.01",
            "Name": "rope_depth_error_rate",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "rope_manufacturer_role_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "rope_producer_role_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "rope_servicer_role_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\nSetTitle($rope_depths$)\nDBFind(rope_depths, src_depths).Custom(_started){\n    If(#status_started#==0){\n        Div(text-warning){LangRes(rope_data_conflict)}\n\n        ArrayToSource(src_started#id#, [#manufacturer_started#,#producer_started#,#servicer_started#])\n        Select(Name: StartedValues, Source: src_started#id#,NameColumn: value, ValueColumn: value)\n        Input(Name: StartedIds, Type:hidden, Value: #id#)\n    }.Else{\n        Div(text-success){LangRes(rope_data_confirmed)}\n        #depth_started#\n        Input(Name: StartedValues, Type:hidden, Value: 0)\n        Input(Name: StartedIds, Type:hidden, Value: 0)\n    }\n}.Custom(_final){\n    If(#status_final#==0){\n        Div(text-warning){LangRes(rope_data_conflict)}\n\n        ArrayToSource(src_final#id#, [#manufacturer_final#,#producer_final#,#servicer_final#])\n        Select(Name: FinalValues, Source: src_final#id#,NameColumn: value, ValueColumn: value)\n        Input(Name: FinalIds, Type:hidden, Value: #id#)\n    }.Else{\n        Div(text-success){LangRes(rope_data_confirmed)}\n        #depth_final#\n        Input(Name: FinalValues, Type:hidden, Value: 0)\n        Input(Name: FinalIds, Type:hidden, Value: 0)\n    }\n}.Where(\"deleted=0 and (status_final=0 or status_started=0)\").Count(depths_count).Order(\"id\")\n\nDiv(content-wrapper){\n    If(#depths_count#>0){\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    Div(col-md-12){\n                        Div(table-responsive){\n                            Table(src_depths,\"$rope_drilling_id$=rope_drilling_id,$rope_operation$=operation,$rope_depth_started$=_started,$rope_depth_final$=_final\")\n                        }\n                    }\n                }\n            }\n            Div(panel-footer text-right){\n                Button(Class: btn btn-primary, Body: send, Page: rope_depths, Contract: RopeDepthsUpdate, Params: \"Id=#id#,Value=#servicer_final#,Type=final\")\n            }\n        }\n    }.Else{\n        Div(row){\n            Div(text-center h3){\n                LangRes(rope_all_depths_ok)\n            }\n        }\n    }\n}.Style(\n    th,td {text-align:center;}\n    .radio {display:inline-block;margin-right:10px;}\n)",
            "Name": "rope_depths",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\nSetVar(left_col,\"col-sm-4 mt-sm text-right\").(right_col,\"col-sm-8 text-left\")\n\nSetVar(title,$rope_drilling_create$)\nSetVar(btn_title,$rope_create$)\nSetVar(drilling_filial,).(drilling_expedition,).(drilling_brigade,).(drilling_master,).(drilling_block_weight,).(drilling_candle_length,)\nIf(GetVar(Id)){\n    DBFind(rope_drillings).Where(\"id=#Id#\").Vars(drilling)\n    SetVar(title,$rope_drilling_edit$)\n    SetVar(btn_title,$rope_edit$)\n}\nSetTitle(#title#)\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage(Body: $rope_drillings$, Page: rope_drillings)\n        Span(/, mh-sm)\n        Span(#title#, text-muted)\n    }\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading){\n                    LangRes($rope_data_input$)\n                }\n                Div(panel-body){\n                    If(GetVar(Id)){\n                        Input(Name: Id, Type:hidden, Value: #Id#)\n                    }\n                    Div(row mt-sm){\n                        Div(#left_col#){\n                            LangRes(rope_filial)\n                        }\n                        Div(#right_col#){\n                            Input(Name: Filial, Value: #drilling_filial#)\n                        }\n                    }\n                    Div(row mt-sm){\n                        Div(#left_col#){\n                            LangRes(rope_expedition)\n                        }\n                        Div(#right_col#){\n                            Input(Name: Expedition, Value: #drilling_expedition#)\n                        }\n                    }\n                    Div(row mt-sm){\n                        Div(#left_col#){\n                            LangRes(rope_brigade)\n                        }\n                        Div(#right_col#){\n                            Input(Name: Brigade, Value: #drilling_brigade#)\n                        }\n                    }\n                    Div(row mt-sm){\n                        Div(#left_col#){\n                            LangRes(rope_master)\n                        }\n                        Div(#right_col#){\n                            Input(Name: Master, Value: #drilling_master#)\n                        }\n                    }\n                    Div(row mt-sm){\n                        Div(#left_col#){\n                            $rope_block_weight_full$, $rope_ton$\n                        }\n                        Div(#right_col#){\n                            Input(Name: BlockWeight, Type: number, Value: #drilling_block_weight#)\n                        }\n                    }\n                    Div(row mt-sm){\n                        Div(#left_col#){\n                            LangRes(rope_candle_length)\n                        }\n                        Div(#right_col#){\n                            Input(Name: CandleLength, Type:number, Value: #drilling_candle_length#)\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: #btn_title#, Page: rope_drillings, Class: btn btn-primary, Contract: RopeDrillingEdit)\n                }\n            }\n        }\n    }\n}",
            "Name": "rope_drilling_edit",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\nDBFind(rope_drillings,drillings).Count(count_drillings).Custom(_actions){\n    Div(text-right){\n        Button(Page: rope_drilling_edit, Class: btn btn-default fa fa-pencil mr-sm, PageParams: \"Id=#id#\")\n        Button(Page: rope_drilling_edit, Class: btn btn-danger fa fa-trash, Contract: RopeDrillingDelete, Params: \"Id=#id#\")\n    }\n}\nSetTitle($rope_drillings$)\nAddToolButton(Title: $rope_create$, Icon: icon-plus, Page: rope_drilling_edit)\nDiv(content-wrapper){\n    Div(panel panel-primary){\n        If(#count_drillings#>0){\n            Div(panel-body){\n                Div(table-responsive){\n                    Table(drillings,\"$rope_filial$=filial,$rope_expedition$=expedition,$rope_brigade$=brigade,$rope_master$=master,$rope_block_weight$=block_weight,$rope_candle_length$=candle_length,=_actions\")\n                }\n            }\n        }.Else{\n            Div(row){\n                Div(text-center h3){\n                    LangRes(rope_drillings_not_found)\n                }\n            }\n        }\n    }\n}",
            "Name": "rope_drillings",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\nDBFind(binaries,binaries).Custom(_actions){\n    Div(text-right){\n        Button(Body: $rope_import$, Page: rope_works, Class: btn btn-primary, Contract: RopeBinaryParse, Params: \"Id=#id#\")\n    }\n}.Where(\"member_id=#key_id# and app_id=#application_id#\").Order(\"id desc\")\nAddToolButton(Title: $rope_upload$, Icon: fa fa-upload, Page: rope_upload)\nDiv(content-wrapper){\nSetTitle($rope_imports$)\n    Div(row){\n        Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n            Div(panel panel-primary){\n                Div(panel-body){\n                    Div(table-responsive){\n                        Table(binaries, \"id=id,$rope_name$=name,$rope_data$=data,=_actions\")\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "rope_imports",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetTitle($rope_upload$)\nDiv(content-wrapper){\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(form-group){\n                        Input(Name: Data, Type: file)\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: $rope_upload$, Page: rope_imports, Class: btn btn-primary, Contract: RopeUpload)\n                }\n            }\n        }\n    }\n}",
            "Name": "rope_upload",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"id\").Where(\"name='Rope accounting' AND deleted=0\").Vars(application)\nDBFind(rope_works).Count(count)\nSetTitle($rope_works$)\nIf(#page#>0){\n    SetVar(prev_page,Calculate(#page#-1)\n}.Else{\n    SetVar(page,0).(prev_page,0)\n}\nSetVar(per_page,25).(off,Calculate(#page#*#per_page#)).(last_page,Calculate(#count#/#per_page#)).(next_page,#last_page#)\nIf(#count#>Calculate(#off#+#per_page#)){\n    SetVar(next_page,Calculate(#page#+1)\n}\nDiv(button-group){\n    If(#page#>0){\n        Button(Body:\"1\", Class:btn btn-default, Page:rope_works, PageParams: \"page=0\")\n    }.Else{\n        Button(Body:\"1\", Class:btn btn-default disabled)\n    }\n    If(#page#>1){\n        Button(Body:Calculate(#prev_page#+1), Class:btn btn-default, Page:rope_works, PageParams: \"page=#prev_page#\")\n    }\n    If(And(#page#>0,#page#<#last_page#)){\n        Button(Body:Calculate(#page#+1), Class:btn btn-default disabled)\n    }\n    If(#next_page#<#last_page#){\n        Button(Body:Calculate(#next_page#+1), Class:btn btn-default, Page:rope_works, PageParams: \"page=#next_page#\")\n    }\n    If(#page#<#last_page#){\n        Button(Body:Calculate(#last_page#+1), Class:btn btn-default, Page:rope_works, PageParams: \"page=#last_page#\")\n    }.ElseIf(#last_page#>0){\n        Button(Body:Calculate(#last_page#+1), Class:btn btn-default disabled)\n    }\n}\nDiv(content-wrapper){\n    Div(text-right){\n        Button(Body: $rope_calculate$, Class: btn btn-default, Page: rope_works, Contract: RopeWorksCalculate)\n    }\n    Div(panel panel-primary){\n        Div(panel-body){\n            Div(table-responsive){\n                DBFind(rope_works,works).Offset(#off#).Order(id).Custom(_date){\n                    DateTime(#operation_date#)\n                }\n                Table(works,\"id=id,$rope_operation_date$=_date,$rope_operation$=operation$,rope_operation_type$=operation_type,$rope_depth_started$=depth_started,$rope_depth_final$=depth_final,$rope_weight_started$=weight_started,$rope_weight_final$=weight_final,$rope_bypass_bracing$=bypass_bracing,$rope_drilling_id$=rope_drilling_id,$rope_coil_id$=rope_coil_id\")\n            }\n        }\n    }\n}",
            "Name": "rope_works",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeRolesCondition {\r\n    data {}\r\n\r\n    conditions {\r\n        var appId int rid1 rid2 rid3 string\r\n        appId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name='Rope accounting'\").One(\"id\"))\r\n        rid1 = Int(AppParam(appId, \"rope_manufacturer_role_id\"))\r\n        rid2 = Int(AppParam(appId, \"rope_producer_role_id\"))\r\n        rid3 = Int(AppParam(appId, \"rope_servicer_role_id\"))\r\n        if rid1 == 0 {\r\n            warning \"'rope_manufacturer_role_id' not set\"\r\n        }\r\n        if rid2 == 0 {\r\n            warning \"'rope_producer_role_id' not set\"\r\n        }\r\n        if rid3 == 0 {\r\n            warning \"'rope_servicer_role_id' not set\"\r\n        }\r\n        if rid1 == rid2 || rid1 == rid3 || rid2 == rid3 {\r\n            warning \"Invalid set roles\"\r\n        }\r\n        if !($role_id == rid1 || $role_id == rid2 || $role_id == rid3){\r\n            warning \"Your role not allowed for this action\"\r\n        }\r\n    }\r\n}",
            "Name": "RopeRolesCondition",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeDepthsUpdate {\r\n    data {\r\n        StartedIds array\r\n        StartedValues array\r\n        FinalIds array\r\n        FinalValues array\r\n    }\r\n\r\n    func getFindAll(table, where, columns string) array {\r\n        var full parts array limit offset int\r\n        limit = 250\r\n        while true {\r\n            parts = DBFind(table).Where(where).Columns(columns).Offset(offset).Limit(limit).Order(\"id\")\r\n            if Len(parts) > 0 {\r\n                if Len(full) == 0 {\r\n                    full = parts\r\n                }else{\r\n                    var i lenParts int\r\n                    lenParts = Len(parts)\r\n                    while i < lenParts {\r\n                        full = Append(full, parts[i])\r\n                        i = i+1\r\n                    }\r\n                }\r\n            }else{\r\n                break\r\n            }\r\n            offset = offset+limit\r\n        }\r\n        Println(\"find all\", table, Len(full))\r\n        return full\r\n    }\r\n    func getAbsFloat(n float) float{\r\n        if n < 0{\r\n            return -1 * n\r\n        }\r\n        Println(\"getAbsFloat\", n)\r\n        return n\r\n    }\r\n    func isEqualWithErrorRate(rate float, nums ...) bool {\r\n        var i sum numsLen int res bool avg absError float\r\n        res = true\r\n        numsLen = Len(nums)\r\n        if rate == 0 {\r\n            while i < numsLen{\r\n                if i > 0{\r\n                    if nums[i] != nums[i-1]{\r\n                        res = false\r\n                        break\r\n                    }\r\n                }\r\n                i = i + 1\r\n            }\r\n        }else{\r\n            while i < numsLen{\r\n                sum = sum + nums[i]\r\n                i = i + 1\r\n            }\r\n            avg = Float(sum) / numsLen\r\n            i = 0\r\n            if avg != 0{\r\n                while i < numsLen{\r\n                    absError = getAbsFloat(Float(nums[i]) - avg)\r\n                    res = absError/avg <= rate\r\n                    if !res {\r\n                        break\r\n                    }\r\n                    i = i + 1\r\n                }\r\n            }\r\n        }\r\n        return res\r\n    }\r\n    func isSameDepth(m map, depthType string) bool{\r\n        var a b c int\r\n        if depthType == \"started\" {\r\n            a = Int(m[\"manufacturer_started\"])\r\n            b = Int(m[\"servicer_started\"])\r\n            c = Int(m[\"producer_started\"])\r\n        }else{\r\n            a = Int(m[\"manufacturer_final\"])\r\n            b = Int(m[\"servicer_final\"])\r\n            c = Int(m[\"producer_final\"])\r\n        }\r\n        if a > 0 && b+c == 0 || b >0 && a+c == 0 || c>0 && a+b==0 {\r\n            return false\r\n        }\r\n        return isEqualWithErrorRate($errorRate, a,b) || isEqualWithErrorRate($errorRate, a,c) || isEqualWithErrorRate($errorRate, b,c)\r\n    }\r\n    func notesRefresh(did, cid string){\r\n        Println(\"notesRefresh\")\r\n        var depthsLen i notesLen int notes array note map\r\n        depthsLen = Len(DBFind(\"rope_depths\").Where(\"deleted=0 and rope_drilling_id=? and rope_coil_id=? and (status_started=0 or status_final=0)\", did, cid))\r\n        notes = DBFind(\"notifications\").Where(\"page_params->rope_drilling_id=? and page_params->rope_coil_id=?\", did, cid)\r\n        notesLen = Len(notes)\r\n\r\n        if depthsLen == 0 && notesLen > 0{\r\n            // closing notes\r\n            while i < notesLen {\r\n                note = notes[i]\r\n                notifications_Close(\"notific_id\", Int(note[\"id\"]))\r\n                i = i + 1\r\n            }\r\n        }else{\r\n            if depthsLen > 0 && notesLen == 0{\r\n                // sending notes\r\n                var rid closureType sender int textHeader pageName string params map\r\n                closureType = 2\r\n                sender = 1\r\n                textHeader = \"Need your action: correct depths\"\r\n                pageName = \"rope_depths\"\r\n                params[\"rope_drilling_id\"] = did\r\n                params[\"rope_coil_id\"] = cid\r\n                rid = Int(AppParam($appId, \"rope_manufacturer_role_id\"))\r\n                notifications_Send(\"rid,closure_type,sender,text_header,page_name,params_map\", rid, closureType, sender, textHeader, pageName, JSONEncode(params))\r\n\r\n                rid = Int(AppParam($appId, \"rope_servicer_role_id\"))\r\n                notifications_Send(\"rid,closure_type,sender,text_header,page_name,params_map\", rid, closureType, sender, textHeader, pageName, JSONEncode(params))\r\n\r\n                rid = Int(AppParam($appId, \"rope_producer_role_id\"))\r\n                notifications_Send(\"rid,closure_type,sender,text_header,page_name,params_map\", rid, closureType, sender, textHeader, pageName, JSONEncode(params))\r\n            }\r\n        }\r\n    }\r\n    func calculateValues(type string){\r\n        Println(\"calculateValues\")\r\n        var ids values array i idsLen int depthField fields workField string\r\n        depthField = Sprintf(\"%v_%v\", $userRoles[Str($role_id)], type)\r\n\r\n        if type == \"started\"{\r\n            ids = $StartedIds\r\n            values = $StartedValues\r\n            fields = Sprintf(\"status_started,depth_started,%v\", depthField)\r\n            workField = \"depth_started\"\r\n        }\r\n        if type == \"final\"{\r\n            ids = $FinalIds\r\n            values = $FinalValues\r\n            fields = Sprintf(\"status_final,depth_final,%v\", depthField)\r\n            workField = \"depth_final\"\r\n        }\r\n        idsLen = Len(ids)\r\n        var id value int depth row map did cid where string\r\n        while i < idsLen {\r\n            id = Int(ids[i])\r\n            value = Int(values[i])\r\n            if id > 0{\r\n                row = DBFind(\"rope_depths\").Where(\"id=?\", id).Row()\r\n                if !(did == row[\"rope_drilling_id\"] || cid == row[\"rope_coil_id\"]){\r\n                    did = row[\"rope_drilling_id\"]\r\n                    cid = row[\"rope_coil_id\"]\r\n                    notesRefresh(did, cid)\r\n                }\r\n\r\n                // \"interface conversion: interface {} is map[string]string, not map[string]interface {}\"\r\n                depth[\"manufacturer_started\"] = Int(row[\"manufacturer_started\"])\r\n                depth[\"servicer_started\"] = Int(row[\"servicer_started\"])\r\n                depth[\"producer_started\"] = Int(row[\"producer_started\"])\r\n                depth[\"manufacturer_final\"] = Int(row[\"manufacturer_final\"])\r\n                depth[\"servicer_final\"] = Int(row[\"servicer_final\"])\r\n                depth[\"producer_final\"] = Int(row[\"producer_final\"])\r\n                depth[depthField] = value\r\n                //\r\n                if isSameDepth(depth, type) {\r\n                    var workId int\r\n                    workId = Int(DBFind(\"rope_works\").Where(\"rope_coil_id=? and rope_drilling_id=? and operation=?\", cid, did, row[\"operation\"]).One(\"id\"))\r\n                    if workId > 0{\r\n                        where = Sprintf(\"id=%v and %v=%v\", workId, workField, value)\r\n                        if !DBFind(\"rope_works\").Where(where) {\r\n                            Println(\"SameDepth update\")\r\n                            DBUpdate(\"rope_works\", workId, workField, value)\r\n                            DBUpdate(\"rope_depths\", id, fields, 1, value, value)\r\n                        }\r\n                    }\r\n                }else{\r\n                    where = Sprintf(\"id=%v and %v=%v\", id, depthField, value)\r\n                    if !DBFind(\"rope_depths\").Where(where) {\r\n                        Println(\"not SameDepth update\")\r\n                        DBUpdate(\"rope_depths\", id, depthField, value)\r\n                    }\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        RopeRolesCondition()\r\n        $appId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name='Rope accounting'\").One(\"id\"))\r\n        var userRoles map\r\n        userRoles[AppParam($appId, \"rope_manufacturer_role_id\")] = \"manufacturer\"\r\n        userRoles[AppParam($appId, \"rope_servicer_role_id\")] = \"servicer\"\r\n        userRoles[AppParam($appId, \"rope_producer_role_id\")] = \"producer\"\r\n        $userRoles = userRoles\r\n        $errorRate = Float(AppParam($appId, \"rope_depth_error_rate\"))\r\n    }\r\n\r\n    action {\r\n        calculateValues(\"started\")\r\n        calculateValues(\"final\")\r\n    }\r\n}",
            "Name": "RopeDepthsUpdate",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeDrillingDelete {\r\n    data {\r\n        Id int\r\n    }\r\n\r\n    conditions {\r\n        if !DBFind(\"rope_drillings\").Where(\"id=?\", $Id).One(\"id\"){\r\n            warning \"The drilling not found\"\r\n        }\r\n    }\r\n    action {\r\n        DBUpdate(\"rope_drillings\", $Id, \"deleted\", 1)\r\n    }\r\n}",
            "Name": "RopeDrillingDelete",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeDrillingEdit {\r\n    data {\r\n        Id string \"optional\"\r\n        Filial string\r\n        Expedition string\r\n        Brigade string\r\n        Master string \"optional\"\r\n        BlockWeight int\r\n        CandleLength float\r\n    }\r\n\r\n    conditions {\r\n        $Id = Int($Id)\r\n        var appId int\r\n        appId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name='Rope accounting'\").One(\"id\"))\r\n        if DBFind(\"rope_drillings\").Where(\"deleted=0 and filial=?\",$Filial).One(\"id\"){\r\n            warning \"The filial name of the drill is already in use, please specify another name\"\r\n        }\r\n        if $Id > 0 {\r\n            if !DBFind(\"rope_drillings\").Where(\"id=?\", $Id).One(\"id\"){\r\n                warning \"The drilling not found\"\r\n            }\r\n        }\r\n    }\r\n    action {\r\n        if $Id > 0 {\r\n            DBUpdate(\"rope_drillings\", $Id, \"filial,expedition,brigade,master,block_weight,candle_length\", $Filial, $Expedition, $Brigade, $Master, $BlockWeight, $CandleLength)\r\n        }else{\r\n            DBInsert(\"rope_drillings\", \"filial,expedition,brigade,master,block_weight,candle_length\", $Filial, $Expedition, $Brigade, $Master, $BlockWeight, $CandleLength)\r\n        }\r\n    }\r\n}",
            "Name": "RopeDrillingEdit",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeBinaryParse {\r\n    data {\r\n        Id string \"optional\"\r\n    }\r\n    func getWorkIndexes(cells array) map{\r\n        Println(\"getWorkIndexes\")\r\n        var indexes map i cellsLen int s string\r\n        // default indexes\r\n        indexes[\"operation_date\"] = 3\r\n        indexes[\"operation\"] = 4\r\n        indexes[\"operation_type\"] = 5\r\n        indexes[\"depth_started\"] = 6\r\n        indexes[\"depth_final\"] = 7\r\n        indexes[\"weight_started\"] = 9\r\n        indexes[\"weight_final\"] = 10\r\n        indexes[\"bypass_bracing\"] = 17\r\n        cellsLen = Len(cells)\r\n        while i < cellsLen{\r\n            // correction indexes\r\n            s = ToLower(TrimSpace(cells[i]))\r\n            if HasPrefix(s, \"дата\") && Contains(s,\"операции\"){\r\n                indexes[\"operation_date\"] = i\r\n            }\r\n            if HasPrefix(s, \"№\") && Contains(s,\"операции\"){\r\n                indexes[\"operation\"] = i\r\n            }\r\n            if HasPrefix(s, \"вид\") && Contains(s,\"работ\") && Contains(s,\"рейса\"){\r\n                indexes[\"operation_type\"] = i\r\n            }\r\n            if HasPrefix(s, \"глубина\") && Contains(s,\"начала\"){\r\n                indexes[\"depth_started\"] = i\r\n            }\r\n            if HasPrefix(s, \"глубина\") && Contains(s,\"конце\") {\r\n                indexes[\"depth_final\"] = i\r\n            }\r\n            if HasPrefix(s, \"вес\") && Contains(s,\"крюке\") && Contains(s,\"начале\"){\r\n                indexes[\"weight_started\"] = i\r\n            }\r\n            if HasPrefix(s, \"вес\") && Contains(s,\"крюке\") && Contains(s,\"конце\"){\r\n                indexes[\"weight_final\"] = i\r\n            }\r\n            if HasPrefix(s, \"перепуск\") && Contains(s,\"перетяжка\"){\r\n                indexes[\"bypass_bracing\"] = i\r\n            }\r\n            if s == \"примечание\" {\r\n                break\r\n            }\r\n            i=i+1\r\n        }\r\n        return indexes\r\n    }\r\n    func parseWorks(titleCell string, rows array) array {\r\n        Println(\"parseWorks\")\r\n        var i rowsLen int resultRows selectedRows array canCopy bool\r\n        rowsLen = Len(rows)\r\n        while i < rowsLen {\r\n            var cells array c cellsLen notEmptyCellCount int\r\n            cells = rows[i]\r\n            cellsLen = Len(cells)\r\n            while c < cellsLen {\r\n                if Size(cells[c]) > 0{\r\n                    notEmptyCellCount = notEmptyCellCount+1\r\n                }\r\n                if titleCell == cells[c] {\r\n                    canCopy = true\r\n                }\r\n                c = c+1\r\n            }\r\n            if canCopy && notEmptyCellCount > 0 {\r\n                selectedRows = Append(selectedRows, rows[i])\r\n            }\r\n            if canCopy && notEmptyCellCount == 0 {\r\n                break\r\n            }\r\n            i = i+1\r\n        }\r\n        var indexes map\r\n        indexes = getWorkIndexes(selectedRows[0])\r\n        rowsLen = Len(selectedRows)\r\n        i = 1\r\n        while i < rowsLen {\r\n            var work map row array\r\n            row = selectedRows[i]\r\n            work[\"depth_final\"] = Int(row[indexes[\"depth_final\"]])\r\n            work[\"depth_started\"] = Int(row[indexes[\"depth_started\"]])\r\n            work[\"weight_final\"] = Int(row[indexes[\"weight_final\"]])\r\n            work[\"weight_started\"] = Int(row[indexes[\"weight_started\"]])\r\n            work[\"bypass_bracing\"] = Int(row[indexes[\"bypass_bracing\"]])\r\n            work[\"operation_type\"] = row[indexes[\"operation_type\"]]\r\n            work[\"operation_date\"] = Int(row[indexes[\"operation_date\"]])\r\n            if work[\"operation_date\"] != 0{\r\n                // https://stackoverflow.com/a/6154953\r\n                work[\"operation_date\"] = (work[\"operation_date\"] - 25569) * 86400\r\n            }\r\n            work[\"operation\"] = Int(row[indexes[\"operation\"]])\r\n            if work[\"operation\"] {\r\n                // stored data row only if has operation\r\n                resultRows = Append(resultRows, work)\r\n            }\r\n            i=i+1\r\n        }\r\n        return resultRows\r\n    }\r\n    func parseCoil(rows array) map {\r\n        Println(\"parseCoil\")\r\n        var coil map i int row array\r\n        i = 7 // start coil info\r\n        while i < 9 { // end coil info\r\n            row = rows[i]\r\n            if i == 7 {\r\n                coil[\"certificate\"] = row[6]\r\n                coil[\"diameter\"] = Int(row[9])\r\n            }\r\n            if i == 8 {\r\n                coil[\"length_full\"] = Int(row[6])\r\n                coil[\"length_rigging\"] = Int(row[7])\r\n                coil[\"previous_workout\"] = Int(row[17])\r\n            }\r\n            i = i+1\r\n        }\r\n        return coil\r\n    }\r\n    func parseDrilling(rows array) map {\r\n        Println(\"parseDrilling\")\r\n        var drilling map i int row array\r\n        i = 3 // start drilling info\r\n        while i < 9 { // end drilling info\r\n            row = rows[i]\r\n            if i == 3 {\r\n                drilling[\"filial\"] = row[6]\r\n            }\r\n            if i == 4 {\r\n                drilling[\"expedition\"] = row[6]\r\n            }\r\n            if i == 5 {\r\n                drilling[\"brigade\"] = row[6]\r\n            }\r\n            if i == 6 {\r\n                drilling[\"master\"] = row[6]\r\n                drilling[\"block_weight\"] = Int(row[17])\r\n            }\r\n            if i == 7 {\r\n                if row[17] == \"\"{\r\n                    drilling[\"candle_length\"] = 0.0\r\n                }else{\r\n                    drilling[\"candle_length\"] = Float(row[17])\r\n                }\r\n            }\r\n            i = i+1\r\n        }\r\n        return drilling\r\n    }\r\n    func getMapValues(m map, keys array) array {\r\n        var values array i keysLen int key string\r\n        keysLen = Len(keys)\r\n        while i < keysLen {\r\n            key = keys[i]\r\n            if Contains(key, \" \"){\r\n                var splittedKey array\r\n                splittedKey = Split(key, \" \")\r\n                key = splittedKey[1]\r\n            }\r\n            values = Append(values, m[key])\r\n            i=i+1\r\n        }\r\n        return values\r\n    }\r\n    func storeCoil(coil map) int {\r\n        Println(\"storeCoil\")\r\n        var id int\r\n        id = Int(DBFind(\"rope_coils\").Where(\"certificate=? and diameter=?\", coil[\"certificate\"], coil[\"diameter\"]).One(\"id\"))\r\n        if id == 0{\r\n            var keys values array\r\n            keys = GetMapKeys(coil)\r\n            values = getMapValues(coil, keys)\r\n            id = DBInsert(\"rope_coils\", Join(keys, \",\"), ...values)\r\n        }\r\n        return id\r\n    }\r\n    func storeDrilling(drilling map) int {\r\n        Println(\"storeDrilling\")\r\n        var id int\r\n        id = Int(DBFind(\"rope_drillings\").Where(\"filial=? and expedition=? and brigade=?\", drilling[\"filial\"], drilling[\"expedition\"], drilling[\"brigade\"]).One(\"id\"))\r\n        if id == 0{\r\n            var keys values array\r\n            keys = GetMapKeys(drilling)\r\n            values = getMapValues(drilling, keys)\r\n            id = DBInsert(\"rope_drillings\", Join(keys, \",\"), ...values)\r\n        }\r\n        return id\r\n    }\r\n    func storeWorksDepths(coilId, drillingId int, works array) {\r\n        Println(\"storeWorksDepths\", coilId, drillingId)\r\n        var i worksLen int workId depthId workKeys depthKeys depthWorkKeys fields string values array work map\r\n        worksLen = Len(works)\r\n        workKeys = \"operation_type,weight_final,weight_started,bypass_bracing,timestamp operation_date,operation\"\r\n        depthWorkKeys = \"depth_final,depth_started\"\r\n        depthKeys = Sprintf(\"%v,%v,rope_drilling_id,rope_coil_id\", $startedField, $finalField)\r\n\r\n        while i < worksLen {\r\n            work = works[i]\r\n            workId = DBFind(\"rope_works\").Where(\"rope_coil_id=? and rope_drilling_id=? and operation=?\", coilId, drillingId, work[\"operation\"]).One(\"id\")\r\n            if !workId {\r\n                values = getMapValues(work, Split(workKeys, \",\"))\r\n                values = Append(values,drillingId)\r\n                values = Append(values,coilId)\r\n                fields = workKeys + \",rope_drilling_id,rope_coil_id\"\r\n                // Println(\"rope_works\", fields, ...values)\r\n                DBInsert(\"rope_works\", workKeys, ...values)\r\n            }\r\n            depthId = DBFind(\"rope_depths\").Where(\"rope_coil_id=? and rope_drilling_id=? and operation=?\", coilId, drillingId, work[\"operation\"]).One(\"id\")\r\n            if !depthId {\r\n                values = getMapValues(work, Split(depthWorkKeys, \",\"))\r\n                values = Append(values,drillingId)\r\n                values = Append(values,coilId)\r\n                fields = depthKeys + \",rope_drilling_id,rope_coil_id\"\r\n                DBInsert(\"rope_depths\", depthKeys, ...values, drillingId, coilId)\r\n            }\r\n            i=i+1\r\n        }\r\n    }\r\n    func getFindAll(table, where, columns string) array {\r\n        var full parts array limit offset int\r\n        limit = 250\r\n        while true {\r\n            parts = DBFind(table).Where(where).Columns(columns).Offset(offset).Limit(limit)\r\n            if Len(parts) > 0 {\r\n                if Len(full) == 0 {\r\n                    full = parts\r\n                }else{\r\n                    var i lenParts int\r\n                    lenParts = Len(parts)\r\n                    while i < lenParts {\r\n                        full = Append(full, parts[i])\r\n                        i = i+1\r\n                    }\r\n                }\r\n            }else{\r\n                break\r\n            }\r\n            offset = offset+limit\r\n        }\r\n        return full\r\n    }\r\n    func updateDepths(coilId, drillingId int) {\r\n        Println(\"updateDepths\",coilId, drillingId)\r\n        var startedIds startedValues finalIds finalValues depths array i depthsLen int depth map columns string\r\n        columns = Sprintf(\"id,%v,%v\", $startedField, $finalField)\r\n        depths = getFindAll(\"rope_depths\", Sprintf(\"rope_coil_id=%v and rope_drilling_id=%v\", coilId, drillingId), columns)\r\n        depthsLen = Len(depths)\r\n        Println(\"depthsLen\",depthsLen)\r\n        while i < depthsLen {\r\n            depth = depths[i]\r\n            startedIds = Append(startedIds, depth[\"id\"])\r\n            finalIds = Append(finalIds, depth[\"id\"])\r\n            startedValues = Append(startedValues, depth[$startedField])\r\n            finalValues = Append(finalValues, depth[$finalField])\r\n            i=i+1\r\n        }\r\n        RopeDepthsUpdate(\"StartedIds,StartedValues,FinalIds,FinalValues\", startedIds, startedValues, finalIds, finalValues)\r\n    }\r\n\r\n    conditions {\r\n        $Id = Int($Id)\r\n        if $Id == 0 {\r\n            $Id = Int(DBFind(\"buffer_data\").Where(\"key='rope_upload' and member_id=?\", $key_id).One(\"value\"))\r\n        }\r\n        $binId = Int(DBFind(\"binaries\").Where(\"id=?\", $Id).One(\"id\"))\r\n        if $binId == 0 {\r\n            warning \"File not found\"\r\n        }\r\n        RopeRolesCondition()\r\n        var appId mid sid pid int\r\n        appId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name='Rope accounting'\").One(\"id\"))\r\n        mid = Int(AppParam(appId, \"rope_manufacturer_role_id\"))\r\n        sid = Int(AppParam(appId, \"rope_servicer_role_id\"))\r\n        pid = Int(AppParam(appId, \"rope_producer_role_id\"))\r\n        Println(\"$role_id == mid\",$role_id == mid)\r\n        if $role_id == mid {\r\n            $startedField = \"manufacturer_started\"\r\n            $finalField = \"manufacturer_final\"\r\n        }\r\n        if $role_id == sid {\r\n            $startedField = \"servicer_started\"\r\n            $finalField = \"servicer_final\"\r\n        }\r\n        if $role_id == pid {\r\n            $startedField = \"producer_started\"\r\n            $finalField = \"producer_final\"\r\n        }\r\n        Println($this_contract)\r\n    }\r\n    action {\r\n        var line count sheet drillingId coilId int rows works array coil drilling map\r\n        sheet = 1\r\n        count = Int(Str(GetRowsCountXLSX($binId, sheet)))\r\n        rows = GetDataFromXLSX($binId, line, count, sheet)\r\n\r\n        coil = parseCoil(rows)\r\n        drilling = parseDrilling(rows)\r\n        works = parseWorks(\"Месторождение\", rows)\r\n\r\n        coilId = storeCoil(coil)\r\n        drillingId = storeDrilling(drilling)\r\n        storeWorksDepths(coilId, drillingId, works)\r\n        updateDepths(coilId, drillingId)\r\n    }\r\n}",
            "Name": "RopeBinaryParse",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeUpload {\r\n    data {\r\n        Data string \"file\"\r\n    }\r\n\r\n    conditions {\r\n        $appId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name='Rope accounting'\").One(\"id\"))\r\n        // RopeRolesCondition()\r\n    }\r\n    action {\r\n        var fileName fileExt string binId int\r\n        fileExt = \"xlsm\"\r\n        fileName = Sprintf(\"%v_%v.%v\", IdToAddress($key_id), $time, fileExt)\r\n        binId = @1UploadBinary(\"Name,Data,ApplicationId,DataMimeType\", fileName, $Data, $appId, $DataMimeType)\r\n        buffer_Manager(\"Action,Key,Val\", \"set\", \"rope_upload\", Str(binId))\r\n    }\r\n}",
            "Name": "RopeUpload",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RopeWorksCalculate {\r\n    data {}\r\n\r\n    func getFindAll(table, where, columns string) array {\r\n        var full parts array limit offset int\r\n        limit = 250\r\n        while true {\r\n            parts = DBFind(table).Where(where).Columns(columns).Offset(offset).Limit(limit).Order(\"id\")\r\n            if Len(parts) > 0 {\r\n                if Len(full) == 0 {\r\n                    full = parts\r\n                }else{\r\n                    var i lenParts int\r\n                    lenParts = Len(parts)\r\n                    while i < lenParts {\r\n                        full = Append(full, parts[i])\r\n                        i = i+1\r\n                    }\r\n                }\r\n            }else{\r\n                break\r\n            }\r\n            offset = offset+limit\r\n        }\r\n        Println(\"find all\", table, Len(full))\r\n        return full\r\n    }\r\n    func getAbsFloat(n float) float{\r\n        if n < 0{\r\n            return -1 * n\r\n        }\r\n        Println(\"getAbsFloat\", n)\r\n        return n\r\n    }\r\n\r\n    func getMapValues(m map, keys array) array {\r\n        Println(\"getMapValues\", m, keys)\r\n        var values array i keysLen int key string\r\n        keysLen = Len(keys)\r\n        while i < keysLen {\r\n            key = keys[i]\r\n            values = Append(values, m[key])\r\n            i=i+1\r\n        }\r\n        return values\r\n    }\r\n\r\n    conditions {\r\n        RopeRolesCondition()\r\n        $appId = Int(DBFind(\"applications\").Columns(\"id\").Where(\"name='Rope accounting'\").One(\"id\"))\r\n        var userRoles map\r\n        userRoles[AppParam($appId, \"rope_manufacturer_role_id\")] = \"manufacturer\"\r\n        userRoles[AppParam($appId, \"rope_servicer_role_id\")] = \"servicer\"\r\n        userRoles[AppParam($appId, \"rope_producer_role_id\")] = \"producer\"\r\n        $userRoles = userRoles\r\n        $errorRate = Float(AppParam($appId, \"rope_depth_error_rate\"))\r\n    }\r\n\r\n    action {\r\n        var works array cols where op string i lenWorks int work workPrev coil drilling map\r\n        cols = \"id,work_started,work_final,work_operation,work_bypass,work_coil,operation_type,operation,rope_coil_id,rope_drilling_id,weight_started,depth_started\"\r\n        where = \"id>0\"\r\n        works = getFindAll(\"rope_works\", where, cols)\r\n        lenWorks = Len(works)\r\n\r\n        var w1 w2 d1 d2 cl bw float\r\n        while i<lenWorks {\r\n            if i > 0 {\r\n                workPrev = work\r\n            }\r\n            work = works[i]\r\n            var workNew map\r\n            workNew[\"id\"] = work[\"id\"]\r\n\r\n            if work[\"rope_coil_id\"] != coil[\"id\"]{\r\n                coil = DBFind(\"rope_coils\").Where(\"id=?\", work[\"rope_coil_id\"]).Row()\r\n            }\r\n            if work[\"rope_drilling_id\"] != drilling[\"id\"]{\r\n                drilling = DBFind(\"rope_drillings\").Where(\"id=?\", work[\"rope_drilling_id\"]).Row()\r\n            }\r\n            op = work[\"operation_type\"]\r\n            w1 = Float(work[\"weight_started\"])\r\n            w2 = Float(work[\"weight_final\"])\r\n            d1 = Float(work[\"depth_started\"])\r\n            d2 = Float(work[\"depth_final\"])\r\n            cl = Float(drilling[\"candle_length\"])\r\n            bw = Float(drilling[\"block_weight\"])\r\n\r\n            // \"Наработка Lн, тк.м\"\r\n            Println(\"Наработка Lн, тк.м\")\r\n            workNew[\"work_started\"] = (w1 * (d1 + bw) + (4 * d1 * cl))/1000\r\n\r\n            // \"Наработка Lк, т.км\"\r\n            Println(\"Наработка Lк, т.км\")\r\n            workNew[\"work_final\"] = (w2 * (d2 + cl) + (4 * d2 * bw))/1000\r\n\r\n            // \"Наработка за операцию, т.км\"\r\n            Println(\"Наработка за операцию, т.км\")\r\n            if op == \"Подъем\"{\r\n                workNew[\"work_operation\"] = getAbsFloat(workNew[\"work_final\"] - workNew[\"work_started\"])*0.5\r\n            }\r\n            if op == \"Спуск\"{\r\n                workNew[\"work_operation\"] = getAbsFloat(workNew[\"work_final\"] - workNew[\"work_started\"])*0.5\r\n            }\r\n            if op == \"СПО\"{\r\n                workNew[\"work_operation\"] = getAbsFloat(workNew[\"work_final\"] - workNew[\"work_started\"])\r\n            }\r\n            if op == \"Бурение\"{\r\n                workNew[\"work_operation\"] = getAbsFloat(workNew[\"work_final\"] - workNew[\"work_started\"])*3\r\n            }\r\n            if op == \"Отбор керна\"{\r\n                workNew[\"work_operation\"] = getAbsFloat(workNew[\"work_final\"] - workNew[\"work_started\"])*2\r\n            }\r\n            if op == \"Проработка\"{\r\n                workNew[\"work_operation\"] = getAbsFloat(workNew[\"work_final\"] - workNew[\"work_started\"])*2\r\n            }\r\n            if op == \"Шаблонировка\"{\r\n                workNew[\"work_operation\"] = getAbsFloat(workNew[\"work_final\"] - workNew[\"work_started\"])*2\r\n            }\r\n            if op == \"Спуск обсадной колонны\"{\r\n                workNew[\"work_operation\"] = workNew[\"work_final\"]*0.5\r\n            }\r\n            if op == \"Технологическое СПО\" {\r\n                workNew[\"work_operation\"] = getAbsFloat(workNew[\"work_final\"] - workNew[\"work_started\"])\r\n            }\r\n            if op == \"Аварийные работы\"{\r\n                workNew[\"work_operation\"] = workNew[\"work_final\"]*2\r\n            }\r\n\r\n\r\n            // \"Наработка нарастающая до перепуска\"\r\n            Println(\"Наработка нарастающая до перепуска\")\r\n            if workNew[\"operation\"] == 1 {\r\n                workNew[\"work_bypass\"] = workNew[\"work_operation\"]\r\n            }else{\r\n                if workNew[\"work_operation\"] == 0 {\r\n                    workNew[\"work_bypass\"] = 0\r\n                }else{\r\n                    workNew[\"work_bypass\"] = workNew[\"work_operation\"] + Float(workPrev[\"work_bypass\"])\r\n                }\r\n            }\r\n            // \"Наработка нарастающая на бухту\"\r\n            Println(\"Наработка нарастающая на бухту\")\r\n            if workNew[\"operation\"] == 1 {\r\n                workNew[\"work_coil\"] = workNew[\"work_bypass\"] + drilling[\"previous_workout\"]\r\n            }else{\r\n                workNew[\"work_coil\"] = workNew[\"work_operation\"] + Float(workPrev[\"work_coil\"])\r\n            }\r\n\r\n            var keys values array\r\n            keys = GetMapKeys(workNew)\r\n            values = getMapValues(workNew, keys)\r\n            DBUpdate(\"rope_works\", Int(workNew[\"id\"]), Join(keys,\",\"), ...values)\r\n            Println(\"db write\",Int(workNew[\"id\"]), Join(keys,\",\"), ...values)\r\n            i=i+1\r\n        }\r\n\r\n    }\r\n}",
            "Name": "RopeWorksCalculate",
            "Type": "contracts"
        }
    ]
}