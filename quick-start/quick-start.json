{
    "name": "Basic application",
    "data": [
        {
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:Wallet, Page:profile_view, Icon:\"icon-wallet\")\r\nMenuGroup(Title:Notifications, Icon:\"icon-arrow-right\"){\r\n    MenuItem(Title:Single notifications, Page:notifications_single, Icon:\"fa fa-bell-o\")\r\n    MenuItem(Title:Role notifications, Page:notifications_roles, Icon:\"fa fa-bullhorn\")\r\n}\r\nMenuItem(Title:Membership, Page:members_list, Icon:\"fa icon-people\")\r\nMenuItem(Title:Ecosystems, Page:membership_ecosystems, Icon:\"fa fa-list-ul\")\r\nIf(#role_id#==1){\r\n    MenuGroup(Title:Admin, Icon:\"icon-arrow-right\"){\r\n        MenuItem(Title:Roles, Page:roles_list, Icon:\"fa fa-list-ul\")\r\n        MenuItem(Title:Voting, Page:voting_list, Icon:\"fa fa-edit\")\r\n    }\r\n}",
            "Name": "default_menu",
            "Type": "menu"
        },
        {
            "Name": "APL_not_required",
            "Trans": "{\"en\":\"APL not required\",\"ru\":\"Не требуется наличие APL\"}",
            "Type": "languages"
        },
        {
            "Name": "APL_required",
            "Trans": "{\"en\":\"APL required\",\"ru\":\"Требуется наличие APL\"}",
            "Type": "languages"
        },
        {
            "Name": "NewValue",
            "Trans": "{\"en\": \"New value\", \"ru\": \"Новое значение\"}",
            "Type": "languages"
        },
        {
            "Name": "OldValue",
            "Trans": "{\"en\": \"Old value\", \"ru\": \"Старое значение\"}",
            "Type": "languages"
        },
        {
            "Name": "accept",
            "Trans": "{\"en\": \"Accept\", \"ru\": \"Принять\"}",
            "Type": "languages"
        },
        {
            "Name": "accept_request_member",
            "Trans": "{\"en\": \"Accept the request of this member?\", \"ru\": \"Принять запрос этого члена?\"}",
            "Type": "languages"
        },
        {
            "Name": "accepted",
            "Trans": "{\"en\": \"Accepted\", \"ru\": \"Принят\"}",
            "Type": "languages"
        },
        {
            "Name": "account",
            "Trans": "{\"en\": \"Account\", \"ru\": \"Счет\"}",
            "Type": "languages"
        },
        {
            "Name": "accounts",
            "Trans": "{\"en\": \"Accounts\", \"ru\": \"Счета\"}",
            "Type": "languages"
        },
        {
            "Name": "actions",
            "Trans": "{\"en\": \"Actions\", \"ru\": \"Действия\"}",
            "Type": "languages"
        },
        {
            "Name": "active",
            "Trans": "{\"en\": \"Active\", \"ru\": \"Активно\"}",
            "Type": "languages"
        },
        {
            "Name": "add",
            "Trans": "{\"en\": \"Add\", \"ru\": \"Добавить\"}",
            "Type": "languages"
        },
        {
            "Name": "add_member",
            "Trans": "{\"en\": \"Add member\", \"ru\": \"Добавить члена\"}",
            "Type": "languages"
        },
        {
            "Name": "add_role",
            "Trans": "{\"en\": \"Add role\", \"ru\": \"Добавить роль\"}",
            "Type": "languages"
        },
        {
            "Name": "address",
            "Trans": "{\"en\":\"Address\",\"ru\":\"Адрес\"}",
            "Type": "languages"
        },
        {
            "Name": "admin",
            "Trans": "{\"en\":\"Administrator\",\"ru\":\"Администратор\"}",
            "Type": "languages"
        },
        {
            "Name": "admin_tools",
            "Trans": "{\"en\": \"Admin tools\", \"ru\": \"Инструменты администратора\"}",
            "Type": "languages"
        },
        {
            "Name": "agency",
            "Trans": "{\"en\": \"Agency\", \"ru\": \"Агенский\"}",
            "Type": "languages"
        },
        {
            "Name": "all",
            "Trans": "{\"en\": \"All\", \"ru\": \"Все\"}",
            "Type": "languages"
        },
        {
            "Name": "amount",
            "Trans": "{\"en\": \"Amount\", \"ru\": \"Сумма\"}",
            "Type": "languages"
        },
        {
            "Name": "apply",
            "Trans": "{\"en\": \"Apply\", \"ru\": \"Подать\"}",
            "Type": "languages"
        },
        {
            "Name": "appointed",
            "Trans": "{\"en\": \"Appointed\", \"ru\": \"Назначен\"}",
            "Type": "languages"
        },
        {
            "Name": "appointment_impossible",
            "Trans": "{\"ru\":\"*Эта роль не является назначаемой. Назначение членов невозможно\",\"en\":\"*This role is not assignable. The appointment of members is impossible\"}",
            "Type": "languages"
        },
        {
            "Name": "arguments",
            "Trans": "{\"en\": \"Arguments\", \"ru\": \"Аргументы\"}",
            "Type": "languages"
        },
        {
            "Name": "assign",
            "Trans": "{\"en\": \"Assign\", \"ru\": \"Назначить\"}",
            "Type": "languages"
        },
        {
            "Name": "assigned",
            "Trans": "{\"en\": \"Assigned\", \"ru\": \"Назначен\"}",
            "Type": "languages"
        },
        {
            "Name": "assigned_role",
            "Trans": "{\"en\": \"Assigned\", \"ru\": \"Назначаемая\"}",
            "Type": "languages"
        },
        {
            "Name": "at",
            "Trans": "{\"en\": \"at\", \"ru\": \"в\"}",
            "Type": "languages"
        },
        {
            "Name": "attention",
            "Trans": "{\"en\": \"ATTENTION! The page has not received parameters and is unavailable for viewing.\", \"ru\": \"ВНИМАНИЕ! Страница не получила параметров и не доступна для просмотра.\"}",
            "Type": "languages"
        },
        {
            "Name": "available",
            "Trans": "{\"en\":\"Available\",\"ru\":\"Доступно\"}",
            "Type": "languages"
        },
        {
            "Name": "avatar",
            "Trans": "{\"en\": \"Avatar\", \"ru\": \"Фото\"}",
            "Type": "languages"
        },
        {
            "Name": "back",
            "Trans": "{\"en\": \"Back\", \"ru\": \"Назад\"}",
            "Type": "languages"
        },
        {
            "Name": "balance",
            "Trans": "{\"en\": \"Balance\", \"ru\": \"Баланс\"}",
            "Type": "languages"
        },
        {
            "Name": "begin",
            "Trans": "{\"en\": \"Begin\", \"ru\": \"Начать\"}",
            "Type": "languages"
        },
        {
            "Name": "birthdate",
            "Trans": "{\"en\": \"Birthdate\", \"ru\": \"Дата рождения\"}",
            "Type": "languages"
        },
        {
            "Name": "block_timer",
            "Trans": "{\"en\": \"Block timer\", \"ru\": \"Блок-таймер\"}",
            "Type": "languages"
        },
        {
            "Name": "blockcron_list",
            "Trans": "{\"en\": \"Block cron timers\", \"ru\": \"Блок-крон таймеры\"}",
            "Type": "languages"
        },
        {
            "Name": "blocked_at",
            "Trans": "{\"en\": \"Date of lock\", \"ru\": \"Дата блокировки\"}",
            "Type": "languages"
        },
        {
            "Name": "blocks",
            "Trans": "{\"en\": \"Blocks\", \"ru\": \"Блоки\"}",
            "Type": "languages"
        },
        {
            "Name": "body_text",
            "Trans": "{\"en\":\"Text\",\"ru\":\"Текст\"}",
            "Type": "languages"
        },
        {
            "Name": "business",
            "Trans": "{\"en\":\"Business\",\"ru\":\"Бизнес\"}",
            "Type": "languages"
        },
        {
            "Name": "can_apply_voting",
            "Trans": "{\"en\": \"You can apply for voting\", \"ru\": \"Вы можете подать заявку на голосование\"}",
            "Type": "languages"
        },
        {
            "Name": "candidate_manual",
            "Trans": "{\"en\": \"Candidate (manual addition)\", \"ru\": \"Кандидат (ручное добавление)\"}",
            "Type": "languages"
        },
        {
            "Name": "candidate_requests",
            "Trans": "{\"en\": \"Candidate (addition on request)\", \"ru\": \"Кандидат (добавление по запросу)\"}",
            "Type": "languages"
        },
        {
            "Name": "candidates",
            "Trans": "{\"en\": \"Candidates\", \"ru\": \"Кандидаты\"}",
            "Type": "languages"
        },
        {
            "Name": "candidates_role",
            "Trans": "{\"en\": \"Candidates role\", \"ru\": \"Роль кандидатов\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems",
            "Trans": "{\"en\":\"Catalog of ecosystems\",\"ru\":\"Каталог экосистем\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_conditions",
            "Trans": "{\"en\":\"Ecosystem conditions and procedure for accession\",\"ru\":\"Условия и порядок присоединения к экосистеме\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_contact_email",
            "Trans": "{\"en\":\"Contact e-mail\",\"ru\":\"Почта для контактов\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_contact_phone",
            "Trans": "{\"en\":\"Contact phone\",\"ru\":\"Контактный телефон\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_contact_vde_page",
            "Trans": "{\"en\":\"Web site\",\"ru\":\"Веб сайт\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_description",
            "Trans": "{\"en\":\"Ecosystem hardware description\",\"ru\":\"Описание оборудования экосистемы\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_form",
            "Trans": "{\"en\":\"Add ecosystem to Catalog\",\"ru\":\"Добавить экосистему в каталог\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_freetype",
            "Trans": "{\"en\":\"Availability of own funds for entry\",\"ru\":\"Наличие собственных средств для вступления\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_logo",
            "Trans": "{\"en\":\"Logotype image\",\"ru\":\"Изображение логотипа\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_name",
            "Trans": "{\"en\":\"Ecosystem name in the Catalog\",\"ru\":\"Имя экосистемы в Каталоге\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_number",
            "Trans": "{\"en\":\"Ecosystem\",\"ru\":\"Экосистема\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems_type",
            "Trans": "{\"en\":\"Ecosystem type\",\"ru\":\"Тип экосистемы\"}",
            "Type": "languages"
        },
        {
            "Name": "change",
            "Trans": "{\"en\": \"Change\", \"ru\": \"Изменить\"}",
            "Type": "languages"
        },
        {
            "Name": "check_expiration",
            "Trans": "{\"en\": \"Check expiration\", \"ru\": \"Проверить истечение\"}",
            "Type": "languages"
        },
        {
            "Name": "close",
            "Trans": "{\"en\": \"Close\", \"ru\": \"Закрыть\"}",
            "Type": "languages"
        },
        {
            "Name": "closure_type",
            "Trans": "{\"en\": \"Closure type\", \"ru\": \"Тип закрытия\"}",
            "Type": "languages"
        },
        {
            "Name": "column_name",
            "Trans": "{\"en\": \"Column name\", \"ru\": \"Название столбца\"}",
            "Type": "languages"
        },
        {
            "Name": "column_name_desc",
            "Trans": "{\"en\": \"Column name to which the value will be written (Example: onhold)\", \"ru\": \"Название столбца, в который будет записано значение (Пример: onhold)\"}",
            "Type": "languages"
        },
        {
            "Name": "comment",
            "Trans": "{\n    \"en\": \"Comment\",\n    \"ru\": \"Комментарий\"\n}",
            "Type": "languages"
        },
        {
            "Name": "commission_address",
            "Trans": "{\"en\":\"Account address\",\"ru\":\"Адрес аккаунта\"}",
            "Type": "languages"
        },
        {
            "Name": "commission_pub",
            "Trans": "{\"en\":\"Account public key\",\"ru\":\"Публичный ключ аккаунта\"}",
            "Type": "languages"
        },
        {
            "Name": "companies",
            "Trans": "{\"en\":\"Companies\",\"ru\":\"Компании\"}",
            "Type": "languages"
        },
        {
            "Name": "company",
            "Trans": "{\"en\": \"Company\", \"ru\": \"Компания\"}",
            "Type": "languages"
        },
        {
            "Name": "company_add",
            "Trans": "{\"en\":\"Add company\",\"ru\":\"Добавить компанию\"}",
            "Type": "languages"
        },
        {
            "Name": "company_role",
            "Trans": "{\"en\":\"Company role\",\"ru\":\"Роль компании\"}",
            "Type": "languages"
        },
        {
            "Name": "confirmation",
            "Trans": "{\"en\":\"Confirmation\",\"ru\":\"Подтверждение\"}",
            "Type": "languages"
        },
        {
            "Name": "contract",
            "Trans": "{\"en\": \"Contract\", \"ru\": \"Контракт\"}",
            "Type": "languages"
        },
        {
            "Name": "contract_accept",
            "Trans": "{\"en\": \"Contract of accept\", \"ru\": \"Контракт при принятии\"}",
            "Type": "languages"
        },
        {
            "Name": "contract_accept_des",
            "Trans": "{\"en\": \"Name of the contract, which should be started if the decision is accepted\", \"ru\": \"Название контракта, который должен быть запущен, если решение будет одобрено\"}",
            "Type": "languages"
        },
        {
            "Name": "contract_accepted",
            "Trans": "{\"en\": \"Contract accept\", \"ru\": \"Контракт принят\"}",
            "Type": "languages"
        },
        {
            "Name": "contract_params_des",
            "Trans": "{\"ru\":\"Строка в формате JSON\",\"en\":\"String in JSON format\"}",
            "Type": "languages"
        },
        {
            "Name": "contract_reject",
            "Trans": "{\"en\": \"Contract of reject\", \"ru\": \"Контракт при отклонении\"}",
            "Type": "languages"
        },
        {
            "Name": "contract_reject_des",
            "Trans": "{\"en\": \"Name of the contract, which should be started if the decision is rejected\", \"ru\": \"Название контракта, который должен быть запущен, если решение будет отклонено\"}",
            "Type": "languages"
        },
        {
            "Name": "contract_rejected",
            "Trans": "{\"en\": \"Contract reject\", \"ru\": \"Контракт отклонен\"}",
            "Type": "languages"
        },
        {
            "Name": "contract_run",
            "Trans": "{\"en\": \"Contract run\", \"ru\": \"Выполнение контракта\"}",
            "Type": "languages"
        },
        {
            "Name": "contracts",
            "Trans": "{\"en\": \"Contracts\", \"ru\": \"Контракты\"}",
            "Type": "languages"
        },
        {
            "Name": "copy",
            "Trans": "{\"en\": \"Copy\", \"ru\": \"Копировать\"}",
            "Type": "languages"
        },
        {
            "Name": "create",
            "Trans": "{\"en\": \"Create\", \"ru\": \"Создать\"}",
            "Type": "languages"
        },
        {
            "Name": "create_account",
            "Trans": "{\"en\": \"Create account\", \"ru\": \"Создать счет\"}",
            "Type": "languages"
        },
        {
            "Name": "create_cron_title",
            "Trans": "{\"en\":\"The creation of a new block-timer\",\"ru\":\"Создание нового блок-таймера\"}",
            "Type": "languages"
        },
        {
            "Name": "created",
            "Trans": "{\"en\": \"Created\", \"ru\": \"Создан\"}",
            "Type": "languages"
        },
        {
            "Name": "creator",
            "Trans": "{\"en\": \"Creator\", \"ru\": \"Кто создал\"}",
            "Type": "languages"
        },
        {
            "Name": "dashboard",
            "Trans": "{\"en\": \"Dashboard\", \"ru\": \"Приборная панель\"}",
            "Type": "languages"
        },
        {
            "Name": "database_write",
            "Trans": "{\"en\": \"The entry in the database\", \"ru\": \"Запись в базу данных\"}",
            "Type": "languages"
        },
        {
            "Name": "date_created",
            "Trans": "{\n    \"en\": \"Date created\",\n    \"ru\": \"Дата создания\"\n}",
            "Type": "languages"
        },
        {
            "Name": "date_end",
            "Trans": "{\"en\": \"Date end\", \"ru\": \"Дата окончания\"}",
            "Type": "languages"
        },
        {
            "Name": "date_start",
            "Trans": "{\"en\": \"Date start\", \"ru\": \"Дата начала\"}",
            "Type": "languages"
        },
        {
            "Name": "decision",
            "Trans": "{\"en\": \"Decision\", \"ru\": \"Решение\"}",
            "Type": "languages"
        },
        {
            "Name": "decision_accept",
            "Trans": "{\"en\": \"Decision accept\", \"ru\": \"Решение одобрено\"}",
            "Type": "languages"
        },
        {
            "Name": "decision_reject",
            "Trans": "{\"en\": \"Decision reject\", \"ru\": \"Решение отклонено\"}",
            "Type": "languages"
        },
        {
            "Name": "delete_node",
            "Trans": "{\"en\": \"Delete node\", \"ru\": \"Удалить узел\"}",
            "Type": "languages"
        },
        {
            "Name": "delete_node_desc",
            "Trans": "{\"en\": \"The owner of the validating node can remove it from the list without a vote. Your key_id were found in the list of node owners and you can delete your entry at any time\", \"ru\": \"Владелец валидирующего узла может удалить его из списка без голосования. Ваш key_id был найден в списке владельцев узлов и вы можете удалить свою запись в любое время\"}",
            "Type": "languages"
        },
        {
            "Name": "deleted",
            "Trans": "{\"en\": \"Deleted\", \"ru\": \"Удалено\"}",
            "Type": "languages"
        },
        {
            "Name": "description",
            "Trans": "{\"en\": \"Description\", \"ru\": \"Описание\"}",
            "Type": "languages"
        },
        {
            "Name": "description_desc",
            "Trans": "{\"en\": \"Text description of the subject of voting\", \"ru\": \"Текстовое описание предмета голосования\"}",
            "Type": "languages"
        },
        {
            "Name": "description_equipment",
            "Trans": "{\"en\":\"Description equipment\",\"ru\":\"Описание оборудования\"}",
            "Type": "languages"
        },
        {
            "Name": "did_not_vote",
            "Trans": "{\"en\": \"Did not vote\", \"ru\": \"Не голосовал\"}",
            "Type": "languages"
        },
        {
            "Name": "document",
            "Trans": "{\"en\": \"Document\", \"ru\": \"Документ\"}",
            "Type": "languages"
        },
        {
            "Name": "document_accept",
            "Trans": "{\"en\": \"Document accept\", \"ru\": \"Документ одобрен\"}",
            "Type": "languages"
        },
        {
            "Name": "document_reject",
            "Trans": "{\"en\": \"Document reject\", \"ru\": \"Документ отклонен\"}",
            "Type": "languages"
        },
        {
            "Name": "duration",
            "Trans": "{\"en\":\"Duration\",\"ru\":\"Продолжительность\"}",
            "Type": "languages"
        },
        {
            "Name": "ecosystem",
            "Trans": "{\"en\": \"Ecosystem\", \"ru\": \"Экосистема\"}",
            "Type": "languages"
        },
        {
            "Name": "ecosystem_number",
            "Trans": "{\"en\":\"Number\",\"ru\":\"Номер\"}",
            "Type": "languages"
        },
        {
            "Name": "edit",
            "Trans": "{\"en\":\"Edit\",\"ru\":\"Редактировать\"}",
            "Type": "languages"
        },
        {
            "Name": "edit_role",
            "Trans": "{\"en\":\"Edit role\",\"ru\":\"Редактирование роли\"}",
            "Type": "languages"
        },
        {
            "Name": "editing_profile",
            "Trans": "{\"en\": \"Editing profile\", \"ru\": \"Редактирование профиля\"}",
            "Type": "languages"
        },
        {
            "Name": "elective",
            "Trans": "{\"en\": \"Elective\", \"ru\": \"Выбран\"}",
            "Type": "languages"
        },
        {
            "Name": "elective_role",
            "Trans": "{\"en\": \"Elective\", \"ru\": \"Выборная\"}",
            "Type": "languages"
        },
        {
            "Name": "email",
            "Trans": "{\"en\": \"Email\", \"ru\": \"Почта\"}",
            "Type": "languages"
        },
        {
            "Name": "emission",
            "Trans": "{\"en\": \"Emission\", \"ru\": \"Эмиссия\"}",
            "Type": "languages"
        },
        {
            "Name": "emission_account_not_found",
            "Trans": "{\"en\":\"System emission account is not found\",\"ru\":\"Системный эмиссионный счет не найден\"}",
            "Type": "languages"
        },
        {
            "Name": "empty",
            "Trans": "{\"en\": \"[no]\", \"ru\": \"[нет]\"}",
            "Type": "languages"
        },
        {
            "Name": "everybody",
            "Trans": "{\"en\": \"Everybody\", \"ru\": \"Все\"}",
            "Type": "languages"
        },
        {
            "Name": "execute",
            "Trans": "{\"en\": \"Execute\", \"ru\": \"Выполнить\"}",
            "Type": "languages"
        },
        {
            "Name": "expiration",
            "Trans": "{\"en\": \"Expiration\", \"ru\": \"Окончание\"}",
            "Type": "languages"
        },
        {
            "Name": "expiration_only_visitor",
            "Trans": "{\"en\": \"Expiration only for visitor\", \"ru\": \"Окончание только для посетителя\"}",
            "Type": "languages"
        },
        {
            "Name": "expired",
            "Trans": "{\"en\": \"Expired\", \"ru\": \"Истекло\"}",
            "Type": "languages"
        },
        {
            "Name": "female",
            "Trans": "{\"en\": \"Female\", \"ru\": \"Женский\"}",
            "Type": "languages"
        },
        {
            "Name": "filled",
            "Trans": "{\"en\": \"Filled\", \"ru\": \"Заполнено\"}",
            "Type": "languages"
        },
        {
            "Name": "finance",
            "Trans": "{\"en\":\"Finance\",\"ru\":\"Финансы\"}",
            "Type": "languages"
        },
        {
            "Name": "finished",
            "Trans": "{\"en\": \"Finished\", \"ru\": \"Завершено\"}",
            "Type": "languages"
        },
        {
            "Name": "freetype",
            "Trans": "{\"en\":\"Pay type\",\"ru\":\"Тип оплаты\"}",
            "Type": "languages"
        },
        {
            "Name": "gender",
            "Trans": "{\"en\": \"Gender\", \"ru\": \"Пол\"}",
            "Type": "languages"
        },
        {
            "Name": "group_person",
            "Trans": "{\"en\":\"Group of person\",\"ru\":\"Группа персон\"}",
            "Type": "languages"
        },
        {
            "Name": "header",
            "Trans": "{\"en\": \"Header\", \"ru\": \"Заголовок\"}",
            "Type": "languages"
        },
        {
            "Name": "host_ip",
            "Trans": "{\"en\":\"IP\",\"ru\":\"IP\"}",
            "Type": "languages"
        },
        {
            "Name": "icon",
            "Trans": "{\"en\": \"Icon\", \"ru\": \"Иконка\"}",
            "Type": "languages"
        },
        {
            "Name": "id",
            "Trans": "{\"en\": \"ID\", \"ru\": \"ID\"}",
            "Type": "languages"
        },
        {
            "Name": "image",
            "Trans": "{\"ru\":\"Изображение\",\"en\":\"Image\"}",
            "Type": "languages"
        },
        {
            "Name": "impossible",
            "Trans": "{\"en\": \"Impossible\", \"ru\": \"Не возможно\"}",
            "Type": "languages"
        },
        {
            "Name": "include_in_role",
            "Trans": "{\"en\":\"YES - Include a member in the role\",\"ru\":\"ДА - Включить члена в роль\"}",
            "Type": "languages"
        },
        {
            "Name": "information",
            "Trans": "{\"en\":\"Information\",\"ru\":\"Информация\"}",
            "Type": "languages"
        },
        {
            "Name": "init_condition",
            "Trans": "{\n    \"en\": \"Initiate process condition\",\n    \"ru\": \"Условие для начала процесса\"\n}",
            "Type": "languages"
        },
        {
            "Name": "init_contract",
            "Trans": "{\"en\": \"The initial contract\", \"ru\": \"Инициализирующий контракт\"}",
            "Type": "languages"
        },
        {
            "Name": "install_default_templates",
            "Trans": "{\"en\":\"Install default templates\",\"ru\":\"Установить шаблоны\"}",
            "Type": "languages"
        },
        {
            "Name": "institution",
            "Trans": "{\"en\":\"Institution\",\"ru\":\"Учреждение\"}",
            "Type": "languages"
        },
        {
            "Name": "interval_blocks",
            "Trans": "{\"en\": \"Interval, in blocks\", \"ru\": \"Интервал в блоках\"}",
            "Type": "languages"
        },
        {
            "Name": "limit",
            "Trans": "{\"en\": \"Limit\", \"ru\": \"Предел\"}",
            "Type": "languages"
        },
        {
            "Name": "limited",
            "Trans": "{\"en\": \"Limited\", \"ru\": \"Ограничены\"}",
            "Type": "languages"
        },
        {
            "Name": "lists_of_roles",
            "Trans": "{\"en\": \"Lists of roles and\", \"ru\": \"Список ролей и\"}",
            "Type": "languages"
        },
        {
            "Name": "logo",
            "Trans": "{\"en\":\"Logo\",\"ru\":\"Лого\"}",
            "Type": "languages"
        },
        {
            "Name": "male",
            "Trans": "{\"en\": \"Male\", \"ru\": \"Мужской\"}",
            "Type": "languages"
        },
        {
            "Name": "manual_add",
            "Trans": "{\"en\": \"Manually adding\", \"ru\": \"Ручное добавление\"}",
            "Type": "languages"
        },
        {
            "Name": "member",
            "Trans": "{\"en\": \"Member\", \"ru\": \"Член\"}",
            "Type": "languages"
        },
        {
            "Name": "member_id",
            "Trans": "{\"en\": \"Member ID\", \"ru\": \"ID члена\"}",
            "Type": "languages"
        },
        {
            "Name": "member_image",
            "Trans": "{\"en\":\"Avatar\",\"ru\":\"Фото\"}",
            "Type": "languages"
        },
        {
            "Name": "member_name",
            "Trans": "{\"en\":\"Member name\",\"ru\":\"Никнейм\"}",
            "Type": "languages"
        },
        {
            "Name": "members",
            "Trans": "{\"en\": \"Members\", \"ru\": \"Члены\"}",
            "Type": "languages"
        },
        {
            "Name": "membership",
            "Trans": "{\"en\": \"Membership\", \"ru\": \"Членство\"}",
            "Type": "languages"
        },
        {
            "Name": "membership_management",
            "Trans": "{\"en\": \"Membership management and\", \"ru\": \"Управление членами и\"}",
            "Type": "languages"
        },
        {
            "Name": "membership_request_accept",
            "Trans": "{\"ru\":\"Вы хотите принять этот запрос?\",\"en\":\"Do you want to accept this request?\"}",
            "Type": "languages"
        },
        {
            "Name": "membership_request_reject",
            "Trans": "{\"en\":\"Do you want to reject this request?\",\"ru\":\"Вы хотите отклонить этот запрос?\"}",
            "Type": "languages"
        },
        {
            "Name": "membership_requests",
            "Trans": "{\"en\": \"Membership requests\", \"ru\": \"Запросы на членство\"}",
            "Type": "languages"
        },
        {
            "Name": "membership_roles_notifications",
            "Trans": "{\"en\": \"Membership, roles, notifications\", \"ru\": \"Членство, роли, уведомления\"}",
            "Type": "languages"
        },
        {
            "Name": "multiple",
            "Trans": "{\"en\": \"Multiple\", \"ru\": \"Множественные\"}",
            "Type": "languages"
        },
        {
            "Name": "my_account",
            "Trans": "{\"en\": \"My account\", \"ru\": \"Мой счет\"}",
            "Type": "languages"
        },
        {
            "Name": "name",
            "Trans": "{\"en\": \"Name\", \"ru\": \"Название\"}",
            "Type": "languages"
        },
        {
            "Name": "name_first",
            "Trans": "{\"en\": \"First name\", \"ru\": \"Имя\"}",
            "Type": "languages"
        },
        {
            "Name": "name_last",
            "Trans": "{\"en\": \"Last name\", \"ru\": \"Фамилия\"}",
            "Type": "languages"
        },
        {
            "Name": "name_middle",
            "Trans": "{\"en\": \"Middle name\", \"ru\": \"Отчество\"}",
            "Type": "languages"
        },
        {
            "Name": "need_fuel",
            "Trans": "{\n    \"en\": \"Need APL\",\n    \"ru\": \"Нужно APL\"\n}",
            "Type": "languages"
        },
        {
            "Name": "new_ecosystem",
            "Trans": "{\"en\":\"New ecosystem\",\"ru\":\"Создать экосистему\"}",
            "Type": "languages"
        },
        {
            "Name": "new_role",
            "Trans": "{\"en\": \"New role\", \"ru\": \"Новая роль\"}",
            "Type": "languages"
        },
        {
            "Name": "new_template",
            "Trans": "{\n    \"en\": \"New template\",\n    \"ru\": \"Новый шаблон\"\n}",
            "Type": "languages"
        },
        {
            "Name": "new_value",
            "Trans": "{\"en\": \"New value\", \"ru\": \"Новое значение\"}",
            "Type": "languages"
        },
        {
            "Name": "new_voting",
            "Trans": "{\"en\": \"New voting\", \"ru\": \"Новое голосование\"}",
            "Type": "languages"
        },
        {
            "Name": "next",
            "Trans": "{\"en\": \"Next\", \"ru\": \"Далее\"}",
            "Type": "languages"
        },
        {
            "Name": "no",
            "Trans": "{\"en\":\"No\",\"ru\":\"Нет\"}",
            "Type": "languages"
        },
        {
            "Name": "no_expiration",
            "Trans": "{\"en\": \"No expiration\", \"ru\": \"Без окончания\"}",
            "Type": "languages"
        },
        {
            "Name": "no_include_in_role",
            "Trans": "{\"en\":\"NO - Do not include a member in the role\",\"ru\":\"НЕТ - Не включать члена в роль\"}",
            "Type": "languages"
        },
        {
            "Name": "not_enough_votes",
            "Trans": "{\"en\": \"Not enough votes\", \"ru\": \"Недостаточно голосов\"}",
            "Type": "languages"
        },
        {
            "Name": "not_need_fuel",
            "Trans": "{\n    \"en\": \"Not need APL\",\n    \"ru\": \"Не нужно APL\"\n}",
            "Type": "languages"
        },
        {
            "Name": "not_started",
            "Trans": "{\"ru\":\"Не начата\",\"en\":\"Not started\"}",
            "Type": "languages"
        },
        {
            "Name": "notification_sender_member",
            "Trans": "{\"en\":\"Send from member\",\"ru\":\"Отправить от члена\"}",
            "Type": "languages"
        },
        {
            "Name": "notification_sender_role",
            "Trans": "{\"en\":\"Send from role\",\"ru\":\"Отправить от роли\"}",
            "Type": "languages"
        },
        {
            "Name": "notifications",
            "Trans": "{\"en\": \"Notifications\", \"ru\": \"Уведомления\"}",
            "Type": "languages"
        },
        {
            "Name": "notifics",
            "Trans": "{\"en\": \"Notifications\", \"ru\": \"Уведомления\"}",
            "Type": "languages"
        },
        {
            "Name": "num_members",
            "Trans": "{\"en\": \"Number of members\", \"ru\": \"Количество членов\"}",
            "Type": "languages"
        },
        {
            "Name": "onhold",
            "Trans": "{\"en\": \"onHold\", \"ru\": \"Закрыт\"}",
            "Type": "languages"
        },
        {
            "Name": "only_if_role_type",
            "Trans": "{\"en\":\"Only if role type -> Company role. For all other types is not used\",\"ru\":\"Только если тип роли - Роль компании. Для всех других типов не используется\"}",
            "Type": "languages"
        },
        {
            "Name": "optional",
            "Trans": "{\"en\": \"[Optional]\", \"ru\": \"[Необязательный]\"}",
            "Type": "languages"
        },
        {
            "Name": "organization",
            "Trans": "{\"en\":\"Organization\",\"ru\":\"Организация\"}",
            "Type": "languages"
        },
        {
            "Name": "page",
            "Trans": "{\"en\":\"Page\",\"ru\":\"Страница\"}",
            "Type": "languages"
        },
        {
            "Name": "page_name",
            "Trans": "{\"en\":\"Page\",\"ru\":\"Страница\"}",
            "Type": "languages"
        },
        {
            "Name": "pages",
            "Trans": "{\"en\": \"Pages\", \"ru\": \"Страницы\"}",
            "Type": "languages"
        },
        {
            "Name": "parameter_name",
            "Trans": "{\"en\": \"Parameter name\", \"ru\": \"Название параметра\"}",
            "Type": "languages"
        },
        {
            "Name": "params",
            "Trans": "{\"en\":\"Parameters\",\"ru\":\"Параметры\"}",
            "Type": "languages"
        },
        {
            "Name": "participants",
            "Trans": "{\"en\": \"Participants\", \"ru\": \"Участники\"}",
            "Type": "languages"
        },
        {
            "Name": "participants_add",
            "Trans": "{\"en\": \"Add participants\", \"ru\": \"Добавить участников\"}",
            "Type": "languages"
        },
        {
            "Name": "pending_notifics",
            "Trans": "{\"en\": \"Pending notifications\", \"ru\": \"Ожидающие уведомления\"}",
            "Type": "languages"
        },
        {
            "Name": "person",
            "Trans": "{\"en\": \"Person\", \"ru\": \"Персональный\"}",
            "Type": "languages"
        },
        {
            "Name": "phone",
            "Trans": "{\"en\": \"Phone\", \"ru\": \"Телефон\"}",
            "Type": "languages"
        },
        {
            "Name": "possible",
            "Trans": "{\"en\": \"Possible\", \"ru\": \"Возможно\"}",
            "Type": "languages"
        },
        {
            "Name": "processing",
            "Trans": "{\"en\": \"Processing\", \"ru\": \"Обработка\"}",
            "Type": "languages"
        },
        {
            "Name": "profile",
            "Trans": "{\"en\": \"Profile\", \"ru\": \"Профиль\"}",
            "Type": "languages"
        },
        {
            "Name": "progress",
            "Trans": "{\"en\": \"Progress\", \"ru\": \"Прогресс\"}",
            "Type": "languages"
        },
        {
            "Name": "pub_key",
            "Trans": "{\"en\":\"Public key\",\"ru\":\"Публичный ключ\"}",
            "Type": "languages"
        },
        {
            "Name": "public_org",
            "Trans": "{\"en\":\"Public organization\",\"ru\":\"Публичная организация\"}",
            "Type": "languages"
        },
        {
            "Name": "quorum",
            "Trans": "{\n    \"en\": \"Quorum\",\n    \"ru\": \"Кворум\"\n}",
            "Type": "languages"
        },
        {
            "Name": "recipient",
            "Trans": "{\"en\": \"Recipient\", \"ru\": \"Получатель\"}",
            "Type": "languages"
        },
        {
            "Name": "recipient_account",
            "Trans": "{\"en\": \"Recipient account\", \"ru\": \"Счет получателя\"}",
            "Type": "languages"
        },
        {
            "Name": "reject",
            "Trans": "{\"en\": \"Reject\", \"ru\": \"Отклонить\"}",
            "Type": "languages"
        },
        {
            "Name": "rejected",
            "Trans": "{\"en\": \"Rejected\", \"ru\": \"Отклонено\"}",
            "Type": "languages"
        },
        {
            "Name": "request",
            "Trans": "{\"en\": \"Request\", \"ru\": \"Запрос\"}",
            "Type": "languages"
        },
        {
            "Name": "request_accepted",
            "Trans": "{\"en\":\"Request was approved\",\"ru\":\"Запрос был одобрен\"}",
            "Type": "languages"
        },
        {
            "Name": "request_info",
            "Trans": "{\"en\":\"Request info\",\"ru\":\"Информация о запросе\"}",
            "Type": "languages"
        },
        {
            "Name": "request_membership",
            "Trans": "{\"ru\":\"Запрос членства\",\"en\":\"Request for membership\"}",
            "Type": "languages"
        },
        {
            "Name": "request_not_sent",
            "Trans": "{\"ru\":\"Запрос не отправлялся\",\"en\":\"Request not sent\"}",
            "Type": "languages"
        },
        {
            "Name": "request_refund",
            "Trans": "{\"en\": \"To request a refund\", \"ru\": \"Запросить возврат средств\"}",
            "Type": "languages"
        },
        {
            "Name": "request_rejected",
            "Trans": "{\"en\":\"Request was rejected\",\"ru\":\"Запрос был отклонен\"}",
            "Type": "languages"
        },
        {
            "Name": "request_wating",
            "Trans": "{\"en\":\"Request has been sent. Wait for administrator's decision\",\"ru\":\"Запрос отправлен. Ожидайте решение\"}",
            "Type": "languages"
        },
        {
            "Name": "required_logo",
            "Trans": "{\"en\":\"Required logo\",\"ru\":\"Требуется логотип\"}",
            "Type": "languages"
        },
        {
            "Name": "resign",
            "Trans": "{\"en\": \"Resign\", \"ru\": \"В отставку\"}",
            "Type": "languages"
        },
        {
            "Name": "result",
            "Trans": "{\"en\": \"Result\", \"ru\": \"Результат\"}",
            "Type": "languages"
        },
        {
            "Name": "right_sign",
            "Trans": "{\"en\":\"Signature right\",\"ru\":\"Право подписи\"}",
            "Type": "languages"
        },
        {
            "Name": "right_sign_no",
            "Trans": "{\"en\":\"No signature right\",\"ru\":\"Нет права подписи\"}",
            "Type": "languages"
        },
        {
            "Name": "right_sign_yes",
            "Trans": "{\"en\":\"Have signature rights\",\"ru\":\"Имеет право подписи\"}",
            "Type": "languages"
        },
        {
            "Name": "role",
            "Trans": "{\"en\": \"Role\", \"ru\": \"Роль\"}",
            "Type": "languages"
        },
        {
            "Name": "role_notifics",
            "Trans": "{\"en\": \"Role notifications\", \"ru\": \"Ролевые уведомления\"}",
            "Type": "languages"
        },
        {
            "Name": "roles",
            "Trans": "{\"en\": \"Roles\", \"ru\": \"Роли\"}",
            "Type": "languages"
        },
        {
            "Name": "roles_access",
            "Trans": "{\"en\": \"Roles Access\"}",
            "Type": "languages"
        },
        {
            "Name": "roles_managers",
            "Trans": "{\"en\": \"Roles Managers\"}",
            "Type": "languages"
        },
        {
            "Name": "rollback",
            "Trans": "{\"en\": \"Rollback\", \"ru\": \"Откат\"}",
            "Type": "languages"
        },
        {
            "Name": "row_id",
            "Trans": "{\"en\": \"Row ID\", \"ru\": \"ID строки\"}",
            "Type": "languages"
        },
        {
            "Name": "row_id_desc",
            "Trans": "{\"en\": \"Row ID to which the value will be written (Example: 14)\", \"ru\": \"ID строки, в которую будет записано значение (Пример: 14)\"}",
            "Type": "languages"
        },
        {
            "Name": "save",
            "Trans": "{\"en\": \"Save\", \"ru\": \"Сохранить\"}",
            "Type": "languages"
        },
        {
            "Name": "select_member",
            "Trans": "{\"en\": \"Select a member to add\", \"ru\": \"Укажите члена, чтобы добавить\"}",
            "Type": "languages"
        },
        {
            "Name": "select_role",
            "Trans": "{\"en\": \"Select a role to add all members of this role\", \"ru\": \"Выберите роль, чтобы добавить всех участников этой роли\"}",
            "Type": "languages"
        },
        {
            "Name": "select_role_if_include",
            "Trans": "{\"ru\":\"Выберите роль, если вы хотите включить члена в роль\",\"en\":\"Select a role if you want to include a member in the role\"}",
            "Type": "languages"
        },
        {
            "Name": "send",
            "Trans": "{\"en\": \"Send\", \"ru\": \"Отправить\"}",
            "Type": "languages"
        },
        {
            "Name": "sender",
            "Trans": "{\"en\": \"Sender\", \"ru\": \"Отправитель\"}",
            "Type": "languages"
        },
        {
            "Name": "sender_account",
            "Trans": "{\"en\":\"Sender account\",\"ru\":\"Счет отправителя\"}",
            "Type": "languages"
        },
        {
            "Name": "sent",
            "Trans": "{\"ru\":\"Отправлено\",\"en\":\"Sent\"}",
            "Type": "languages"
        },
        {
            "Name": "single",
            "Trans": "{\"en\": \"Single\", \"ru\": \"Одиночные\"}",
            "Type": "languages"
        },
        {
            "Name": "single_and_role",
            "Trans": "{\"en\": \"Single and Role\", \"ru\": \"Одиночные и ролевые\"}",
            "Type": "languages"
        },
        {
            "Name": "single_notifics",
            "Trans": "{\"en\": \"Single notifications\", \"ru\": \"Одиночные уведомления\"}",
            "Type": "languages"
        },
        {
            "Name": "start",
            "Trans": "{\n    \"en\": \"Start\",\n    \"ru\": \"Начать\"\n}",
            "Type": "languages"
        },
        {
            "Name": "start_block",
            "Trans": "{\"en\": \"Start block\", \"ru\": \"Стартовый блок\"}",
            "Type": "languages"
        },
        {
            "Name": "start_refund",
            "Trans": "{\"en\": \"To start the refund\", \"ru\": \"Начать возврат средств\"}",
            "Type": "languages"
        },
        {
            "Name": "started",
            "Trans": "{\"en\": \"Started\", \"ru\": \"Начато\"}",
            "Type": "languages"
        },
        {
            "Name": "status",
            "Trans": "{\"en\": \"Status\", \"ru\": \"Статус\"}",
            "Type": "languages"
        },
        {
            "Name": "subject_voting",
            "Trans": "{\"en\": \"Subject of voting\", \"ru\": \"Предмет голосования\"}",
            "Type": "languages"
        },
        {
            "Name": "subject_voting_edit",
            "Trans": "{\"en\": \"Edit subject of voting\", \"ru\": \"Редактировать предмет голосования\"}",
            "Type": "languages"
        },
        {
            "Name": "success",
            "Trans": "{\"en\": \"Success\", \"ru\": \"Успешно\"}",
            "Type": "languages"
        },
        {
            "Name": "sure_want_delete",
            "Trans": "{\"ru\":\"Вы уверены что хотите удалить?\",\"en\":\"Are you sure you want to delete?\"}",
            "Type": "languages"
        },
        {
            "Name": "sys_emission",
            "Trans": "{\"en\":\"sys-emission\",\"ru\":\"Эмиссия (системный)\"}",
            "Type": "languages"
        },
        {
            "Name": "sys_trash",
            "Trans": "{\"en\":\"sys-trash\",\"ru\":\"Корзина (системный)\"}",
            "Type": "languages"
        },
        {
            "Name": "sysparams_candidate_validators_form",
            "Trans": "{\"en\":\"Request form of candidate for validators\",\"ru\":\"Форма запроса кандидата в валидаторы\"}",
            "Type": "languages"
        },
        {
            "Name": "sysparams_candidates",
            "Trans": "{\"en\":\"Candidate for validators\",\"ru\":\"Кандидаты в валидаторы\"}",
            "Type": "languages"
        },
        {
            "Name": "sysparams_candidates_list",
            "Trans": "{\"en\":\"Candidate for validators list\",\"ru\":\"Список кандидатов в валидаторы\"}",
            "Type": "languages"
        },
        {
            "Name": "sysparams_ecos",
            "Trans": "{\"en\":\"Ecosystems list\",\"ru\":\"Список экосистем\"}",
            "Type": "languages"
        },
        {
            "Name": "sysparams_list",
            "Trans": "{\"en\":\"System parameters list\",\"ru\":\"Список системных параметров\"}",
            "Type": "languages"
        },
        {
            "Name": "sysparams_metrics",
            "Trans": "{\"en\": \"Metrics\", \"ru\": \"Метрики\"}",
            "Type": "languages"
        },
        {
            "Name": "system_params",
            "Trans": "{\"en\":\"System parameters\",\"ru\":\"Системные параметры\"}",
            "Type": "languages"
        },
        {
            "Name": "system_role",
            "Trans": "{\"en\":\"System\",\"ru\":\"Системная\"}",
            "Type": "languages"
        },
        {
            "Name": "system_tokens",
            "Trans": "{\"en\": \"System of tokens\", \"ru\": \"Система токенов\"}",
            "Type": "languages"
        },
        {
            "Name": "table",
            "Trans": "{\"en\": \"Table\", \"ru\": \"Таблица\"}",
            "Type": "languages"
        },
        {
            "Name": "table_to_written",
            "Trans": "{\"en\": \"Table name\", \"ru\": \"Название таблицы\"}",
            "Type": "languages"
        },
        {
            "Name": "table_to_written_desc",
            "Trans": "{\"en\": \"Table to which the value will be written (Example: accounts)\", \"ru\": \"Таблица, в которую будет записано значение (Пример: accounts)\"}",
            "Type": "languages"
        },
        {
            "Name": "tables",
            "Trans": "{\"en\": \"Tables\", \"ru\": \"Таблицы\"}",
            "Type": "languages"
        },
        {
            "Name": "template_create",
            "Trans": "{\n    \"en\": \"Creating template\",\"ru\": \"Создание шаблона\"}",
            "Type": "languages"
        },
        {
            "Name": "test_page",
            "Trans": "{\"en\": \"Test page\", \"ru\": \"Тестовая страница\"}",
            "Type": "languages"
        },
        {
            "Name": "text_document",
            "Trans": "{\"en\": \"Text of the document\", \"ru\": \"Текст документа\"}",
            "Type": "languages"
        },
        {
            "Name": "their_members",
            "Trans": "{\"en\": \"their members\", \"ru\": \"их члены\"}",
            "Type": "languages"
        },
        {
            "Name": "timestam",
            "Trans": "{\"en\": \"Timestamp\", \"ru\": \"Отметка времени\"}",
            "Type": "languages"
        },
        {
            "Name": "tip_start_block",
            "Trans": "{\"en\":\"If less than the current block will be equal to the current block\",\"ru\":\"Если меньше текущего блока то будет равно текущему блоку\"}",
            "Type": "languages"
        },
        {
            "Name": "title",
            "Trans": "{\n    \"en\": \"Title\",\n    \"ru\": \"Название\"\n}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_attacker",
            "Trans": "{\"en\": \"Attacker\", \"ru\": \"Злоумышленник\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_list",
            "Trans": "{\"en\": \"Tokens refund list\", \"ru\": \"Список возврата токенов\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_note_header",
            "Trans": "{\"en\": \"Token refund\", \"ru\": \"Возврат средств\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_result0",
            "Trans": "{\"en\": \"Discussion and voting\", \"ru\": \"Oбсуждение и голосование\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_result1",
            "Trans": "{\"en\": \"Return cancelled\", \"ru\": \"Возврат отменен\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_result2",
            "Trans": "{\"en\": \"The tokens returned\", \"ru\": \"Токены возвращены\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_start",
            "Trans": "{\"en\": \"Refund\", \"ru\": \"Возврат средств\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_status0",
            "Trans": "{\"en\": \"Blocked accounts\", \"ru\": \"Аккаунты заблокированы\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_status1",
            "Trans": "{\"en\": \"Discussion\", \"ru\": \"Обсуждение\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_status2",
            "Trans": "{\"en\": \"Voting\", \"ru\": \"Голосование\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_status3",
            "Trans": "{\"en\": \"Closed\", \"ru\": \"Закрыто\"}",
            "Type": "languages"
        },
        {
            "Name": "tokenrefund_victim",
            "Trans": "{\"en\": \"Victim\", \"ru\": \"Жертва\"}",
            "Type": "languages"
        },
        {
            "Name": "tokens",
            "Trans": "{\"en\": \"Tokens\", \"ru\": \"Токены\"}",
            "Type": "languages"
        },
        {
            "Name": "tokens_rollback",
            "Trans": "{\"en\": \"Tokens rollback\", \"ru\": \"Удаление токенов\"}",
            "Type": "languages"
        },
        {
            "Name": "tokens_transfer",
            "Trans": "{\"en\": \"Tokens transfer\", \"ru\": \"Перевод токенов\"}",
            "Type": "languages"
        },
        {
            "Name": "tranche",
            "Trans": "{\"en\":\"Tranche\",\"ru\":\"Транш\"}",
            "Type": "languages"
        },
        {
            "Name": "trash_account_not_found",
            "Trans": "{\"en\":\"System trash account is not found\",\"ru\":\"Системный счет корзины не найден\"}",
            "Type": "languages"
        },
        {
            "Name": "tx",
            "Trans": "{\"en\": \"Transactions\", \"ru\": \"Транзакции\"}",
            "Type": "languages"
        },
        {
            "Name": "type",
            "Trans": "{\"en\": \"Type\", \"ru\": \"Тип\"}",
            "Type": "languages"
        },
        {
            "Name": "type_voting_custom",
            "Trans": "{\"en\":\"Custom\",\"ru\":\"Пользовательское\"}",
            "Type": "languages"
        },
        {
            "Name": "type_voting_system",
            "Trans": "{\"en\":\"System\",\"ru\":\"Системное\"}",
            "Type": "languages"
        },
        {
            "Name": "unlimited",
            "Trans": "{\"en\": \"Unlimited\", \"ru\": \"Не ограничены\"}",
            "Type": "languages"
        },
        {
            "Name": "update_metrics",
            "Trans": "{\"en\": \"Update metrics\", \"ru\": \"Обновить метрики\"}",
            "Type": "languages"
        },
        {
            "Name": "use",
            "Trans": "{\n    \"en\": \"Use\",\n    \"ru\": \"Использовать\"\n}",
            "Type": "languages"
        },
        {
            "Name": "user_info",
            "Trans": "{\"en\": \"Member information\", \"ru\": \"Информация о пользователе\"}",
            "Type": "languages"
        },
        {
            "Name": "username",
            "Trans": "{\"en\": \"Username\", \"ru\": \"Никнейм\"}",
            "Type": "languages"
        },
        {
            "Name": "vacancies",
            "Trans": "{\"en\": \"Vacancies\", \"ru\": \"Вакансии\"}",
            "Type": "languages"
        },
        {
            "Name": "validate_contract_name",
            "Trans": "{\"en\":\"must be between 3 and 255 characters\",\"ru\":\"должно быть от 3 до 255 символов\"}",
            "Type": "languages"
        },
        {
            "Name": "validate_member_name",
            "Trans": "{\"en\":\"must be between 5 and 20 characters\",\"ru\":\"должно быть от 5 до 20 символов\"}",
            "Type": "languages"
        },
        {
            "Name": "validate_notification",
            "Trans": "{\"en\":\"must be between 3 and 255 characters\",\"ru\":\"должно быть от 3 до 255 символов\"}",
            "Type": "languages"
        },
        {
            "Name": "validate_role_name",
            "Trans": "{\"en\":\"must be between 3 and 30 characters\",\"ru\":\"должно быть от 3 до 30 символов\"}",
            "Type": "languages"
        },
        {
            "Name": "validator_removing",
            "Trans": "{\"en\": \"Validator's removing\", \"ru\": \"Удаление валидатора\"}",
            "Type": "languages"
        },
        {
            "Name": "validator_removing_desc",
            "Trans": "{\"en\": \"You are a Validator. At any time you can remove the entry about your node and leave with a role of Validator\", \"ru\": \"Вы являетесь Валидатором. В любой момент вы можете удалить запись о своем узле и уйти с роли Валидатор\"}",
            "Type": "languages"
        },
        {
            "Name": "value",
            "Trans": "{\"en\":\"Value\",\"ru\":\"Значение\"}",
            "Type": "languages"
        },
        {
            "Name": "value_number",
            "Trans": "{\"en\": \"Value number\", \"ru\": \"Значение (число)\"}",
            "Type": "languages"
        },
        {
            "Name": "value_string",
            "Trans": "{\"en\": \"Value string\", \"ru\": \"Значение (строка)\"}",
            "Type": "languages"
        },
        {
            "Name": "vde_form",
            "Trans": "{\"en\":\"VDE form address\",\"ru\":\"Адрес VDE-формы\"}",
            "Type": "languages"
        },
        {
            "Name": "vde_form_desc",
            "Trans": "{\"en\":\"Address of the VDE form in VDE system for applying for membership (who do not yet have APL)\",\"ru\":\"Адрес VDE-формы для подачи заявки на членство (у кого еще нет APL)\"}",
            "Type": "languages"
        },
        {
            "Name": "view",
            "Trans": "{\"en\": \"View\", \"ru\": \"Просмотр\"}",
            "Type": "languages"
        },
        {
            "Name": "view_all",
            "Trans": "{\"en\":\"View all\",\"ru\":\"Показать все\"}",
            "Type": "languages"
        },
        {
            "Name": "visitor",
            "Trans": "{\"en\": \"Visitor\", \"ru\": \"Посетитель\"}",
            "Type": "languages"
        },
        {
            "Name": "visitor_rights",
            "Trans": "{\"en\": \"Visitor (with SR)\", \"ru\": \"Посетитель (с правами)\"}",
            "Type": "languages"
        },
        {
            "Name": "volume",
            "Trans": "{\r\n    \"en\": \"Volume\",\r\n    \"ru\": \"Объем\"\r\n}",
            "Type": "languages"
        },
        {
            "Name": "vote",
            "Trans": "{\"en\": \"Vote\", \"ru\": \"Голосовать\"}",
            "Type": "languages"
        },
        {
            "Name": "vote_for_candidate",
            "Trans": "{\"en\": \"voted for the candidate\", \"ru\": \"голосовал за кандидата\"}",
            "Type": "languages"
        },
        {
            "Name": "voted",
            "Trans": "{\"en\": \"Voted\", \"ru\": \"Проголосовавшие\"}",
            "Type": "languages"
        },
        {
            "Name": "voters",
            "Trans": "{\r\n    \"en\": \"Voters\",\r\n    \"ru\": \"Голосующие\"\r\n}",
            "Type": "languages"
        },
        {
            "Name": "voters_role",
            "Trans": "{\"en\": \"Voters role\", \"ru\": \"Роль голосующих\"}",
            "Type": "languages"
        },
        {
            "Name": "voting",
            "Trans": "{\"en\": \"Voting\", \"ru\": \"Голосование\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_all_members",
            "Trans": "{\"en\":\"All members were added automatically\",\"ru\":\"Все члены были добавлены автоматически\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_contract_accept",
            "Trans": "{\r\n    \"en\": \"Run contract after accept decision\",\r\n    \"ru\": \"Выполнить контракт при положительном решении\"\r\n}",
            "Type": "languages"
        },
        {
            "Name": "voting_contract_reject",
            "Trans": "{\r\n    \"en\": \"Run contract after reject decision\",\r\n    \"ru\": \"Выполнить контракт при отрицательном решении\"\r\n}",
            "Type": "languages"
        },
        {
            "Name": "voting_decisions_candidate_manual",
            "Trans": "{\"en\": \"Role candidates with manual registration of participants\", \"ru\": \"Ролевые кандидаты с ручной регистрацией участников\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_decisions_candidate_requests",
            "Trans": "{\"en\": \"Role candidates with registration of participants by request\", \"ru\": \"Ролевые кандидаты с регистрацией участников по запросу\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_decisions_contract",
            "Trans": "{\"en\": \"Performance of the contract\", \"ru\": \"Выполнение контракта\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_decisions_db",
            "Trans": "{\"en\": \"Formal decision\", \"ru\": \"Формальное решение\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_decisions_document",
            "Trans": "{\"en\": \"Document approval\", \"ru\": \"Утверждение документа\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_graph_progress",
            "Trans": "{\"en\": \"Graph of the percentages of votes needed to make a decision\", \"ru\": \"График процента голосов, необходимых для принятия решения\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_graph_voted",
            "Trans": "{\"en\": \"Graph of the proportion of voters from the total number of participants\", \"ru\": \"График отношения проголосовавших от общего числа участников\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_init_condition",
            "Trans": "{\r\n    \"en\": \"Initial Сondition for starts\",\r\n    \"ru\": \"Условие при запуске\"\r\n}",
            "Type": "languages"
        },
        {
            "Name": "voting_init_condition_desc",
            "Trans": "{\r\n    \"en\": \"Contract for check rights for starts voting\",\r\n    \"ru\": \"Контракт для проверки права начать голосование\"\r\n}",
            "Type": "languages"
        },
        {
            "Name": "voting_init_contract",
            "Trans": "{\"en\": \"Initializing contract\", \"ru\": \"Инициализирующий контракт\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_init_contract_desc",
            "Trans": "{\"en\": \"Is executed before the beginning of voting\", \"ru\": \"Выполняется перед началом голосования\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_params",
            "Trans": "{\"en\": \"Voting params\", \"ru\": \"Параметры голосования \"}",
            "Type": "languages"
        },
        {
            "Name": "voting_participants_everybody",
            "Trans": "{\"en\": \"Anybody\", \"ru\": \"Все\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_participants_manual",
            "Trans": "{\"en\": \"Choose manually\", \"ru\": \"Ручной выбор\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_participants_role",
            "Trans": "{\"en\": \"By role\", \"ru\": \"По роли\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_precondition",
            "Trans": "{\r\n    \"en\": \"Initial condition for the subject of voting\",\r\n    \"ru\": \"Начальное условие для предмета голосования\"\r\n}",
            "Type": "languages"
        },
        {
            "Name": "voting_quorum",
            "Trans": "{\"en\": \"Quorum\", \"ru\": \"Кворум\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_quorum_desc",
            "Trans": "{\"en\": \"Percentage value of votes for a decision (from 5 to 100)\", \"ru\": \"Процентная доля голосов для принятия решения (от 5 до 100)\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_start",
            "Trans": "{\r\n    \"en\": \"Voting start\",\r\n    \"ru\": \"Начать голосование\"\r\n}",
            "Type": "languages"
        },
        {
            "Name": "voting_subject",
            "Trans": "{\"en\": \"Voting subject\", \"ru\": \"Тема голосования\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_template_not_found",
            "Trans": "{\"en\": \"The template ID to vote is not found in the parameters of the ecosystem\", \"ru\": \"Идентификатор шаблона голосования не найден в параметрах экосистемы\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_templates",
            "Trans": "{\"en\": \"Voting templates\", \"ru\": \"Шаблоны голосования\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_type",
            "Trans": "{\r\n    \"en\": \"Voting type\",\r\n    \"ru\": \"Тип голосования\"\r\n}",
            "Type": "languages"
        },
        {
            "Name": "voting_volume",
            "Trans": "{\"en\": \"Volume\", \"ru\": \"Объем\"}",
            "Type": "languages"
        },
        {
            "Name": "voting_volume_desc",
            "Trans": "{\"en\": \"Percentage value of votes to fulfill requirements of this voting (from 50 to 100)\", \"ru\": \"Процентная доля голосов для выполнения этого голосования (от 50 до 100)\"}",
            "Type": "languages"
        },
        {
            "Name": "waiting",
            "Trans": "{\"en\": \"Waiting\", \"ru\": \"Ожидание\"}",
            "Type": "languages"
        },
        {
            "Name": "wallet_address",
            "Trans": "{\"en\": \"Wallet Address\", \"ru\": \"Адрес кошелька\"}",
            "Type": "languages"
        },
        {
            "Name": "want_accept_contract",
            "Trans": "{\"en\": \"Do you want to accept this contract?\", \"ru\": \"Вы хотите принять этот контракт?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_accept_decision",
            "Trans": "{\"en\": \"Are you sure you want to accept decision?\", \"ru\": \"Вы уверены, что хотите принять решение?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_accept_document",
            "Trans": "{\"en\": \"Are you sure you want to accept document?\", \"ru\": \"Вы уверены, что хотите принять документ?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_assign_member_to_role",
            "Trans": "{\"en\":\"Do you want to assign this member of the ecosystem to this role?\",\"ru\":\"Вы хотите назначить этого члена экосистемы на эту роль?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_change_status",
            "Trans": "{\"en\": \"Do you want to change the status of this member?\", \"ru\": \"Вы хотите изменить статус этого члена?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_check_decision",
            "Trans": "{\"en\": \"Do you want to check decision?\", \"ru\": \"Вы хотите проверить решение?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_check_tokens",
            "Trans": "{\"en\": \"Do you want to check the expiration of the tokens?\", \"ru\": \"Вы хотите проверить истечение токенов?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_close_account",
            "Trans": "{\"en\": \"Do you want to close this account?\", \"ru\": \"Вы хотите закрыть этот счет?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_close_notification",
            "Trans": "{\"en\": \"Do you want to close this notification?\", \"ru\": \"Вы хотите закрыть это уведомление?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_create_block_timer",
            "Trans": "{\"en\": \"Are you sure you want to create a block timer\", \"ru\": \"Вы уверены, что хотите создать блок таймера\"}",
            "Type": "languages"
        },
        {
            "Name": "want_create_new_account",
            "Trans": "{\"en\":\"Do you want to create a new account?\",\"ru\":\"Вы хотите создать новый счет?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_create_new_company",
            "Trans": "{\"en\":\"Do you want to add a new company? The current account will become a multi-account. This action is not reversible.\",\"ru\":\"Вы хотите добавить новую компанию? Текущий аккаунт станет мульти-аккаунтом. Это действие не обратимо.\"}",
            "Type": "languages"
        },
        {
            "Name": "want_create_new_role",
            "Trans": "{\"en\":\"Do you want to create a new role?\",\"ru\":\"Вы хотите создать новую роль?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_create_role_company",
            "Trans": "{\"en\":\"Do you want to create a new role for the company?\",\"ru\":\"Вы хотите создать новую роль для компании?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_delete_block_timer",
            "Trans": "{\"en\": \"Are you sure you want to delete a block timer?\", \"ru\": \"Вы уверены, что хотите удалить блок таймера?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_delete_company",
            "Trans": "{\"en\":\"Do you want to delete the company? All company roles will also be deleted\",\"ru\":\"Вы хотите удалить компанию? Также будут удалены все роли компании\"}",
            "Type": "languages"
        },
        {
            "Name": "want_delete_from_role",
            "Trans": "{\"en\": \"Are you sure you want to delete this member from the role?\", \"ru\": \"Вы уверены, что хотите удалить этого члена из роли?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_delete_member",
            "Trans": "{\"en\": \"Do you want to delete this member?\", \"ru\": \"Вы хотите удалить этого члена?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_delete_participant_company",
            "Trans": "{\"en\":\"Do you want to remove a participant from the company?\",\"ru\":\"Вы хотите удалить участника из компании?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_delete_role",
            "Trans": "{\"en\": \"Do you want to delete this role?\", \"ru\": \"Вы хотите удалить эту роль?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_delete_tokens",
            "Trans": "{\"en\": \"Do you want to delete this tokens?\", \"ru\": \"Вы хотите удалить эти токены?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_delete_voting",
            "Trans": "{\"en\": \"Do you want to delete this voting?\", \"ru\": \"Вы хотите удалить это голосование?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_delete_your_role_from_manager",
            "Trans": "{\"en\": \"It is your role. Are you sure you want to delete your role from managers list? You cannot edit this role after the action\", \"ru\": \"Это ваша роль. Вы действительно хотите удалить роль из списка менеджеров? Вы не сможете редактировать эту роль после данного действия\"}",
            "Type": "languages"
        },
        {
            "Name": "want_edit_block_timer",
            "Trans": "{\"en\": \"Are you sure you want to edit a block timer?\", \"ru\": \"Вы уверены, что хотите изменить блок таймера?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_finish_processing",
            "Trans": "{\"en\": \"Do you want to finish processing this notification?\", \"ru\": \"Вы хотите завершить обработку этого уведомления?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_make_emission",
            "Trans": "{\"en\":\"Do you want to make an emission?\",\"ru\":\"Вы хотите выполнить эмиссию?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_reject_contract",
            "Trans": "{\"en\": \"Do you want to reject this contract?\", \"ru\": \"Вы хотите отклонить этот контракт?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_reject_decision",
            "Trans": "{\"en\": \"Are you sure you want to reject decision?\", \"ru\": \"Вы уверены, что хотите отклонить решение?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_reject_document",
            "Trans": "{\"en\": \"Are you sure you want to reject document?\", \"ru\": \"Вы уверены, что хотите отклонить документ?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_reject_request",
            "Trans": "{\"en\": \"Do you want to reject the request?\", \"ru\": \"Вы хотите отклонить запрос?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_release_tokens",
            "Trans": "{\"en\":\"Do you want to release new tokens?\",\"ru\":\"Вы хотите выпустить новые токены?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_resign",
            "Trans": "{\"en\": \"Are you sure you want to resign the role of the Validator?\", \"ru\": \"Вы действительно хотите уйти с роли Валидатор?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_return_member",
            "Trans": "{\"en\": \"Do you want to return this member?\", \"ru\": \"Вы хотите восстановить этого члена?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_rollback_tokens",
            "Trans": "{\"en\":\"Do you want to rollback the tokens?\",\"ru\":\"Вы хотите откатить токены?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_save_changes",
            "Trans": "{\"en\":\"Do you want to save the changes?\",\"ru\":\"Вы хотите сохранить изменения?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_send_notific_voters",
            "Trans": "{\"en\": \" Do you want to send a notification to all the voters?\", \"ru\": \"Вы хотите отправить уведомление всем участникам голосования?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_send_tokens",
            "Trans": "{\"en\":\"Do you want to send tokens?\",\"ru\":\"Вы хотите отправить токены?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_start_processing",
            "Trans": "{\"en\": \"Do you want to start processing this notification?\", \"ru\": \"Вы хотите начать обработку этого уведомления?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_start_processing_notification",
            "Trans": "{\"ru\":\"Вы хотите начать обработку уведомления?\",\"en\":\"Do you want to start processing the notification?\"}",
            "Type": "languages"
        },
        {
            "Name": "want_vote_for_candidate",
            "Trans": "{\"en\": \"Are you sure you want to vote for this candidate?\", \"ru\": \"Вы уверены, что хотите проголосовать за этого кандидата?\"}",
            "Type": "languages"
        },
        {
            "Name": "web_form",
            "Trans": "{\"en\":\"Web form address\",\"ru\":\"Адрес web-формы\"}",
            "Type": "languages"
        },
        {
            "Name": "web_form_desc",
            "Trans": "{\"en\":\"Web address of the form for applying for membership (who do not yet have APL)\",\"ru\":\"Адрес web-формы для подачи заявки на членство (у кого еще нет APL)\"}",
            "Type": "languages"
        },
        {
            "Name": "web_page",
            "Trans": "{\r\n    \"en\": \"Page web-address\",\r\n    \"ru\": \"Вэб-адрес страницы\"\r\n}",
            "Type": "languages"
        },
        {
            "Name": "written_value",
            "Trans": "{\"en\": \"Written value\", \"ru\": \"Записываемое значение\"}",
            "Type": "languages"
        },
        {
            "Name": "written_value_desc",
            "Trans": "{\"en\": \"Value to be written to the table (Example: 1)\", \"ru\": \"Значение, которое должно быть записано в таблицу (Пример: 1)\"}",
            "Type": "languages"
        },
        {
            "Name": "yes",
            "Trans": "{\"en\":\"Yes\",\"ru\":\"Да\"}",
            "Type": "languages"
        },
        {
            "Name": "сlosed",
            "Trans": "{\"en\": \"Closed\", \"ru\": \"Закрыто\"}",
            "Type": "languages"
        },
        {
            "Name": "catalog_ecosystems",
            "Columns": "[{\"conditions\":\"true\",\"name\":\"deleted\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"image_id\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"flag_free\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"url_address\",\"type\":\"json\"},{\"conditions\":\"true\",\"name\":\"ecosystem_info\",\"type\":\"json\"},{\"conditions\":\"true\",\"name\":\"ecosystem_name\",\"type\":\"varchar\"},{\"conditions\":\"true\",\"name\":\"ecosystem_type\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"ecosystem_number\",\"type\":\"number\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "laws",
            "Columns": "[{\"conditions\":\"true\",\"name\":\"page\",\"type\":\"varchar\"},{\"conditions\":\"true\",\"name\":\"voting_template_id\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"name\",\"type\":\"varchar\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "membership_requests",
            "Columns": "[{\"conditions\":\"false\",\"name\":\"member_id\",\"type\":\"number\"},{\"conditions\":\"false\",\"name\":\"ecosystem_id\",\"type\":\"number\"},{\"conditions\":\"ContractAccess(\\\"membership_accept\\\", \\\"membership_decline\\\")\",\"name\":\"request_status\",\"type\":\"number\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "sysparams_candidate",
            "Columns": "[{\"conditions\":\"true\",\"name\":\"date_created\",\"type\":\"datetime\"},{\"conditions\":\"true\",\"name\":\"commission_pub\",\"type\":\"varchar\"},{\"conditions\":\"true\",\"name\":\"candidate_key_id\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"commission_address\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"comment\",\"type\":\"text\"},{\"conditions\":\"true\",\"name\":\"deleted\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"host_ip\",\"type\":\"varchar\"},{\"conditions\":\"true\",\"name\":\"description\",\"type\":\"text\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "tokenrefund",
            "Columns": "[{\"conditions\":\"true\",\"name\":\"validator_key_id\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"amount\",\"type\":\"money\"},{\"conditions\":\"true\",\"name\":\"result\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"status\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"blocked_at\",\"type\":\"datetime\"},{\"conditions\":\"true\",\"name\":\"attacker_key_id\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"note\",\"type\":\"text\"},{\"conditions\":\"true\",\"name\":\"closed_at\",\"type\":\"datetime\"},{\"conditions\":\"true\",\"name\":\"voting_id\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"victim_key_id\",\"type\":\"number\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "voting_templates",
            "Columns": "[{\"conditions\":\"true\",\"name\":\"reject_params\",\"type\":\"varchar\"},{\"conditions\":\"true\",\"name\":\"type_decision\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"type_participants\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"title\",\"type\":\"varchar\"},{\"conditions\":\"true\",\"name\":\"type_voting\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"init_contract\",\"type\":\"varchar\"},{\"conditions\":\"true\",\"name\":\"type_id\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"candidates\",\"type\":\"varchar\"},{\"conditions\":\"true\",\"name\":\"accept_params\",\"type\":\"varchar\"},{\"conditions\":\"true\",\"name\":\"voters\",\"type\":\"varchar\"},{\"conditions\":\"true\",\"name\":\"subject\",\"type\":\"varchar\"},{\"conditions\":\"true\",\"name\":\"vacancies\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"contract_accept\",\"type\":\"varchar\"},{\"conditions\":\"true\",\"name\":\"contract_reject\",\"type\":\"varchar\"},{\"conditions\":\"true\",\"name\":\"type\",\"type\":\"varchar\"},{\"conditions\":\"true\",\"name\":\"quorum\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"volume\",\"type\":\"number\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "votings",
            "Columns": "[{\"conditions\":\"true\",\"name\":\"deleted\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"optional\",\"type\":\"json\"},{\"conditions\":\"true\",\"name\":\"progress\",\"type\":\"json\"},{\"conditions\":\"true\",\"name\":\"date_ended\",\"type\":\"datetime\"},{\"conditions\":\"true\",\"name\":\"date_started\",\"type\":\"datetime\"},{\"conditions\":\"true\",\"name\":\"flags\",\"type\":\"json\"},{\"conditions\":\"true\",\"name\":\"voting\",\"type\":\"json\"},{\"conditions\":\"true\",\"name\":\"creator\",\"type\":\"json\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "votings_participants",
            "Columns": "[{\"conditions\":\"true\",\"name\":\"member\",\"type\":\"json\"},{\"conditions\":\"true\",\"name\":\"decision\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"voting_id\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"decision_date\",\"type\":\"datetime\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "votings_subject",
            "Columns": "[{\"conditions\":\"true\",\"name\":\"voting_id\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"number_accept\",\"type\":\"number\"},{\"conditions\":\"true\",\"name\":\"subject\",\"type\":\"json\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "APL_not_required,APL_required",
            "Name": "catalog_ecosystems_freetype",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "public_org,business,finance",
            "Name": "catalog_ecosystems_type",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "{\"api_address\":\"\",\"key_id\":\"\",\"public_key\":\"\",\"tcp_address\":\"\"}",
            "Name": "first_node",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "investors_number",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "single,multiple",
            "Name": "notification_closure",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "fa-bell,fa-comment,fa-envelope,fa-bookmark,fa-check,fa-exclamation-triangle,fa-info-circle",
            "Name": "notification_icon",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "notification_sender_member,notification_sender_role",
            "Name": "notification_sender",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "single,role",
            "Name": "notification_type",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "assigned_role,elective_role,system_role,company_role",
            "Name": "roles_types",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "tokenrefund_result1,tokenrefund_result2,tokenrefund_result3",
            "Name": "tokenrefund_result",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "tokenrefund_status1,tokenrefund_status2,tokenrefund_status3",
            "Name": "tokenrefund_status",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "type_voting_custom,type_voting_system",
            "Name": "type_voting",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "candidate_requests,candidate_manual,document,database_write,contract_run",
            "Name": "type_voting_decisions",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "everybody,manual_add,role",
            "Name": "type_voting_participants",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "voting_sysparams_template_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "voting_tokenrefund_template_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "voting_validators_template_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "voting_ves_template_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(appication)\r\n    SetTitle($catalog_ecosystems$)\r\n    AddToolButton(Title: $add$, Page: catalog_ecosystems_add, Icon: icon-plus)\r\n\r\n    If(#param_flag_free#==0){\r\n        SetVar(Name: v_where, Value: \"deleted=0\")\r\n    }.ElseIf(#param_flag_free#==1){\r\n        SetVar(Name: v_where, Value: \"deleted=0 and flag_free=1\")\r\n    }.ElseIf(#param_flag_free#==2){\r\n        SetVar(Name: v_where, Value: \"deleted=0 and flag_free=2\")\r\n    }.Else{\r\n        SetVar(Name: v_where, Value: \"deleted=0\")\r\n        SetVar(Name: param_flag_free, Value: 0)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-12 text-left){\r\n            Div(btn-group){\r\n                If(#param_flag_free#==0){\r\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $all$, Page: catalog_ecosystems, PageParams: \"param_flag_free=0\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $all$, Page: catalog_ecosystems, PageParams: \"param_flag_free=0\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n                If(#param_flag_free#==1){\r\n                    Span(Button(Body: Em(Class: fa fa-user-o) $not_need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=1\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-user-o) $not_need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=1\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n                If(#param_flag_free#==2){\r\n                    Span(Button(Body: Em(Class: fa fa-money) $need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=2\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-money) $need_fuel$, Page: catalog_ecosystems, PageParams: \"param_flag_free=2\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            DBFind(Name: catalog_ecosystems, Source: src_catalog).Columns(\"id,ecosystem_number,ecosystem_name,ecosystem_type,image_id,flag_free\").Custom(custom_name){\r\n                LinkPage(Page: catalog_ecosystems_view, PageParams: \"v_id=#id#\"){\r\n                    Span(Class: h5 text-bold, Body: #ecosystem_name#)\r\n                }\r\n            }.Custom(custom_type){\r\n                Span(AppParam(App:#appication_id#, Name: catalog_ecosystems_type, Index: #ecosystem_type#))\r\n            }.Custom(custom_free){\r\n                Span(AppParam(App:#appication_id#, Name: catalog_ecosystems_freetype, Index: #flag_free#))\r\n            }.Custom(custom_ecosystem){\r\n                Span(Class: h5, Body: #ecosystem_number#)\r\n            }.Where(#v_where#).Order(\"ecosystem_number\")\r\n\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Table(Source: src_catalog, Columns:\"$id$=custom_ecosystem,$logo$=custom_logo,$name$=custom_name,$type$=custom_type,$freetype$=custom_free\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "catalog_ecosystems",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name: ecosystems, Source: src_num)\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(appication)\r\n    AppParam(App:#appication_id#, Name: catalog_ecosystems_type, Source: src_type)\r\n    AppParam(App:#appication_id#, Name: catalog_ecosystems_freetype, Source: src_freetype)\r\n    Data(section1, \"name,type,res,req,src\"){\r\n        Ecosystem_number,select_validate,ecosystem,*,src_num\r\n        Ecosystem_name,input,catalog_ecosystems_name,*,\r\n        Ecosystem_type,select,catalog_ecosystems_type,*,src_type\r\n    }\r\n    Data(section2, \"name,type,res,req,src\"){\r\n        Flag_free,radio,catalog_ecosystems_freetype,*,src_freetype\r\n    }\r\n    Data(section3, \"name,type,res,req,src\"){\r\n        Description,textarea,catalog_ecosystems_description,*,\r\n        Conditions,textarea,catalog_ecosystems_conditions,*,\r\n    }\r\n    Data(section4, \"name,type,res,req,src\"){\r\n        Vde_page,input,vde_page,,\r\n        Vde_form_address,input,vde_form_desc,,\r\n    }\r\n    Data(section5, \"name,type,res,req,src\"){\r\n        Web_page,input,web_page,,\r\n        Web_form_address,input,web_form_desc,,\r\n    }\r\n    Data(section6, \"name,type,res,req,src\"){\r\n        Email,input,catalog_ecosystems_contact_email,,\r\n        Phone,input,catalog_ecosystems_contact_phone,,\r\n    }\r\n    Data(sections, \"section_name\"){\r\n        section1\r\n        section2\r\n        section3\r\n        section4\r\n        section5\r\n        section6\r\n    }\r\n\r\n    SetTitle($catalog_ecosystems_form$)\r\n    Div(breadcrumb){\r\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $catalog_ecosystems_form$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\r\n            Form(panel panel-primary){\r\n                Div(panel-body){\r\n                    ForList(sections){\r\n                        Div(list-group-item){\r\n                            ForList(#section_name#){\r\n                                Div(row){\r\n                                    Div(col-md-5 mt-sm text-right){\r\n                                        Label(){\r\n                                            Span(Body: LangRes(#res#))\r\n                                            If(#req#==*){\r\n                                                Span(Class: text-danger, Body:*)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-7 mb-sm text-left){\r\n                                        If(#type#==select_validate){\r\n                                            Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id).Validate(required)\r\n                                            InputErr(Name: #name#, required: need)\r\n                                        }\r\n                                        If(#type#==select){\r\n                                            Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id)\r\n                                        }\r\n                                        If(#type#==image){\r\n                                            ImageInput(Name: #name#, Width: 300, Ratio: 2/1)\r\n                                        }\r\n                                        If(#type#==input){\r\n                                            Input(Name: #name#)\r\n                                        }\r\n                                        If(#type#==textarea){\r\n                                            Input(Name: #name#, Type:textarea)\r\n                                        }\r\n                                        If(#type#==radio){\r\n                                            RadioGroup(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: catalog_ecosystems)\r\n                    Button(Contract: catalog_ecosystems_Add, Class: btn btn-primary, Page: catalog_ecosystems, Body: $send$)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "catalog_ecosystems_add",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name: catalog_ecosystems, Source: src_catalog).Columns(\"ecosystem_name,ecosystem_number\").Where(\"id=#v_id#\").Vars(prefix)\r\n    \r\n    SetTitle($request_membership$)\r\n    Div(breadcrumb){\r\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        LinkPage(#prefix_ecosystem_name#, catalog_ecosystems_view,, \"v_id=#v_id#\")\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $request_membership$)\r\n    }\r\n    \r\n    Div(row){\r\n        Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading){LangRes(request_membership)}\r\n                Form(panel-body){\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(For: pub_key){\r\n                                    Span(Body: LangRes(pub_key))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 text-left){\r\n                                Input(Class: form-control, Type: text, Name: pub_key)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(For: comment){\r\n                                    Span(Body: LangRes(comment))\r\n                                }\r\n                            }\r\n                            Div(col-md-9 text-left){\r\n                                Input(Name: comment, Class: form-control, Type: textarea, Value: no)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: catalog_ecosystems_view, PageParams: \"v_id=#v_id#\")\r\n                        Button(Body: LangRes(send), Class: btn btn-primary, Contract: catalog_ecosystems_Request, Params: \"ecosystem_num=#prefix_ecosystem_number#\", Page: catalog_ecosystems_view, PageParams: \"v_id=#v_id#\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "catalog_ecosystems_request",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\r\n    DBFind(Name: catalog_ecosystems, Source: src_catalog).Columns(\"id,ecosystem_name,ecosystem_type,ecosystem_number,image_id,flag_free,ecosystem_info->email,ecosystem_info->phone,ecosystem_info->description,ecosystem_info->conditions,url_address->vde_form_address,url_address->web_page,url_address->vde_page,url_address->web_form_address\").Where(\"id=#v_id#\").Vars(prefix)\r\n    \r\n    SetTitle($catalog_ecosystems_number$: #prefix_ecosystem_name#)\r\n    Div(breadcrumb){\r\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: #prefix_ecosystem_name#)\r\n    }\r\n    \r\n    Div(row){\r\n        Div(col-md-10 col-md-offset-1){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: text-bold h3, Body: #prefix_ecosystem_name# (##prefix_ecosystem_number#))\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(#prefix_image_id# > 0){\r\n                                    DBFind(Name: binaries, Source: src_binaries).Columns(\"data\").Where(\"id=#prefix_image_id#\").Vars(img)\r\n                                    Image(Src: \"#img_data#\").Style(width: 300px;)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(type)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: AppParam(App:#app_id#, Name: catalog_ecosystems_type, Index: #prefix_ecosystem_type#))\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(catalog_ecosystems_description)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_description#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(catalog_ecosystems_freetype)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: AppParam(App:#app_id#, Name: catalog_ecosystems_freetype, Index: #prefix_flag_free#))\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(catalog_ecosystems_conditions)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_conditions#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(vde_form_desc))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_form_address#)\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(vde_page))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_page#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(web_form_desc))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_form_address#)\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(web_page))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_page#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(catalog_ecosystems_contact_email))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_email#)\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(catalog_ecosystems_contact_phone))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_phone#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                DBFind(Name: keys, Source: src_keys).Where(\"id = #key_id#\").Vars(key)\r\n                If(#key_amount# > 0){\r\n                    DBFind(Name: membership_requests, Source: src_membership).Ecosystem(\"#prefix_ecosystem_number#\").Where(\"member_id = #key_id#\").Vars(request)\r\n                    If(#request_id#>0){\r\n                        Div(row form-group){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(#request_status# == 0){\r\n                                    Em(Class: fa fa-question-circle fa-5x text-warning)\r\n                                    Div(text-center h4 text-bold text-warning, Body: LangRes(request_wating))\r\n                                }\r\n                                If(#request_status# == 1){\r\n                                    Em(Class: fa fa-check-circle fa-5x text-success)\r\n                                    Div(text-center h4 text-bold text-success, Body: LangRes(request_accepted))\r\n                                }\r\n                                If(#request_status# == -1){\r\n                                    Em(Class: fa fa-minus-circle fa-5x text-danger)\r\n                                    Div(text-center h4 text-bold text-danger, Body: LangRes(request_rejected))\r\n                                }\r\n                            }\r\n                        }\r\n                        \r\n                    }.Else{\r\n                        Div(row form-group){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                Em(Class: fa fa-exclamation-circle fa-5x text-primary)\r\n                                Div(text-center h4 text-bold text-primary, Body: LangRes(request_not_sent))\r\n                            }\r\n                        }\r\n                        Div(panel-footer text-right){\r\n                            Button(Body: LangRes(send), Class: btn btn-primary, Page: catalog_ecosystems_request, PageParams: \"v_id=#v_id#\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "catalog_ecosystems_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n\tDiv(panel panel-primary){\r\n        Div(list-group-item text-center){\r\n            P(Class: h3 m0 text-bold, Body: Congratulations! You created your own ecosystem.)\r\n        }\r\n        Div(list-group-item){\r\n            Span(Class: h3, Body: \"You as Founder hold a complete set of rights for controlling the ecosystem – creating and editing applications, modifying ecosystem parameters, etc. \")\r\n            Span(Class: h3, Body: \"To get started, you can download the finished applications from the\")\r\n            Span(Class: h3 text-primary, Body: \" https://github.com/GenesisKernel/apps \")\r\n            Span(Class: h3, Body: \"and install them using the Import service. \")\r\n            Span(Class: h3, Body: \"The Strong(basic.json) contains applications for managing roles, creating notifications and votings. \")\r\n            Span(Class: h3, Body: \"Or you can create your own apps using the tools in the Admin tab. \")\r\n            Span(Class: h3, Body: \"Documentation \")\r\n            Span(Class: h3 text-primary, Body: \"https://genesiskernel.readthedocs.io\")\r\n        }\r\n        Div(panel-footer text-right clearfix){\r\n            Div(pull-left){\r\n                Button(Body: Ecosystem parameters, Class: btn btn-default, Page: params_list)\r\n            }.Style(margin-right: 20px;)\r\n            Div(pull-left){\r\n                Button(Body: Dashboard, Class: btn btn-default, Page: admin_dashboard)          \r\n            }\r\n            Button(Body: Import, Class: btn btn-primary, Page: import_upload)\r\n        }\r\n    }\r\n}",
            "Name": "default_ecosystem_page",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Form(){\n    Div(form-group){\n        Label($name$)\n        Input(Placeholder: Name of Ecosystem, Name:Name)\n    }\n    Div(form-group){\n        Button(Body: LangRes(create), Class: btn pull-right btn-primary, Contract: @1NewEcosystem, Page: membership_ecosystems)\n        Button(Body: LangRes(back), Class: btn pull-right btn-default, Page: membership_ecosystems)\n    }\n}",
            "Name": "ecosystem_new",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle($membership$)\n\n    If(GetVar(Search)){\n        SetVar(Where,\"member_name='#Search#'\")\n    }.Else{\n        SetVar(Where,\"id!=0\").(Search,)\n    } \n    \n    DBFind(Name: members, Source: src_member).Columns(\"id,member_name,image_id\").Custom(custom_id){\n        SetVar(Name: style_text, Value: \"text-normal\")\n        SetVar(Name: style_link, Value: \"text-primary\")\n        Span(Class: h5, Body: #id#)\n    }.Custom(custom_member_id){\n        Button(Body: Address(#id#), Class: btn btn-link, Page: tokens_transfer, PageParams: \"v_id=#id#\").Popup(Header: $tokens_transfer$, Width: \"30\")\n    }.Custom(custom_username){\n        LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#id#\"){\n            If(#image_id#>0){\n                Image(Src: Binary().ById(#image_id#), Class: img-circle).Style(height: 30px;width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                Span(#member_name#)\n            }.Else{\n                Div(){\n                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                    Span(#member_name#)\n                }.Style(display:flex; align-items:center;)\n            }\n        }\n    }.Where(#Where#).Order(\"member_name\")\n    \n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-12){\n                    Div(input-group){\n                        Div(input-group-addon){\n                            LangRes(name)\n                        }\n                        Input(Name: Search, Value: #Search#)\n                        Div(input-group-btn){\n                            Button(Class: btn btn-default fa fa-search, Page: members_list, PageParams: \"Search=Val(Search)\")\n                        }\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12){\n                    Table(Source: src_member, Columns: \"$name$=custom_username,$id$=custom_id,$wallet_address$=custom_member_id\")\n                }\n            }\n            If(GetVar(Search)){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: members_list)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "members_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle(Membership Request)\r\n\t\r\n\tDBFind(Name: notifications, Source: src_notific).Columns(\"page_params->request_id,sender->image_id,sender->member_id,sender->member_name\").Where(\"id = #notific_id#\").Vars(notific)\r\n    \r\n    If(#prefix_image_id#>0){\r\n        DBFind(Name: binaries, Source: src_binaries).Columns(\"id,data\").Where(\"id=#notific_sender_image_id#\").Vars(img)\r\n    }\r\n    \r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: Membership Request)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n\t\t\t\t\t\t\t\tIf(#img_id#>0){\r\n\t\t\t\t\t\t\t\t\tImage(Src: \"#img_data#\", Class: img-circle).Style(width: 80px; border: 1px solid #5A5D63;)\r\n\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\tSpan(Class: fa icon-user fa-5x)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tDiv(m0 h3 text-bold){#notific_sender_member_name#}\r\n\t\t\t\t\t\t\t\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(address))\r\n                        Span(Class: h5 text-bold, Body: Address(#notific_sender_member_id#))\r\n                    }\r\n\t\t\t\t\tDiv(list-group-item text-center){\r\n                        Button(Class: btn btn-success, Body: Accept, Contract: \"membership_accept\", Page: default_page, Params: \"notific_id=#notific_id#\")\r\n                        Button(Class: btn btn-danger, Body: Reject, Contract: \"membership_decline\", Page: default_page, Params: \"notific_id=#notific_id#\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "membership_admin_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n\tSetTitle(Ecosystems)\r\n    Div(breadcrumb){\r\n        Div(row){\r\n            Div(col-md-10){\r\n                Div(Class: text-muted, Body: \"Ecosystems are relatively closed programming environments, which include applications and members.\")\r\n                Div(Class: text-muted, Body: \"Create your own ecosystem for your blockchain apps.\")\r\n            }\r\n            Div(col-md-2){\r\n                Button(Body: $create$, Class: pull-right, Page: ecosystem_new).Popup(Header: $create$, Width: \"30\")\r\n            }\r\n        }\r\n    }\r\n\r\n    If(GetVar(isSearch) == 1){\r\n        SetVar(Name: v_Where, Value: \"name='#v_Search#' and id != 1\")\r\n    }.Else{\r\n        SetVar(Name: v_Where, Value: \"id != 1\")\r\n        SetVar(Name: v_Search, Value: \"\")\r\n    }\r\n\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Div(input-group){\r\n                        Div(input-group-addon){\r\n                            LangRes(name)\r\n                        }\r\n                        Input(Name: Search, Value: #v_Search#)\r\n                        Div(input-group-btn){\r\n                            Button(Class: btn btn-default fa fa-search, Page: membership_ecosystems, PageParams: \"isSearch=1,v_Search=Val(Search)\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            DBFind(ecosystems, src_ecosystems).Ecosystem(1).Where(\"#v_Where#\").Custom(custom_id){\r\n                Span(#id#)\r\n            }.Custom(custom_name){\r\n                Span(#name#)\r\n            }.Custom(custom_actions){\r\n                SetVar(req_id, \"\")\r\n                SetVar(k_id, \"\")\r\n                DBFind(notifications, src_notifications).Where(\"sender->member_id = '#key_id#' and page_params->ecosystem_id = '#id#' and closed = 0\").Count(notific_count)\r\n                DBFind(keys, src_keys).Where(\"id = #key_id#\").Ecosystem(#id#).Limit(1).Vars(\"k\")\r\n\r\n                If(And(#notific_count# == 0, GetVar(k_id) == \"\")){\r\n                    Button(Class: btn btn-link pull-right, Body: Send Request, Contract: \"membership_send_request\", Page: membership_ecosystems, Params: \"ecosystem_num=#id#\")\r\n                }\r\n            }\r\n\t\t\t\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Table(Source: src_ecosystems, Columns: \"ID=custom_id,$name$=custom_name,=custom_actions\")\r\n                }\r\n            }\r\n\t\t\t\r\n            If(GetVar(isSearch) == 1){\r\n                Div(row){\r\n                    Div(col-md-12 mt-lg){\r\n                        Div(text-center){\r\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: membership_ecosystems, PageParams: \"isSearch=0\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "membership_ecosystems",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle(Membership Request)\r\n\t\r\n\tDBFind(Name: notifications, Source: src_notific).Columns(\"page_params->ecosystem_id,page_params->status,recipient->image_id,recipient->member_name\").Where(\"id = #notific_id#\").Vars(notific)\r\n    \r\n    If(#prefix_image_id#>0){\r\n        DBFind(Name: binaries, Source: src_binaries).Columns(\"id,data\").Where(\"id=#notific_recipient_image_id#\").Vars(img)\r\n    }\r\n    \r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: Membership Request)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n\t\t\t\t\t\t\t\tIf(#img_id#>0){\r\n\t\t\t\t\t\t\t\t\tImage(Src: \"#img_data#\", Class: img-circle).Style(width: 80px; border: 1px solid #5A5D63;)\r\n\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\tSpan(Class: fa icon-user fa-5x)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tDiv(m0 h3 text-bold){#notific_recipient_member_name#}\r\n\t\t\t\t\t\t\t\r\n                            }\r\n                        }\r\n                    }\r\n                    If(#notific_page_params_status# == 1){\r\n                        Div(list-group-item text-center){\r\n                            Span(Class: text-success h3){\r\n                                Request is accepted!\r\n                            }\r\n                        }\r\n                        Div(list-group-item text-center){\r\n                            Button(Class: btn btn-primary, Body: Add ecosystem to list, Contract: \"notifications_Close\", Params: \"notific_id=#notific_id#\", Page: \"@invite\", PageParams: \"ecosystem=#notific_page_params_ecosystem_id#,page=default_page\")\r\n                        }\r\n                    }.Else{\r\n                       Div(list-group-item text-center){\r\n                            Span(Class: text-danger h3){\r\n                                Request is rejected!\r\n                            }\r\n                        }\r\n                        Div(list-group-item text-center){\r\n                            Button(Class: btn btn-primary, Body: OK, Contract: \"notifications_Close\", Params: \"notific_id=#notific_id#\", Page: default_page)\r\n                        } \r\n                    }\r\n\t\t\t\t\t\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "membership_user_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle($role_notifics$)\r\n    AddToolButton(Title: $send$, Page: notifications_roles_send, Icon: icon-plus)\r\n\r\n    If(GetVar(Search)){\r\n        SetVar(Where,\"notification->type='2' and recipient->role_name='#Search#' and recipient->role_id='#role_id#'\")\r\n    }.Else{\r\n        SetVar(Where,\"notification->type='2' and recipient->role_id='#role_id#'\").(Search,)\r\n    }\r\n\r\n    DBFind(Name: notifications, Source: src_notifications).Limit(20).Columns(\"id,recipient->role_id,recipient->role_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,page_name,page_params,date_created,date_closed,date_start_processing,processing_info->member_name,closed\").Custom(_id){\r\n        If(#closed# == 0){\r\n            SetVar(style_text,\"text-normal\").(style_link,\"text-primary\")\r\n        }.Else{\r\n            SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\r\n        }\r\n        Span(Class: #style_text#, Body: #id#)\r\n    }.Custom(_recipient){\r\n        LinkPage(Class: #style_link# t5 text-bold, Page: roles_view, PageParams: \"v_role_id=#recipient.role_id#\"){\r\n            If(#recipient.image_id#>0){\r\n                Image(Src: Binary().ById(#recipient.image_id#) \"#img_data#\", Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n                #recipient.role_name#\r\n            }.Else{\r\n                Div(){\r\n                    Span(Em(Class: fa icon-settings fa-2x)).Style(margin-right:10px;)\r\n                    Span(#recipient.role_name#)\r\n                }.Style(display:flex; align-items:center;)\r\n            }\r\n        }\r\n    }.Custom(_sender){\r\n        If(#sender.type#==1){\r\n            LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#sender.member_id#\"){#sender.member_name#}\r\n        }\r\n        If(#sender.type#==2){\r\n            LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#sender.role_id#\"){#sender.role_name#}\r\n        }\r\n    }.Custom(_icon){\r\n        Span(Class: fa #notification.icon# fa-2x #style_text#)\r\n    }.Custom(_page){\r\n        LinkPage(Class: #style_link# t5 text-bold, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n            #page_name#\r\n        }\r\n    }.Custom(_date){\r\n        Div(#style_text# t6){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\r\n        Div(#style_text# t6){DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\")}\r\n    }.Custom(_processing){\r\n        Div(Class: #style_text# t6){\r\n            If(#date_start_processing# == NULL){\r\n                $not_started$\r\n            }.Else{\r\n                Span(LangRes(started), mr-sm) #processing_info.member_name# \r\n                Span(LangRes(at), mr-sm)\r\n                DateTime(DateTime: #date_start_processing#, Format: \"DD.MM.YYYY HH:MI\")\r\n            }\r\n        }\r\n    }.Custom(_status){\r\n        If(#closed# == 0){\r\n            Span(Class: #style_text#){\r\n                If(#date_start_processing# == NULL){\r\n                    LangRes(active)\r\n                }.Else{\r\n                    LangRes(processing)\r\n                }\r\n            }\r\n        }.Else{\r\n            Span(Class: #style_text#, Body: LangRes(closed))\r\n        }\r\n    }.Custom(_actions){\r\n        Div(text-right){\r\n            If(#closed# == 0){\r\n                If(#date_start_processing# == NULL){\r\n                    Button(Class: btn btn-default fa fa-play, Contract: notifications_Process, Params: \"notific_id=#id#\", Page: notifications_roles).Alert(Text: $want_start_processing_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                }.Else{\r\n                    Button(Class: btn btn-default fa fa-trash, Contract: notifications_Close, Params: \"notific_id=#id#\", Page: notifications_roles).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                }\r\n            }\r\n        }\r\n    }.Where(#Where#).Order(\"closed ASC, id DESC\")\r\n\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Div(input-group){\r\n                        Div(input-group-addon){\r\n                            LangRes(recipient)\r\n                        }\r\n                        Input(Name: Search, Value: #Search#)\r\n                        Div(input-group-btn){\r\n                            Button(Class: btn btn-default fa fa-search, Page: notifications_roles, PageParams: \"Search=Val(Search)\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Table(Source: src_notifications, Columns: \"$id$=_id,$icon$=_icon,$recipient$=_recipient,$page_name$=_page,$sender$=_sender,$processing$=_processing,$sent$/$сlosed$=_date,$status$=_status,=_actions\")\r\n                }\r\n            }\r\n            If(GetVar(Search)){\r\n                Div(row){\r\n                    Div(col-md-12 mt-lg){\r\n                        Div(text-center){\r\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_roles)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_roles",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\r\n\r\n    SetTitle($role_notifics$)\r\n    Div(breadcrumb){\r\n        LinkPage($role_notifics$, notifications_roles)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $send$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading){LangRes(role_notifics)}\r\n                Div(panel-body){\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(recipient))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                DBFind(Name: roles, Source: source_roles).Columns(\"id,role_name\").Where(\"deleted=0\")\r\n                                Select(Name: rid, Source: source_roles, NameColumn: role_name, ValueColumn: id)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(closure_type))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                AppParam(App:#app_id#, Name: notification_closure, Source: src_closure_type)\r\n                                Select(Name: closure_type, Source: src_closure_type, NameColumn: name, ValueColumn: id)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(sender))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                AppParam(App:#app_id#, Name: notification_sender, Source: src_sender)\r\n                                Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(icon))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                AppParam(App:#app_id#, Name: notification_icon, Source: src_icon)\r\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(header))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\r\n                                InputErr(Name: text_header, minLength: $validate_notification$, maxLength: $validate_role_name$)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(body_text))\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                Input(Name: text_body, Value: \"Body text\")\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(page_name))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                Input(Name: page_name, Value: \"notifications_testpage\").Validate(minLength:3, maxLength:255)\r\n                                InputErr(Name: page_name, minLength: $validate_notification$, maxLength: $validate_role_name$)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(params))\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                Input(Name: params_map, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: notifications_roles)\r\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_roles, Contract: notifications_Send)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_roles_send",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle($single_notifics$)\r\n    AddToolButton(Title: $send$, Page: notifications_single_send, Icon: icon-plus)\r\n\r\n    If(GetVar(Search)){\r\n        SetVar(Where,\"notification->type='1' and recipient->member_name='#Search#' and recipient->member_id='#key_id#'\")\r\n    }.Else{\r\n        SetVar(Where,\"notification->type='1' and recipient->member_id='#key_id#'\").(Search,)\r\n    }\r\n    \r\n    DBFind(Name: notifications, Source: src_notifications).Limit(20).Columns(\"id,recipient->member_id,recipient->member_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,page_name,page_params,date_created,date_closed,closed\").Custom(custom_id){\r\n        If(#closed# == 0){\r\n            SetVar(Name: style_text, Value: \"text-normal\")\r\n            SetVar(Name: style_link, Value: \"text-primary\")\r\n        }.Else{\r\n            SetVar(Name: style_text, Value: \"text-muted\")\r\n            SetVar(Name: style_link, Value: \"text-muted\")\r\n        }\r\n        Span(Class: #style_text#, Body: #id#)\r\n    }.Custom(custom_recipient){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#recipient.member_id#\"){\r\n            If(#recipient.image_id#>0){\r\n                Image(Src: Binary().ById(#recipient.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n                Span(#recipient.member_name#)\r\n            }.Else{\r\n                Div(){\r\n                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                    Span(#recipient.member_name#)\r\n                }.Style(display:flex; align-items:center;)\r\n            }\r\n        }\r\n    }.Custom(custom_sender){\r\n        If(#sender.type#==1){\r\n            LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#sender.member_id#\"){\r\n                Span(Body: #sender.member_name#)\r\n            }\r\n        }\r\n        If(#sender.type#==2){\r\n            LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#sender.role_id#\"){\r\n                Span(Body: #sender.role_name#)\r\n            }\r\n        }\r\n    }.Custom(custom_icon){\r\n        Em(Class: fa #notification.icon# fa-2x #style_text#)\r\n    }.Custom(custom_page){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n            Span(Body: #page_name#)\r\n        }\r\n    }.Custom(custom_date){\r\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\"))\r\n    }.Custom(custom_status){\r\n        If(#closed# == 0){\r\n            Span(Class: #style_text#, Body: LangRes(active))\r\n        }.Else{\r\n            Span(Class: #style_text#, Body: LangRes(сlosed))\r\n        }\r\n    }.Custom(actions){\r\n        Div(pull-right){\r\n            If(#closed# == 0){\r\n                Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: notifications_Close, Params: \"notific_id=#id#\", Page: notifications_single).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n            }\r\n        }\r\n    }.Where(#Where#).Order(\"closed ASC, id DESC\")\r\n\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Div(input-group){\r\n                        Div(input-group-addon){\r\n                            LangRes(recipient)\r\n                        }\r\n                        Input(Name: Search, Value: #Search#)\r\n                        Div(input-group-btn){\r\n                            Button(Class: btn btn-default fa fa-search, Page: notifications_single, PageParams: \"Search=Val(Search)\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Table(Source: src_notifications, Columns: \"$id$=custom_id,$icon$=custom_icon,$recipient$=custom_recipient,$page_name$=custom_page,$sender$=custom_sender,$sent$/$сlosed$=custom_date,$status$=custom_status,=actions\")\r\n                }\r\n            }\r\n            If(GetVar(Search)){\r\n                Div(row){\r\n                    Div(col-md-12 mt-lg){\r\n                        Div(text-center){\r\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_single)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_single",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\r\n\r\n    SetTitle($single_notifics$)\r\n    Div(breadcrumb){\r\n        LinkPage($single_notifics$, notifications_single)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $send$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-6 col-md-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading){LangRes(single_notifics)}\r\n                Div(panel-body){\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(recipient)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                DBFind(Name: members, Source: source_members).Columns(\"id,member_name\")\r\n                                Select(Name: member_id, Source: source_members, NameColumn: member_name, ValueColumn: id)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(sender)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                AppParam(App:#app_id#, Name: notification_sender, Source: src_sender)\r\n                                Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(icon)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                AppParam(App:#app_id#, Name: notification_icon, Source: src_icon)\r\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(header)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\r\n                                InputErr(Name: text_header, minLength: $validate_notification$, maxLength: $validate_role_name$)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(body_text))\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                Input(Name: text_body, Value: \"Body text\")\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(page_name)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                Input(Name: page_name, Value: \"notifications_testpage\").Validate(minLength:3, maxLength:255)\r\n                                InputErr(Name: page_name, minLength: $validate_notification$, maxLength: $validate_role_name$)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(params))\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                Input(Name: params_map, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: notifications_single)\r\n                    Button(Body: LangRes(send), Class: btn btn-primary, Page: notifications_single, Contract: notifications_Send)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_single_send",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\r\n    SetTitle($test_page$)\r\n\r\n    If(#notific_id# > 0){\r\n        DBFind(Name: notifications, Source: src_notifications).Columns(\"id,notification->type,notification->header,page_params->param_int,page_params->param_str,date_start_processing,closed\").Where(\"id=#notific_id#\").Vars(prefix)\r\n        SetVar(Name: notific_type, Value: #prefix_notification_type#)\r\n        SetVar(Name: notific_header, Value: #prefix_notification_header#)\r\n        SetVar(Name: notific_val_int, Value: #prefix_page_params_param_int#)\r\n        SetVar(Name: notific_val_str, Value: #prefix_page_params_param_str#)\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n        SetVar(Name: notific_id, Value: \"0\")\r\n        SetVar(Name: notific_type, Value: \"0\")\r\n        SetVar(Name: notific_header, Value: \"null\")\r\n        SetVar(Name: notific_val_int, Value: \"null\")\r\n        SetVar(Name: notific_val_str, Value: \"null\")\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-6 col-md-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-body){\r\n                    Div(list-group-item text-center){\r\n                        Span(Class: h3, Body: #notific_header#)\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                Span(Class: h4, Body: LangRes(id))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                Span(Class: h4, Body: #notific_id#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                Span(Class: h4, Body: LangRes(type))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                If(#notific_type# > 0){\r\n                                    Span(Class: h4, Body: AppParam(App:#app_id#, Name: notification_type, Index: #notific_type#))\r\n                                }.Else{\r\n                                    Span(Class: h4, Body: #notific_type#)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                Span(Class: h4, Body: LangRes(value_number))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                Span(Class: h4, Body: #notific_val_int#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                Span(Class: h4, Body: LangRes(value_string))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                Span(Class: h4, Body: #notific_val_str#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                If(#notific_type# == 1){\r\n                    If(#prefix_closed# == 0){\r\n                        Div(panel-footer text-right){\r\n                            Button(Body: LangRes(close), Class: btn btn-primary, Contract: notifications_Close, Params: \"notific_id=#notific_id#\", Page: notifications_single).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                        }\r\n                    }\r\n                }\r\n                If(#notific_type# == 2){\r\n                    If(#prefix_closed# == 0){\r\n                        Div(panel-footer text-right){\r\n                            If(#prefix_date_start_processing# == \"\"){\r\n                                Button(Body: LangRes(begin), Class: btn btn-primary, Contract: notifications_Process, Params: \"notific_id=#notific_id#\", Page: notifications_roles).Alert(Text: $want_start_processing_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                            }.Else{\r\n                                Button(Body: LangRes(close), Class: btn btn-primary, Contract: notifications_Close, Params: \"notific_id=#notific_id#\", Page: notifications_roles).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_testpage",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle($editing_profile$)\n    Div(breadcrumb){\n        LinkPage($user_info$, profile_view)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $editing_profile$)\n    }\n    \n    If(Or(#v_member_id#>0,#v_member_id#<0)){\n        DBFind(Name: members, Source: src_member).Columns(\"id,member_name,image_id,member_info->information\").Where(\"id=#v_member_id#\").Vars(prefix)\n    }.Else{\n        DBFind(Name: members, Source: src_member).Columns(\"id,member_name,image_id,member_info->information\").Where(\"id=#key_id#\").Vars(prefix)\n    }\n    \n    Div(row){\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading, Body: LangRes(editing_profile))\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(For: member_name){\n                                    Span(Body: LangRes(member_name))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                If(Or(#prefix_id#>0,#prefix_id#<0)){\n                                    Input(Name: member_name, Value: #prefix_member_name#, Disabled: true)\n                                }.Else{\n                                    Input(Name: member_name).Validate(minLength:5, maxLength:20)\n                                    InputErr(Name: member_name, minLength: $validate_member_name$, maxLength: $validate_member_name$)\n                                }\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(For: member_image){\n                                    Span(Body: LangRes(member_image))\n                                    If(Or(#prefix_id#>0,#prefix_id#<0)){\n                                    }.Else{\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: member_image, Type: file)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-lg text-right){\n                                Label(For: information){\n                                    Span(Body: LangRes(information))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                If(GetVar(prefix_member_info_information)){\n                                    Input(Name: information, Type: textarea, Value: #prefix_member_info_information#)\n                                }.Else{\n                                    Input(Name: information, Type: textarea)\n                                }\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: LangRes(save), Class: btn btn-primary, Contract: Profile_Edit, Page: members_list,).Alert(Text: $want_save_changes$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }\n            }\n        }\n    }\n}",
            "Name": "profile_edit",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(Or(#v_member_id#>0,#v_member_id#<0)){\n    }.Else{\n        SetVar(Name: v_member_id, Value: #key_id#)\n    }\n    DBFind(Name: members, Source: src_member).Columns(\"id,image_id,member_name,member_info->information\").Where(\"id=#v_member_id#\").Vars(prefix)\n    DBFind(Name: keys, Source: src_keys).Where(\"id=#v_member_id#\").Vars(tokens)\n    \n    If(Or(#prefix_id#>0,#prefix_id#<0)){\n    }.Else{\n        SetVar(Name: prefix_member_name, Value: \"\")\n    }\n    \n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(list-group-item){\n                    P(Class: text-center text-bold h4 m0, Body: LangRes(user_info))\n                    Div(panel-body){\n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-12 mt-sm text-center){\n                                    If(Or(#prefix_id#>0,#prefix_id#<0)){\n                                        If(#prefix_id# == #key_id#){\n                                            Button(Class: btn btn-link, Page: profile_edit, PageParams: \"v_member_id=#key_id#\"){\n                                                If(#prefix_image_id#>0){\n                                                    Image(Src: Binary().ById(#prefix_image_id#), Class: img-circle).Style(width: 80px; border: 1px solid #5A5D63;)\n                                                }.Else{\n                                                    Span(Class: fa icon-user fa-5x text-primary)\n                                                }\n                                                Div(m0 h4 text-bold){#prefix_member_name#}\n                                            }\n                                        }.Else{\n                                            If(#prefix_image_id#>0){\n                                                Image(Src: Binary().ById(#prefix_image_id#), Class: img-circle).Style(width: 80px; border: 1px solid #5A5D63;)\n                                            }.Else{\n                                                Span(Class: fa icon-user fa-5x)\n                                            }\n                                            Div(m0 h4 text-bold){#prefix_member_name#}\n                                        }\n                                        Div(Class: h5 text-muted m0, Body: #prefix_member_info_information#)\n                                    }.Else{\n                                        Button(Class: btn btn-link, Page: profile_edit){\n                                            Span(Class: h4 text-bold, Body: LangRes(editing_profile))\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        Div(list-group-item text-center){\n                            Div(text-muted m0 h5, Body: LangRes(roles))\n                            DBFind(Name: roles_participants, Source: src_check).Columns(\"id\").Where(\"member->member_id='#v_member_id#' and deleted=0\").Vars(check)\n                            If(#check_id#>0){\n                                DBFind(Name: roles_participants, Source: src_roles).Columns(\"role->id,role->name\").Where(\"member->member_id='#v_member_id#' and deleted=0\").Order(\"id\")\n                                ForList(src_roles){\n                                    Span(){\n                                        LinkPage(Page: roles_view, PageParams: \"v_role_id=#role.id#\"){\n                                            Span(Class: h5, Body: \"#role.name#\")\n                                        }\n                                    }.Style(margin-right: 6px; margin-left: 6px;)\n                                }\n                            }.Else{\n                                Span(LangRes(no))\n                            }\n                        }\n                    }\n                }\n                If(#prefix_id# == #key_id#){\n                    Div(list-group-item){\n                        P(Class: text-center text-bold h4 m0, Body: LangRes(tokens_transfer))\n                        Div(panel-body){\n                            Div(form-group){\n                                Div(row){\n                                    Div(col-md-12 mc-sm text-center){\n                                        Div(text-muted m0 h5, Body: LangRes(tokens))\n                                        Span(Class: h5 text-bold, Body: Money(#tokens_amount#) APL)\n                                    }\n                                }\n                                Div(row){\n                                    Div(col-md-12 mt-lg text-center){\n                                        Div(text-muted m0 h5, Body: LangRes(wallet_address))\n                                        Span(Class: h5, Body: Address(#prefix_id#))\n                                    }\n                                }\n                            }\n                            Div(list-group-item text-center){\n                                Div(row){\n                                    Div(col-md-3 mt-sm text-right){\n                                        Span(Class: h6 text-bold, Body: LangRes(recipient))\n                                    }\n                                    Div(col-md-9 mb-sm text-left){\n                                        Input(Name: Recipient_Account, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\")\n                                    }\n                                }\n                                Div(row){\n                                    Div(col-md-3 mt-sm text-right){\n                                        Span(Class: h6 text-bold, Body: LangRes(amount))\n                                    }\n                                    Div(col-md-9 mc-sm text-left){\n                                        Input(Name: Amount, Type: Number)\n                                    }\n                                }\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-12 mc-sm){\n                                Button(Body: LangRes(send), Class: btn btn-default pull-right, Page: profile_view, Contract: SendTokens).Alert(Text: $want_send_tokens$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "profile_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(applications,src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\n    If(#v_role_id#>0){\r\n        DBFind(roles,src_roles).Columns(\"id,role_name,role_type,roles_access->rids,creator->member_id\").Where(\"id=#v_role_id#\").Vars(prefix)\r\n\r\n        If(#prefix_creator_member_id#==#key_id#){\r\n            SetVar(manager_id,1)\r\n        }.ElseIf(#prefix_roles_access_rids#!=\"\"){\r\n            DBFind(roles).Columns(\"id\").Where(\"id in (#prefix_roles_access_rids#) and id=#role_id#\").Vars(manager)\r\n        }.Else{\r\n            SetVar(manager_id,0)\r\n        }\r\n        SetTitle($assign$)\r\n        Div(breadcrumb){\r\n            LinkPage($roles$, roles_list)\r\n            Span(/,mh-sm)\r\n            LinkPage(#prefix_role_name#, roles_view,, \"v_role_id=#v_role_id#\")\r\n            Span(/,mh-sm).($assign$,text-muted)\r\n        }\r\n\r\n        Div(row){\r\n            Div(col-md-6 col-md-offset-3){\r\n                Form(panel panel-primary){\r\n                    Div(panel-heading){LangRes(assign)}\r\n                    Div(panel-body){\r\n                        Div(list-group-item){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(role))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Type: hidden, Name: rid, Value: #prefix_id#)\r\n                                    SetVar(Name: var_prefix_role_name, Value: LangRes(#prefix_role_name#))\r\n                                    Input(Name: input_prefix_role_name, Value: #var_prefix_role_name#, Disabled: true)\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        LangRes(type) Span(*,text-danger)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    SetVar(Name: var_prefix_role_type, Value: AppParam(App:#application_id#, Name: roles_types, Index: #prefix_role_type#))\r\n                                    Input(Name: input_prefix_role_type, Value: #var_prefix_role_type#, Disabled: true)\r\n                                    If(#manager_id#==0){\r\n                                        P(Class: m0 text-danger h6, Body: LangRes(appointment_impossible))\r\n                                    }\r\n                                }\r\n                            }\r\n                            If(#manager_id#>0){\r\n                                Div(row){\r\n                                    Div(col-md-3 mt-sm text-right){\r\n                                        Label(){\r\n                                            Span(Body: LangRes(member)).(Class: text-danger, Body:*)\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-9 text-left){\r\n                                        DBFind(Name: members, Source: source_members).Columns(\"id,member_name\").Custom(custom_username){\r\n                                            #member_name# (Address(#id#) )\r\n                                        }\r\n                                        Select(Name: member_id, Source: source_members, NameColumn: custom_username, ValueColumn: id)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: roles_view, PageParams: \"v_role_id=#v_role_id#\")\r\n                        If(#manager_id#>0){\r\n                            Button(Body: LangRes(assign), Class: btn btn-primary, Page: roles_view, PageParams: \"v_role_id=#v_role_id#\", Contract: Roles_Assign, Params: \"member_id=Val(member_id)\").Alert(Text: $want_assign_member_to_role$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Name": "roles_assign",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\nDBFind(roles, src_roles).Columns(\"role_name,id\").Where(\"deleted=0\").Order(id)\r\n\r\nIf(GetVar(role_name)){}.Else{SetVar(role_name,)}\r\nIf(GetVar(role_type)){}.Else{SetVar(role_type,1)}\r\n\r\nIf(GetVar(rid)){\r\n    DBFind(roles).Where(\"id=#rid#\").Columns(\"roles_access->rids,id,role_type,role_name\").Vars(rid)\r\n    SetVar(title,$edit_role$).(role_type,\"AppParam(App:#application_id#, Name: roles_types, Index: #rid_role_type#)\")\r\n\r\n    If(#rid_roles_access_rids#!=\"\"){\r\n        DBFind(roles,src_roles_access).Columns(\"id,role_name\").Where(\"id in (#rid_roles_access_rids#)\").Order(role_name)\r\n    }\r\n    DBFind(roles,src_roles).Columns(\"id,role_name\").Where(\"deleted=0\").Order(id)\r\n    Data(form, \"Name,Res,Type,Src,Val\"){\r\n        role_name,name,text,,#role_name#\r\n        roles_types,type,app_param,,#rid_role_type#\r\n        roles_managers,roles_managers,rids,src_roles,\r\n    }\r\n}.Else{\r\n    AppParam(App:#application_id#, Name: roles_types, Source: app_roles_types)\r\n    SetVar(rid,0).(title,$new_role$)\r\n    Data(form, \"Name,Res,Type,Req,Src,Val\"){\r\n        role_name,name,input,*,\"\",#role_name#\r\n        role_type,type,select,*,app_roles_types,#role_type#\r\n    }\r\n}\r\nSetTitle(#title#)\r\nIf(And(#role_name#==\"\",#rid_id#>0)){\r\n    SetVar(role_name,#rid_role_name#).(role_type,#rid_role_type#)\r\n}\r\n\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage($roles$, roles_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: #title#)\r\n    }\r\n    Div(container){\r\n        Div(row){\r\n            Div(col-md-8 col-md-offset-2){\r\n                Form(panel panel-primary){\r\n                    Div(panel-heading){#title#}\r\n                    Div(panel-body){\r\n                        ForList(form){\r\n                            Div(row form-group){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(For:#Name#){\r\n                                        LangRes(#Res#)\r\n                                        If(#Req#==\"*\"){\r\n                                            Span(*,text-danger)\r\n                                        }\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 text-left){\r\n                                    If(#Type#==input){\r\n                                        Input(Name: #Name#, Value:#Val#).Validate(minLength:3, maxLength:30)\r\n                                        InputErr(Name: #Name#, minLength: $validate_role_name$, maxLength: $validate_role_name$)\r\n                                    }.ElseIf(#Type#==text){\r\n                                        Div(text-muted mt-sm){#Val#}\r\n                                    }.ElseIf(#Type#==app_param){\r\n                                        Div(text-muted mt-sm){\r\n                                            AppParam(App:#application_id#, Name: #Name#, Index: #Val#)\r\n                                        }\r\n                                    }.ElseIf(#Type#==select){\r\n                                        Select(Name: #Name#, Source: #Src#, NameColumn: name, ValueColumn: id, Value:#Val#)\r\n                                    }.ElseIf(#Type#==rids){\r\n                                        Div(input-group mb-sm){\r\n                                            Select(Name:#Name#, Source:#Src#, NameColumn:role_name, ValueColumn: id)\r\n                                            Div(input-group-btn){\r\n                                                Button(Class: btn btn-primary fa fa-plus, Page: roles_create, PageParams:\"role_name=Val(role_name),role_type=Val(role_type),rid=#rid#\", Contract:Roles_AccessManager, Params:\"Rid=#rid#,ManagerRid=Val(#Name#),Action=add\")\r\n                                            }\r\n                                        }\r\n                                        ForList(src_roles_access){\r\n                                            If(#id#==#role_id#){\r\n                                                Button(Class: btn btn-info mr-sm mb-sm, Page: roles_create, PageParams:\"role_name=Val(role_name),role_type=Val(role_type),rid=#rid#\", Contract:Roles_AccessManager, Params:\"Rid=#rid#,ManagerRid=#id#,Action=remove\", Body: Span(Class: fa fa-remove) #role_name#).Alert(Text: $want_delete_your_role_from_manager$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                                            }.Else{\r\n                                                Button(Class: btn btn-default mr-sm mb-sm, Page: roles_create, PageParams:\"role_name=Val(role_name),role_type=Val(role_type),rid=#rid#\", Contract:Roles_AccessManager, Params:\"Rid=#rid#,ManagerRid=#id#,Action=remove\"){\r\n                                                    Span(Class: fa fa-remove)\r\n                                                    #role_name#\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right clearfix){\r\n                        Div(pull-left){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: roles_list)\r\n                        }\r\n                        If(#rid_id#>0){}.Else{\r\n                            Button(Body: LangRes(create), Class: btn btn-primary, Page: roles_list, Contract: Roles_Create)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "roles_create",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\r\n    SetTitle($roles$)\r\n    AddToolButton(Title: $create$, Page: roles_create, Icon: icon-plus)\r\n\r\n    If(GetVar(search)){\r\n        SetVar(where,\"role_name='#search#'\")\r\n    }.Else{\r\n        SetVar(where,\"id>0\").(search,)\r\n    }\r\n\r\n    DBFind(Name: roles, Source: src_roles).Custom(_id){\r\n        JsonToSource(rids,#roles_access#)\r\n        If(#deleted# == 0){\r\n            SetVar(style_text,).(style_link,\"text-primary\")\r\n        }.Else{\r\n            SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\r\n        }\r\n        Span(Class: #style_text#, Body: #id#)\r\n    }.Custom(_creator){\r\n        If(#role_type#==3){\r\n        }.ElseIf(And(#creator.member_name#!=NULL,#creator.member_name#!=\"\")){\r\n            LinkPage(Class: #style_link# text-bold, Page: profile_view, PageParams: \"v_member_id=#creator.member_id#\"){\r\n                #creator.member_name#\r\n            }\r\n        }\r\n    }.Custom(_name){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#id#\"){\r\n            If(#image_id#>0){\r\n                Image(Src: Binary().ById(#image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n                #role_name#\r\n            }.Else{\r\n                Div(){\r\n                    Span(Class: fa icon-settings fa-2x mr-sm).(#role_name#)\r\n                }.Style(display:flex; align-items:center;)\r\n            }\r\n        }\r\n    }.Custom(_date){\r\n        Div(#style_text# small){\r\n            Div(text-nowrap){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\r\n            Div(text-nowrap){DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\")}\r\n        }\r\n    }.Custom(_type){\r\n        Span(Class: #style_text#, Body: AppParam(App:#app_id#, Name: roles_types, Index: #role_type#))\r\n    }.Custom(_status){\r\n        Span(Class:#style_text#){\r\n            If(#deleted# == 0){\r\n                LangRes(active)\r\n            }.Else{\r\n                LangRes(deleted)\r\n            }\r\n        }\r\n    }.Custom(_access){\r\n        If(#creator.member_id#==#key_id#){\r\n            SetVar(access,done)\r\n        }.Else{\r\n            SetVar(access,)\r\n        }\r\n        If(#roles_access.rids#!=\"\"){\r\n            DBFind(roles, src_roles_list).Where(\"id in (#roles_access.rids#)\").Columns(\"id,role_name\").Count(access_count).Order(role_name)\r\n            Div(#style_text# breaker){\r\n                ForList(src_roles_list){\r\n                    If(And(#role_id#==#id#)){\r\n                        SetVar(access,done)\r\n                    }\r\n\r\n                    If(#access_count#!=#src_roles_list_index#){\r\n                        Span(\"#role_name#,\",mr-sm)\r\n                    }.Else{\r\n                        #role_name#\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Custom(_actions){\r\n        Div(text-right button-group text-nowrap){\r\n            If(#access#==\"done\"){\r\n                Button(Class: fa fa-edit btn btn-default, PageParams: \"rid=#id#\", Page: roles_create)\r\n                If(And(#deleted#==0,#role_type#!=3)){\r\n                    Button(Class: fa fa-trash btn btn-danger, Contract: Roles_Del, Params: \"rid=#id#\", Page: roles_list).Alert(Text: $sure_want_delete$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                }.ElseIf(#deleted#==1){\r\n                    Button(Class: fa fa-recycle btn btn-info, Contract: Roles_Restore, Params: \"rid=#id#\", Page: roles_list)\r\n                }\r\n            }\r\n        }\r\n    }.Where(#where#).Order(\"deleted ASC, id ASC\").Columns(\"id,role_name,role_type,image_id,creator->member_id,creator->member_name,date_created,date_deleted,deleted,roles_access->rids\")\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Div(input-group){\r\n                        Div(input-group-addon mt-sm){\r\n                            LangRes(name)\r\n                        }\r\n                        Input(Name: search, Value: #search#)\r\n                        Div(input-group-btn){\r\n                            Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: roles_list, PageParams: \"search=Val(search)\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(table-responsive){\r\n                Table(Source: src_roles, Columns: \"$id$=_id,$name$=_name,$type$=_type,$creator$=_creator,$created$ / $deleted$=_date,$status$=_status,$roles_access$=_access,=_actions\")\r\n            }\r\n            If(GetVar(search)){\r\n                Div(row){\r\n                    Div(col-md-12 mt-lg){\r\n                        Div(text-center){\r\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: roles_list)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Style(\r\n    .inline {display:inline-block;}\r\n    .breaker {word-break: break-all;}\r\n)",
            "Name": "roles_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    \n    If(#v_role_id# > 0){\n        DBFind(Name: roles, Source: src_roles).Columns(\"role_name,role_type,deleted\").Where(\"id=#v_role_id#\").Vars(prefix)\n        \n        SetTitle($role$: #prefix_role_name#)\n        Div(breadcrumb){\n            LinkPage($roles$, roles_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: #prefix_role_name#)\n        }\n        \n        DBFind(Name: roles_participants, Source: src_participants).Columns(\"id,member->member_id,member->member_name,member->image_id,appointed->member_id,appointed->member_name,appointed->voting_id,appointed->voting_name,date_created,date_deleted,deleted\").Custom(custom_id){\n            If(#deleted# == 0){\n                SetVar(Name: style_text, Value: \"text-normal\")\n                SetVar(Name: style_link, Value: \"text-primary\")\n            }.Else{\n                SetVar(Name: style_text, Value: \"text-muted\")\n                SetVar(Name: style_link, Value: \"text-muted\")\n            }\n            Span(Class: #style_text#, Body: #id#)\n        }.Custom(custom_appointed){\n            If(Or(#appointed.member_id#>0,#appointed.member_id#<0)){\n                LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#appointed.member_id#\"){\n                    Span(Body: #appointed.member_name#)\n                }\n            }\n            If(#appointed.voting_id#>0){\n                LinkPage(Page: voting_view, PageParams: \"vID=#appointed.voting_id#\"){\n                    Span(Class: h5 text-bold, Body: #appointed.voting_name#)\n                }\n            }\n        }.Custom(custom_member){\n            LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#member.member_id#\"){\n                If(#member.image_id#>0){\n                    Image(Src: Binary().ById(#member.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                    Span(#member.member_name#)\n                }.Else{\n                    Div(){\n                        Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                        Span(#member.member_name#)\n                    }.Style(display:flex; align-items:center;)\n                }\n            }\n        }.Custom(custom_address){\n            Span(Class: #style_text#, Body: Address(#member.member_id#))\n        }.Custom(custom_date){\n            Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\n            Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\"))\n        }.Custom(custom_status){\n            If(#deleted# == 0){\n                Span(Class: #style_text#, Body: LangRes(active))\n            }.Else{\n                Span(Class: #style_text#, Body: LangRes(deleted))\n            }\n        }.Custom(actions){\n            Div(pull-right){\n                If(And(#deleted#==0,#prefix_role_type#!=3)){\n                    Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: Roles_Unassign, Params: \"row_id=#id#\", Page: roles_view, PageParams: \"v_role_id=#v_role_id#\").Alert(Text: $sure_want_delete$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }\n            }\n        }.Where(\"role->id='#v_role_id#'\").Order(\"deleted ASC, id ASC\")\n        \n        Form(panel panel-primary){\n            Div(panel-body){\n                Table(Source: src_participants, Columns: \"$id$=custom_id,$member$=custom_member,$address$=custom_address,$appointed$=custom_appointed,$appointed$ / $deleted$=custom_date,$status$=custom_status,=actions\")\n            }\n            Div(panel-footer text-right){\n                Button(Body: LangRes(back), Class: btn btn-default, Page: roles_list)\n                If(#prefix_deleted#==0){\n                    Button(Body: LangRes(assign), Class: btn btn-primary, Page: roles_assign, PageParams: \"v_role_id=#v_role_id#\")\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Name": "roles_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n\r\n    SetTitle($sysparams_candidate_validators_form$)\r\n    Div(Class: breadcrumb){\r\n        LinkPage($sysparams_candidates$, sysparams_candidates)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $sysparams_candidate_validators_form$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){\r\n            Form(panel panel-primary){\r\n                Div(panel-body){\r\n                    Div(form-group) {\r\n                        Label(LangRes(host_ip)*)\r\n                        Input(Name: HostIp, Type: text, Placeholder: xxx.xxx.xxx.xxx).Validate(minLength:7, maxLength:15)\r\n                        InputErr(Name: HostIp, minLength: Value is too short, maxLength: Value is too long)\r\n                    }\r\n                    If(){\r\n                        Div(form-group) {\r\n                            Label(LangRes(commission_pub)*)\r\n                            Input(Name: CommissionPub, Type: text).Validate(minLength:128)\r\n                            InputErr(Name: CommissionPub, minLength: Invalid pub-key)\r\n                        }\r\n                    }\r\n                    Div(form-group) {\r\n                        Label(LangRes(commission_address)*)\r\n                        Input(Name: CommissionAddress, Type: text,Placeholder:xxxx-xxxx-xxxx-xxxx-xxxx).Validate(minLength:24, maxLength:24)\r\n                        InputErr(Name: CommissionAddress, minLength: Invalid address, maxLength: Invalid address)\r\n                    }\r\n                    Div(form-group) {\r\n                        Label(LangRes(description_equipment))\r\n                        Input(Name: Description, Type: textarea)\r\n                    }\r\n                    Div(form-group) {\r\n                        Label(LangRes(comment))\r\n                        Input(Name: Comment, Type: textarea)\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Div(pull-left){\r\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_candidates)\r\n                    }\r\n                    Button(Contract: sysparams_CandidateValidatorRequest, Class: btn btn-primary, Page: sysparams_candidates, Body: $send$)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "sysparams_candidate_validators_form",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\n    SetVar(template_id, AppParam(App:#application_id#, Name: voting_validators_template_id))\r\n    SetTitle($sysparams_candidates$)\r\n\r\n    DBFind(Name:sysparams_candidate, Source: src_candidates).Where(\"deleted=0\").Custom(_actions){\r\n        If(#template_id#>0){\r\n            Div(btn-group){\r\n                Input(Name:KeyId, Type: hidden, Value: #candidate_key_id#)\r\n                Input(Name:TemplateId, Type: hidden, Value: #template_id#)\r\n                Button(Contract: voting_TemplateRun, Page: voting_list, Class: btn btn-default fa fa-play)\r\n            }\r\n        }.Else{\r\n            Span($voting_template_not_found$,text-muted)\r\n        }\r\n\r\n    }.Custom(_date){\r\n        DateTime(DateTime: #date_created#, Format: YYYY-MM-DD HH:MI)\r\n    }\r\n\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $sysparams_candidates$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-12){\r\n            Div(panel panel-primary){\r\n                Form(table-responsive){\r\n                    Input(Name: Duration, Type: hidden, Value: 14)\r\n                    Table(Source: src_candidates, Columns: \"$id$=id,$host_ip$=host_ip,$commission_address$=commission_address,$description_equipment$=description,$comment$=comment,$date_created$=_date,$voting$=_actions\")\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: $add$, Class: btn btn-primary, Page: sysparams_candidate_validators_form)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "sysparams_candidates",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications,src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\nSetVar(template_id, AppParam(App:#application_id#, Name: voting_ves_template_id))\r\nDBFind(buffer_data).Where(\"member_id=#key_id# and key='metrics'\").Vars(m)\r\nJsonToSource(src_metrics,#m_value#)\r\n\r\nSetTitle($sysparams_ecos$)\r\nDBFind(ecosystems,ecos).Order(id).Custom(_actions){\r\n    Div(text-right){\r\n        If(#template_id#>0){\r\n            If(#is_valued#==0){\r\n                Input(Name: RowId, Type: hidden, Value: #id#)\r\n                Input(Name: NewValue, Type: hidden, Value: 1)\r\n                Button(Body: $start_voting_ves$, Class: btn btn-block btn-primary, Page: sysparams_ecos, Contract: voting_TemplateRun)\r\n            }\r\n        }.Else{\r\n            Span(voting id template not found in parameters, text-muted)\r\n        }\r\n    }\r\n}.Custom(_valued){\r\n    If(#is_valued#==1){\r\n        is valued\r\n    }\r\n}.Custom(_metrics){\r\n    If(#m_id#>0){\r\n        SetVar(eco_id,#id#)\r\n        ForList(src_metrics){\r\n            If(#key#==#eco_id#){\r\n                LinkPage(Body: `#value#`, Page:sysparams_metrics, PageParams:\"Id=#key#\")\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nData(form, \"Name,Type,Src\"){\r\n    Interval,number,\r\n    Aggregate,select,aggregates\r\n}\r\nData(aggregates, \"id,name\"){\r\n    max,Maximum\r\n    min,Minimum\r\n    avg,Average\r\n}\r\n\r\nDiv(content-wrapper){\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            ForList(form){\r\n                Div(row form-group){\r\n                    Div(col-sm-3 text-right){\r\n                        Label(For:#Name#){\r\n                            LangRes(#Name#)\r\n                        }\r\n                    }\r\n                    Div(col-sm-9){\r\n                        If(#Type#==datetime){\r\n                            Input(Name:#Name#, Type:date)\r\n                        }.ElseIf(#Type#==select){\r\n                            Select(Name: #Name#, Source: #Src#, NameColumn: name, ValueColumn: id)\r\n                        }.Else{\r\n                            Input(Name:#Name#, Type:#Type#)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(panel-footer text-right){\r\n            Button(Body: LangRes(udpate_metrics), Page:sysparams_ecos, Class:btn btn-primary, Contract:sysparams_UpdateMetrics)\r\n        }\r\n    }\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Form(table-responsive){\r\n                Input(Name: TableWritten, Type: hidden, Value: ecosystems)\r\n                Input(Name: ColumnName, Type: hidden, Value: is_valued)\r\n                Input(Name: Duration, Type: hidden, Value: 3)\r\n                Input(Name: TemplateId, Type: hidden, Value: #template_id#)\r\n                Table(ecos, \"$name$=name,=_valued,metrics=_metrics,=_actions\")\r\n            }\r\n        }\r\n    }\r\n}\r\n",
            "Name": "sysparams_ecos",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetTitle(Platform parameters)\r\nJsonToSource(nodes){\r\n    SysParam(full_nodes)\r\n}\r\nForList(nodes){\r\n    Div(#key_id#)\r\n}\r\nDBFind(system_parameters, src_sysparams).Order(id).Limit(250).Custom(_actions){\r\n    DBFind(contracts).Where(\"name='#name#'\").Columns(id).Vars(sp)\r\n    If(#sp_id#>0){\r\n        If(#name#==\"full_nodes\"){\r\n            Button(Class: btn btn-primary fa fa-edit, Page: sysparams_voting, PageParams: \"param_index=#id#,param_name=#name#\")\r\n        }.Else{\r\n            Button(Class: btn btn-primary fa fa-edit, Page: sysparams_voting, PageParams: \"param_index=#id#,param_name=#name#\")\r\n        }\r\n    }.Else{\r\n        condition contract not found\r\n    }\r\n}.Custom(_val){\r\n    Div(){\r\n        #value#\r\n    }.Style(max-width: 500px;overflow: hidden;)\r\n}\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        Div(Class:text-muted, Body: \"Parameters for configuring nodes, transactions, blocks, and payment for network resources.\")\r\n        Div(Class:text-muted, Body: \"Parameters change only by voting of different roles.\")\r\n    }\r\n    DBFind(Name: roles_participants, Source: roles).Columns(\"id,member->member_id,role->id,role->name,deleted\").Where(\"member->member_id='#key_id#' and role->id='3' and role->name='Validator' and deleted=0\").Vars(validator)\r\n    If(#validator_id#>0){\r\n        Div(row){\r\n            Div(col-md-6 col-md-offset-3){\r\n                Div(panel panel-primary text-center){\r\n                    Div(panel-heading){$validator_removing$}\r\n                    Div(panel-body text-center){$validator_removing_desc$}\r\n                    Div(panel-footer text-right){\r\n                        Button(Body: $resign$, Class: btn btn-danger, Page: sysparams_list, Contract: sysparams_ValidatorResign).Alert(Text: $want_resign$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Div(table-responsive){\r\n        Table(src_sysparams,\"ID=id,$name$=name,$value$=_val,=_actions\")\r\n    }\r\n}",
            "Name": "sysparams_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage(Body: LangRes(sysparams_ecos), Page:sysparams_ecos)\r\n        Span(\"/\",mh-sm)\r\n        Span(LangRes(sysparams_metrics), text-muted)\r\n    }\r\n    SetVar(title,\"LangRes(sysparams_metrics)\")\r\n    SetTitle(#title#)\r\n    Div(container){\r\n        If(GetVar(Id)){\r\n            SetVar(title,\"LangRes(sysparams_metrics): LangRes(ecosystem) ##Id#\")\r\n            SetTitle(#title#)\r\n            Data(tables, \"Name,Metric\"){\r\n                pages,ecosystem_pages\r\n                members,ecosystem_members\r\n                tx,ecosystem_tx\r\n            }\r\n            ForList(tables){\r\n                DBFind(metrics,src_metric).Where(\"key='#Id#' and metric='#Metric#'\").Order(\"time\").Count(count)\r\n                If(#count#>0){\r\n                    Div(h3){LangRes(#Name#)}\r\n                    Table(src_metric,\"$timestam$=time,$value$=value\")\r\n                }\r\n            }\r\n        }.Else{\r\n            Div(alert alert-warning){\r\n                Ecosystem id not found\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "sysparams_metrics",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\nSetVar(template_id, AppParam(App:#application_id#, Name: voting_sysparams_template_id))\r\nSetTitle($voting$)\r\n\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage($system_params$, sysparams_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $voting$)\r\n    }\r\n\r\n    If(And(#template_id#>0,#param_index#>0,#param_name#!=\"\")){\r\n        DBFind(system_parameters).Where(\"name='#param_name#'\").Vars(param)\r\n        DBFind(voting_templates).Columns(\"title\").Where(\"id=#template_id#\").Vars(template)\r\n        SetTitle(#template_title#)\r\n        Div(row){\r\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n                If(#param_name#!=\"full_nodes\"){\r\n                    Form(panel panel-primary){\r\n                        Div(panel-heading h3){#param_name#}\r\n                        Data(params, \"Name,Type,Val\"){\r\n                            OldValue,plain,#param_value#\r\n                            NewValue,textarea,\r\n                        }\r\n                        Div(panel-body){\r\n                            Input(Name:Duration, Type:hidden, Value:21)\r\n                            Input(Name:TemplateId, Type:hidden, Value:#template_id#)\r\n                            Input(Name:ColumnName, Type:hidden, Value:#param_name#)\r\n\r\n                            ForList(params){\r\n                                If(#Type#==hidden){\r\n                                    Input(Name: #Name#, Type:#Type#, Value:#Val#)\r\n                                }.Else{\r\n                                    Div(row form-group){\r\n                                        Div(col-md-3 text-right mt-sm){\r\n                                            Label(For: #Name#){LangRes(#Name#)}\r\n                                        }\r\n                                        Div(col-md-9 text-left){\r\n                                            If(#Type#==plain){\r\n                                                Div(list-group-item){\r\n                                                    #Val#\r\n                                                }\r\n                                            }.Else{\r\n                                                Input(Name: #Name#, Type:#Type#, Value:#Val#)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(panel-footer text-right){\r\n                            Div(pull-left){\r\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_list)\r\n                            }\r\n                            Button(Body: LangRes(voting), Class: btn btn-primary, Contract: voting_TemplateRun, Page: voting_list)\r\n                        }\r\n                    }\r\n                }.Else{\r\n                    SetVar(full_nodes,SysParam(full_nodes)).(first_node,AppParam(App:#application_id#, Name: first_node)).(first_node_set,)\r\n                    Form(panel panel-primary){\r\n                        Div(panel-heading text-center h3){\r\n                            Span(#param_name#, text-uppercase): Span($add$ $new_value$, text-lowercase)\r\n                        }\r\n                        If(`#full_nodes#`==\"\"){\r\n                            JsonToSource(src_first_node,#first_node#)\r\n                            ForList(src_first_node){\r\n                                If(#value#==\"\"){\r\n                                    SetVar(first_node_set,error)\r\n                                }\r\n                            }\r\n                            If(#first_node_set#==error){\r\n                                Div(panel-body text-center){\r\n                                    ForList(src_first_node){\r\n                                        If(#value#==\"\"){\r\n                                            Div(){first node: '#key#' empty}\r\n                                        }\r\n                                    }\r\n                                }\r\n                                Div(panel-footer text-center){\r\n                                    DBFind(app_params).Where(\"name='first_node'\").Vars(first_node_param)\r\n                                    Button(Page: app_params_edit, Class: btn btn-info, PageParams: \"id=#first_node_param_id#\"){\r\n                                        Install the first node before adding the new\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#first_node_set#!=error){\r\n                            Data(new_node_form, \"Name,Type,Placeholder,Value\"){\r\n                                TcpAddress,text,tcp address,\"\"\r\n                                ApiAddress,text,api address,\"\"\r\n                                KeyId,number,key id,#key_id#\r\n                                PubKey,text,public key,\"\"\r\n                            }\r\n                            Div(panel-body){\r\n                                Input(Name:Duration, Type:hidden, Value:21)\r\n                                ForList(new_node_form){\r\n                                    Div(row form-group){\r\n                                        Div(col-md-3 text-right){\r\n                                            Label(For: #Name#){LangRes(#Name#)}\r\n                                        }\r\n                                        Div(col-md-9 text-left){\r\n                                            Input(Name: #Name#, Placeholder: #Placeholder#, Type: #Type#, Value: #Value#)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(panel-footer text-right){\r\n                                Div(pull-left){\r\n                                    Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_list)\r\n                                }\r\n                                Button(Body: LangRes(voting), Class: btn btn-primary, Contract: sysparams_StartNodeAdd, Page: voting_list)\r\n                            }\r\n                        }\r\n                    }\r\n                    AppParam(App:#application_id#, Name:full_nodes_keys, Source:nodes_keys)\r\n                    SetVar(node_owner,)\r\n                    ForList(nodes_keys){\r\n                        If(#name#==\"key_id\"){\r\n                            SetVar(node_owner, 1)\r\n                        }\r\n                    }\r\n\r\n                    If(#node_owner#==1){\r\n                        Form(panel panel-primary){\r\n                            Div(panel-heading text-center h3){$delete_node$}\r\n                            Div(panel-body text-center){$delete_node_desc$}\r\n                            Div(panel-footer text-right){\r\n                                Button(Body: LangRes(delete), Class: btn btn-danger, Page: sysparams_list, Contract: sysparams_RemoveNode)\r\n                            }\r\n                        }\r\n                    }\r\n                    If(`#full_nodes#`!=\"\"){\r\n                        Div(panel panel-primary){\r\n                            Div(panel-heading text-center h3){LangRes(full_nodes)}\r\n                            Div(panel-body text-center){\r\n                                Div(col-sm-12 text-center){\r\n                                    #full_nodes#\r\n                                }.Style(word-break: break-all;)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(col-md-12 text-danger text-center text-bold){\r\n            If(#param_index#>0){}.Else{\r\n                Div(){LangRes(attention)}\r\n            }\r\n            If(#template_id#>0){}.Else{\r\n                Div(mb-sm){\r\n                    LangRes(voting_template_not_found)\r\n                }\r\n                DBFind(app_params).Where(\"name='voting_sysparams_template_id'\").Vars(template_param)\r\n                LinkPage(Page: app_params_edit, Class: btn btn-info, PageParams: \"id=#template_param_id#\"){\r\n                    Set the template ID\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "sysparams_voting",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#notific_id#>0){\r\n    DBFind(notifications).WhereId(#notific_id#).Columns(\"page_params->tokenrefund_id\").Vars(note)\r\n    DBFind(tokenrefund).WhereId(#note_page_params_tokenrefund_id#).Vars(tr)\r\n\r\n    Data(inputs,\"Name,Type,Res,Value\"){\r\n        Amount,number,amount,#tr_amount#\r\n        VictimAccount,text,tokenrefund_victim,#tr_victim_key_id#\r\n        SuspectAccount,text,tokenrefund_attacker,#tr_attacker_key_id#\r\n        Note,textarea,description,#tr_note#\r\n    }\r\n    Div(content-wrapper){\r\n        Div(row){\r\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n                Div(panel panel-primary){\r\n                    Div(panel-heading, Body: $tokenrefund_start$)\r\n                    Div(panel-body){\r\n                        ForList(inputs){\r\n                            Div(row form-group){\r\n                                Div(col-sm-4){LangRes(#Res#)}\r\n                                Div(col-sm-8){\r\n                                    If(#Type#==textarea){\r\n                                        #Value#\r\n                                    }.Else{\r\n                                        Input(Name: #Name#, Type: #Type#, Value: #Value#, Class: disabled, Disabled: true)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Button(Body: $approve$, Contract: tokenrefund_Accept, Params: \"Id=#tr_id#\", Page: tokenrefund_list, Class: btn btn-primary)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "tokenrefund_accept",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\n    SetTitle($tokenrefund_list$)\r\n\r\n    DBFind(Name: tokenrefund, Source: src).Order(id desc).Custom(_status){\r\n        If(#status#>0){\r\n            SetVar(sta,AppParam(App:#application_id#, Name: tokenrefund_status, Index: #status#))\r\n            LangRes(#sta#)\r\n        }.Else{\r\n            $tokenrefund_status0$\r\n        }\r\n    }.Custom(_result){\r\n        If(#result#>0){\r\n            SetVar(res,AppParam(App:#application_id#, Name: tokenrefund_result, Index: #result#))\r\n            LangRes(#res#)\r\n        }.Else{\r\n            $tokenrefund_result0$\r\n        }\r\n    }.Custom(_blocked){\r\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #blocked_at#)\r\n    }.Custom(_closed){\r\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #closed_at#)\r\n    }.Custom(_accounts){\r\n        Div(){$tokenrefund_victim$: #victim_key_id#}\r\n        Div(){$tokenrefund_attacker$: #attacker_key_id#}\r\n    }.Custom(_voting){\r\n        LinkPage(Page: voting_view, PageParams: \"vID=#voting_id#\"){##voting_id#}\r\n    }\r\n\r\n    Div(panel panel-primary){\r\n        Div(table-responsive){\r\n            Table(Source: src, Columns: \"$accounts$=_accounts,$amount$=amount,$description$=note,$validator_id$=validator_id,$blocked_at$=_blocked,$voting$=_voting,$result$=_result,$status$=_status,$closed$=_closed\")\r\n        }\r\n\r\n        Form(panel-footer text-right){\r\n            Button(Body: $request_refund$, Class: btn btn-primary, Page: tokenrefund_start)\r\n        }\r\n    }\r\n}\r\n\r\n",
            "Name": "tokenrefund_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Data(Source: inputs, Columns:\"name,type,res,placeholder\"){\r\n    Amount,number,amount,\"\"\r\n    VictimAccount,text,tokenrefund_victim,\"Key ID or Wallet\"\r\n    SuspectAccount,text,tokenrefund_attacker,\"Key ID or Wallet\"\r\n    Note,textarea,description,\"\"\r\n}\r\nDiv(content-wrapper){\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading, Body: $tokenrefund_start$)\r\n                Div(panel-body){\r\n                    ForList(Source: inputs){\r\n                        Div(row form-group){\r\n                            Div(col-sm-4){LangRes(#res#)}\r\n                            Div(col-sm-8){\r\n                                Input(Name: #name#, Type: #type#, Placeholder: #placeholder#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: $start_refund$, Contract: tokenrefund_Start, Page: tokenrefund_list, Class: btn btn-primary)\r\n                    Div(pull-left){\r\n                         Button(Body: LangRes(back), Class: btn btn-default, Page: tokenrefund_list)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "tokenrefund_start",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Form(){\r\n    If(Or(#v_id#>0,#v_id#<0)){\r\n        SetVar(Name: v_address, Value: Address(#v_id#))\r\n    }.Else{\r\n        SetVar(Name: v_address, Value: \"\")\r\n    }\r\n    Div(form-group){\r\n        Label($recipient$)\r\n        Input(Name: Recipient_Account, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #v_address#)\r\n    }\r\n    Div(form-group){\r\n        Label($amount$)\r\n        Input(Name: Amount, Type: Number)\r\n    }\r\n    Div(form-group){\r\n        Button(Body: LangRes(send), Class: btn pull-right btn-primary, Page: members_list, Contract: SendTokens).Alert(Text: $want_send_tokens$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n        Button(Body: LangRes(back), Class: btn pull-right btn-default, Page: members_list)\r\n    }\r\n}",
            "Name": "tokens_transfer",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\n\r\nSetTitle($new_voting$)\r\nAppParam(App:#application_id#, Name: type_voting_decisions, Source: type_voting_decisions)\r\nAppParam(App:#application_id#, Name: type_voting_participants, Source: type_voting_participants)\r\nData(inputs,\"Name,Type,Res,Req,Src,Val,Desc\"){\r\n    voting_name,input,name,*,,\"New voting\",\r\n    type_decision,select,decision,*,type_voting_decisions,,\r\n    type_participants,select,participants,*,type_voting_participants,,\r\n    volume,number,voting_volume,*,,75,$voting_volume_desc$\r\n    quorum,number,voting_quorum,*,,51,$voting_quorum_desc$\r\n    start,datetime,date_start,*,,,\r\n    end,datetime,date_end,*,,,\r\n    description,textarea,description,,,,\r\n\r\n}\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage($voting$, voting_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $new_voting$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading){LangRes(new_voting)}\r\n                Div(panel-body){\r\n                    ForList(inputs){\r\n                        Div(form-group){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(For:#Name#){\r\n                                        LangRes(#Res#)\r\n                                        If(#Req#==*){\r\n                                            Span(*,text-danger)\r\n                                        }\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 text-left){\r\n                                    If(#Type#==input){\r\n                                        Input(Name: #Name#, Value: #Val#)\r\n                                    }.ElseIf(#Type#==select){\r\n                                        Select(Name: #Name#, Source: #Src#, NameColumn: name, ValueColumn: id)\r\n                                    }.ElseIf(#Type#==number){\r\n                                        Input(Name: #Name#, Value: #Val#, Type:#Type#)\r\n                                    }.ElseIf(#Type#==textarea){\r\n                                        Input(Name: #Name#, Type:#Type#)\r\n                                    }.ElseIf(#Type#==datetime){\r\n                                        Div(row){\r\n                                            Div(col-md-6){\r\n                                                Input(Name: #Name#_date, Type: date)\r\n                                            }\r\n                                            Div(col-md-6){\r\n                                                Input(Name: #Name#_time, Type: time)\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    If(`#Desc#`!=\"\"){\r\n                                        Div(m0 text-muted){\r\n                                            #Desc#\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Div(pull-left){\r\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: voting_list)\r\n                    }\r\n                    Input(Name: voting_type, Type: hidden, Value: 1)\r\n                    Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_list, Contract: voting_CreateNew)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "voting_create",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=#vID#\").Vars(instance)\r\n\r\n        SetTitle($subject_voting$)\r\n        Div(breadcrumb){\r\n            LinkPage($voting$, voting_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: $subject_voting$)\r\n        }\r\n\r\n        Div(row mt-sm){\r\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\r\n                Form(panel panel-primary){\r\n                    Div(panel-body){\r\n                        Div(row mt-sm){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(candidates))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 text-left){\r\n                                Div(input-group){\r\n                                    Input(Name: can_apply_voting, Disabled: 1, Value: \"$can_apply_voting$\")\r\n                                    Div(input-group-btn){\r\n                                        Button(Body: LangRes(apply), Class: btn btn-primary, Page: voting_decision_candidates, PageParams: \"vID=#vID#\", Contract: voting_SubjectCandidates)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-lg-8 col-lg-offset-3){\r\n                                DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->member_id,subject->member_name\").Where(\"voting_id=#vID#\").Custom(custom_address){\r\n                                    Address(#subject.member_id#)\r\n                                }.Custom(custom_member){\r\n                                    LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\r\n                                        Span(Body: #subject.member_name#)\r\n                                    }\r\n                                }\r\n                                Table(src_voting_subject, \"$candidates$=custom_member,$address$=custom_address\")\r\n                            }\r\n                        }\r\n                        Div(form-group){\r\n                            Div(row mt-sm){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(role))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 text-left){\r\n                                    DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name\").Where(\"role_type=2 and deleted=0\")\r\n                                    Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(vacancies))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 text-left){\r\n                                    Input(Name: vacancies, Type: Number, Value: #instance_optional_role_vacancies#)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(form-group){\r\n                            Div(row mt-sm){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_accept))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 text-left){\r\n                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 text-left){\r\n                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_reject))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 text-left){\r\n                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 text-left){\r\n                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Div(pull-left){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\r\n                        }\r\n                        Input(Name: memberID, Type: hidden, Value: 0)\r\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\r\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectSettings)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Name": "voting_decision_candidates",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name\").Where(\"id=#vID#\").Vars(instance)\r\n        DBFind(Name: votings_subject, Source: src_subject).Columns(\"id,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Where(\"voting_id=#vID#\").Vars(prefix)\r\n\r\n        If(#prefix_id#>0){\r\n        }.Else{\r\n            SetVar(Name: prefix_subject_contract_accept, Value: \"\")\r\n            SetVar(Name: prefix_subject_contract_accept_params, Value: \"\")\r\n            SetVar(Name: prefix_subject_contract_reject, Value: \"\")\r\n            SetVar(Name: prefix_subject_contract_reject_params, Value: \"\")\r\n        }\r\n\r\n        SetTitle($subject_voting$)\r\n        Div(breadcrumb){\r\n            LinkPage($voting$, voting_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: $subject_voting$)\r\n        }\r\n\r\n        Div(row){\r\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\r\n                Form(panel panel-primary){\r\n                    Div(panel-body){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(contract_accept)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                Input(Name: contract_accept, Value: #prefix_subject_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                                InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(params))\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                Input(Name: contract_accept_params, Value: #prefix_subject_contract_accept_params#, Placeholder: \"$contract_params_des$\")\r\n                            }\r\n                        }\r\n\r\n                        Div(form-group){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_reject)).(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_reject, Value: #prefix_subject_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mc-sm text-left){\r\n                                    Input(Name: contract_reject_params, Value: #prefix_subject_contract_reject_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Div(pull-left){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\r\n                        }\r\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\r\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectContract)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Name": "voting_decision_contract",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=#vID#\").Vars(instance)\r\n        DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->text\").Where(\"voting_id=#vID#\").Vars(prefix)\r\n\r\n        If(#prefix_id#>0){\r\n        }.Else{\r\n            SetVar(Name: prefix_subject_text, Value: \"\")\r\n        }\r\n\r\n        SetTitle($subject_voting$)\r\n        Div(breadcrumb){\r\n            LinkPage($voting$, voting_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: $subject_voting$)\r\n        }\r\n\r\n        Div(row){\r\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\r\n                Form(panel panel-primary){\r\n                    Div(panel-body){\r\n                        Div(form-group){\r\n                            Div(row){\r\n                                Div(col-md-12 mt-sm){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(text_document))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                    Input(Name: text_document, Type: textarea, Value: #prefix_subject_text#)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(form-group){\r\n                            Div(row mb-sm){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_accept))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 text-left){\r\n                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n                            }\r\n                            Div(row mb-sm){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 text-left){\r\n                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                            Div(row mb-sm){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_reject))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 text-left){\r\n                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mc-sm text-left){\r\n                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Div(pull-left){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\r\n                        }\r\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\r\n\r\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectDocument)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Name": "voting_decision_document",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=#vID#\").Vars(instance)\r\n\r\n        SetTitle($subject_voting$)\r\n        Div(breadcrumb){\r\n            LinkPage($voting$, voting_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: $subject_voting$)\r\n        }\r\n\r\n        Div(row){\r\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\r\n                Form(panel panel-primary){\r\n                    Div(panel-body){\r\n                        Div(list-group-item){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(candidates)).(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mc-sm text-left){\r\n                                    Div(input-group){\r\n                                        DBFind(Name: members, Source: src_members).Columns(\"id,member_name\").Custom(custom_username){\r\n                                            #member_name# (Address(#id#) )\r\n                                        }\r\n                                        Select(Name: memberID, Source: src_members, NameColumn: custom_username, ValueColumn: id)\r\n                                        Div(input-group-btn){\r\n                                            Button(Body: LangRes(add), Class: btn btn-primary, Page: voting_decision_election, PageParams: \"vID=#vID#\", Contract: voting_SubjectCandidates)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-lg-8 col-lg-offset-3){\r\n                                    DBFind(Name: votings_subject, Source: src_subject).Columns(\"id,subject->member_id,subject->member_name\").Where(\"voting_id=#vID#\").Custom(custom_address){\r\n                                        Address(#subject.member_id#)\r\n                                    }.Custom(custom_member){\r\n                                        LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\r\n                                            Span(Body: #subject.member_name#)\r\n                                        }\r\n                                    }\r\n                                    Table(src_subject, \"$candidates$=custom_member,$address$=custom_address\")\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(list-group-item){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(role)).(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name\").Where(\"role_type=2 and deleted=0\").Count(count_roles)\r\n                                    If(#count_roles#>0){\r\n                                        Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\r\n                                    }.Else{\r\n                                        elected role is not found\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(vacancies)).(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mc-sm text-left){\r\n                                    Input(Name: vacancies, Class: form-control, Type: Number, Value: #instance_optional_role_vacancies#)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(list-group-item){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_accept))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_reject))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mc-sm text-left){\r\n                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Div(pull-left){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\r\n                        }\r\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\r\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectSettings)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Name": "voting_decision_election",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=#vID#\").Vars(instance)\r\n        DBFind(Name: votings_subject, Source: src_subject).Columns(\"id,subject->column,subject->column_value,subject->table_id,subject->table,subject->description\").Where(\"voting_id=#vID#\").Vars(prefix)\r\n\r\n        If(#prefix_id#>0){\r\n        }.Else{\r\n            SetVar(Name: prefix_subject_description, Value: \"\")\r\n            SetVar(Name: prefix_subject_table, Value: \"\")\r\n            SetVar(Name: prefix_subject_table_id, Value: \"\")\r\n            SetVar(Name: prefix_subject_column, Value: \"\")\r\n            SetVar(Name: prefix_subject_column_value, Value: \"\")\r\n        }\r\n\r\n        SetTitle($subject_voting$)\r\n        Div(breadcrumb){\r\n            LinkPage($voting$, voting_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: $subject_voting$)\r\n        }\r\n\r\n        Div(row){\r\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\r\n                Form(panel panel-primary){\r\n                    Div(panel-body){\r\n                        Div(form-group){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(table_to_written))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: table_to_written, Value: #prefix_subject_table#, Placeholder: \"$table_to_written_desc$\")\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(row_id))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: row_id, Class: form-control, Type: number, Value: #prefix_subject_table_id#, Placeholder: \"$row_id_desc$\")\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(column_name))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: column_name, Value: #prefix_subject_column#, Placeholder: \"$column_name_desc$\")\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(written_value))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mc-sm text-left){\r\n                                    Input(Name: written_value, Value: #prefix_subject_column_value#, Placeholder: \"$written_value_desc$\")\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(form-group){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-lg text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(description))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mc-sm text-left){\r\n                                    Input(Name: description, Class: form-control, Type: textarea, Value: #prefix_subject_description#)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(form-group){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_accept))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_reject))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mc-sm text-left){\r\n                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Div(pull-left){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\r\n                        }\r\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\r\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_SubjectFormal)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Name": "voting_decision_formal",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(Name: votings, Source: src_voting).Columns(\"id,voting->name,voting->type_participants\").Where(\"id=#vID#\").Vars(instance)\r\n\r\n        SetTitle($participants$)\r\n        Div(breadcrumb){\r\n            LinkPage($voting$, voting_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: $participants$)\r\n        }\r\n\r\n        Div(row){\r\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\r\n                Form(panel panel-primary){\r\n                    Div(panel-heading){LangRes(participants)}\r\n                    Div(panel-body){\r\n                        Div(form-group){\r\n                            If(#instance_voting_type_participants# == 1){\r\n                                Div(row){\r\n                                    Div(col-md-12){\r\n                                        Input(Name: voting_all_members, Disabled: 1, Value: \"$voting_all_members$\")\r\n                                    }\r\n                                }\r\n                            }\r\n                            If(#instance_voting_type_participants# == 2){\r\n                                Div(row){\r\n                                    Div(col-md-12){\r\n                                        Label(){\r\n                                            Span(Body: LangRes(select_member))\r\n                                            Span(Class: text-danger, Body:*)\r\n                                        }\r\n                                        DBFind(Name: members, Source: src_members).Columns(\"id,member_name\").Custom(custom_username){\r\n                                            #member_name# (Address(#id#) )\r\n                                        }\r\n                                        Select(Name: var_id, Source: src_members, NameColumn: custom_username, ValueColumn: id)\r\n                                    }\r\n                                }\r\n                            }\r\n                            If(#instance_voting_type_participants# == 3){\r\n                                Div(row){\r\n                                    Div(col-md-12){\r\n                                        Label(){\r\n                                            Span(Body: LangRes(select_role))\r\n                                            Span(Class: text-danger, Body:*)\r\n                                        }\r\n                                        DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name\").Where(\"deleted=0\")\r\n                                        Select(Name: var_id, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        DBFind(Name: votings_participants, Source: src_participants).Columns(\"id\").Where(\"voting_id=#vID#\").Vars(participant)\r\n                        If(#participant_id#>0){\r\n                            Div(form-group){\r\n                                Div(row){\r\n                                    Div(col-md-12){\r\n                                        DBFind(Name: votings_participants, Source: src_participants).Columns(\"id,member->member_id,member->member_name\").Where(\"voting_id=#vID#\").Custom(custom_id){\r\n                                            Span(Body: #id#)\r\n                                        }.Custom(custom_member){\r\n                                            LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#member.member_id#\"){\r\n                                                Span(Body: #member.member_name#)\r\n                                            }\r\n                                        }\r\n                                        Table(src_participants, \"$id$=custom_id,$member_name$=custom_member\")\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-left){\r\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\r\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\r\n                        If(#instance_voting_type_participants# == 2){\r\n                            Button(Body: LangRes(add_member), Class: btn btn-primary pull-right, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_Invite)\r\n                        }.ElseIf(#instance_voting_type_participants# == 3){\r\n                            Button(Body: LangRes(add_role), Class: btn btn-primary pull-right, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_Invite)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Name": "voting_invite",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "\r\nDBFind(applications,src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\nSetTitle(\"List of votings\")\r\n\r\nIf(GetVar(Search)){\r\n    SetVar(Where,\"voting->name='#Search#' and deleted=0\")\r\n}.Else{\r\n    SetVar(Where,\"deleted=0\").(Search,)\r\n}\r\n\r\nDBFind(votings,src_voting).Custom(_id){\r\n    Span(Class: h5, Body: #id#)\r\n\r\n    DBFind(votings).Columns(\"date_started\").Where(\"id=#id# and date_started < now()\").Vars(started)\r\n    DBFind(votings).Columns(\"date_ended\").Where(\"id=#id# and date_ended < now()\").Vars(ended)\r\n\r\n    If(#started_id#>0){\r\n        SetVar(isStarted,1).(startedClass,text-muted)\r\n    }.Else{\r\n        SetVar(isStarted,-1).(startedClass,text-bold)\r\n    }\r\n    If(#ended_id#>0){\r\n        SetVar(isEnded,1).(endedClass,text-muted)\r\n    }.Else{\r\n        SetVar(isEnded,-1).(endedClass,text-bold)\r\n    }\r\n}.Custom(_name){\r\n    LinkPage(Page: voting_view, PageParams: \"vID=#id#\"){\r\n        Span(Class: h5 text-bold m0, Body: #voting.name#)\r\n    }\r\n}.Custom(_subject){\r\n    SetVar(decision, AppParam(App:#application_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\r\n    Div(h6 m0){\r\n        If(Or(#isStarted#>0,#voting.type#==2)){\r\n            #decision#\r\n        }.Else{\r\n            If(#voting.type_decision# == 1){\r\n                SetVar(Page,voting_decision_candidates)\r\n            }.ElseIf(#voting.type_decision# == 2){\r\n                SetVar(Page,voting_decision_election)\r\n            }.ElseIf(#voting.type_decision# == 3){\r\n                SetVar(Page,voting_decision_document)\r\n            }.ElseIf(#voting.type_decision# == 4){\r\n                SetVar(Page,voting_decision_formal)\r\n            }.ElseIf(#voting.type_decision# == 5){\r\n                SetVar(Page,voting_decision_contract)\r\n            }\r\n            LinkPage(Page: #Page#, PageParams: \"vID=#id#\", Class:text-bold, Body: #decision#)\r\n        }\r\n    }\r\n}.Custom(_participants){\r\n    SetVar(participants, AppParam(App:#application_id#, Name: type_voting_participants, Index: #voting.type_participants#))\r\n    Div(h6 m0){\r\n        If(Or(#isStarted#>0,#voting.type#==2)){\r\n            #participants#\r\n        }.Else{\r\n            LinkPage(Page: voting_invite, PageParams: \"vID=#id#\", Class:text-bold, Body: #participants#)\r\n        }\r\n    }\r\n}.Custom(_creator){\r\n    LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#creator.member_id#\", Body: #creator.member_name#)\r\n}.Custom(_date){\r\n    Div(Class: #startedClass#, Body: DateTime(DateTime: #date_started#, Format: \"DD.MM.YYYY HH:MI\"))\r\n    Div(Class: #endedClass#, Body: DateTime(DateTime: #date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\r\n}.Custom(_type){\r\n    Span(Class: h6 m0, Body: AppParam(App:#application_id#, Name: type_voting, Index: #voting.type#))\r\n}.Custom(_progress){\r\n    Div(Class: text-center h5 text-bold, Body: #progress.percent_success# %)\r\n}.Custom(_decision){\r\n    Div(text-center){\r\n        If(#flags.decision# == 0){\r\n            If(And(#isEnded#>0,#creator.member_id#==#key_id#)){\r\n                Button(Body: LangRes(decision), Class: btn btn-primary, Contract: voting_CheckDecision, Params: \"votingID=#id#\", Page: voting_list)\r\n            }.Else{\r\n                Div(text-muted){LangRes(no)}\r\n            }\r\n        }.ElseIf(#flags.decision# == -2){\r\n            Div(text-muted){LangRes(not_enough_votes)}\r\n        }.ElseIf(#flags.decision# == 1){\r\n            Div(text-success){LangRes(accepted)}\r\n        }.ElseIf(#flags.decision# == -1){\r\n            Div(text-danger){LangRes(rejected)}\r\n        }\r\n    }\r\n}.Custom(_status){\r\n    Div(text-center){\r\n        If(#flags.success# == 1){\r\n            Span(Class: text-success, Body: LangRes(success))\r\n        }.ElseIf(#isEnded#>0){\r\n            Span(Class: text-muted, Body: LangRes(finished))\r\n        }.ElseIf(#isStarted#>0){\r\n            Button(Class: btn btn-link icon-eye, Page: voting_view, PageParams: \"vID=#id#\")\r\n        }.Else{\r\n            Span(Class: text-warning, Body: LangRes(waiting))\r\n        }\r\n    }\r\n}.Custom(_actions){\r\n    Div(text-right){\r\n        If(And(#creator.member_id#==#key_id#,Or(#flags.full_data#==0,#progress.number_participants#==0,#isStarted#<0))){\r\n            Button(Class: fa fa-trash btn btn-default, Contract: voting_Delete, Params: \"votingID=#id#\", Page: voting_list).Alert(Text: $want_delete_voting$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n        }\r\n    }\r\n}.Where(#Where#).Order(id desc).Columns(\"id,voting->name,voting->type,voting->type_decision,voting->type_participants,flags->success,flags->decision,flags->full_data,progress->percent_success,progress->number_participants,creator->member_id,creator->member_name,date_started,date_ended,deleted\")\r\n\r\nAddToolButton(Title: $create$, Page: voting_create, Icon: icon-plus)\r\nDiv(content-wrapper){\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Div(input-group){\r\n                        Div(input-group-addon){\r\n                            LangRes(name)\r\n                        }\r\n                        Input(Name: Search, Value: #Search#)\r\n                        Div(input-group-btn){\r\n                            Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: voting_list, PageParams: \"Search=Val(Search)\")\r\n                        }\r\n                    }\r\n                }\r\n                Div(col-md-12){\r\n                    Div(table-responsive){\r\n                        Table(src_voting, \"$id$=_id,$name$=_name,$type$=_type,$subject_voting$=_subject,$participants$=_participants,$date_start$/$date_end$=_date,$creator$=_creator,$progress$=_progress,$decision$=_decision,$status$=_status,=_actions\")\r\n                    }\r\n                }\r\n            }\r\n            If(GetVar(Search)){\r\n                Div(row){\r\n                    Div(col-md-12 mt-lg){\r\n                        Div(text-center){\r\n                            Button(Body: $view_all$, Class: btn btn-default, Page: voting_list)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "voting_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\nSetTitle($template_create$)\r\n\r\nIf(#TemplateId#>0){\r\n    DBFind(voting_templates, template).Where(id=#TemplateId#).Vars(template)\r\n    SetVar(title, #template_title#)\r\n    SetVar(typevoting, #template_type_voting#)\r\n    SetVar(volume, #template_volume#)\r\n    SetVar(subj, #template_subject#)\r\n    SetVar(quorum, #template_quorum#)\r\n    SetVar(voters, #template_voters#)\r\n    SetVar(candidates, #template_voters#)\r\n    SetVar(vacancies, #template_vacancies#)\r\n    SetVar(contract_init, #template_init_contract#)\r\n    SetVar(contract_accept, #template_contract_accept#)\r\n    SetVar(accept_params, #template_accept_params#)\r\n    SetVar(contract_reject, #template_contract_reject#)\r\n    SetVar(reject_params, #template_reject_params#)\r\n\r\n}.Else{\r\n    SetVar(template_id, 0)\r\n    SetVar(title, New voting)\r\n    SetVar(typevoting, 0)\r\n    SetVar(volume, 50)\r\n    SetVar(quorum, 51)\r\n    SetVar(subj, \"\")\r\n    SetVar(voters, \"\")\r\n    SetVar(candidates, \"\")\r\n    SetVar(vacancies, 1)\r\n    SetVar(contract_init, \"\")\r\n    SetVar(contract_accept, \"\")\r\n    SetVar(accept_params, \"\")\r\n    SetVar(contract_reject, \"\")\r\n    SetVar(reject_params, \"\")\r\n\r\n}\r\nIf(#TypeDecision#>0){\r\n    SetVar(typedec,#TypeDecision#)\r\n}.Else{\r\n    SetVar(typedec,0)\r\n}\r\nIf(#TypeParticipants#>0){\r\n    SetVar(typepart,#TypeParticipants#)\r\n}.Else{\r\n    SetVar(typepart,0)\r\n}\r\nAppParam(App:#application_id#, Name: type_voting_participants, Source: src_typepart)\r\nAppParam(App:#application_id#, Name: type_voting, Source: src_typevoting)\r\nAppParam(App:#application_id#, Name: type_voting_decisions, Source: src_typedec)\r\nDBFind(Name: roles, Source: src_roles).Where(\"deleted=0\").Order(id).Custom(name){\r\n    #role_name#\r\n}\r\n\r\nIf(#typedec#>0){\r\n    Data(data_inputs, \"data\"){\r\n        commons_req\r\n        decisions\r\n        participants\r\n        commons\r\n    }\r\n    Data(commons_req, \"name,type,res,star,value,control,src,desc\"){\r\n        Title,text,name,*,#title#,input,\"\",\"\"\r\n        TypeParticipants,text,participants,*,#typepart#,disabled,\"AppParam(App:#application_id#, Name: type_voting_participants, Index: #typepart#)\",\"\"\r\n        TypeDecision,text,decision,*,#typedec#,disabled,\"AppParam(App:#application_id#, Name: type_voting_decisions, Index: #typedec#)\",\"\"\r\n        TypeVoting,text,voting_type,*,#typevoting#,select,src_typevoting,\"\"\r\n        Volume,number,voting_volume,*,#volume#,validate,\"\",$voting_volume_desc$\r\n        Quorum,number,voting_quorum,*,#quorum#,validate,\"\",$voting_quorum_desc$\r\n        Subject,text,voting_subject,*,#subj#,input,\"\",\"\"\r\n    }\r\n    Data(commons, \"name,type,res,star,value,control,src,desc\"){\r\n        InitContract,text,voting_init_contract,\"\",#contract_init#,input,\"\",$voting_init_contract_desc$\r\n        ContractAccept,text,voting_contract_accept,\"\",#contract_accept#,contract,ParamsAccept,#accept_params#\r\n        ContractReject,text,voting_contract_reject,\"\",#contract_reject#,contract,ParamsReject,#reject_params#\r\n    }\r\n    If(Or(#typedec#==1,#typedec#==2)){\r\n        Data(decisions, \"name,type,res,star,value,control,src,desc\"){\r\n            Vacancies,number,vacancies,\"*\",#vacancies#,input,\"\",\"\"\r\n            Candidates,text,candidates_role,\"*\",#voters#,select,src_roles,\"\"\r\n        }\r\n    }.Else{\r\n        Data(decisions, \"name,type,res,star,value,control,src,desc\"){}\r\n    }\r\n    If(#typepart#==3){\r\n        Data(participants,\"name,type,res,star,value,control,src,desc\"){\r\n            Voters,text,voters_role,\"*\",#voters#,select,src_roles,\"\"\r\n        }\r\n    }.Else{\r\n        Data(participants,\"name,type,res,star,value,control,src,desc\"){}\r\n    }\r\n}.Else{\r\n    Data(data_inputs, \"data\"){\r\n        commons\r\n    }\r\n    Data(commons, \"name,type,res,star,value,control,src,desc\"){\r\n        TypeDecision,text,decision,*,#template_type_decision#,radio,src_typedec,\"\"\r\n        TypeParticipants,text,participants,*,#template_type_participants#,select,src_typepart,\"\"\r\n    }\r\n}\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage($voting_templates$, voting_templates)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $template_create$)\r\n    }\r\n    Div(row){\r\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading){LangRes(voting_params)}\r\n                Div(panel-body){\r\n                    ForList(data_inputs){\r\n                        ForList(#data#){\r\n                            Div(row form-group){\r\n                                Div(col-md-4 mt-sm text-right){\r\n                                    Label(For: #name#){\r\n                                        LangRes(#res#)\r\n                                        If(#star#==\"*\"){\r\n                                            Span(Class: text-danger, Body:*)\r\n                                        }\r\n                                    }\r\n                                }\r\n                                Div(col-md-8 text-left){\r\n                                    If(#control#==\"select\"){\r\n                                        Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id, Value: #value#)\r\n                                    }.ElseIf(#control#==\"disabled\"){\r\n                                        #src#\r\n                                        Input(Name: #name#, Type: hidden, Value: #value#)\r\n                                    }.ElseIf(#control#==\"input\"){\r\n                                        Input(Name: #name#, Value: #value#, Type: #type#)\r\n                                    }.ElseIf(#control#==\"validate\"){\r\n                                        Input(Name: #name#, Type: #type#, Value: #value#).Validate(minLength: 1)\r\n                                        InputErr(Name: #name#, minLength: Please enter #name#)\r\n                                    }.ElseIf(#control#==\"contract\"){\r\n                                        Div(row){\r\n                                            Div(col-md-6){\r\n                                                Input(Name: #name#, Type: #type#, Placeholder: $contract$, Value: #value#)\r\n                                            }\r\n                                            Div(col-md-6){\r\n                                                Input(Name: #src#, Type: #type#, Placeholder: $arguments$, Value: #desc#)\r\n                                            }\r\n                                        }\r\n                                    }.ElseIf(#control#==\"radio\"){\r\n                                        RadioGroup(Name: #name#, Value: #value#, Source: #src#, ValueColumn: id, NameColumn: name)\r\n                                    }\r\n                                    If(And(#desc#!=\"\",#desc#!=\"NULL\")){\r\n                                        P(Class: m0 text-muted, Body: #desc#)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                Div(panel-footer text-right){\r\n                    Div(pull-left){\r\n                        If(#typedec#>0){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_template_create, PageParams: \"TemplateId=#TemplateId#\")\r\n                        }.Else{\r\n                            If(#TemplateId#>0){\r\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_template_start, PageParams: \"TemplateId=#TemplateId#\")\r\n                            }.Else{\r\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_templates)\r\n                            }\r\n                        }\r\n                    }\r\n                    If(#typedec#>0){\r\n                        Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_templates, Contract: voting_TemplateStore)\r\n                    }.Else{\r\n                        Button(Body: LangRes(next), Class: btn btn-primary, Page: voting_template_create, PageParams: \"TemplateId=#TemplateId#,TypeDecision=Val(TypeDecision),TypeParticipants=Val(TypeParticipants)\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "voting_template_create",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\n    SetTitle($voting_start$)\r\n    If(#TemplateId#>0){\r\n        DBFind(Name:voting_templates, Source: templates).Where(id=#TemplateId#).Vars(template)\r\n        If(#template_voters#>0){\r\n            DBFind(Name:roles, Source: vid_roles).Columns(\"role_name\").Where(\"id=#template_voters#\").Vars(vid)\r\n            SetVar(v_role, \"#vid_role_name#\")\r\n        }.Else{\r\n            SetVar(v_role, \"\")\r\n        }\r\n\r\n        If(#template_candidates#>0){\r\n            DBFind(Name:roles, Source: cid_roles).Columns(\"role_name\").Where(\"id=#template_candidates#\").Vars(cid)\r\n            SetVar(c_role, \"#cid_role_name#\")\r\n        }.Else{\r\n            SetVar(c_role, \"\")\r\n        }\r\n        Data(inputs, \"res,value\"){\r\n            name,\"#template_title#\"\r\n            participants,\"AppParam(App:#application_id#, Name: type_voting_participants, Index: #template_type_participants#)\"\r\n            voting_type,\"AppParam(App:#application_id#, Name: type_voting, Index: #template_type_voting#)\"\r\n            decision,\"AppParam(App:#application_id#, Name: type_voting_decisions, Index: #template_type_decision#)\"\r\n            voting_volume,\"#template_volume#\"\r\n            voting_quorum,\"#template_quorum#\"\r\n            voting_subject,\"#template_subject#\"\r\n            voters,\"#v_role#\"\r\n            candidates,\"#c_role#\"\r\n            vacancies,\"#template_vacancies#\"\r\n            init_contract,\"#template_init_contract#\"\r\n            voting_contract_accept,\"#template_contract_accept#(#template_accept_params#)\"\r\n            voting_contract_reject,\"#template_contract_reject#(#template_reject_params#)\"\r\n            duration,\"Input(Name:Duration, Type:number, Value:3)\"\r\n        }\r\n\r\n        If(#template_type_decision#==3){\r\n            Data(decision_inputs, \"name,type,res,star,value,control\"){\r\n                TextDocument,textarea,text_document,*,\"\",textarea\r\n            }\r\n        }.ElseIf(#template_type_decision#==4){\r\n            If(#template_type_voting#==2){\r\n                Data(decision_inputs,\"name,type,res,star,value,control\"){\r\n                    ColumnName,text,system_param,*,\"\",input\r\n                    NewValue,text,value,*,\"\",input\r\n                }\r\n            }.Else{\r\n                Data(decision_inputs,\"name,type,res,star,value,control\"){\r\n                    TableWritten,text,table_to_written,*,\"\",input\r\n                    RowId,number,row_id,*,\"\",input\r\n                    ColumnName,text,column_name,*,\"\",input\r\n                    NewValue,text,value,*,\"\",input\r\n                }\r\n            }\r\n        }.Else{\r\n            Data(decision_inputs, \"name,type,res,star,value,control\"){}\r\n        }\r\n    }\r\n    Div(breadcrumb){\r\n        LinkPage($voting_templates$, voting_templates)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $voting_start$)\r\n    }\r\n\r\n    If(#TemplateId#>0){\r\n        Div(row){\r\n            Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\r\n                Form(panel panel-primary){\r\n                    Div(panel-heading){LangRes(voting_params)}\r\n                    Div(panel-body){\r\n                        ForList(inputs){\r\n                            Div(row form-group){\r\n                                Div(col-md-4 text-right){\r\n                                    Strong(LangRes(#res#))\r\n                                }\r\n                                Div(col-md-8 text-left){\r\n                                    If(\"#value#\"!=\"()\"){\r\n                                        #value#\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        ForList(decision_inputs){\r\n                            Div(row form-group){\r\n                                If(#control#!=\"textarea\"){\r\n                                    Div(col-md-4 mt-sm text-right){\r\n                                        Label(For: #name#){\r\n                                            LangRes(#res#)\r\n                                            If(#star#==\"*\"){\r\n                                                Span(Class: text-danger, Body:*)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-8 text-left){\r\n                                        If(#control#==\"input\"){\r\n                                            Input(Name: #name#, Value: #value#, Type: #type#)\r\n                                        }\r\n                                    }\r\n                                }\r\n                                If(#control#==\"textarea\"){\r\n                                    Div(col-md-12){\r\n                                        Label(For: #name#){LangRes(#res#)}\r\n                                        Input(Name: #name#, Type: textarea, Value: #value#)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer){\r\n                        Div(pull-left){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_templates)\r\n                        }\r\n                        Div(text-right){\r\n                            Button(Class: fa fa-copy btn btn-default, Page: voting_template_create, PageParams: \"TemplateId=#TemplateId#\")\r\n                            Button(Body: LangRes(voting_start), Class: btn btn-primary, Page: voting_list, Contract: voting_TemplateRun, Params: \"TemplateId=#TemplateId#\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(col-md-12 alert alert-danger text-center){\r\n            LangRes(attention)\r\n        }\r\n    }\r\n}",
            "Name": "voting_template_start",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\nDBFind(voting_templates, src_templates).Custom(_participants){\r\n    AppParam(App:#application_id#, Name:type_voting_participants, #type_participants#)\r\n}.Custom(_decision){\r\n    AppParam(App:#application_id#, Name:type_voting_decisions, #type_decision#)\r\n}.Custom(_type){\r\n    AppParam(App:#application_id#, Name:type_voting, #type_voting#)\r\n}.Custom(_buttons){\r\n    Button(Class: btn btn-default fa fa-eye, Page: voting_template_start, PageParams: \"TemplateId=#id#\")\r\n}.Custom(_contracts){\r\n    If(And(#init_contract#!=\"\",#init_contract#!=\"NULL\")){\r\n        Div(){#init_contract#}\r\n    }\r\n    If(And(#contract_accept#!=\"\",#contract_accept#!=\"NULL\")){\r\n        Div(){#contract_accept#}\r\n    }\r\n    If(And(#contract_reject#!=\"\",#contract_reject#!=\"NULL\")){\r\n        Div(){#contract_reject#}\r\n    }\r\n}.Custom(_vq){\r\n    #volume#/#quorum#\r\n}.Custom(_vacancies){\r\n    If(#vacancies#>0){\r\n        #vacancies#\r\n    }\r\n}.Order(\"id desc\").Count(template_count)\r\n\r\nSetTitle($voting_templates$)\r\nIf(#template_count#>0){\r\n    AddToolButton(Title: $create$, Page: voting_template_create, Icon: icon-plus)\r\n}\r\n\r\nDiv(content-wrapper){\r\n    Form(panel panel-primary){\r\n        If(#template_count#>0){\r\n            Div(panel-body){\r\n                Div(table-responsive){\r\n                    Table(Source: src_templates, Columns:\"$id$=id,$title$=title,$voting_subject$=subject,$volume$/$quorum$=_vq,$voting_type$=_type,$participants$=_participants,$decision$=_decision,$vacancies$=_vacancies,$contracts$=_contracts,=_buttons\")\r\n                }\r\n            }\r\n        }.Else{\r\n            Div(panel-body text-center h3){\r\n                Button(Body: $install_default_templates$, Class: btn btn-primary, Page: voting_templates, Contract: voting_InstallTemplates)\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "voting_templates",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications,src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\r\nIf(#notific_id#>0){\r\n    DBFind(notifications,src_notifications).Where(\"id=#notific_id#\").Columns(\"page_params->voting_id\").Vars(notific)\r\n    SetVar(vID,#notific_page_params_voting_id#)\r\n}\r\n\r\nDiv(content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(votings).Columns(\"id,voting->name,voting->volume,voting->quorum,voting->type,voting->type_decision,voting->description,optional->role_id,optional->role_vacancies,optional->number_candidates,optional->contract_accept,optional->contract_reject,progress->number_participants,progress->number_voters,progress->percent_success,progress->percent_voters,flags->success,flags->full_data,flags->decision,flags->notifics,date_started,date_ended\").Where(\"id=#vID#\").Vars(instance)\r\n        DBFind(votings).Columns(\"date_started\").Where(\"id=#vID# and date_started < now()\").Vars(started)\r\n        DBFind(votings).Columns(\"date_ended\").Where(\"id=#vID# and date_ended < now()\").Vars(ended)\r\n\r\n        If(#started_id#>0){\r\n            SetVar(isStarted,1)\r\n        }.Else{\r\n            SetVar(isStarted,-1)\r\n        }\r\n        If(#ended_id#>0){\r\n            SetVar(isEnded,1)\r\n        }.Else{\r\n            SetVar(isEnded,-1)\r\n        }\r\n        SetTitle(Viewing voting: #instance_voting_name#)\r\n\r\n        DBFind(votings_participants,src_check).Columns(\"id\").Where(\"voting_id=#vID# and member->member_id='#key_id#' and decision=0\").Vars(participant)\r\n        If(And(#isStarted#>0,#isEnded#<0,#instance_flags_full_data#==1,#instance_flags_decision#==0,#participant_id#>0)){\r\n            SetVar(isVotingAllowed,1)\r\n        }.Else{\r\n            SetVar(isVotingAllowed,0)\r\n        }\r\n        Div(breadcrumb){\r\n            LinkPage(Body:Votings list, Page:voting_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: ##instance_id#)\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-lg-10 col-lg-offset-1){\r\n                Form(panel panel-default){\r\n                    Input(Type: hidden, Name: votingID, Value: #vID#)\r\n\r\n                    Div(list-group-item text-center){\r\n                        P(Class: h3 text-bold m0, Body: #instance_voting_name#)\r\n                        Div(row mt-sm){\r\n                            Div(col-md-12){\r\n                                Div(Class: t5 text-muted m0, Body: AppParam(App:#application_id#, Name: type_voting_decisions, Index: #instance_voting_type_decision#))\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                Div(Class: t5 text-muted m0, Body: LangRes(description))\r\n                            }\r\n                            Div(col-md-6 text-left break){\r\n                                Div(Class: t5 text-muted m0, Body: #instance_voting_description#)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Div(list-group-item text-center){\r\n                        Div(row mt-sm t4){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(type)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                AppParam(App:#application_id#, Name: type_voting, Index: #instance_voting_type#)\r\n                            }\r\n                        }\r\n                        If(Or(#instance_voting_type_decision#==1,#instance_voting_type_decision#==2,#instance_voting_type_decision#==3,#instance_voting_type_decision#==4)){\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(contract_accept)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_contract_accept# == \"\"){\r\n                                        Span(Class: text-muted, Body: LangRes(optional))\r\n                                    }.Else{\r\n                                        #instance_optional_contract_accept#\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t5 mt-sm){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(contract_reject)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_contract_reject# == \"\"){\r\n                                        Span(Class: text-muted, Body: LangRes(optional))\r\n                                    }.Else{\r\n                                        #instance_optional_contract_reject#\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm t5){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(filled)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_flags_full_data# == 1){\r\n                                    Span(Class: text-success, Body: LangRes(yes))\r\n                                }.Else{\r\n                                    Span(Class: text-danger, Body: LangRes(no))\r\n                                }\r\n                            }\r\n                        }\r\n                        If(Or(#instance_voting_type_decision#==1,#instance_voting_type_decision#==2)){\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(role)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_role_id# > 0){\r\n                                        DBFind(Name: roles, Source: src_roles).Columns(\"id,role_name\").Where(\"id=#instance_optional_role_id#\").Vars(prefix)\r\n                                        #prefix_role_name# (LangRes(id): #prefix_id#)\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(vacancies)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_role_vacancies# > 0){\r\n                                        #instance_optional_role_vacancies#\r\n                                    }.Else{\r\n                                        Span(Class: text-danger, Body: #instance_optional_role_vacancies#)\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(candidates)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_number_candidates# > 0){\r\n                                        #instance_optional_number_candidates#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: #instance_optional_number_candidates#)\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t6){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->member_id,subject->member_name\").Where(\"voting_id=#vID#\").Custom(custom_address){\r\n                                        Address(#subject.member_id#)\r\n                                    }.Custom(custom_member){\r\n                                        LinkPage(Class: text-primary t5 text-bold, Page: profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\r\n                                            #subject.member_name#\r\n                                        }\r\n                                    }.Custom(custom_voting){\r\n                                        If(#isVotingAllowed#==1){\r\n                                            Button(Body: LangRes(vote), Class: btn btn-success, Page: voting_view, PageParams: \"vID=#vID#\", Contract: voting_AcceptCandidates, Params: \"candidateID=#subject.member_id#\")\r\n                                        }\r\n                                    }.Order(\"id\")\r\n                                    Table(src_voting_subject, \"=custom_member,=custom_address,=custom_voting\")\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-12){\r\n                                    If(And(#isStarted#<0,#instance_voting_type#==1)){\r\n                                        If(#instance_voting_type_decision#==1){\r\n                                            Button(Class: btn btn-link, Page: voting_decision_candidates, PageParams: \"vID=#vID#\"){\r\n                                                Strong(LangRes(subject_voting_edit))\r\n                                            }\r\n                                        }\r\n                                        If(#instance_voting_type_decision#==2){\r\n                                            Button(Class: btn btn-link, Page: voting_decision_election, PageParams: \"vID=#vID#\"){\r\n                                                Strong(LangRes(subject_voting_edit))\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#instance_voting_type_decision#==3){\r\n                            DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->text,subject->hash\").Where(\"voting_id=#vID#\").Vars(subject)\r\n                            Div(row t5 mt-lg){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    Div(list-group-item){\r\n                                        If(#subject_id# > 0){\r\n                                            #subject_subject_text#\r\n                                        }.Else{\r\n                                            Span(Class:text-danger, Body: LangRes(empty))\r\n                                        }\r\n                                    }\r\n                                    Div(list-group-item t6 text-muted){\r\n                                        If(#subject_id# > 0){\r\n                                            Hash: #subject_subject_hash#\r\n                                        }.Else{\r\n                                            Hash: LangRes(empty)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-12){\r\n                                    If(And(#isStarted#<0,#instance_voting_type#==1)){\r\n                                        Button(Class: btn btn-link, Page: voting_decision_document, PageParams: \"vID=#vID#\"){\r\n                                            Strong(LangRes(subject_voting_edit))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    If(#isVotingAllowed#==1){\r\n                                        Div(pull-left){\r\n                                            Button(Body: LangRes(reject), Class: btn btn-danger, Contract: voting_RejectDecision, PageParams: \"vID=#vID#\", Page: voting_view)\r\n                                        }\r\n                                        Div(pull-right){\r\n                                            Button(Body: LangRes(accept), Class: btn btn-success, Contract: voting_AcceptDecision, PageParams: \"vID=#vID#\", Page: voting_view)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#instance_voting_type_decision#==4){\r\n                            DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->description,subject->table,subject->table_id,subject->column,subject->column_value\").Where(\"voting_id=#vID#\").Vars(subject)\r\n\r\n                            If(#instance_voting_type#==1){\r\n                                Div(row mt-sm t5){\r\n                                    Div(col-md-6 text-right){\r\n                                        LangRes(table_to_written)\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                    Div(col-md-6 text-left){\r\n                                        If(#subject_id# > 0){\r\n                                            #subject_subject_table#\r\n                                        }.Else{\r\n                                            Span(Class:text-danger, Body: LangRes(empty))\r\n                                        }\r\n                                    }\r\n                                }\r\n                                Div(row mt-sm t5){\r\n                                    Div(col-md-6 text-right){\r\n                                        LangRes(row_id)\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                    Div(col-md-6 text-left){\r\n                                        If(#subject_id# > 0){\r\n                                            #subject_subject_table_id#\r\n                                        }.Else{\r\n                                            Span(Class:text-danger, Body: LangRes(empty))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    If(#instance_voting_type#==1){\r\n                                        LangRes(column_name)\r\n                                    }.Else{\r\n                                        LangRes(parameter_name)\r\n                                    }\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#subject_id# > 0){\r\n                                        #subject_subject_column#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    Span(Body: LangRes(written_value))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left break){\r\n                                    If(#subject_id# > 0){\r\n                                        #subject_subject_column_value#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(description)\r\n                                }\r\n                                Div(col-md-6 text-left break){\r\n                                    If(#subject_id# > 0){\r\n                                        If(#subject_subject_description# == \"\"){\r\n                                            Span(Class:text-muted, Body: LangRes(optional))\r\n                                        }.Else{\r\n                                            #subject_subject_description#\r\n                                        }\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-12){\r\n                                    If(And(#isStarted#<0,#instance_voting_type#==1)){\r\n                                        Button(Class: btn btn-link, Page: voting_decision_formal, PageParams: \"vID=#vID#\"){\r\n                                            Strong(LangRes(subject_voting_edit))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    If(#isVotingAllowed#==1){\r\n                                        Div(pull-left){\r\n                                            Button(Body: LangRes(reject), Class: btn btn-danger, Contract: voting_RejectDecision, PageParams: \"vID=#vID#\", Page: voting_view)\r\n                                        }\r\n                                        Div(pull-right){\r\n                                            Button(Body: LangRes(accept), Class: btn btn-success, Contract: voting_AcceptDecision, PageParams: \"vID=#vID#\", Page: voting_view)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#instance_voting_type_decision#==5){\r\n                            DBFind(Name: votings_subject, Source: src_voting_subject).Columns(\"id,subject->contract_accept,subject->contract_reject\").Where(\"voting_id=#vID#\").Vars(subject)\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(contract_accept)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#subject_id# > 0){\r\n                                        #subject_subject_contract_accept#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(contract_reject)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#subject_id# > 0){\r\n                                        #subject_subject_contract_reject#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-12){\r\n                                    If(And(#isStarted#<0,#instance_voting_type#==1)){\r\n                                        Button(Class: btn btn-link, Page: voting_decision_contract, PageParams: \"vID=#vID#\"){\r\n                                            Strong(LangRes(subject_voting_edit))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    If(#isVotingAllowed#==1){\r\n                                        Div(pull-left){\r\n                                            Button(Body: LangRes(reject), Class: btn btn-danger, Contract: voting_RejectDecision, PageParams: \"vID=#vID#\", Page: voting_view)\r\n                                        }\r\n                                        Div(pull-right){\r\n                                            Button(Body: LangRes(accept), Class: btn btn-success, Contract: voting_AcceptDecision, PageParams: \"vID=#vID#\", Page: voting_view)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Div(list-group-item text-center t5){\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(status)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_flags_success#==1){\r\n                                    Span(Class:text-success, Body: LangRes(success))\r\n                                }.ElseIf(#isEnded#>0){\r\n                                    Span(Class:text-muted, Body: LangRes(finished))\r\n                                }.ElseIf(#isStarted#>0){\r\n                                    Span(Class:text-success, Body: LangRes(started))\r\n                                }.Else{\r\n                                    Span(Class:text-warning, Body: LangRes(waiting))\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(decision)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_flags_decision#==-2){\r\n                                    LangRes(not_enough_votes)\r\n                                }\r\n                                If(#instance_flags_decision#==-1){\r\n                                    Span(Class:text-danger, Body: LangRes(rejected))\r\n                                }\r\n                                If(#instance_flags_decision#==0){\r\n                                    LangRes(no)\r\n                                }\r\n                                If(#instance_flags_decision#==1){\r\n                                    Span(Class:text-success, Body: LangRes(accepted))\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(date_start)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#isStarted#>0){\r\n                                    Span(Class:text-muted, Body: DateTime(DateTime: #instance_date_started#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                }.Else{\r\n                                    DateTime(DateTime: #instance_date_started#, Format: \"DD.MM.YYYY HH:MI\")\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(date_end)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#isEnded#>0){\r\n                                    Span(Class:text-muted, Body: DateTime(DateTime: #instance_date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                }.Else{\r\n                                    DateTime(DateTime: #instance_date_ended#, Format: \"DD.MM.YYYY HH:MI\")\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(voting_volume)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                #instance_voting_volume#\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(voting_quorum)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                #instance_voting_quorum#\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(participants)\r\n                                Span(Class: text-danger, Body:*)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_progress_number_participants# > 0){\r\n                                    #instance_progress_number_participants#\r\n                                }.Else{\r\n                                    Span(Class:text-danger, Body: #instance_progress_number_participants#)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm t6){\r\n                            Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                DBFind(Name: votings_participants, Source: src_voting_participants).Custom(custom_address){\r\n                                    Div(Class: t6 m0, Body: Address(#member.member_id#))\r\n                                }.Custom(custom_decision){\r\n                                    If(Or(#instance_voting_type_decision#==1,#instance_voting_type_decision#==2)){\r\n                                        If(#decision#==0){\r\n                                            LangRes(did_not_vote)\r\n                                        }.Else{\r\n                                            Div(Class: text-success text-center, Body: $vote_for_candidate$:)\r\n                                            Div(Class: text-success text-center, Body: Address(#decision#) )\r\n                                            Div(Class: text-success text-center, Body: $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                        }\r\n                                    }\r\n                                    If(#instance_voting_type_decision#==3){\r\n                                        If(#decision#==0){\r\n                                            LangRes(did_not_vote)\r\n                                        }\r\n                                        If(#decision#==1){\r\n                                            Span(Class: text-success, Body: $document_accept$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                        }\r\n                                        If(#decision#==-1){\r\n                                            Span(Class: text-danger, Body: $document_reject$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                        }\r\n                                    }\r\n                                    If(#instance_voting_type_decision#==4){\r\n                                        If(#decision#==0){\r\n                                            LangRes(did_not_vote)\r\n                                        }\r\n                                        If(#decision#==1){\r\n                                            Span(Class: text-success, Body: $decision_accept$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                        }\r\n                                        If(#decision#==-1){\r\n                                            Span(Class: text-danger, Body: $decision_reject$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                        }\r\n                                    }\r\n                                    If(#instance_voting_type_decision#==5){\r\n                                        If(#decision#==0){\r\n                                            LangRes(did_not_vote)\r\n                                        }\r\n                                        If(#decision#==1){\r\n                                            Span(Class: text-success, Body: $contract_accepted$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                        }\r\n                                        If(#decision#==-1){\r\n                                            Span(Class: text-danger, Body: $contract_rejected$ $at$ DateTime(DateTime: #decision_date#, Format: \"DD.MM.YYYY HH:MI\"))\r\n                                        }\r\n                                    }\r\n                                }.Order(\"id\").Columns(\"id,member->member_id,decision_date,decision\").Where(\"voting_id=#vID#\")\r\n                                Table(src_voting_participants, \"=custom_address,=custom_decision\")\r\n                            }\r\n                        }\r\n                        Div(row mt-sm t5){\r\n                            Div(col-md-12){\r\n                                If(And(#isStarted#<0,#instance_voting_type#==1)){\r\n                                    Button(Class: btn btn-link, Page: voting_invite, PageParams: \"vID=#vID#\"){\r\n                                        Strong(LangRes(participants_add))\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Div(list-group-item text-center){\r\n                        Div(row mt-sm t4){\r\n                            Div(col-md-5 col-md-offset-1){\r\n                                LangRes(voted)\r\n                            }\r\n                            Div(col-md-5){\r\n                                LangRes(progress)\r\n                            }\r\n                        }\r\n                        If(graph_work==\"good\"){\r\n                            Div(row mt-sm text-muted t6 text-center){\r\n                                Div(col-md-5 col-md-offset-1){\r\n                                    LangRes(voting_graph_voted)\r\n                                }\r\n                                Div(col-md-5){\r\n                                    LangRes(voting_graph_progress)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm text-center t3){\r\n                            Div(col-md-5 col-md-offset-1){\r\n                                #instance_progress_number_voters# LangRes(voters) / #instance_progress_percent_voters#% LangRes(voters)\r\n                            }\r\n                            Div(col-md-5){\r\n                                #instance_progress_percent_success#% LangRes(success) / 100% LangRes(total)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}.Style(\r\n    .t3 {font-size:24px;}\r\n    .t4 {font-size:18px;}\r\n    .t5 {font-size:14px;}\r\n    .t6 {font-size:12px;}\r\n    .break {word-break: break-all;}\r\n)",
            "Name": "voting_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Profile_Edit {\n    data {\n        member_name string\n        member_image bytes \"file\"\n        information string \"optional\"\n    }\n\n    conditions {\n        var app_name string\n        app_name = \"Basic application\" \n\n        $member_map = DBFind(\"members\").Where(\"id = $\", $key_id).Row()\n        $app_id = DBFind(\"applications\").Where(\"name = $ AND deleted = 0\", app_name).One(\"id\")\n\n        if !$member_map {\n            // check member_name \n            $member_id = DBFind(\"members\").Where(\"member_name = $\", $member_name).One(\"id\")\n            if $member_id {\n                warning \"This member name is busy. Enter another member name, please\"\n            }\n        }\n    }\n\n    action {\n        var memberInfo map\n        var image_id int\n        var image_name string\n        image_name = \"avatar\" \n\n        if $member_map {\n            image_id = Int($member_map[\"image_id\"]) \n            image_id = @1UploadBinary(\"Name,Data,ApplicationId\", image_name, $member_image, Int($app_id))\n            DBUpdate(\"members\", Int($member_map[\"id\"]), \"member_info->information,image_id\", $information, image_id)\n        } else {\n            memberInfo[\"information\"] = $information\n            image_id = @1UploadBinary(\"Name,Data,ApplicationId\", image_name, $member_image, Int($app_id))\n            DBInsert(\"members\", \"id,member_name,image_id,member_info\", $key_id, $member_name, image_id, memberInfo)\n        }\n    }\n}",
            "Name": "Profile_Edit",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RoleConditions {\r\n    data{\r\n        role string\r\n    }\r\n    conditions {\r\n        if !DBFind(\"roles_participants\").Where(\"role->name=? and member->member_id=? and deleted=0\", $role, $key_id).Row() {\r\n            warning Sprintf(\"This action allowed only for role: %v\", $role)\r\n        }\r\n    }\r\n}",
            "Name": "RoleConditions",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_CheckAccess {\r\n    data {\r\n        rid int\r\n    }\r\n    conditions {\r\n        var role map\r\n        role = DBFind(\"roles\").Columns(\"id,role_name,deleted,roles_access->rids,role_type,creator->member_id,company_id\").Where(\"id=?\", $rid).Row()\r\n        if !role {\r\n            warning Sprintf(\"%v: Role not found\", $this_contract)\r\n        }\r\n        \r\n        if role[\"creator.member_id\"] == $key_id {\r\n            return\r\n        }\r\n\r\n        var rids rawRids array, i int\r\n        rawRids = Split(role[\"roles_access.rids\"], \",\")\r\n        while i < Len(rawRids){\r\n            if rawRids[i] > 0 {\r\n                rids = Append(rids, rawRids[i])\r\n            }\r\n            i=i+1\r\n        }\r\n        i=0\r\n        while i<Len(rids){\r\n            if rids[i] == $role_id {\r\n                return\r\n            }\r\n            i=i+1\r\n        }\r\n\r\n        if role[\"role_type\"] == 4 {\r\n            // company role\r\n            if role[\"company_id\"] == $key_id {\r\n                return\r\n            }else{\r\n                warning \"Sorry, you are not the creator of this company\"\r\n            }\r\n        }\r\n        warning Sprintf(\"Sorry, you don't have permission to change this role (%q)\", role[\"role_name\"])\r\n    }\r\n}",
            "Name": "Roles_CheckAccess",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_AccessManager {\r\n    data {\r\n        Action string\r\n        Rid int\r\n        ManagerRid string \"optional\"\r\n    }\r\n    func updateAccess(ra string){\r\n        var roles_access map\r\n        roles_access[\"rids\"] = ra\r\n        DBUpdate(\"roles\", $Rid, \"roles_access\", roles_access)\r\n    }\r\n    conditions {\r\n        Roles_CheckAccess(\"rid\", $Rid)\r\n\r\n        $ManagerRid = Int($ManagerRid)\r\n        $role = DBFind(\"roles\").Columns(\"id,roles_access->rids\").Where(\"id=?\", $Rid).Row()\r\n        if !$role {\r\n            warning \"Role not found\"\r\n        }\r\n        if $ManagerRid > 0{\r\n            if !DBFind(\"roles\").Where(\"id=?\", $ManagerRid).One(\"id\") {\r\n                warning \"Role not found\"\r\n            }\r\n        }\r\n        var ids array, i int\r\n        $ids = ids\r\n        ids = Split($role[\"roles_access.rids\"],\",\")\r\n        while i < Len(ids){\r\n            if ids[i] > 0 {\r\n                $ids = Append($ids, ids[i])\r\n            }\r\n            i=i+1\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $Action == \"clean\"{\r\n            updateAccess(\"\")\r\n        }\r\n        if $ManagerRid > 0{\r\n            var i int, idsNew array\r\n            if $Action == \"remove\"{\r\n                while i<Len($ids){\r\n                    if $ids[i] != $ManagerRid{\r\n                        idsNew = Append(idsNew, $ids[i])\r\n                    }\r\n                    i=i+1\r\n                }\r\n                updateAccess(Join(idsNew, \",\"))\r\n            }\r\n            if $Action == \"add\"{\r\n                var double bool\r\n                while i<Len($ids){\r\n                    if $ids[i] == $ManagerRid{\r\n                        double = true\r\n                    }\r\n                    i=i+1\r\n                }\r\n                if !double {\r\n                    $ids = Append($ids, $ManagerRid)\r\n                }\r\n                updateAccess(Join($ids, \",\"))\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "Roles_AccessManager",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Assign {\r\n    data {\r\n        rid int\r\n        member_id int\r\n    }\r\n\r\n    conditions {\r\n        $role_map = DBFind(\"roles\").Columns(\"id,deleted,role_type,role_name,image_id,creator->member_id\").Where(\"id=?\", $rid).Row()\r\n        if !$role_map {\r\n            warning \"Role not found\"\r\n        }\r\n\r\n        $member_map = DBFind(\"members\").Where(\"id=?\", $member_id).Row()\r\n        if !$member_map {\r\n            warning \"Member not found\"\r\n        }\r\n\r\n        $appointer_map = DBFind(\"members\").Where(\"id=?\", $key_id).Row()\r\n        if !$appointer_map {\r\n            warning \"Appointer not found\"\r\n        }\r\n\r\n        if $role_map[\"deleted\"] == 1 {\r\n            warning \"This role has been deleted. The appointment of members is impossible\"\r\n        }\r\n\r\n        var specialRules map prev_contract string stack array\r\n        stack = JSONDecode(JSONEncode($stack))\r\n        prev_contract = stack[0]\r\n        if Len(stack)>2{\r\n            prev_contract = stack[Len(stack)-2]\r\n        }\r\n        specialRules[\"@1sysparams_AcceptValidator\"] = \"Validator\"\r\n        specialRules[\"@1sysparams_DelegateRefresh\"] = \"Delegate\"\r\n        specialRules[\"@1sysparams_CandidateValidatorRequest\"] = \"Candidate for validators\"\r\n        specialRules[\"@1voting_TemplateRun\"] = \"Investor with voting rights\"\r\n        specialRules[\"@1tokenrefund_Start\"] = \"Investor with voting rights\"\r\n        if specialRules[prev_contract] != $role_map[\"role_name\"] {\r\n            Roles_CheckAccess(\"rid\", $rid)\r\n        }\r\n\r\n        $assigned = DBFind(\"roles_participants\").Where(\"role->id=? and member->member_id=? and deleted=0\", $rid, $member_id).One(\"id\")\r\n    }\r\n\r\n    action {\r\n        if $assigned {\r\n            // do not re-assign and do not warning because this contract may be called for other\r\n            return\r\n        }\r\n        var role member appointed map\r\n        role[\"id\"] = $role_map[\"id\"]\r\n        role[\"type\"] = $role_map[\"role_type\"]\r\n        role[\"name\"] = $role_map[\"role_name\"]\r\n        role[\"image_id\"] = $role_map[\"image_id\"]\r\n\r\n        member[\"member_id\"] = $member_map[\"id\"]\r\n        member[\"member_name\"] = $member_map[\"member_name\"]\r\n        member[\"image_id\"] = $member_map[\"image_id\"]\r\n\r\n        appointed[\"member_id\"] = $appointer_map[\"id\"]\r\n        appointed[\"member_name\"] = $appointer_map[\"member_name\"]\r\n        appointed[\"image_id\"] = $appointer_map[\"image_id\"]\r\n\r\n        DBInsert(\"roles_participants\", \"role,member,appointed,timestamp date_created\", role, member, appointed, $block_time)\r\n    }\r\n}",
            "Name": "Roles_Assign",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Create {\r\n    data {\r\n        role_name string\r\n        role_type int\r\n        company_id string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        $company_id = Int($company_id)\r\n        // system role\r\n        if $role_type == 3 {\r\n            warning \"System role can not be created\"\r\n        }\r\n\r\n        // company role\r\n        if $role_type == 4 {\r\n            // check param\r\n            if $company_id == 0 {\r\n                warning \"On this page you can not create a role for the company. Go to the company's view page to create a role\"\r\n            }\r\n\r\n            // check creator of the company\r\n            if $company_id != $key_id {\r\n                warning \"Sorry, you are not the creator of this company\"\r\n            }\r\n        }\r\n\r\n        $member_map = DBFind(\"members\").Where(\"id=?\", $key_id).Row()\r\n        if !$member_map {\r\n            warning \"You are not a member of the ecosystem\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var creator map\r\n        creator[\"member_id\"] = $member_map[\"id\"]\r\n        creator[\"member_name\"] = $member_map[\"member_name\"]\r\n        creator[\"image_id\"] = $member_map[\"image_id\"]\r\n\r\n        if $role_type != 4 {\r\n            $company_id = 0\r\n        }\r\n        $result = DBInsert(\"roles\", \"role_name,role_type,creator,timestamp date_created,company_id\", $role_name, $role_type, creator, $block_time, $company_id)\r\n    }\r\n}",
            "Name": "Roles_Create",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Unassign {\r\n    data {\r\n        row_id int\r\n    }\r\n\r\n    conditions {\r\n        // check record\r\n        var assigned role map\r\n        assigned = DBFind(\"roles_participants\").Columns(\"id,role->id\").Where(\"id=$\", $row_id).Row()\r\n        if !assigned {\r\n            warning \"Participant not found\"\r\n        }\r\n\r\n        role = DBFind(\"roles\").Columns(\"id,creator->member_id,role_name\").Where(\"id=?\", assigned[\"role.id\"]).Row()\r\n        if !role {\r\n            warning \"Role not found in the roles registry\"\r\n        }\r\n\r\n        var specialRules map prev_contract string stack array\r\n        stack = JSONDecode(JSONEncode($stack))\r\n        prev_contract = stack[0]\r\n        if Len(stack)>2{\r\n            prev_contract = stack[Len(stack)-2]\r\n        }\r\n        specialRules[\"@1sysparams_AcceptValidator\"] = \"Candidate for validators\"\r\n        specialRules[\"@1sysparams_DelegateRefresh\"] = \"Delegate\"\r\n        specialRules[\"@1sysparams_CandidateValidatorRequest\"] = \"Candidate for validators\"\r\n        specialRules[\"@1sysparams_InvestorRefresh\"] = \"Investor with voting rights\"\r\n        specialRules[\"@1tokenrefund_Start\"] = \"Investor with voting rights\"\r\n        specialRules[\"@1sysparams_ValidatorResign\"] = \"Validator\"\r\n\r\n        if specialRules[prev_contract] != role[\"role_name\"] {\r\n            Roles_CheckAccess(\"rid\", Int(role[\"id\"]))\r\n        }\r\n    }\r\n\r\n    action {\r\n        // delete the member\r\n        DBUpdate(\"roles_participants\", $row_id, \"deleted,timestamp date_deleted\", 1, $block_time)\r\n    }\r\n}",
            "Name": "Roles_Unassign",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Restore {\r\n    data {\r\n        rid int\r\n    }\r\n    \r\n    conditions {        \r\n        Roles_CheckAccess(\"rid\", $rid)\r\n    }\r\n    \r\n    action {\r\n        DBUpdate(\"roles\", $rid, \"deleted\", 0)\r\n    }\r\n}",
            "Name": "Roles_Restore",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Roles_Del {\r\n    data {\r\n        rid int\r\n    }\r\n\r\n    conditions {\r\n        Roles_CheckAccess(\"rid\", $rid)\r\n    }\r\n\r\n    action {\r\n        var participants array\r\n        participants = DBFind(\"roles_participants\").Columns(\"id\").Where(\"role->id=? and deleted=0\", $rid)\r\n\r\n        // delete all participants\r\n        var i int\r\n        while i < Len(participants) {\r\n            var p map\r\n            p = participants[i]\r\n            Roles_Unassign(\"row_id\", Int(p[\"id\"]))\r\n            i = i + 1\r\n        }\r\n\r\n        DBUpdate(\"roles\", $rid, \"deleted,timestamp date_deleted\", 1, $block_time)\r\n    }\r\n}",
            "Name": "Roles_Del",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokenTransfer {\n    data {\n        Amount money\n        Sender_AccountId int\n        Recipient_AccountId int\n        Comment string \"optional\"\n        //Signature string \"optional hidden\"\n    }\n    \n    conditions {\n        //check amount\n        if $Amount == 0 {\n            error \"Amount is zero\"\n        }\n        if $Amount < 0 {\n            error \"Amount is negative\"\n        }\n        \n        //check the sender\n        var sender string\n        sender = DBFind(\"keys\").Where(\"id=$\", $Sender_AccountId).One(\"id\")\n        if !sender {\n            error Sprintf(\"Sender %v is invalid\", $Sender_AccountId)\n        }\n        \n        //check balance\n        $sender_balance = Money(DBFind(\"keys\").Where(\"id=$\", $Sender_AccountId).One(\"amount\"))\n        if $Amount > $sender_balance {\n            error Sprintf(\"Money is not enough %v < %v\", $sender_balance, $Amount)\n        }\n        \n        //check the recipient\n        var recipient string\n        recipient = DBFind(\"keys\").Where(\"id=$\", $Recipient_AccountId).One(\"id\")\n        if !recipient {\n            error Sprintf(\"Recipient %v is invalid\", $Recipient_AccountId)\n        }\n    }\n    \n    action {\n        DBUpdate(\"keys\", $Sender_AccountId, \"-amount\", $Amount)\n        DBUpdate(\"keys\", $Recipient_AccountId, \"+amount\", $Amount)\n        DBInsert(\"history\", \"sender_id,recipient_id,amount,comment,block_id,txhash\", $Sender_AccountId, $Recipient_AccountId, $Amount, $Comment, $block, $txhash)\n    }\n}",
            "Name": "TokenTransfer",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract SendTokens {\n    data {\n        Amount money\n        Recipient_Account string\n        //Signature string \"signature:TokenTransfer\"\n    }\n\n    conditions {\n        $recipient = AddressToId($Recipient_Account)\n        if $recipient == 0 {\n            error Sprintf(\"Recipient %v is invalid\", $Recipient_Account)\n        }\n    }\n\n    action {\n        //TokenTransfer(\"Amount,Sender_AccountId,Recipient_AccountId,Signature\", $Amount, $key_id, $recipient, $Signature)\n        TokenTransfer(\"Amount,Sender_AccountId,Recipient_AccountId\", $Amount, $key_id, $recipient)\n    }\n}",
            "Name": "SendTokens",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract buffer_Manager {\r\n    data {\r\n        Action string\r\n        Key string\r\n        Val string \"optional\"\r\n    }\r\n    func decodeArray(s string) array{\r\n        var ar array\r\n        if HasPrefix($buf[\"value\"], \"[\") && Substr($buf[\"value\"], Size($buf[\"value\"])-1, 1) == \"]\"{\r\n            ar = JSONDecode($buf[\"value\"])\r\n        }\r\n        return ar\r\n    }\r\n    conditions {\r\n        $emptyVal = JSONEncode(\"\")\r\n        $buf = DBFind(\"buffer_data\").Where(\"key=? and member_id=?\", $Key, $key_id).Row()\r\n        if !$buf {\r\n            var buf map, id int\r\n            id = DBInsert(\"buffer_data\", \"key,value,member_id\", $Key, $emptyVal, $key_id)\r\n            buf[\"id\"] = Str(id)\r\n            buf[\"value\"] = \"\"\r\n            buf[\"member_id\"] = Str($key_id)\r\n            buf[\"key\"] = Str($Key)\r\n            $buf = buf\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $Action == \"clean\" {\r\n            DBUpdate(\"buffer_data\", Int($buf[\"id\"]), \"value\", $emptyVal)\r\n        }\r\n        if $Action == \"set\" {\r\n            DBUpdate(\"buffer_data\", Int($buf[\"id\"]), \"value\", $Val)\r\n        }\r\n        if $Action == \"array_add_value\" {\r\n            var ar array\r\n            ar = decodeArray($buf[\"value\"])\r\n            ar[Len(ar)] = $Val\r\n            DBUpdate(\"buffer_data\", Int($buf[\"id\"]), \"value\", JSONEncode(ar))\r\n        }\r\n        if $Action == \"array_remove_value\" {\r\n            var ar arNew array, i int\r\n            ar = decodeArray($buf[\"value\"])\r\n            while i<Len(ar){\r\n                if ar[i] != $Val{\r\n                    arNew[Len(arNew)] = ar[i]\r\n                }\r\n                i=i+1\r\n            }\r\n            DBUpdate(\"buffer_data\", Int($buf[\"id\"]), \"value\", JSONEncode(arNew))\r\n        }\r\n    }\r\n}\r\n",
            "Name": "buffer_Manager",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract catalog_ecosystems_Add {\r\n    data {\r\n        Ecosystem_name string\r\n        Ecosystem_number int\r\n        Ecosystem_type int\r\n        Description string\r\n        Conditions string\r\n        Flag_free int\r\n        Vde_form_address string \"optional\"\r\n        Vde_page string \"optional\"\r\n        Web_form_address string \"optional\"\r\n        Web_page string \"optional\"\r\n        Email string \"optional\"\r\n        Phone string \"optional\"\r\n    }\r\n    conditions {\r\n        var FOUNDER_ACCOUNT, DELEGATE_ACCOUNT string\r\n        FOUNDER_ACCOUNT = \"founder_account\"\r\n        DELEGATE_ACCOUNT = \"delegate_account\"\r\n        \r\n        if Size($Email) > 0 {\r\n            var emailParts int\r\n            emailParts = Split($Email, \"@\")\r\n            if Len(emailParts) != 2 {\r\n                warning \"Invalid email\"\r\n            }\r\n        }\r\n        \r\n        var ecoExists map\r\n        ecoExists = DBFind(\"catalog_ecosystems\").Where(\"ecosystem_number=? and deleted=0\", $Ecosystem_number).Row()\r\n        if ecoExists {\r\n            info \"The ecosystem with same number already added\"\r\n        }\r\n\r\n        var isFounder, isDelegate bool\r\n        var founder, delegate map\r\n        founder = DBFind(\"parameters\").Where(\"name=?\", FOUNDER_ACCOUNT).Ecosystem($Ecosystem_number).Row()\r\n        isFounder = founder[\"value\"] == $key_id\r\n        \r\n        delegate = DBFind(\"parameters\").Where(\"name=?\", DELEGATE_ACCOUNT).Ecosystem($Ecosystem_number).Row()\r\n        if delegate {\r\n            isDelegate = delegate[\"value\"] == $key_id\r\n        }\r\n        if !(isFounder || isDelegate) {\r\n            warning \"Sorry, you can not add this ecosystem\"\r\n        }\r\n    }\r\n    \r\n    action {\r\n        var ecosystem_info map\r\n        ecosystem_info[\"description\"] = $Description\r\n        ecosystem_info[\"conditions\"] = $Conditions\r\n        ecosystem_info[\"email\"] = $Email\r\n        ecosystem_info[\"phone\"] = $Phone\r\n        \r\n        var url_address map\r\n        url_address[\"web_page\"] = $Web_page\r\n        url_address[\"web_form_address\"] = $Web_form_address\r\n        url_address[\"vde_page\"] = $Vde_page\r\n        url_address[\"vde_form_address\"] = $Vde_form_address\r\n        \r\n        DBInsert(\"catalog_ecosystems\", \"ecosystem_name,ecosystem_number,ecosystem_type,image_id,ecosystem_info,url_address,flag_free\",\r\n        $Ecosystem_name, $Ecosystem_number, $Ecosystem_type, 0, ecosystem_info, url_address, $Flag_free)\r\n    }\r\n}",
            "Name": "catalog_ecosystems_Add",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract catalog_ecosystems_Request {\r\n    data {\r\n        ecosystem_num int\r\n        pub_key string\r\n        comment string \"optional\"\r\n    }\r\n    \r\n    conditions {\r\n        if $ecosystem_num <= 1 {\r\n            warning \"Invalid number of Ecosystem\"\r\n        }\r\n        var requested string\r\n        requested = DBFind(\"membership_requests\").Where(\"member_id=?\", $key_id).Ecosystem($ecosystem_num).One(\"id\")\r\n        if requested {\r\n            warning \"Request was sent earlier\"\r\n        }\r\n        var id int\r\n        id = PubToID($pub_key)\r\n        if id != $key_id {\r\n            warning \"Invalid Public key\"\r\n        }\r\n    }\r\n    \r\n    action {\r\n        DBInsert($table_name, \"member_id,pub_key,comment\", $key_id, $pub_key, $comment)\r\n    }\r\n}",
            "Name": "catalog_ecosystems_Request",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract notifications_Process {\r\n    data {\r\n        notific_id int\r\n    }\r\n\r\n    conditions {\r\n        $notify = DBFind(\"notifications\").Columns(\"recipient->role_id,sender->type,date_start_processing\").Where(\"id=?\", $notific_id).Row()\r\n        if !$notify {\r\n            warning \"Notification not found\"\r\n        }\r\n\r\n        if $notify[\"sender.type\"] == 2{\r\n            if $notify[\"date_start_processing\"] != \"\" {\r\n                warning \"Sorry, processing of this notification has already begun\"\r\n            }\r\n            if !DBFind(\"roles_participants\").Where(\"role->id=? and member->member_id=? and deleted=0\", Int($notify[\"recipient.role_id\"]), $key_id).One(\"id\") {\r\n                warning \"Sorry, you are not part of the role for which this notification is intended\"\r\n            }\r\n        }else{\r\n            if $notify[\"sender.type\"] != 1 {\r\n                warning \"Notification type not found\"\r\n            }\r\n        }\r\n\r\n        $member = DBFind(\"members\").Where(\"id=?\", $key_id).Row()\r\n        if !$member {\r\n            warning \"Member not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var member_info map\r\n        member_info[\"member_id\"] = $member[\"id\"]\r\n        member_info[\"member_name\"] = $member[\"member_name\"]\r\n        member_info[\"image_id\"] = $member[\"image_id\"]\r\n\r\n        DBUpdate(\"notifications\", $notific_id, \"timestamp date_start_processing,processing_info\", $block_time, JSONEncode(member_info))\r\n    }\r\n}",
            "Name": "notifications_Process",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract notifications_Close {\r\n    data {\r\n        notific_id int\r\n    }\r\n\r\n    conditions {\r\n        $notify = DBFind(\"notifications\").Columns(\"id,date_start_processing,processing_info->member_id,closed,sender->type\").Where(\"id=$\", $notific_id).Row()\r\n        if !$notify {\r\n            warning \"Notification not found\"\r\n        }\r\n        if $notify[\"sender.type\"] == 2{\r\n            //role has processing check\r\n            if $notify[\"date_start_processing\"] == \"\" {\r\n                warning \"Sorry, processing of this notification has not yet begun\"\r\n            }\r\n\r\n            if $notify[\"processing_info.member_id\"] != $key_id {\r\n                warning \"Sorry, processing of this notice began another member\"\r\n            }\r\n\r\n            if $notify[\"closed\"] > 0 {\r\n                warning \"Sorry, this notification has already been closed before\"\r\n            }\r\n        }else {\r\n            if $notify[\"sender.type\"] != 1 { // not single\r\n                warning \"Notification type not found\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $notify[\"sender.type\"] == 1{\r\n            notifications_Process(\"notific_id\", $notific_id)\r\n        }\r\n\r\n        DBUpdate(\"notifications\", $notific_id, \"timestamp date_closed,closed\", $block_time, 1)\r\n    }\r\n}",
            "Name": "notifications_Close",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract notifications_Send {\r\n    data {\r\n        member_id int \"optional\"\r\n        rid int \"optional\"\r\n        closure_type int \"optional\"\r\n\r\n        sender int\r\n        icon_name string \"optional\"\r\n        text_header string\r\n        text_body string \"optional\"\r\n        page_name string\r\n        params_map string // json encoded expected\r\n    }\r\n    func sendNotify(recipient map){\r\n        var notification map\r\n        notification[\"header\"] = $text_header\r\n        notification[\"type\"] = $notify_type\r\n        notification[\"icon\"] = $icon_name\r\n        notification[\"body\"] = $text_body\r\n        var sender map\r\n        if $sender == 1 && $senderMember {\r\n            // send from member\r\n            sender[\"type\"] = $sender\r\n            sender[\"member_id\"] = $senderMember[\"id\"]\r\n            sender[\"member_name\"] = $senderMember[\"member_name\"]\r\n            sender[\"image_id\"] = $senderMember[\"image_id\"]\r\n        }else{\r\n            if $sender == 2 && $senderRole{\r\n                // send from role\r\n                sender[\"type\"] = $sender\r\n                sender[\"role_id\"] = $senderRole[\"id\"]\r\n                sender[\"role_name\"] = $senderRole[\"role_name\"]\r\n                sender[\"image_id\"] = $senderRole[\"image_id\"]\r\n            }\r\n        }\r\n\r\n        DBInsert(\"notifications\", \"recipient,sender,notification,page_name,page_params,timestamp date_created\",\r\n        recipient, sender, notification, $page_name, $params_map, $block_time)\r\n    }\r\n    func sendToMember(memberId int){\r\n        var member map\r\n        member = DBFind(\"members\").Where(\"id=?\", memberId).Row()\r\n        if !member {\r\n            warning Sprintf(\"%v:  Member not found (%v)\", $this_contract, memberId)\r\n        }\r\n        var recipient map\r\n        recipient[\"member_id\"] = member[\"id\"]\r\n        recipient[\"member_name\"] = member[\"member_name\"]\r\n        recipient[\"image_id\"] = member[\"image_id\"]\r\n\r\n        sendNotify(recipient)\r\n    }\r\n\r\n    func sendToRole(roleId int){\r\n        var role map\r\n        role = DBFind(\"roles\").Where(\"id=?\", roleId).Row()\r\n        var recipient map\r\n        recipient[\"role_id\"] = role[\"id\"]\r\n        recipient[\"role_name\"] = role[\"role_name\"]\r\n        recipient[\"image_id\"] = role[\"image_id\"]\r\n\r\n        sendNotify(recipient)\r\n    }\r\n\r\n    conditions {\r\n        $member_id = Int($member_id)\r\n        $rid = Int($rid)\r\n        if Size($icon_name) < 1{\r\n            $icon_name = \"icon-envelope\"\r\n        }\r\n        if $member_id != 0 {\r\n            $notify_type = 1 // is \"member\"\r\n        }else{\r\n            if $rid > 0{\r\n                $notify_type = 2 // is \"role\"\r\n                if !DBFind(\"roles\").Where(\"id=?\", $rid).One(\"id\") {\r\n                    warning $this_contract+\": Recipient role not found\"\r\n                }\r\n                if !DBFind(\"roles_participants\").Where(\"role->id=? and deleted=0\", $rid).One(\"id\") {\r\n                    warning $this_contract+\": Recipient role does not contain members\"\r\n                }\r\n            } else{\r\n                warning $this_contract+\": Notification type not defined\"\r\n            }\r\n        }\r\n        $senderMember = nil\r\n        $senderRole = nil\r\n        if $sender == 1 {\r\n            $senderMember = DBFind(\"members\").Where(\"id=?\", $key_id).Row()\r\n            if !$senderMember {\r\n                warning $this_contract+\": Sender not member\"\r\n            }\r\n        }else{\r\n            if $sender == 2 {\r\n                $senderRole = DBFind(\"roles\").Where(\"id=?\", $role_id).Row()\r\n                if !$senderRole {\r\n                    warning $this_contract+\": Sender role not found\"\r\n                }\r\n            }else{\r\n                warning $this_contract+\": Sender invalid\"\r\n            }\r\n        }\r\n    }\r\n    action {\r\n        if $member_id != 0 {\r\n            sendToMember($member_id)\r\n        }else{\r\n            if $rid > 0 {\r\n                if $closure_type == 1 {\r\n                    // Single closure: one begins the process - the others do not see\r\n                    // Одиночное закрытие: все имеющие роль получают оповещение, но как только один из них запустит процесс работы с оповещением оно скроется от остальных\r\n                    sendToRole($rid)\r\n                } else {\r\n                    // Multiple closure: to each his own notification\r\n                    // Множественное закрытие: каждый участник роли получает свое одиночное оповещение\r\n                    $notify_type = 1\r\n                    var participants array\r\n                    participants = DBFind(\"roles_participants\").Columns(\"member->member_id\").Where(\"role->id=? and deleted=0\", $rid)\r\n                    var i int\r\n                    while i < Len(participants) {\r\n                        var p map\r\n                        p = participants[i]\r\n                        sendToMember(Int(p[\"member.member_id\"]))\r\n                        i=i+1\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_Send",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract membership_accept {\r\n    data {\r\n        notific_id int\r\n    }\r\n    conditions {\r\n        $request = DBFind(\"notifications\").Where(\"id = ?\", $notific_id).Row()\r\n\r\n        if Int($request[\"closed\"]) == 1 {\r\n            warning \"Request already processed\"\r\n        }\r\n\r\n        var founder_id int\r\n        founder_id = DBFind(\"parameters\").Where(\"name = 'founder_account'\").Ecosystem(Int($request[\"ecosystem_id\"])).One(\"value\")\r\n\r\n        if founder_id != $key_id {\r\n            warning \"Access denied\"\r\n        }\r\n    }\r\n    action {\r\n\r\n        var sender map\r\n        sender = JSONToMap($request[\"sender\"])\r\n\r\n        var params map\r\n        params = JSONToMap($request[\"page_params\"])\r\n\r\n        var notifications array\r\n        notifications = DBFind(\"notifications\").Where(\"page_params->ecosystem_id = ? and sender->member_id = ? and closed = 0 and page_name = 'membership_admin_view'\", params[\"ecosystem_id\"], sender[\"member_id\"])\r\n\r\n\r\n        var notific_len int\r\n        notific_len = Len(notifications)\r\n\r\n        var i int\r\n        while i < notific_len {\r\n            var notific map\r\n            notific = notifications[i]\r\n\r\n            notifications_Close(\"notific_id\", Int(notific[\"id\"]))\r\n            \r\n            i = i + 1\r\n        }\r\n\r\n        params[\"status\"] = 1\r\n\r\n        var table_name string\r\n        table_name = Sprintf(\"@%v_keys\", params[\"ecosystem_id\"]) \r\n\r\n        var found array\r\n        found = DBFind(table_name).Where(\"id = ?\", sender[\"member_id\"])\r\n\r\n        if Len(found) == 0 {\r\n            var pub string\r\n            pub = DBFind(\"keys\").Where(\"id = ?\", sender[\"member_id\"]).One(\"pub\")\r\n\r\n            DBInsert(table_name, \"id,pub\", sender[\"member_id\"], pub)\r\n        }\r\n\r\n        notifications_Send(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", sender[\"member_id\"], 1, \"icon icon-user-follow\", \"Request is accepted\", \"Your request for membership is accepted\", \"membership_user_view\", params)\r\n    }\r\n}",
            "Name": "membership_accept",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract membership_decline {\r\n    data {\r\n        notific_id int\r\n    }\r\n    conditions {\r\n        $request = DBFind(\"notifications\").Where(\"id = ?\", $notific_id).Row()\r\n\r\n        if Int($request[\"closed\"]) == 1 {\r\n            warning \"Request already processed\"\r\n        }\r\n\r\n        var founder_id int\r\n        founder_id = DBFind(\"parameters\").Where(\"name = 'founder_account'\").Ecosystem(Int($request[\"ecosystem_id\"])).One(\"value\")\r\n\r\n        if founder_id != $key_id {\r\n            warning \"Access denied\"\r\n        }\r\n    }\r\n    action {\r\n\r\n        var sender map\r\n        sender = JSONToMap($request[\"sender\"])\r\n\r\n        var params map\r\n        params = JSONToMap($request[\"page_params\"])\r\n\r\n        var notifications array\r\n        notifications = DBFind(\"notifications\").Where(\"page_params->ecosystem_id = ? and sender->member_id = ? and closed = 0 and page_name = 'membership_admin_view'\", params[\"ecosystem_id\"], sender[\"member_id\"])\r\n\r\n\r\n        var notific_len int\r\n        notific_len = Len(notifications)\r\n\r\n        var i int\r\n        while i < notific_len {\r\n            var notific map\r\n            notific = notifications[i]\r\n\r\n            notifications_Close(\"notific_id\", Int(notific[\"id\"]))\r\n            \r\n            i = i + 1\r\n        }\r\n\r\n        params[\"status\"] = 0\r\n\r\n        notifications_Send(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", sender[\"member_id\"], 1, \"icon icon-user-follow\", \"Request is rejected\", \"Your request for membership is rejected\", \"membership_user_view\", params)\r\n    }\r\n}",
            "Name": "membership_decline",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract membership_send_request {\r\n    data {\r\n        ecosystem_num int\r\n    }\r\n    \r\n    conditions {\r\n        \r\n    }\r\n    \r\n    action {\r\n\r\n        var found array\r\n        found = DBFind(\"notifications\").Where(\"page_params->ecosystem_id = ? and sender->member_id = ? and closed = 0 and page_name = 'membership_admin_view'\", $ecosystem_num, $key_id)\r\n        \r\n        if Len(found) > 0 {\r\n            warning \"Request already sent\"\r\n        }\r\n\r\n        var notific_params map\r\n        notific_params[\"ecosystem_id\"] = $ecosystem_num\r\n\r\n        \r\n\r\n        // var admins array\r\n        // admins = DBFind(\"roles_participants\").Where(\"role->id = ? and deleted = 0\", 1).Ecosystem($ecosystem_num)\r\n\r\n        // var i int\r\n        // var admin_len int\r\n        // admin_len = Len(admins)\r\n\r\n        // while i < admin_len {\r\n        //     var admin map\r\n        //     admin = admins[i]\r\n\r\n        //     var parsed map\r\n        //     parsed = JSONToMap(admin[\"member\"])\r\n\r\n        //     notifications_Send(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", parsed[\"member_id\"], 1, \"icon icon-user-follow\", \"New request for membership\", \"View details\", \"membership_admin_view\", notific_params)\r\n        //     i = i + 1\r\n        // }\r\n        \r\n\r\n        var founder_id int\r\n        founder_id = DBFind(\"parameters\").Where(\"name = 'founder_account'\").Ecosystem($ecosystem_num).One(\"value\")\r\n\r\n        notifications_Send(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", founder_id, 1, \"icon icon-user-follow\", \"New request for membership\", \"View details\", \"membership_admin_view\", notific_params)\r\n    }\r\n}",
            "Name": "membership_send_request",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_AcceptValidator{\r\n    data{\r\n        VotingTemplateId string\r\n        KeyId string\r\n        VotingId string\r\n    }\r\n    func conditions{\r\n        var prev string stack array\r\n        stack = JSONDecode(JSONEncode($stack))\r\n        prev = stack[0]\r\n        if Len(stack)>2{\r\n            prev = stack[Len(stack)-2]\r\n        }\r\n        if prev != \"@1voting_CheckDecision\"{\r\n            warning \"This contract allow starts only from @1voting_CheckDecision\"\r\n        }\r\n\r\n        var app_id templateId int params map\r\n        app_id = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\r\n        templateId = Int(AppParam(app_id,\"voting_validators_template_id\"))\r\n        if !DBFind(\"voting_templates\").Where(\"id=?\", templateId).One(\"id\"){\r\n            warning \"Voting template not found\"\r\n        }\r\n        if $VotingTemplateId != templateId{\r\n            warning \"Incorrect template\"\r\n        }\r\n        \r\n        var candidateId oldRoleId roleId int roleName string\r\n        oldRoleId = 4 // must be \"Candidate for validators\"\r\n        roleId = 5 \r\n        roleName = \"Validator\"\r\n        \r\n        candidateId = DBFind(\"sysparams_candidate\").Where(\"candidate_key_id=?\", $KeyId).One(\"candidate_key_id\")\r\n        if !candidateId {\r\n            warning \"Candidate key id not found\"\r\n        }\r\n        $rowId = Int(DBFind(\"roles_participants\").Where(\"deleted=0 and role->id=? and member->member_id=?\", oldRoleId, candidateId).One(\"id\"))\r\n        \r\n        $roleId = Int(DBFind(\"roles\").Where(\"id=? and role_name=? and deleted=0\", roleId, roleName).One(\"id\"))\r\n        if $roleId == 0 {\r\n            warning \"Validator role not found\"\r\n        }\r\n    }\r\n    \r\n    func action{\r\n        if $rowId > 0 {\r\n            Roles_Unassign(\"row_id\", $rowId)\r\n        }\r\n        Roles_Assign(\"rid,member_id\", $roleId, Int($KeyId))\r\n    }\r\n}",
            "Name": "sysparams_AcceptValidator",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_CandidateValidatorRequest{\r\n    data{\r\n        HostIp string\r\n        // CommissionPub string\r\n        CommissionAddress string\r\n        Description string \"optional\"\r\n        Comment string \"optional\"\r\n    }\r\n    \r\n    func IsNotValidIp(ip string)bool{\r\n        var parts array\r\n        var i, lenParts, part int\r\n        parts = Split(ip, \".\")\r\n        \r\n        lenParts = Len(parts)\r\n        if lenParts != 4{\r\n            return true\r\n        }\r\n        while i< lenParts {\r\n            part = Int(parts[i])\r\n            if part < 0{\r\n                return true\r\n            }\r\n            if part > 255{\r\n                return true\r\n            }\r\n            i = i+1\r\n        }\r\n        \r\n        return false\r\n    }\r\n    \r\n    conditions{\r\n        // $CommissionPub = Replace($CommissionPub, \" \", \"\")\r\n        // info Sprintf(\"%v %v\", $CommissionAddress, PubToID($CommissionPub))\r\n        // if $CommissionAddress != PubToID($CommissionPub) {\r\n        // info \"Address or Public key are invalid\"\r\n        // }\r\n        \r\n        $CommissionAddress = AddressToId($CommissionAddress)\r\n        if !DBFind(\"keys\").Where(\"id=?\", $CommissionAddress).Row(){\r\n            warning \"Address not valid\"\r\n        }\r\n        \r\n        if IsNotValidIp($HostIp){\r\n            warning \"Please enter a valid ip address\"\r\n        }\r\n        var roleName string, roleId int, role map\r\n        roleName = \"Candidate for validators\"\r\n        roleId = 4\r\n        role = DBFind(\"roles\").Where(\"role_name=? and id=? and deleted=0\", roleName, roleId).Row()\r\n        if !role{\r\n            warning Sprintf(\"Role %q not found\", roleName)\r\n        }\r\n        Roles_Assign(\"rid,member_id\", roleId, $key_id)\r\n    }\r\n    \r\n    action{\r\n        \r\n        DBInsert(\"sysparams_candidate\", \"host_ip,commission_pub,commission_address,description,comment,candidate_key_id,timestamp date_created,deleted\", $HostIp, \"\", $CommissionAddress, $Description, $Comment, $key_id, $block_time, 0)\r\n        \r\n    }\r\n    \r\n}",
            "Name": "sysparams_CandidateValidatorRequest",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_CandidateValidator_Delete{\r\n    data{\r\n        Id int\r\n    }\r\n    conditions{\r\n        var candidateId, roleId int\r\n        roleId = 2 // Candidate for validators\r\n        candidateId = DBFind(\"sysparams_candidate\").Where(\"id=?\",$Id).One(\"candidate_key_id\")\r\n        \r\n        $role = DBFind(\"roles_participants\").Where(\"deleted=0 and role->id=? and member->member_id=?\", roleId, candidateId).Row()\r\n        if !$role {\r\n            warning \"Candidate role not found\"\r\n        }\r\n    }\r\n    action{\r\n        DBUpdate(\"sysparams_candidate\", $Id, \"deleted\", 1)\r\n        Roles_Unassign(\"row_id\", Int($role[\"id\"]))\r\n    }\r\n}",
            "Name": "sysparams_CandidateValidator_Delete",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_DelegateRefresh{\r\n    func NotInArray(val string, arr array) bool{\r\n        var i int\r\n        // info arr\r\n        while i< Len(arr){\r\n            if val == arr[i]{\r\n                return false\r\n            }\r\n            i=i+1\r\n        }\r\n        return true\r\n    }\r\n\r\n    conditions{\r\n        MainCondition()\r\n\r\n        var ROLE_NAME string ROLE_ID int\r\n        ROLE_NAME = \"Delegate\"\r\n        ROLE_ID = 7\r\n\r\n        // get role Id and Type\r\n        $role = DBFind(\"roles\").Where(\"role_name=? and id=? and deleted=0\", ROLE_NAME, ROLE_ID).Row()\r\n        if !$role{\r\n            warning Sprintf(\"Role %q not found\", ROLE_NAME)\r\n        }\r\n    }\r\n\r\n    action{\r\n        // get delegates ids\r\n        var delegateIds currentDelegates ecosystems array\r\n        ecosystems = DBFind(\"ecosystems\").Columns(\"id\").Ecosystem(1)\r\n        var i ecoId int\r\n        while i < Len(ecosystems) {\r\n            var eco delegateParam map\r\n            eco = ecosystems[i]\r\n            ecoId = Int(eco[\"id\"])\r\n            delegateParam = DBFind(\"parameters\").Where(\"name='delegate_account'\").Ecosystem(ecoId).Row()\r\n            if !delegateParam{\r\n                delegateParam = DBFind(\"parameters\").Where(\"name='founder_account'\").Ecosystem(ecoId).Row()\r\n            }\r\n\r\n            if NotInArray(delegateParam[\"value\"], delegateIds){\r\n                delegateIds = Append(delegateIds, delegateParam[\"value\"])\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        // remove old role assigns\r\n        currentDelegates = DBFind(\"roles_participants\").Columns(\"id,member->member_id\").Where(\"role->id=? and deleted=0\", $role[\"id\"])\r\n        i = 0\r\n        while i < Len(currentDelegates){\r\n            var delegate map\r\n            delegate = currentDelegates[i]\r\n            if NotInArray(delegate[\"member.member_id\"], delegateIds){\r\n                var id int\r\n                id = Int(delegate[\"id\"])\r\n                Roles_Unassign(\"row_id\", id)\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        // assign new roles\r\n        i = 0\r\n        while i < Len(delegateIds) {\r\n            var delegateId int\r\n            delegateId = Int(delegateIds[i])\r\n            var member map\r\n            member = DBFind(\"members\").Where(\"id=?\",delegateId).Row()\r\n            if member{\r\n                // check role dup\r\n                var assigned map\r\n                assigned = DBFind(\"roles_participants\").Where(\"member->member_id=? and role->id=? and deleted=0\", delegateId, $role[\"id\"]).Row()\r\n                if !assigned{\r\n                    Roles_Assign(\"rid,member_id\", Int($role[\"id\"]), Int(member[\"id\"]))\r\n                }\r\n            }\r\n            i=i+1\r\n        }\r\n    }\r\n}",
            "Name": "sysparams_DelegateRefresh",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_InitVoting{\r\n    data{\r\n        Name string\r\n        Value string\r\n    }\r\n\r\n    conditions{\r\n        if GetContractByName($Name){\r\n            var params map\r\n            params[\"Value\"] = $Value\r\n            CallContract($Name, params)\r\n        } else {\r\n            warning \"System parameter not found\"\r\n        }\r\n        // sysparams_InvestorRefresh()\r\n    }\r\n}",
            "Name": "sysparams_InitVoting",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_InvestorRefresh {\r\n    func NotInArray(val string, arr array) bool{\r\n        var i int\r\n        while i< Len(arr){\r\n            if val == Str(arr[i]){\r\n                return false\r\n            }\r\n            i=i+1\r\n        }\r\n        return true\r\n    }\r\n    conditions{\r\n        if $role_id != 3 {\r\n            // warning \"You not Validator. You can not to run this\"\r\n        }\r\n\r\n        // roles:id == 4 Investor with voting rights\r\n        $roleId = Int(DBFind(\"roles\").Where(\"id=4 and deleted=0\").One(\"id\"))\r\n        if !$roleId{\r\n            warning \"Investor role not found or deleted\"\r\n        }\r\n        var appId int\r\n        appId = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\r\n        $limitInvestors = Int(AppParam(appId,\"investors_number\"))\r\n        if $limitInvestors == 0 {\r\n            warning \"Investors number not set in application params\"\r\n        }\r\n    }\r\n\r\n    action{\r\n        // get investors ids\r\n        var keysInvestors assignedInvestors investorsIds assignedIds array\r\n        keysInvestors = DBFind(\"keys\").Columns(\"id\").Order(\"amount desc, id\").Limit($limitInvestors)\r\n        assignedInvestors = DBFind(\"roles_participants\").Columns(\"member->member_id\").Where(\"role->id=? and deleted=0\", $roleId)\r\n\r\n        // get ids\r\n        var i int\r\n        while i < Len(keysInvestors) {\r\n            var inv map\r\n            inv = keysInvestors[i]\r\n            investorsIds[i] = inv[\"id\"]\r\n            i = i + 1\r\n        }\r\n        i=0\r\n        while i < Len(assignedInvestors) {\r\n            var inv map\r\n            inv = assignedInvestors[i]\r\n            assignedIds[i] = inv[\"member.member_id\"]\r\n            i = i + 1\r\n        }\r\n\r\n        // remove old investors\r\n        i=0\r\n        while i < Len(assignedIds) {\r\n            if NotInArray(assignedIds[i], investorsIds){\r\n                var assigned map\r\n                assigned = DBFind(\"roles_participants\").Where(\"member->member_id=? and role->id=?\", assignedIds[i], $roleId).Row()\r\n                if assigned {\r\n                    Roles_Unassign(\"row_id\", Int(assigned[\"id\"]))\r\n                }\r\n            }\r\n            i = i+1\r\n        }\r\n        // add new investors\r\n        i=0\r\n        while i < Len(investorsIds) {\r\n            if NotInArray(investorsIds[i], assignedIds){\r\n                if DBFind(\"members\").Where(\"id=?\",investorsIds[i]).Row(){\r\n                    Roles_Assign(\"rid,member_id\", $roleId, Int(investorsIds[i]))\r\n                }\r\n            }\r\n            i = i+1\r\n        }\r\n    }\r\n}",
            "Name": "sysparams_InvestorRefresh",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_RemoveNode{\r\n    data{}\r\n    func nodesRemove(keyId int) array{\r\n        var nodesJSON string\r\n        var nodes, res array\r\n        nodesJSON = SysParamString(\"full_nodes\")\r\n        if !HasPrefix(nodesJSON, \"[\") {\r\n            // empty string nodes\r\n            return res\r\n        }\r\n        nodes = JSONDecode(nodesJSON)\r\n        var i, i_res int\r\n        while i < Len(nodes){\r\n            var node map\r\n            node = nodes[i]\r\n            if node[\"key_id\"] != keyId {\r\n                res[i_res] = node\r\n                i_res = i_res+1\r\n            }\r\n            i=i+1\r\n        }\r\n        return res\r\n    }\r\n    conditions{\r\n        if $original_contract != \"sysparams_ValidatorResign\"{\r\n            warning \"Unknown contract\"\r\n        }\r\n    }\r\n    \r\n    action{\r\n        var nodes array\r\n        nodes = nodesRemove($key_id)\r\n        var fullNodes string\r\n        fullNodes = JSONEncode(nodes)\r\n        DBUpdateSysParam(\"full_nodes\", fullNodes, \"\")\r\n    }\r\n}",
            "Name": "sysparams_RemoveNode",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_SubjectCheckFulldata {\r\n    data {\r\n        votingID int\r\n    }\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $voting_map = DBFind(\"votings\").Columns(\"id,optional,voting->type,voting->type_decision,flags\").Where(\"id=?\", $votingID).Row()\r\n        if !$voting_map {\r\n            warning \"Voting is not found\"\r\n        }\r\n\r\n        $type_decision = $voting_map[\"voting.type_decision\"]\r\n        if $type_decision < 1 || $type_decision > 5 {\r\n            warning \"invalid type of decision\"\r\n        }\r\n\r\n        $subject_map = DBFind(\"votings_subject\").Where(\"voting_id=?\", $votingID).Row()\r\n        if !$subject_map {\r\n            warning \"Subject of voting is not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var flags, subject map\r\n        flags = safeJsonToMap($voting_map[\"flags\"])\r\n        if $type_decision > 2 && $type_decision <= 5 {\r\n            subject = safeJsonToMap($subject_map[\"subject\"])\r\n        }\r\n\r\n        var fullData string\r\n\r\n        if $type_decision == 1 || $type_decision == 2 {\r\n            var optional map\r\n            optional = safeJsonToMap($voting_map[\"optional\"])\r\n\r\n            if optional[\"number_candidates\"] > 0 && optional[\"role_vacancies\"] > 0 && optional[\"role_id\"] > 0 {\r\n                fullData = 1\r\n            }\r\n        }\r\n\r\n        if $type_decision == 3 {\r\n            if subject[\"text\"] != \"\" && subject[\"hash\"] != \"\" {\r\n                fullData = 1\r\n            }\r\n        }\r\n\r\n        if $type_decision == 4 {\r\n            if $voting_map[\"voting.type\"] == 1{ // personal\r\n                if subject[\"table\"] != \"\" && subject[\"table_id\"] != \"\" && subject[\"column\"] != \"\" && subject[\"column_value\"] != \"\" {\r\n                    fullData = 1\r\n                }\r\n            }\r\n            if $voting_map[\"voting.type\"] == 2 { // system\r\n                if subject[\"column\"] != \"\" && subject[\"column_value\"] != \"\" {\r\n                    fullData = 1\r\n                }\r\n            }\r\n        }\r\n\r\n        if $type_decision == 5 {\r\n            if subject[\"contract_accept\"] != \"\" && subject[\"contract_reject\"] != \"\" {\r\n                fullData = 1\r\n            }\r\n        }\r\n\r\n        if fullData == 1 {\r\n            DBUpdate(\"votings\", $votingID, \"flags->full_data\", fullData)\r\n        }\r\n    }\r\n}",
            "Name": "voting_SubjectCheckFulldata",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_StartVotingValidator{\r\n    data{\r\n        KeyId int\r\n    }\r\n    \r\n    conditions{\r\n        ContractConditions(\"MainCondition\")\r\n        $candidate = DBFind(\"sysparams_candidate\").Where(\"candidate_key_id=? and deleted=0\", $KeyId).Row()\r\n        if !$candidate{\r\n            warning \"Candidate not found\"\r\n        }\r\n    }\r\n    action{\r\n        sysparams_DelegateRefresh()\r\n    }\r\n}",
            "Name": "sysparams_StartVotingValidator",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_UpdateFullNodesKeysList{\r\n    data{}\r\n    conditions{\r\n        var appId int\r\n        appId = Int(DBFind(\"applications\").Where(\"name='Basic application' and deleted=0\").One(\"id\"))\r\n        $FULL_NODES_KEYS = \"full_nodes_keys\"\r\n        $FULL_NODES = \"full_nodes\"\r\n        $paramId = Int(DBFind(\"app_params\").Where(\"app_id=? and name=?\", appId, $FULL_NODES_KEYS).One(\"id\"))\r\n    }\r\n\r\n    action{\r\n        var nodesJson string\r\n        nodesJson = SysParamString($FULL_NODES)\r\n        var nodes keys array\r\n        if HasPrefix(nodesJson, \"[\"){\r\n            nodes = JSONDecode(nodesJson)\r\n        }\r\n\r\n        var i int\r\n        while i<Len(nodes){\r\n            var node map\r\n            node = nodes[i]\r\n            keys[i] = node[\"key_id\"]\r\n            i=i+1\r\n        }\r\n        var keysList cond string\r\n        keysList = Join(keys, \",\")\r\n        cond = `ContractConditions(\"MainCondition\")`\r\n        if $paramId > 0 {\r\n            DBUpdate(\"app_params\", $paramId, \"value,conditions\", keysList, cond)\r\n        }else{\r\n            DBInsert(\"app_params\", \"name,value,conditions\", $FULL_NODES_KEYS, keysList, cond)\r\n        }\r\n    }\r\n}",
            "Name": "sysparams_UpdateFullNodesKeysList",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_UpdateMetrics{\r\n    data{\r\n        Interval string\r\n        Aggregate string\r\n    }\r\n    func mapping(items array)map{\r\n        var mapout map, i int\r\n        while i<Len(items){\r\n            var k v string, item map\r\n            item = items[i]\r\n            k = item[\"key\"]\r\n            v = item[\"value\"]\r\n            mapout[k] = v\r\n            i=i+1\r\n        }\r\n        return mapout\r\n    }\r\n    conditions{\r\n        if $Interval <= 0 {\r\n            $Interval = 1\r\n        }\r\n        var current_year int\r\n        current_year = 2018\r\n        if $Interval > (current_year - 1970)*365 {\r\n            warning \"Interval too big\"\r\n        }\r\n        $interval = Sprintf(\"%v days\", $Interval)\r\n    }\r\n\r\n    action{\r\n        var pages members txs array, metrics map\r\n        pages = DBSelectMetrics(\"ecosystem_pages\", $interval, $Aggregate)\r\n        members = DBSelectMetrics(\"ecosystem_members\", $interval, $Aggregate)\r\n        txs = DBSelectMetrics(\"ecosystem_tx\", $interval, $Aggregate)\r\n        var mPages mMembers mTxs map\r\n        mPages = mapping(pages)\r\n        mMembers = mapping(members)\r\n        mTxs = mapping(txs)\r\n        var i int\r\n        while i<Len(pages){\r\n            var t map, k string\r\n            t = pages[i]\r\n            k = t[\"key\"]\r\n            metrics[k] = Sprintf(\"pages: %v, members: %v, tx: %v; [%v, %v]\", mPages[k], mMembers[k], mTxs[k], $interval, $Aggregate)\r\n            i=i+1\r\n        }\r\n\r\n        if Len(pages)>0{\r\n            buffer_Manager(\"Action,Key,Val\", \"set\", \"metrics\", JSONEncode(metrics))\r\n        }\r\n    }\r\n}",
            "Name": "sysparams_UpdateMetrics",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_ValidatorResign{\r\n    data{}\r\n\r\n    conditions{\r\n        $assigned = DBFind(\"roles_participants\").Columns(\"id,member->member_id,role->id,role->name,deleted\").Where(\"member->member_id=? and role->id='3' and role->name='Validator' and deleted=0\", $key_id).One(\"id\")\r\n        if !$assigned {\r\n            warning \"You are not a validator\"\r\n        }\r\n    }\r\n\r\n    action{\r\n        Roles_Unassign(\"row_id\", Int($assigned))\r\n        sysparams_RemoveNode()\r\n    }\r\n}",
            "Name": "sysparams_ValidatorResign",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_Transfer {\r\n    data {\r\n        SenderId string \"optional\"\r\n        RecipientId string\r\n        Amount string\r\n    }\r\n    \r\n    conditions {\r\n        if !($SenderId == $key_id || (Size($SenderId) > 0 && ($original_contract == \"voting_AcceptDecision\" || $original_contract == \"tokenrefund_Accept\"))) {\r\n            error \"sender id error\"\r\n        }\r\n        var addressLen int\r\n        addressLen = 24\r\n        \r\n        $amount = Money($Amount)\r\n        if $SenderId == \"\"{\r\n            $SenderId = Sprintf(\"%v\", $key_id)\r\n        }\r\n        if $amount <= 0 {\r\n            error \"tokenrefund_Transfer. Amount less than or equal to zero\"\r\n        }\r\n        \r\n        if !HasPrefix($SenderId, \"-\") && Contains($SenderId, \"-\"){\r\n            // is address. convert to key id\r\n            $SenderId = Sprintf(\"%v\", AddressToId($SenderId))\r\n        }\r\n        if !HasPrefix($RecipientId, \"-\") && Contains($RecipientId, \"-\"){\r\n            // is address. convert to key id\r\n            $RecipientId = Sprintf(\"%v\", AddressToId($RecipientId))\r\n        }\r\n        \r\n        if Size($SenderId) > addressLen{\r\n            $SenderId = Sprintf(\"%v\", PubToID($SenderId))\r\n        }\r\n        if Size($RecipientId) > addressLen{\r\n            $RecipientId = Sprintf(\"%v\", PubToID($RecipientId))\r\n        }\r\n        \r\n        \r\n        var sender map\r\n        sender = DBFind(\"keys\").Where(\"id=?\", $SenderId).Row()\r\n        if !sender{\r\n            error \"tokenrefund_Transfer. Sender is invalid\"\r\n        }\r\n        if sender[\"blocked\"] == 1 {\r\n            error \"Sender blocked\"\r\n        }\r\n        if sender[\"amount\"] < $amount{\r\n            error Sprintf(\"The number of tokens of the sender (%v) is not enough\", sender[\"amount\"])\r\n        }\r\n    }\r\n    \r\n    action {\r\n        DBUpdate(\"keys\", Int($SenderId),\"-amount\", $amount)\r\n        DBUpdate(\"keys\", Int($RecipientId),\"+amount\", $amount)\r\n    }\r\n}",
            "Name": "tokenrefund_Transfer",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_AcceptAdminNotification{\r\n    data{\r\n        Id string\r\n    }\r\n\r\n    conditions{\r\n        $tokenrefund = DBFind(\"tokenrefund\").Where(\"id=?\", $Id).Row()\r\n        if !$tokenrefund{\r\n            error \"tokenrefund not found\"\r\n        }\r\n    }\r\n    action{\r\n        // admin Notification for transfering tokens\r\n        // Notification role id 1 == admin\r\n        var roleId closureType sender int\r\n        roleId = 1 // admin\r\n        closureType = 2 // multiple\r\n        sender = 1\r\n        var icon header body page string\r\n        icon = \"icon-envelope\"\r\n        header = \"tokenrefund: Accept decision\"\r\n        body = \"A vote for a return token is successfully completed\"\r\n        page = \"tokenrefund_accept\"\r\n        var params map\r\n        params[\"tokenrefund_id\"] = $Id\r\n\r\n        notifications_Send(\"rid,closure_type,sender,icon_name,text_header,text_body,page_name,params_map,member_id\", roleId, closureType, sender, icon, header, body, page, JSONEncode(params),0)\r\n    }\r\n}",
            "Name": "tokenrefund_AcceptAdminNotification",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_CheckCSSF{\r\n    conditions{\r\n        var isValid bool\r\n        if $role_id == 12 {\r\n            // Financial institution\r\n            isValid = true\r\n        }\r\n        if $role_id == 1 {\r\n            // Apla Consensus asbl\r\n            isValid = true\r\n        }\r\n        if !isValid {\r\n            error \"Condition is not valid\"\r\n        }\r\n    }\r\n    action{}\r\n}",
            "Name": "tokenrefund_CheckCSSF",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_Reject{\r\n    data{\r\n        Id string\r\n    }\r\n    \r\n    func unblockAccounts(victimId, attackerId string){\r\n        if victimId==0 {\r\n            error \"unblockAccounts. invalid victim key\"\r\n        }\r\n        if attackerId==0{\r\n            error \"unblockAccounts. invalid attacker key\"\r\n        }\r\n        DBUpdate(\"keys\", Int(victimId), \"blocked\", 0)\r\n        DBUpdate(\"keys\", Int(attackerId), \"blocked\", 0)\r\n    }\r\n    \r\n    conditions{\r\n        $tokenrefund = DBFind(\"tokenrefund\").Where(\"id=?\", $Id).Row()\r\n        if !$tokenrefund{\r\n            error \"tokenrefund not found\"\r\n        }\r\n    }\r\n    \r\n    action{\r\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\r\n        // status 3: closed; 1: return cancelled\r\n        DBUpdate(\"tokenrefund\", Int($tokenrefund[\"id\"]), \"status,result\", 3,1)\r\n    }\r\n}",
            "Name": "tokenrefund_Reject",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_SubjectSettings {\r\n    data {\r\n        votingID int\r\n        \r\n        roleID int\r\n        vacancies int\r\n        \r\n        contract_accept string \"optional\"\r\n        contract_accept_params string \"optional\"\r\n        contract_reject string \"optional\"\r\n        contract_reject_params string \"optional\"\r\n    }\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n    \r\n    conditions {\r\n        if $vacancies < 1 {\r\n            warning \"Number of vacancies can not be less than 1\"\r\n        }\r\n        \r\n        $voting = DBFind(\"votings\").Columns(\"optional,voting->type,flags->full_data\").Where(\"id=? and date_started > now()\", $votingID).Row()\r\n        \r\n        if !$voting {\r\n            warning \"Voting already started. Can not edit document\"\r\n        }\r\n        \r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning \"This vote is a system. Change settings not allowed\"\r\n        }\r\n        var role map\r\n        role = DBFind(\"roles\").Where(\"id=? and deleted=0\", $roleID).Row()\r\n        if !role {\r\n            warning \"Specified role not found\"\r\n        }\r\n        \r\n        // roles_types: 1. assigned_role, 2. elective_role, 3. system_role, 4. company_role\r\n        if !(role[\"role_type\"] == 2 || role[\"role_type\"] == 3) {\r\n            warning \"The chosen role is not elective or has been removed\"\r\n        }\r\n    }\r\n    \r\n    action {\r\n        var optional map\r\n        optional = safeJsonToMap($voting[\"optional\"])\r\n        \r\n        optional[\"contract_accept\"] = $contract_accept\r\n        optional[\"contract_accept_params\"] = safeJsonToMap($contract_accept_params)\r\n        optional[\"contract_reject\"] = $contract_reject\r\n        optional[\"contract_reject_params\"] = safeJsonToMap($contract_reject_params)\r\n        optional[\"role_id\"] = $roleID\r\n        optional[\"role_vacancies\"] = $vacancies\r\n        \r\n        DBUpdate(\"votings\", $votingID, \"optional\", optional)\r\n        \r\n        voting_SubjectCheckFulldata(\"votingID\", $votingID)\r\n    }\r\n}",
            "Name": "voting_SubjectSettings",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_Accept{\r\n    data{\r\n        Id string\r\n    }\r\n    func closeNotes(){\r\n        var notes array\r\n        notes = DBFind(\"notifications\").Where(\"page_name='voting_view' and page_params->voting_id=?\", $votingID)\r\n        var i int\r\n        while i < Len(notes){\r\n            var note map\r\n            note = notes[i]\r\n            var noteId int\r\n            noteId = Int(note[\"id\"])\r\n            notifications_Close(\"notific_id\", noteId)\r\n            i=i+1\r\n        }\r\n    }\r\n    func refundAmount(victimId, attackerId, amount string){\r\n        tokenrefund_Transfer(\"SenderId,RecipientId,Amount\", attackerId, victimId, amount)\r\n    }\r\n    func unblockAccounts(victimId, attackerId string){\r\n        if victimId==0 {\r\n            error \"unblockAccounts. invalid victim key\"\r\n        }\r\n        if attackerId==0{\r\n            error \"unblockAccounts. invalid attacker key\"\r\n        }\r\n        DBUpdate(\"keys\", Int(victimId), \"blocked\", 0)\r\n        DBUpdate(\"keys\", Int(attackerId), \"blocked\", 0)\r\n    }\r\n\r\n    conditions{\r\n        $tokenrefund = DBFind(\"tokenrefund\").Where(\"id=?\", $Id).Row()\r\n        if !$tokenrefund{\r\n            error \"tokenrefund not found\"\r\n        }\r\n        $votingID = $tokenrefund[\"voting_id\"]\r\n    }\r\n\r\n    action{\r\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\r\n        closeNotes()\r\n        if $tokenrefund[\"result\"] == 2 || $tokenrefund[\"status\"] == 3{\r\n            return\r\n        }\r\n        refundAmount($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"],$tokenrefund[\"amount\"])\r\n        // status 3: closed; result 2: the tokens returned\r\n        DBUpdate(\"tokenrefund\", Int($tokenrefund[\"id\"]), \"status,result\", 3,2)\r\n    }\r\n}",
            "Name": "tokenrefund_Accept",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_CheckDecision {\r\n    data {\r\n        votingID int\r\n    }\r\n    func runContract(cont, p string){\r\n        if Size(cont) > 0 {\r\n            var params map\r\n            if Size(p) > 0 {\r\n                params = JSONToMap(p)\r\n            }\r\n            CallContract(cont, params)\r\n        }\r\n    }\r\n    func percentPartOfTotal(part, total int) int {\r\n        if total == 0{ total = 1 }\r\n        var percent int\r\n        percent = Int((part * 100)/total)\r\n        if percent > 100 { percent = 100 }\r\n        return percent\r\n    }\r\n    func closeNotes(){\r\n        var notes array\r\n        notes = DBFind(\"notifications\").Where(\"page_name='voting_view' and page_params->voting_id=?\", $votingID)\r\n        var i int\r\n        while i < Len(notes){\r\n            var note map\r\n            note = notes[i]\r\n            var noteId int\r\n            noteId = Int(note[\"id\"])\r\n            notifications_Close(\"notific_id\", noteId)\r\n            i=i+1\r\n        }\r\n    }\r\n    conditions {\r\n        $voting_map = DBFind(\"votings\").Columns(\"voting->name,voting->type,voting->quorum,voting->type_decision,flags->success,progress->number_voters,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Where(\"id=? and (CAST(progress->percent_voters as INTEGER)>=CAST(voting->quorum as INTEGER) or date_ended<now())\", $votingID).Row()\r\n        if !$voting_map {\r\n            warning \"Voting has not expired. Try again later, please\"\r\n        }\r\n\r\n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id=$\", $votingID).One(\"id\")\r\n        if !$subject_id {\r\n            warning \"Subject of voting is not found\"\r\n        }\r\n\r\n        $voting_name = $voting_map[\"voting.name\"]\r\n        $voting_type = Int($voting_map[\"voting.type\"]) //system or custom\r\n        $quorum = Int($voting_map[\"voting.quorum\"])\r\n        $type_decision = Int($voting_map[\"voting.type_decision\"])\r\n        $optional_role_id = Int($voting_map[\"optional.role_id\"])\r\n        $number_role_vacancies = Int($voting_map[\"optional.role_vacancies\"])\r\n        $number_voters = Int($voting_map[\"progress.number_voters\"]) // already voted\r\n        $contract_accept = $voting_map[\"optional.contract_accept\"]\r\n        $contract_reject = $voting_map[\"optional.contract_reject\"]\r\n        $param_accept = $voting_map[\"optional.contract_accept_params\"]\r\n        $param_reject = $voting_map[\"optional.contract_reject_params\"]\r\n        $flag_success = $voting_map[\"flags.success\"]\r\n    }\r\n\r\n    action {\r\n        // if notifications have been sent, then close it\r\n        var notes array\r\n        notes = DBFind(\"notifications\").Where(\"page_name='voting_view' and page_params::jsonb->voting_id=? and closed=0\", $votingID)\r\n        var i int\r\n        while i < Len(notes) {\r\n            var note map\r\n            note = notes[i]\r\n            notifications_Close(\"notific_id\", Int(note[\"id\"]))\r\n            i = i + 1\r\n        }\r\n\r\n        var percent_voters, flag_decision int\r\n        flag_decision = -2 // decision can not be made (not enough participants to make a decision)\r\n        if $flag_success == 1 { //now enough participants to make a decision\r\n\r\n            if $type_decision == 1 || $type_decision == 2 {\r\n                var candidates_added_count int\r\n                candidates_added_count = 0 // candidates who have already been added\r\n                flag_decision = -1 // none of the candidates has been added yet\r\n\r\n                var subjects array\r\n                subjects = DBFind(\"votings_subject\").Columns(\"voting_id,number_accept,subject->member_id,subject->member_name,subject->image_id\").Where(\"voting_id=$\", $votingID).Order(\"number_accept DESC\")\r\n                i = 0\r\n                while i < Len(subjects) {\r\n                    var subject map\r\n                    subject = subjects[i]\r\n\r\n                    // if there are still vacancies\r\n                    if candidates_added_count < $number_role_vacancies {\r\n                        percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\r\n\r\n                        if percent_voters >= $quorum {\r\n                            // added candidate to the role\r\n                            var role map\r\n                            role = DBFind(\"roles\").Columns(\"id,role_type,role_name,image_id\").Where(\"id=$\", $optional_role_id).Row()\r\n                            if role {\r\n                                var member, assignedMember map\r\n                                member[\"member_id\"] = subject[\"subject.member_id\"]\r\n                                assignedMember = DBFind(\"roles_participants\").Where(\"member->member_id=? and role->id=? and deleted=0\", member[\"member_id\"], role[\"id\"]).Row()\r\n\r\n                                if !assignedMember {\r\n                                    member[\"member_name\"] = subject[\"subject.member_name\"]\r\n                                    member[\"image_id\"] = subject[\"subject.image_id\"]\r\n\r\n                                    var rolePart map\r\n                                    rolePart[\"id\"] = role[\"id\"]\r\n                                    rolePart[\"type\"] = role[\"role_type\"]\r\n                                    rolePart[\"name\"] = role[\"role_name\"]\r\n                                    rolePart[\"image_id\"] = role[\"image_id\"]\r\n\r\n                                    var appointed map\r\n                                    appointed[\"voting_id\"] = $votingID\r\n                                    appointed[\"voting_name\"] = $voting_name\r\n\r\n                                    // add a candidate to the role\r\n                                    DBInsert(\"roles_participants\", \"role,member,appointed,timestamp date_created\", rolePart, member, appointed, $block_time)\r\n\r\n                                    candidates_added_count = candidates_added_count + 1\r\n                                    // if at least one of the candidates was added to the role, then the voting decision is considered successful\r\n                                    flag_decision = 1\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    i = i + 1\r\n                }\r\n            }\r\n\r\n            if $type_decision == 3 {\r\n                var subject map\r\n                subject = DBFind(\"votings_subject\").Columns(\"id,number_accept\").Where(\"voting_id=$\", $votingID).Row()\r\n                if subject {\r\n                    percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\r\n                    if percent_voters >= $quorum {\r\n                        flag_decision = 1 // accepted\r\n                    } else {\r\n                        flag_decision = -1 // rejected\r\n                    }\r\n                }\r\n            }\r\n\r\n            if $type_decision == 4 {\r\n                var subject map\r\n                subject = DBFind(\"votings_subject\").Columns(\"id,number_accept,subject->table,subject->table_id,subject->column,subject->column_value\").Where(\"voting_id=$\", $votingID).Row()\r\n                if subject {\r\n                    percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\r\n                    if percent_voters >= $quorum {\r\n                        flag_decision = 1 // accepted\r\n\r\n                        var column string\r\n                        column = Str(subject[\"subject.column\"])\r\n                        $colValue = Str(subject[\"subject.column_value\"])\r\n                        // type of voting - custom\r\n                        if $voting_type == 1 {\r\n                            // ALWAYS CHECK THE PERMISSION\r\n                            var colType string\r\n                            colType = GetColumnType(subject[\"subject.table\"], column)\r\n                            if colType == \"number\"{\r\n                                $colValue = Int($colValue)\r\n                            }\r\n                            if colType == \"money\"{\r\n                                $colValue = Money($colValue)\r\n                            }\r\n                            if colType == \"double\" {\r\n                                $colValue = Float($colValue)\r\n                            }\r\n                            DBUpdate(subject[\"subject.table\"], Int(subject[\"subject.table_id\"]), column, $colValue)\r\n                        }\r\n\r\n                        // type of voting - system\r\n                        if $voting_type == 2 {\r\n                            @1UpdateSysParam(\"Name,Value,Conditions\", column, $colValue, \"\")\r\n                        }\r\n                    } else {\r\n                        flag_decision = -1 // rejected\r\n                    }\r\n                }\r\n            }\r\n\r\n            if $type_decision == 5 {\r\n                var subject map\r\n                subject = DBFind(\"votings_subject\").Columns(\"id,number_accept,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Where(\"voting_id=$\", $votingID).Row()\r\n                if subject {\r\n                    $contract_accept = subject[\"subject.contract_accept\"]\r\n                    $contract_reject = subject[\"subject.contract_reject\"]\r\n                    $param_accept = subject[\"subject.contract_accept_params\"]\r\n                    $param_reject = subject[\"subject.contract_reject_params\"]\r\n\r\n                    percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\r\n                    if percent_voters >= $quorum {\r\n                        flag_decision = 1 // accepted\r\n                    } else {\r\n                        flag_decision = -1 // rejected\r\n                    }\r\n                }\r\n            }\r\n\r\n            if flag_decision == 1 {\r\n                runContract($contract_accept, $param_accept)\r\n                closeNotes()\r\n            }\r\n            if flag_decision == -1 {\r\n                runContract($contract_reject, $param_reject)\r\n                closeNotes()\r\n            }\r\n        }\r\n\r\n        DBUpdate(\"votings\", $votingID, \"flags->decision\", flag_decision)\r\n    }\r\n}",
            "Name": "voting_CheckDecision",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_UpdateDataForGraphs {\r\n    data {\r\n        votingID int\r\n    }\r\n    \r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n  \r\n    func percentPartOfTotal(part, total int) int {\r\n        if total == 0{ total = 1 }\r\n        var percent int\r\n        percent = Int((part * 100)/total)\r\n        if percent > 100 { percent = 100 }\r\n        return percent\r\n    }\r\n    \r\n    conditions {\r\n        $voting = DBFind(\"votings\").Columns(\"flags,voting,progress\").Where(\"id=?\", $votingID).Row()\r\n        if !$voting {\r\n            warning \"Voting is not found\"\r\n        }\r\n    }\r\n    \r\n    action {\r\n        var progress voting map\r\n        progress = safeJsonToMap($voting[\"progress\"])\r\n        voting = safeJsonToMap($voting[\"voting\"])\r\n        \r\n        var flag_success percent_success percent_voters number_voters quorum  volume int\r\n        // increment count of voters\r\n        quorum = Int(voting[\"quorum\"])\r\n        volume = Int(voting[\"volume\"])\r\n        number_voters = Int(progress[\"number_voters\"]) + 1\r\n        percent_voters = percentPartOfTotal(number_voters, Int(progress[\"number_participants\"]))\r\n        percent_success = percentPartOfTotal(percent_voters, volume)\r\n        \r\n        // update the flag of success\r\n        if percent_success == 100 {\r\n            flag_success = 1\r\n        }\r\n        progress[\"percent_voters\"] = percent_voters\r\n        progress[\"percent_success\"] = percent_success\r\n        progress[\"number_voters\"] = number_voters\r\n        \r\n        DBUpdate(\"votings\", $votingID, \"progress,flags->success\", progress, flag_success)\r\n        \r\n        if (percent_voters >= quorum && quorum > 50 && percent_voters >= volume) || percent_voters == 100 {\r\n            // if a quorum is more than 50% we can immediately make the decision\r\n            // OR\r\n            // if all participants have voted we can not wait until the end of the voting period\r\n            \r\n            voting_CheckDecision(\"votingID\", $votingID)\r\n        }\r\n    }\r\n}",
            "Name": "voting_UpdateDataForGraphs",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_AcceptCandidates {\r\n    data {\r\n        votingID int\r\n        candidateID int\r\n    }\r\n    \r\n    conditions {\r\n        $voting_map = DBFind(\"votings\").Columns(\"id,flags\").Where(\"id=?\", $votingID).Row()\r\n        if !$voting_map {\r\n            warning \"Voting is not found\"\r\n        }\r\n        \r\n        $subject_map = DBFind(\"votings_subject\").Where(\"voting_id=$ and subject->member_id=$\", $votingID, $candidateID).Row()\r\n        if !$subject_map {\r\n            warning \"Subject of voting is not found\"\r\n        }\r\n        \r\n        $participant_id = DBFind(\"votings_participants\").Where(\"voting_id=$ and member->member_id=$\", $votingID, $key_id).One(\"id\")\r\n        if !$participant_id {\r\n            warning \"You are not a participant in this voting\"\r\n        }\r\n    }\r\n    \r\n    action {\r\n        var flags map\r\n        flags = JSONToMap($voting_map[\"flags\"])\r\n        // if notifications have been sent, then close it\r\n        if flags[\"notifics\"] == 1 {\r\n            \r\n            $notific_id = DBFind(\"notifications\").Where(\"recipient->member_id=$ and page_name=$ and page_params->voting_id=$ and closed=$\", $key_id, \"voting_view\", $votingID, 0).One(\"id\")\r\n            \r\n            if $notific_id {\r\n                notifications_Close(\"notific_id\", Int($notific_id))\r\n            }\r\n        }\r\n        \r\n        // check the decision\r\n        if flags[\"decision\"] == 1 {\r\n            warning \"Decision was taken. Voting is now not possible\"\r\n        }\r\n        \r\n        // check start-end of voting time\r\n        var voting_start, voting_end string\r\n        voting_start = DBFind(\"votings\").Where(\"id=$ and date_started < now()\", $votingID).One(\"id\")\r\n        voting_end = DBFind(\"votings\").Where(\"id=$ and date_ended > now()\", $votingID).One(\"id\")\r\n        if !voting_start {\r\n            warning \"Voting has not yet begun. Try again later, please\"\r\n        }\r\n        if !voting_end {\r\n            warning \"Voting has expired. Voting is now not possible\"\r\n        }\r\n        \r\n        // write the result of the voting\r\n        DBUpdate(\"votings_participants\", Int($participant_id), \"timestamp decision_date,decision\", $block_time, $candidateID)\r\n        \r\n        // increment count of accept\r\n        DBUpdate(\"votings_subject\", Int($subject_map[\"id\"]), \"+number_accept\", 1)\r\n        \r\n        voting_UpdateDataForGraphs(\"votingID\", $votingID)\r\n    }\r\n}",
            "Name": "voting_AcceptCandidates",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_SendNotifics {\r\n    data {\r\n        votingID int\r\n    }\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n    conditions {\r\n        $voting = DBFind(\"votings\").Columns(\"id,date_ended\").Where(\"id=$ and date_ended > now()\", $votingID).One(\"id\")\r\n        if !$voting {\r\n            warning \"Voting has expired. Notifications can not be sent\"\r\n        }\r\n        \r\n        $voting = DBFind(\"votings\").Columns(\"voting->name,creator->member_id,flags->notifics,flags,date_started\").Where(\"id=? and date_started > now()\", $votingID).Row()\r\n        if !$voting {\r\n            warning \"Voting has not yet begun. Try again later, please\"\r\n        }\r\n        if $voting[\"creator.member_id\"] != $key_id {\r\n            warning \"You are not the creator of the voting\"\r\n        }\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            warning \"Notifications have already been sent\"\r\n        }\r\n        \r\n        $voting_name = $voting[\"voting.name\"]\r\n    }\r\n    \r\n    action {\r\n        var participants array\r\n        participants = DBFind(\"votings_participants\").Where(\"voting_id=? and decision=0\", $votingID)\r\n        var i int\r\n        while i < Len(participants) {\r\n            var participant member params map\r\n            participant = participants[i]\r\n            member = safeJsonToMap(participant[\"member\"])\r\n            params[\"voting_id\"] = $votingID\r\n            notifications_Send(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,rid,closure_type\", Int(member[\"member_id\"]), 1, \"fa-check\", \"Voting\", $voting_name, \"voting_view\", JSONEncode(params), 0, 0)\r\n            \r\n            i = i + 1\r\n        }\r\n        \r\n        DBUpdate(\"votings\", $votingID, \"flags->notifics\", 1)\r\n    }\r\n}",
            "Name": "voting_SendNotifics",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_Delete {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    conditions {\r\n        var voting map\r\n        voting = DBFind(\"votings\").Columns(\"id\").Where(\"id=? and creator->member_id=? and (date_started>now() or progress->number_participants='0' or flags->full_data='0')\", $votingID, $key_id).Row()\r\n        if !voting {\r\n            warning \"Delete voting impossible\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"votings\", $votingID, \"deleted\", 1)\r\n        var notes array\r\n        notes = DBFind(\"notifications\").Where(\"page_name='voting_view' and page_params->voting_id=?\", $votingID)\r\n        var i int\r\n        while i < Len(notes){\r\n            var note map noteId int\r\n            note = notes[i]\r\n            noteId = Int(note[\"id\"])\r\n            notifications_Close(\"notific_id\", noteId)\r\n            i=i+1\r\n        }\r\n    }\r\n}",
            "Name": "voting_Delete",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_InstallTemplates{\r\n    data{}\r\n    func applyTemplate(t map){\r\n        var i int columns values array\r\n        columns = SortedKeys(t)\r\n        while i<Len(columns){\r\n            values = Append(values, t[columns[i]])\r\n            i=i+1\r\n        }\r\n        DBInsert(\"voting_templates\", Join(columns, \",\"), ...values)\r\n    }\r\n    conditions{}\r\n\r\n    action{\r\n        var template map\r\n        // common\r\n        template[\"quorum\"] = 51\r\n        template[\"volume\"] = 70\r\n        template[\"accept_params\"] = \"\"\r\n        template[\"reject_params\"] = \"\"\r\n        template[\"type\"] = \"law\"\r\n        template[\"voters\"] = 3 // Role: Apla Consensus asbl\r\n        template[\"type_participants\"] = 3 // by Role\r\n\r\n        // validator\r\n        template[\"title\"] = \"Voting for Validator\"\r\n        template[\"init_contract\"] = \"sysparams_StartVotingValidator\"\r\n        template[\"contract_accept\"] = \"sysparams_AcceptValidator\"\r\n        template[\"contract_reject\"] = \"\"\r\n        template[\"vacancies\"] = 1\r\n        template[\"candidates\"] = 5 // Role: Validator\r\n        template[\"type_decision\"] = 2\r\n        template[\"type_voting\"] = 2\r\n        template[\"subject\"] = \"Validator\"\r\n        applyTemplate(template)\r\n\r\n        // sysparam\r\n        template[\"title\"] = \"Voting for System param value\"\r\n        template[\"init_contract\"] = \"\"\r\n        template[\"contract_accept\"] = \"\"\r\n        template[\"contract_reject\"] = \"\"\r\n        template[\"vacancies\"] = 0\r\n        template[\"candidates\"] = 0\r\n        template[\"type_decision\"] = 4\r\n        template[\"type_voting\"] = 2\r\n        template[\"subject\"] = \"System param\"\r\n        applyTemplate(template)\r\n\r\n        // valued ecosystem\r\n        template[\"title\"] = \"Voting for Valued Ecosystem\"\r\n        template[\"init_contract\"] = \"\"\r\n        template[\"contract_accept\"] = \"\"\r\n        template[\"contract_reject\"] = \"\"\r\n        template[\"vacancies\"] = 0\r\n        template[\"candidates\"] = 0\r\n        template[\"type_decision\"] = 4\r\n        template[\"type_voting\"] = 1\r\n        template[\"subject\"] = \"Valued ecosystem\"\r\n        applyTemplate(template)\r\n\r\n        // tokenrefund\r\n        template[\"title\"] = \"Token Refund\"\r\n        template[\"init_contract\"] = \"\"\r\n        template[\"contract_accept\"] = \"tokenrefund_Accept\"\r\n        template[\"contract_reject\"] = \"tokenrefund_Reject\"\r\n        template[\"vacancies\"] = 0\r\n        template[\"candidates\"] = 0\r\n        template[\"type_decision\"] = 5\r\n        template[\"type_voting\"] = 2\r\n        template[\"subject\"] = \"Token refund\"\r\n        applyTemplate(template)\r\n    }\r\n}",
            "Name": "voting_InstallTemplates",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_Invite {\r\n    data {\r\n        votingID int\r\n        var_id int //0, member_id, role_id\r\n    }\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n    func addVotingMember(fullMember map, votingId int) {\r\n        var member map\r\n        member[\"member_id\"] = fullMember[\"id\"]\r\n        member[\"member_name\"] = IdToAddress(Int(fullMember[\"id\"]))\r\n        DBInsert(\"votings_participants\", \"voting_id,member\", votingId, member)\r\n    }\r\n    conditions {\r\n        $voting = DBFind(\"votings\").Columns(\"progress,progress->number_participants,voting->type_participants,voting->type,id,date_ended\").Where(\"id=$ and date_ended > now()\", $votingID).Row()\r\n        if !$voting {\r\n            warning \"Voting has expired. Can not add new participants\"\r\n        }\r\n\r\n        $type_participants = $voting[\"voting.type_participants\"]\r\n        $type_voting = $voting[\"voting.type\"]\r\n        $number_participants = Int($voting[\"progress.number_participants\"])\r\n\r\n        if $number_participants > 1 && $type_voting == 2 {\r\n            warning \"This vote is a system. Add new participants are not possible\"\r\n        }\r\n        var isAdded string\r\n        if $type_participants == 2 {\r\n            isAdded = DBFind(\"votings_participants\").Where(\"voting_id=$ and member->member_id=$\", $votingID, $var_id).One(\"id\")\r\n            if isAdded {\r\n                warning \"Member has already been added before\"\r\n            }\r\n        }\r\n\r\n        if $type_participants == 3 {\r\n            isAdded = DBFind(\"votings_participants\").Where(\"voting_id=$\", $votingID).One(\"id\")\r\n            if isAdded {\r\n                warning \"Voting participants have already been added before\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var i int\r\n        if $type_participants == 1 { // everybody\r\n            var members array\r\n            members = DBFind(\"members\")\r\n            while i < Len(members) {\r\n                addVotingMember(members[i], $votingID)\r\n                $number_participants = $number_participants + 1\r\n                i = i + 1\r\n            }\r\n        }\r\n        if $type_participants == 2 { // manual\r\n            var member map\r\n            member = DBFind(\"keys\").Where(\"id=?\", $var_id).Row()\r\n            if member {\r\n                addVotingMember(member, $votingID)\r\n                $number_participants = $number_participants + 1\r\n            }\r\n        }\r\n        if $type_participants == 3 { // role\r\n            var roles array\r\n            roles = DBFind(\"roles_participants\").Where(\"role->id=$ and deleted=0\", $var_id).Order(\"id\")\r\n            while i < Len(roles) {\r\n                var role map\r\n                role = roles[i]\r\n                DBInsert(\"votings_participants\", \"voting_id,member\", $votingID, role[\"member\"])\r\n                $number_participants = $number_participants + 1\r\n                i = i + 1\r\n            }\r\n        }\r\n\r\n        if $type_participants == 3 {\r\n            DBUpdate(\"votings\", $votingID, \"progress->number_participants,voting->role_id\", $number_participants, $var_id)\r\n        }else{\r\n            DBUpdate(\"votings\", $votingID, \"progress->number_participants\", $number_participants)\r\n        }\r\n        voting_SendNotifics(\"votingID\", $votingID)\r\n    }\r\n}",
            "Name": "voting_Invite",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_AcceptDecision {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    conditions {\r\n        $voting = DBFind(\"votings\").Columns(\"id,flags->decision,flags->notifics,voting->type_participants,voting->role_id\").Where(\"id=?\", $votingID).Row()\r\n        if !$voting {\r\n            warning \"Voting is not found\"\r\n        }\r\n        if $voting[\"voting.type_participants\"] == 3{\r\n            if $voting[\"voting.role_id\"] != $role_id{\r\n                warning \"Incorrect role for voting\"\r\n            }\r\n        }\r\n\r\n        $subject = DBFind(\"votings_subject\").Where(\"voting_id=$\", $votingID).Row()\r\n        if !$subject {\r\n            warning \"Subject of voting is not found\"\r\n        }\r\n\r\n        $participant_id = DBFind(\"votings_participants\").Where(\"voting_id=$ and member->member_id=$\", $votingID, $key_id).One(\"id\")\r\n        if !$participant_id {\r\n            warning \"You are not a participant in this voting\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        // if notifications have been sent, then close it\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            var noteId string\r\n            noteId = DBFind(\"notifications\").Where(\"recipient->member_id=$ and page_name=$ and page_params->voting_id=$ and closed=$\", $key_id, \"voting_view\", $votingID, 0).One(\"id\")\r\n            if noteId {\r\n                notifications_Close(\"notific_id\", Int(noteId))\r\n            }\r\n        }\r\n\r\n        // check the decision\r\n        if $voting[\"flags.decision\"] == 1 {\r\n            warning \"Decision was taken. Voting is now not possible\"\r\n        }\r\n\r\n        // check start-end of voting time\r\n        var voting_start voting_end string\r\n        voting_start = DBFind(\"votings\").Where(\"id=$ and date_started < now()\", $votingID).One(\"id\")\r\n        voting_end = DBFind(\"votings\").Where(\"id=$ and date_ended > now()\", $votingID).One(\"id\")\r\n        if !voting_start {\r\n            warning \"Voting has not yet begun. Try again later, please\"\r\n        }\r\n        if !voting_end {\r\n            warning \"Voting has expired. Voting is now not possible\"\r\n        }\r\n\r\n        DBUpdate(\"votings_participants\", Int($participant_id), \"timestamp decision_date,decision\", $block_time, 1)\r\n\r\n        // increment count of accept\r\n        DBUpdate(\"votings_subject\", Int($subject[\"id\"]), \"+number_accept\", 1)\r\n\r\n        voting_UpdateDataForGraphs(\"votingID\", $votingID)\r\n    }\r\n}",
            "Name": "voting_AcceptDecision",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_CreateNew {\r\n    data {\r\n        voting_name string\r\n        voting_type int\r\n        type_participants int\r\n        type_decision int\r\n\r\n        volume int\r\n        quorum int\r\n\r\n        description string \"optional\"\r\n        interval string \"optional\"\r\n        start_date string \"optional\"\r\n        start_time string \"optional\"\r\n        end_date string \"optional\"\r\n        end_time string \"optional\"\r\n    }\r\n    func trimZeroTime(s string) string{\r\n        if Contains(s, \"T00:00:00Z\"){\r\n            s = s Replace(s, \"T00:00:00Z\", \"\")\r\n        }\r\n        return s\r\n    }\r\n    func dateAddTime(d, t string) string {\r\n        return Sprintf(\"%v %v\", trimZeroTime(d), t)\r\n    }\r\n    func isCalledFromPage() bool{\r\n        return $stack[0] == Sprintf(\"@%v%v\", $ecosystem_id, $this_contract)\r\n    }\r\n    func checkDatetimes(){\r\n        if Size($date_started) < 10 || Size($date_ended) < 10 { // invalid datetimes\r\n            if isCalledFromPage(){\r\n                var errs array\r\n                if Size($start_date) < 1 {\r\n                    errs = Append(errs, \"starting date\")\r\n                }\r\n                if Size($start_time) < 1 {\r\n                    errs = Append(errs, \"starting time\")\r\n                }\r\n                if Size($end_date) < 1 {\r\n                    errs = Append(errs, \"ending date\")\r\n                }\r\n                if Size($end_time) < 1 {\r\n                    errs = Append(errs, \"ending time\")\r\n                }\r\n                error Sprintf(\"Error create voting: %v not found\", Join(errs, \", \"))\r\n            }else{\r\n                $timestamped = true\r\n                $date_started = $time + 2 * 60\r\n                $interval = Int($interval)\r\n                if $interval == 0 {\r\n                    $interval = 3\r\n                }\r\n                $date_ended = $date_started + 3600 * 24 * $interval\r\n            }\r\n        }\r\n    }\r\n    conditions {\r\n        if ($volume < 50) || ($volume > 100) {\r\n            warning Sprintf(\"Volume [%v] should be in the range from 50 to 100\", $volume)\r\n        }\r\n\r\n        if ($quorum < 5) || ($quorum > 100) {\r\n            warning Sprintf(\"Quorum [%v] should be in the range from 5 to 100\", $quorum)\r\n        }\r\n\r\n        $key = DBFind(\"keys\").Where(\"id=$\", $key_id).Row()\r\n        if !$key {\r\n            warning \"You are not a member of the ecosystem\"\r\n        }\r\n        $timestamped = false\r\n        $date_started = dateAddTime($start_date, $start_time)\r\n        $date_ended = dateAddTime($end_date, $end_time)\r\n        checkDatetimes()\r\n    }\r\n\r\n    action {\r\n        var voting progress flags creator map votingId int\r\n        voting[\"name\"] = $voting_name\r\n        voting[\"type\"] = $voting_type\r\n        voting[\"description\"] = $description\r\n        voting[\"type_participants\"] = $type_participants\r\n        voting[\"type_decision\"] = $type_decision\r\n        voting[\"volume\"] = $volume\r\n        voting[\"quorum\"] = $quorum\r\n\r\n        progress[\"number_participants\"] = \"0\"\r\n        progress[\"number_voters\"] = \"0\"\r\n        progress[\"percent_success\"] = \"0\"\r\n        progress[\"percent_voters\"] = \"0\"\r\n\r\n        flags[\"success\"] = \"0\"\r\n        flags[\"decision\"] = \"0\"\r\n        flags[\"full_data\"] = \"0\"\r\n        flags[\"notifics\"] = \"0\"\r\n\r\n        creator[\"member_id\"] = $key[\"id\"]\r\n        creator[\"member_name\"] = IdToAddress($key_id)\r\n        if $timestamped {\r\n            votingId = DBInsert(\"votings\", \"voting,progress,flags,creator,timestamp date_started,timestamp date_ended\", voting, progress, flags, creator, $date_started, $date_ended)\r\n        }else{\r\n            votingId = DBInsert(\"votings\", \"voting,progress,flags,creator,date_started,date_ended\", voting, progress, flags, creator, $date_started, $date_ended)\r\n        }\r\n\r\n        // if all members are voting participants\r\n        if $type_participants == 1 {\r\n            voting_Invite(\"votingID,var_id\", votingId, 0)\r\n        }\r\n        $result = votingId\r\n    }\r\n}",
            "Name": "voting_CreateNew",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_SubjectCandidates {\r\n    data {\r\n        votingID int\r\n        memberID int\r\n    }\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n    \r\n    conditions {\r\n        $voting = DBFind(\"votings\").Columns(\"id,date_started,optional,voting->type,flags->full_data\").Where(\"id=? and date_started > now()\", $votingID).Row()\r\n        if !$voting {\r\n            warning \"Voting already started. Can not edit document\"\r\n        }\r\n        \r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning \"This vote is a system. Change settings not allowed\"\r\n        }\r\n        \r\n        if $memberID == 0 {\r\n            $memberID = $key_id\r\n        }\r\n        \r\n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id=$ and subject->member_id=$\", $votingID, $memberID).One(\"id\")\r\n        if $subject_id {\r\n            warning \"This candidature for this role has already been added before\"\r\n        }\r\n        \r\n        $member = DBFind(\"members\").Where(\"id = $\", $memberID).Row()\r\n        if !$member {\r\n            warning \"Member not found\"\r\n        }\r\n    }\r\n    \r\n    action {\r\n        \r\n        var subject map\r\n        subject[\"member_id\"] = $member[\"id\"]\r\n        subject[\"member_name\"] = $member[\"member_name\"]\r\n        subject[\"image_id\"] = $member[\"image_id\"]\r\n        \r\n        DBInsert(\"votings_subject\", \"voting_id,subject\", $votingID, subject)\r\n        \r\n        var optional map\r\n        optional = safeJsonToMap($voting[\"optional\"])\r\n        \r\n        var number_candidates int\r\n        if optional[\"number_candidates\"]{\r\n            number_candidates = Int(optional[\"number_candidates\"])\r\n            number_candidates = number_candidates + 1\r\n        } else {\r\n            number_candidates = 1\r\n        }\r\n        \r\n        DBUpdate(\"votings\", $votingID, \"optional->number_candidates\", number_candidates)\r\n    }\r\n}",
            "Name": "voting_SubjectCandidates",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_SubjectContract {\r\n    data {\r\n        votingID int\r\n        \r\n        contract_accept string\r\n        contract_accept_params string \"optional\"\r\n        \r\n        contract_reject string\r\n        contract_reject_params string \"optional\"\r\n    }\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n    \r\n    conditions {\r\n        $voting = DBFind(\"votings\").Columns(\"id,date_started,voting->type,flags->full_data\").Where(\"id=? and date_started > now()\", $votingID).Row()\r\n        if !$voting {\r\n            warning \"Voting already started. Can not edit document\"\r\n        }\r\n        \r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning \"This vote is a system. Change settings not allowed\"\r\n        }\r\n    }\r\n    \r\n    action {\r\n        var accept_params, reject_params map\r\n        accept_params = safeJsonToMap($contract_accept_params)\r\n        reject_params = safeJsonToMap($contract_reject_params)\r\n\r\n        var subject map\r\n        subject[\"contract_accept\"] = $contract_accept\r\n        subject[\"contract_accept_params\"] = accept_params\r\n        subject[\"contract_reject\"] = $contract_reject\r\n        subject[\"contract_reject_params\"] = reject_params\r\n        \r\n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id = $\", $votingID).One(\"id\")\r\n        if !$subject_id {\r\n            DBInsert(\"votings_subject\", \"voting_id,subject\", $votingID, subject)\r\n        } else {\r\n            DBUpdate(\"votings_subject\", Int($subject_id), \"subject\", subject)\r\n        }\r\n        \r\n        voting_SubjectCheckFulldata(\"votingID\", $votingID)\r\n    }\r\n}",
            "Name": "voting_SubjectContract",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_Start{\r\n    data{\r\n        VictimAccount string\r\n        SuspectAccount string\r\n        Amount int\r\n        Note string\r\n    }\r\n    func blockAccounts(victimId, attackerId int){\r\n        if victimId==0 {\r\n            error \"unblockAccounts. invalid victim key\"\r\n        }\r\n        if attackerId==0{\r\n            error \"unblockAccounts. invalid attacker key\"\r\n        }\r\n        if DBFind(\"keys\").Where(\"blocked=1 and (id=? or id=?)\", victimId, attackerId).Row(){\r\n            error \"Accounts already blocked\"\r\n        }\r\n        DBUpdate(\"keys\", victimId, \"blocked\", 1)\r\n        DBUpdate(\"keys\", attackerId, \"blocked\", 1)\r\n    }\r\n    func getKeyId(test string) int{\r\n        if Len(Split(test, \"-\")) > 1 {\r\n            // probably it is address\r\n            return AddressToId(test)\r\n        }\r\n        if \"invalid\" != IdToAddress(Int(test)){\r\n            // probably it is key_id\r\n            return Int(test)\r\n        }\r\n        return 0\r\n    }\r\n\r\n    conditions{\r\n        if $Amount <= 0{\r\n            error \"Amount not valid\"\r\n        }\r\n        if Size($Note) == 0{\r\n            error \"Please add description\"\r\n        }\r\n        var victim attacker int\r\n        victim = getKeyId($VictimAccount)\r\n        attacker = getKeyId($SuspectAccount)\r\n        if victim == 0{\r\n            error \"Victim address not valid\"\r\n        }\r\n        if attacker == 0{\r\n            error \"Suspect address not valid\"\r\n        }\r\n        $victimId = victim\r\n        $attackerId = attacker\r\n\r\n        var app_id template_id int\r\n        app_id = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\r\n        template_id = Int(AppParam(app_id,\"voting_tokenrefund_template_id\"))\r\n        if template_id <= 0 {\r\n            warning \"Template id not found\"\r\n        }\r\n\r\n        $template = DBFind(\"voting_templates\").Where(\"id=?\", template_id).Row()\r\n        $votersRoleId = Int($template[\"voters\"])\r\n        $votingName = $template[\"title\"]\r\n        $typeParticipants = Int($template[\"type_participants\"])\r\n        $typeDecision = Int($template[\"type_decision\"])\r\n        $typeVoting = Int($template[\"type_voting\"])\r\n        $volume = Int($template[\"volume\"])\r\n        $quorum = Int($template[\"quorum\"])\r\n        $contractAccept = $template[\"contract_accept\"]\r\n        $contractReject = $template[\"contract_reject\"]\r\n        var initContract string\r\n        initContract = $template[\"init_contract\"]\r\n        if Size(initContract) > 4 { // greater then \"NULL\"\r\n            var m map\r\n            CallContract(initContract, m)\r\n        }\r\n        $desc = Sprintf(\"%v (victim: %v, attacker: %v, amount: %v)\", $votingName, $victimId, $attackerId, $Amount)\r\n\r\n        if !DBFind(\"roles_participants\").Where(\"role->id=? and deleted=0\", $votersRoleId).One(\"id\") {\r\n            warning Sprintf(\"Role (id: %v) does not contain members\", $votersRoleId)\r\n        }\r\n    }\r\n\r\n    action{\r\n        blockAccounts($victimId,$attackerId)\r\n        var votingId status result int, params map, paramsJSON interval_days string\r\n        interval_days = \"3\"\r\n        votingId = voting_CreateNew(\"voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval\", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $volume, $quorum, interval_days)\r\n\r\n        status = 1 // 0.Accounts blocked 1.Discussion 2.Vote 3.Closed\r\n        result = 0 // 0. discussion and voting 1. cancelled 2. the tokens returned\r\n        params[\"Id\"] = DBInsert(\"tokenrefund\", \"victim_key_id,attacker_key_id,amount,note,validator_key_id,blocked_at,voting_id,status,result\", $victimId, $attackerId, $Amount, $Note, $key_id, \"Now()\", votingId,status,result)\r\n        paramsJSON = JSONEncode(params)\r\n\r\n        voting_SubjectContract(\"votingID,contract_reject,contract_accept,contract_reject_params,contract_accept_params\", votingId, $contractReject, $contractAccept, paramsJSON, paramsJSON)\r\n\r\n        voting_Invite(\"votingID,var_id\", votingId, $votersRoleId)\r\n    }\r\n}",
            "Name": "tokenrefund_Start",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_SubjectDocument {\r\n    data {\r\n        votingID int\r\n        text_document string\r\n        \r\n        contract_accept string \"optional\"\r\n        contract_accept_params string \"optional\"\r\n        contract_reject string \"optional\"\r\n        contract_reject_params string \"optional\"\r\n    }\r\n    \r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n    \r\n    conditions {\r\n        $voting = DBFind(\"votings\").Columns(\"id,date_started,flags->full_data,voting->type,optional\").Where(\"id=? and date_started > now()\", $votingID).Row()\r\n        if !$voting {\r\n            warning \"Voting already started. Can not edit document\"\r\n        }\r\n        \r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning \"This vote is a system. Change settings not allowed\"\r\n        }\r\n    }\r\n    \r\n    action {\r\n        var subject map\r\n        subject[\"text\"] = $text_document\r\n        subject[\"hash\"] = Sha256($text_document)\r\n        \r\n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id = $\", $votingID).One(\"id\")\r\n        if !$subject_id {\r\n            DBInsert(\"votings_subject\", \"voting_id,subject\", $votingID, subject)\r\n        } else {\r\n            DBUpdate(\"votings_subject\", Int($subject_id), \"subject\", subject)\r\n        }\r\n        var accept_params reject_params map\r\n        accept_params = safeJsonToMap($contract_accept_params)\r\n        reject_params = safeJsonToMap($contract_reject_params)\r\n\r\n        var optional map\r\n        optional = safeJsonToMap($voting[\"optional\"])\r\n        \r\n        optional[\"contract_accept\"] = $contract_accept\r\n        optional[\"contract_accept_params\"] = accept_params\r\n        optional[\"contract_reject\"] = $contract_reject\r\n        optional[\"contract_reject_params\"] = reject_params\r\n        \r\n        DBUpdate(\"votings\", $votingID, \"optional\", optional)\r\n        \r\n        voting_SubjectCheckFulldata(\"votingID\", $votingID)\r\n    }\r\n}",
            "Name": "voting_SubjectDocument",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_SubjectFormal {\r\n    data {\r\n        votingID int\r\n        \r\n        description string \"optional\"\r\n        table_to_written string\r\n        row_id string\r\n        column_name string\r\n        written_value string\r\n        \r\n        contract_accept string \"optional\"\r\n        contract_accept_params string \"optional\"\r\n        contract_reject string \"optional\"\r\n        contract_reject_params string \"optional\"\r\n    }\r\n    \r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n    \r\n    conditions {\r\n        $voting = DBFind(\"votings\").Columns(\"id,date_started,flags->full_data,voting->type,optional\").Where(\"id=? and date_started > now()\", $votingID).Row()\r\n        if !$voting {\r\n            warning \"Voting already started. Can not edit document\"\r\n        }\r\n        \r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning \"This vote is a system. Change settings not allowed\"\r\n        }\r\n    }\r\n    \r\n    action {\r\n        var subject map\r\n        subject[\"description\"] = $description\r\n        subject[\"table\"] = $table_to_written\r\n        subject[\"table_id\"] = $row_id\r\n        subject[\"column\"] = $column_name\r\n        subject[\"column_value\"] = $written_value\r\n        \r\n        $subject_id = DBFind(\"votings_subject\").Where(\"voting_id = $\", $votingID).One(\"id\")\r\n        if !$subject_id {\r\n            DBInsert(\"votings_subject\", \"voting_id,subject\", $votingID, subject)\r\n        } else {\r\n            DBUpdate(\"votings_subject\", Int($subject_id), \"subject\", subject)\r\n        }\r\n        \r\n        var accept_params reject_params map\r\n        accept_params = safeJsonToMap($contract_accept_params)\r\n        reject_params = safeJsonToMap($contract_reject_params)\r\n        \r\n        var optional map\r\n        optional = safeJsonToMap($voting[\"optional\"])\r\n        optional[\"contract_accept\"] = $contract_accept\r\n        optional[\"contract_accept_params\"] = accept_params\r\n        optional[\"contract_reject\"] = $contract_reject\r\n        optional[\"contract_reject_params\"] = reject_params\r\n        \r\n        DBUpdate(\"votings\", $votingID, \"optional\", optional)\r\n        \r\n        voting_SubjectCheckFulldata(\"votingID\", $votingID)\r\n    }\r\n}",
            "Name": "voting_SubjectFormal",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_TemplateRun{\r\n    data{\r\n        TemplateId int\r\n        Duration int\r\n\r\n        KeyId int \"optional\"\r\n        TableWritten string \"optional\"\r\n        RowId string \"optional\"\r\n        ColumnName string \"optional\"\r\n        NewValue string \"optional\"\r\n        TextDocument string \"optional\"\r\n    }\r\n    func checkInput(value, name string){\r\n        if Size(value) == 0 || value == \"NULL\" {\r\n            warning Sprintf(\"%q not found\", name)\r\n        }\r\n    }\r\n    func emptyOrValue(value string) string{\r\n        if value == \"NULL\" {\r\n            value = \"\"\r\n        }\r\n        return value\r\n    }\r\n\r\n    conditions{\r\n        var template map\r\n        template = DBFind(\"voting_templates\").Where(\"id=?\",$TemplateId).Row()\r\n        if !template{\r\n            warning \"Voting template not found\"\r\n        }\r\n        if $KeyId != 0{\r\n            $keyFind = DBFind(\"keys\").Where(\"id=?\", $KeyId).Row()\r\n            if !$keyFind{\r\n                warning \"Key id not found\"\r\n            }\r\n        }\r\n        if $Duration <= 0{\r\n            $Duration = 3\r\n        }\r\n \r\n        var initContract string\r\n        initContract = template[\"init_contract\"]\r\n        $voters = template[\"voters\"]\r\n        $candidates = template[\"candidates\"]\r\n        $votingName = Sprintf(\"%v [template id:%v]\", template[\"title\"], $TemplateId)\r\n        $volume = Int(template[\"volume\"])\r\n        $quorum = Int(template[\"quorum\"])\r\n        $type_voting = Int(template[\"type_voting\"])\r\n        $participants = Int(template[\"type_participants\"])\r\n        $decision = Int(template[\"type_decision\"])\r\n        $vacancies = Int(template[\"vacancies\"])\r\n\r\n        if initContract != \"\" && initContract != \"NULL\"{\r\n            var initParam map\r\n            if $decision == 4 && $type_voting == 2 {\r\n                // voting for new value of sysparam\r\n                initParam[\"Name\"] = $ColumnName\r\n                initParam[\"Value\"] = $NewValue\r\n            }else{\r\n                initParam[\"KeyId\"] = $KeyId\r\n            }\r\n            CallContract(initContract, initParam)\r\n        }\r\n\r\n        $desc = Sprintf(\"template #%v\", $TemplateId)\r\n        if $type_voting < 1 || $type_voting > 2 {\r\n            warning \"Invalid type of voting\"\r\n        }\r\n        $contractAccept = emptyOrValue(template[\"contract_accept\"])\r\n        $acceptParams = emptyOrValue(template[\"accept_params\"])\r\n        $contractReject = emptyOrValue(template[\"contract_reject\"])\r\n        $rejectParams = emptyOrValue(template[\"reject_params\"])\r\n\r\n        if $decision == 1 || $decision == 2 {\r\n            // role-candidates\r\n            checkInput($candidates, \"Candidate role\")\r\n            var candidate map\r\n            candidate = DBFind(\"roles\").Where(\"id=? and deleted=0\", $candidates).Row()\r\n            if !candidate {\r\n                warning Sprintf(\"Candidates role (id: %v) not found\", $candidates)\r\n            }\r\n            $candidateId = Int(candidate[\"id\"])\r\n        }\r\n\r\n        if $decision == 3 {\r\n            // document approval\r\n            checkInput($TextDocument, \"TextDocument\")\r\n        }\r\n\r\n        if $decision == 4 {\r\n            // formal decision\r\n            // in the system vote need only a field and a value\r\n            checkInput($ColumnName, \"ColumnName\")\r\n            checkInput($NewValue, \"NewValue\")\r\n            if $type_voting == 2{\r\n                $desc = Sprintf(\"Parameter: %v, Value: %v\", $ColumnName, $NewValue)\r\n            }\r\n\r\n            if $type_voting == 1{\r\n                checkInput($TableWritten, \"TableWritten\")\r\n                checkInput($RowId, \"RowId\")\r\n                $desc = Sprintf(\"Table: %v, Column: %v, ID: %v, Value: %v\", $TableWritten, $ColumnName, $RowId, $NewValue)\r\n            }\r\n            if $RowId == \"\" || $RowId == \"NULL\"{\r\n                $RowId = 0\r\n            }\r\n\r\n        }\r\n        // check duplicated\r\n        if DBFind(\"votings\").Where(\"voting->name=? and flags->decision not in ('1', '-1') and deleted=0\", $votingName).Row(){\r\n            error \"Same voting already created\"\r\n        }\r\n\r\n\r\n        if $participants == 3 {\r\n            // if the type of the participants \"in role\" - check the role\r\n            var role map\r\n            role = DBFind(\"roles\").Where(\"id=? and deleted=0\", $voters).Row()\r\n            if !role {\r\n                warning Sprintf(\"Voters role (id: %v) not found\", $voters)\r\n            }\r\n            $roleId = Int(role[\"id\"])\r\n        }\r\n    }\r\n\r\n    action{\r\n        var votingId int\r\n        votingId = voting_CreateNew(\"voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval\", $votingName, $type_voting, $desc, $participants, $decision, $volume, $quorum, $Duration)\r\n\r\n        if votingId == 0 {\r\n            warning \"votingId is zero\"\r\n        }\r\n        // the default argument for Contract\r\n        var defaultParams string\r\n        defaultParams = Sprintf(`{\"VotingTemplateId\":\"%v\",\"KeyId\":\"%v\",\"VotingId\":\"%v\"}`, $TemplateId, $KeyId, votingId)\r\n\r\n        if Size($acceptParams) == 0{\r\n            $acceptParams = defaultParams\r\n        }\r\n        if Size($rejectParams) == 0{\r\n            $rejectParams = defaultParams\r\n        }\r\n\r\n        if $decision == 1 || $decision == 2{\r\n            // 1. Role candidates with the registration of participants on request\r\n            // 2. Role candidates with manual registration of the participants\r\n            voting_SubjectCandidates(\"votingID,memberID\", votingId, $KeyId)\r\n            voting_SubjectSettings(\"votingID,roleID,vacancies,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", votingId, $candidateId, $vacancies, $contractAccept, $acceptParams, $contractReject,$rejectParams)\r\n        }\r\n        if $decision == 3 {\r\n            // Document approval\r\n            voting_SubjectDocument(\"votingID,text_document,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", votingId,$TextDocument, $contractAccept, $acceptParams, $contractReject, $rejectParams)\r\n        }\r\n\r\n        if $decision == 4 {\r\n            // Formal decision\r\n            voting_SubjectFormal(\"votingID,description,table_to_written,row_id,column_name,written_value,contract_accept,contract_accept_params,contract_reject,contract_reject_params\",votingId, $desc, $TableWritten, $RowId, $ColumnName, $NewValue, $contractAccept, $acceptParams, $contractReject, $rejectParams)\r\n\r\n        }\r\n\r\n        if $decision == 5 {\r\n            // Execution of the contract\r\n            voting_SubjectContract(\"votingID,contract_accept,contract_accept_params,contract_reject,contract_reject_params\",votingId,$contractAccept, $acceptParams, $contractReject, $rejectParams)\r\n        }\r\n        if $participants == 3 {\r\n            // participants: \"by role\"\r\n            voting_Invite(\"votingID,var_id\", votingId, $roleId)\r\n        }\r\n        if $participants == 1 {\r\n            // if the participants are \"all\", the invite has already occurred in \"voting_CreateNew\"\r\n        }\r\n    }\r\n}",
            "Name": "voting_TemplateRun",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_StartNodeAdd{\r\n    data{\r\n        TcpAddress string\r\n        ApiAddress string\r\n        KeyId int\r\n        PubKey string\r\n        Duration int\r\n    }\r\n    func warn(name, detail string){\r\n        warning Sprintf(\"%v invalid (%v)\", name, detail)\r\n    }\r\n    func checkApiAddress(addr string){\r\n        var name string\r\n        name = \"API Address\"\r\n        if Size(addr) == 0 {\r\n            warn(name, \"size\")\r\n        }\r\n        if !(HasPrefix(addr, \"http://\") || HasPrefix(addr, \"https://\")) {\r\n            warn(name, \"protocol\")\r\n        }\r\n        if Contains(addr, \" \") {\r\n            warn(name, \"space\")\r\n        }\r\n        addr = Replace(addr, \"http://\", \"\")\r\n        addr = Replace(addr, \"https://\", \"\")\r\n        var parts array\r\n        if Contains(addr, \":\") {\r\n            parts = Split(addr, \":\")\r\n            if Len(parts) > 2 {\r\n                warn(name, \":\")\r\n            }\r\n            var port string\r\n            port = parts[1]\r\n            if port <= 0 {\r\n                warn(name, \"port\")\r\n            }\r\n            addr = parts[0]\r\n        }\r\n    }\r\n    func checkTcpAddress(addr string){\r\n        var name string\r\n        name = \"TCP Address\"\r\n        if Size(addr) == 0 {\r\n            warn(name, \"size\")\r\n        }\r\n        if Contains(addr, \" \") {\r\n            warn(name, \"space\")\r\n        }\r\n        var parts array\r\n        if Contains(addr, \":\") {\r\n            parts = Split(addr, \":\")\r\n            if Len(parts) > 2 {\r\n                warn(name, \":\")\r\n            }\r\n            var port string\r\n            port = parts[1]\r\n            if port <= 0 {\r\n                warn(name, \"port\")\r\n            }\r\n        }\r\n    }\r\n    func checkPub(pub string){\r\n        if PubToID(pub) == 0 {\r\n            warning \"Public key invalid\"\r\n        }\r\n    }\r\n    func checkKeyId(keyid int){\r\n        var existed map\r\n        existed = DBFind(\"keys\").Where(\"id=?\", keyid).Row()\r\n        if !existed {\r\n            warning \"Key id not found\"\r\n        }\r\n    }\r\n    func getNodesJSON() string{\r\n        var nodes string\r\n        nodes = SysParamString(\"full_nodes\")\r\n        if Size(nodes) < 100 {\r\n            nodes = \"[]\"\r\n        }\r\n        return nodes\r\n    }\r\n    func appendFirstNode(nodes array) array{\r\n        var first string firstNode map\r\n        first = AppParam($appId,\"first_node\")\r\n        if !HasPrefix(first, \"{\") || Size(first) < 100 {\r\n            warning \"Application parameter first_node not valid\"\r\n        }\r\n        firstNode = JSONDecode(first)\r\n        checkTcpAddress(firstNode[\"tcp_address\"])\r\n        checkApiAddress(firstNode[\"api_address\"])\r\n        checkKeyId(Int(firstNode[\"key_id\"]))\r\n        checkPub(firstNode[\"public_key\"])\r\n\r\n        nodes = Append(nodes, firstNode)\r\n        return nodes\r\n    }\r\n    conditions{\r\n        $appId = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\r\n        $templateId = Int(AppParam($appId,\"voting_sysparams_template_id\"))\r\n        if $templateId == 0 {\r\n            warning \"Template id not found\"\r\n        }\r\n        checkKeyId($KeyId)\r\n        checkPub($PubKey)\r\n        checkApiAddress($ApiAddress)\r\n        checkTcpAddress($TcpAddress)\r\n    }\r\n\r\n    action{\r\n        var nodes array node map\r\n        node[\"tcp_address\"] = $TcpAddress\r\n        node[\"api_address\"] = $ApiAddress\r\n        node[\"key_id\"] = Str($KeyId)\r\n        node[\"public_key\"] = $PubKey\r\n        nodes = JSONDecode(getNodesJSON())\r\n        if Len(nodes) == 0 {\r\n            nodes = appendFirstNode(nodes)\r\n        }\r\n        nodes = Append(nodes, node)\r\n        voting_TemplateRun(\"TemplateId,Duration,KeyId,TableWritten,RowId,ColumnName,NewValue,TextDocument\", $templateId, $Duration, 0, \"\", \"\", \"full_nodes\", JSONEncode(nodes), \"\")\r\n    }\r\n}",
            "Name": "sysparams_StartNodeAdd",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_TemplateStore{\r\n    data{\r\n        Title string\r\n        TypeParticipants int\r\n        TypeVoting int\r\n        TypeDecision int\r\n        Volume int\r\n        Quorum int\r\n        Subject string\r\n        Voters string \"optional\" // role of participant\r\n        Candidates string \"optional\" // role of candidate\r\n        InitContract string \"optional\" // Execute before the vote\r\n        Vacancies int \"optional\"\r\n        ContractAccept string \"optional\"\r\n        ParamsAccept string \"optional\"\r\n        ContractReject string \"optional\"\r\n        ParamsReject string \"optional\"\r\n    }\r\n    \r\n    func conditions{\r\n        if $TypeParticipants == 3 {\r\n            if Size($Voters) == 0 || $Voters == \"NULL\" || $Voters == 0 {\r\n                warning \"Voters role not found\"\r\n            }\r\n        }\r\n        if Size($Title) <3 {\r\n            warning \"Please enter title\"\r\n        }\r\n        if $Volume <0 || $Volume > 100 {\r\n            warning \"Wrong volume range\"\r\n        }\r\n        if $Quorum <0 || $Quorum > 100 {\r\n            warning \"Wrong quorum range\"\r\n        }\r\n        \r\n        if $TypeDecision == 1 || $TypeDecision == 2 {\r\n            if $Vacancies < 1 {\r\n                warning \"Wrong number vacancies\"\r\n            }\r\n            if $Candidates == \"NULL\" || $Candidates == 0 || Size($Candidates) == 0 {\r\n                warning \"Wrong candidate role\"\r\n            }\r\n        }\r\n        \r\n        if Size($InitContract) > 0{\r\n            if GetContractByName($InitContract) == 0 {\r\n                warning \"Init Contract not found\"\r\n            }\r\n        }\r\n        if Size($ContractAccept) > 0{\r\n            if GetContractByName($ContractAccept) == 0 {\r\n                warning \"Contract for accepted decision not found\"\r\n            }\r\n        }\r\n        if Size($ContractReject) > 0{\r\n            if GetContractByName($ContractReject) == 0{\r\n                warning \"Contract for rejected decision not found\"\r\n            }\r\n        }\r\n    }\r\n    \r\n    func action{\r\n        $result = DBInsert(\"voting_templates\", \"title,subject,voters,candidates,init_contract,volume,quorum,type_voting,type_participants,type_decision,vacancies,contract_accept,accept_params,contract_reject,reject_params\", $Title, $Subject, $Voters, $Candidates, $InitContract, $Volume, $Quorum, $TypeVoting, $TypeParticipants, $TypeDecision, $Vacancies, $ContractAccept, $ParamsAccept, $ContractReject, $ParamsReject)\r\n        \r\n    }\r\n}",
            "Name": "voting_TemplateStore",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_RejectDecision {\r\n    data {\r\n        votingID int\r\n    }\r\n    \r\n    conditions {\r\n        $voting = DBFind(\"votings\").Columns(\"voting->type_participants,voting->role_id,flags->decision,flags->notifics\").Where(\"id=$\", $votingID).Row()\r\n        if !$voting {\r\n            warning \"Voting is not found\"\r\n        }\r\n        if $voting[\"voting.type_participants\"] == 3{\r\n            if $voting[\"voting.role_id\"] != $role_id{\r\n                warning \"Incorrect role for voting\"\r\n            }\r\n        }\r\n\r\n        $participant_id = DBFind(\"votings_participants\").Where(\"voting_id=$ and member->member_id=$\", $votingID, $key_id).One(\"id\")\r\n        if !$participant_id {\r\n            warning \"You are not a participant in this voting\"\r\n        }\r\n    }\r\n    \r\n    action {\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            // close sent notifications\r\n            var notific_id string\r\n            notific_id = DBFind(\"notifications\").Where(\"recipient->member_id=$ and page_name='voting_view' and page_params->voting_id=$ and closed=0\", $key_id, $votingID).One(\"id\")\r\n            if notific_id {\r\n                notifications_Close(\"notific_id\", Int(notific_id))\r\n            }\r\n        }\r\n        \r\n        if $voting[\"flags.decision\"] == 1 {\r\n            warning \"Decision was taken. Voting is now not possible\"\r\n        }\r\n        var voting_start, voting_end string\r\n        voting_start = DBFind(\"votings\").Where(\"id=$ and date_started < now()\", $votingID).One(\"id\")\r\n        voting_end = DBFind(\"votings\").Where(\"id=$ and date_ended > now()\", $votingID).One(\"id\")\r\n        if !voting_start {\r\n            warning \"Voting has not yet begun. Try again later, please\"\r\n        }\r\n        if !voting_end {\r\n            warning \"Voting has expired. Voting is now not possible\"\r\n        }\r\n        \r\n        \r\n        DBUpdate(\"votings_participants\", Int($participant_id), \"timestamp decision_date,decision\", $block_time, -1)\r\n        \r\n        voting_UpdateDataForGraphs(\"votingID\", $votingID)\r\n    }\r\n}",
            "Name": "voting_RejectDecision",
            "Type": "contracts"
        }
    ]
}