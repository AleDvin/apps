contract voting_SubjectCandidates {
    data {
        votingID int
        memberID int
    }
    func safeJsonToMap(m string) map {
        var res map
        if Size(m) > 0 { res = JSONToMap(m) }
        return res
    }
    
    conditions {
        $voting = DBFind("votings").Columns("id,date_started,optional,voting->type,flags->full_data").Where("id=? and date_started > now()", $votingID).Row()
        if !$voting {
            warning "Voting already started. Can not edit document"
        }
        
        if $voting["flags.full_data"] == 1 && $voting["voting.type"] == 2 {
            warning "This vote is a system. Change settings not allowed"
        }
        
        if $memberID == 0 {
            $memberID = $key_id
        }
        
        $subject_id = DBFind("votings_subject").Where("voting_id=$ and subject->member_id=$", $votingID, $memberID).One("id")
        if $subject_id {
            warning "This candidature for this role has already been added before"
        }
        
        $member = DBFind("members").Where("id = $", $memberID).Row()
        if !$member {
            warning Sprintf("Member not found (%v). The profile of the user was not found. The user must complete their profile to work with votings", $memberID)
        }
    }
    
    action {
        
        var subject map
        subject["member_id"] = $member["id"]
        subject["member_name"] = $member["member_name"]
        subject["image_id"] = $member["image_id"]
        
        DBInsert("votings_subject", "voting_id,subject", $votingID, subject)
        
        var optional map
        optional = safeJsonToMap($voting["optional"])
        
        var number_candidates int
        if optional["number_candidates"]{
            number_candidates = Int(optional["number_candidates"])
            number_candidates = number_candidates + 1
        } else {
            number_candidates = 1
        }
        
        DBUpdate("votings", $votingID, "optional->number_candidates", number_candidates)
    }
}